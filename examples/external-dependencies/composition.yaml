apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: function-javascript
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1
    kind: XR
  mode: Pipeline
  pipeline:
    - step: run-the-template
      functionRef:
        name: function-javascript
      input:
        apiVersion: javascript.fn.crossplane.io/v1beta1
        kind: Input
        metadata:
          annotations:
            key: value
        spec:
          source:
            inline: "\"use strict\";exports.__esModule = true;exports.default = void 0;var
              __defProp = Object.defineProperty;

              var __defProps = Object.defineProperties;

              var __getOwnPropDescs = Object.getOwnPropertyDescriptors;

              var __getOwnPropSymbols = Object.getOwnPropertySymbols;

              var __hasOwnProp = Object.prototype.hasOwnProperty;

              var __propIsEnum = Object.prototype.propertyIsEnumerable;

              var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ?
              symbol : Symbol.for(\"Symbol.\" + name);

              var __typeError = (msg) => {

              \  throw TypeError(msg);

              };

              var __defNormalProp = (obj, key, value) => key in obj ?
              __defProp(obj, key, { enumerable: true, configurable: true,
              writable: true, value }) : obj[key] = value;

              var __spreadValues = (a, b) => {

              \  for (var prop in b || (b = {}))

              \  if (__hasOwnProp.call(b, prop))

              \  __defNormalProp(a, prop, b[prop]);

              \  if (__getOwnPropSymbols)

              \  for (var prop of __getOwnPropSymbols(b)) {

              \    if (__propIsEnum.call(b, prop))

              \    __defNormalProp(a, prop, b[prop]);

              \  }

              \  return a;

              };

              var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

              var __export = (target, all) => {

              \  for (var name in all)

              \  __defProp(target, name, { get: all[name], enumerable: true });

              };

              var __async = (__this, __arguments, generator) => {

              \  return new Promise((resolve, reject) => {

              \    var fulfilled = (value) => {

              \      try {

              \        step(generator.next(value));

              \      } catch (e) {

              \        reject(e);

              \      }

              \    };

              \    var rejected = (value) => {

              \      try {

              \        step(generator.throw(value));

              \      } catch (e) {

              \        reject(e);

              \      }

              \    };

              \    var step = (x) => x.done ? resolve(x.value) :
              Promise.resolve(x.value).then(fulfilled, rejected);

              \    step((generator = generator.apply(__this,
              __arguments)).next());

              \  });

              };

              var __await = function (promise, isYieldStar) {

              \  this[0] = promise;

              \  this[1] = isYieldStar;

              };

              var __yieldStar = (value) => {

              \  var obj = value[__knownSymbol(\"asyncIterator\")],isAwait =
              false,method,it = {};

              \  if (obj == null) {

              \    obj = value[__knownSymbol(\"iterator\")]();

              \    method = (k) => it[k] = (x) => obj[k](x);

              \  } else {

              \    obj = obj.call(value);

              \    method = (k) => it[k] = (v) => {

              \      if (isAwait) {

              \        isAwait = false;

              \        if (k === \"throw\") throw v;

              \        return v;

              \      }

              \      isAwait = true;

              \      return {

              \        done: false,

              \        value: new __await(new Promise((resolve) => {

              \          var x = obj[k](v);

              \          if (!(x instanceof Object)) __typeError(\"Object
              expected\");

              \          resolve(x);

              \        }), 1)

              \      };

              \    };

              \  }

              \  return it[__knownSymbol(\"iterator\")] = () => it,
              method(\"next\"), \"throw\" in obj ? method(\"throw\") : it.throw
              = (x) => {

              \    throw x;

              \  }, \"return\" in obj && method(\"return\"), it;

              };


              // node_modules/yaml/browser/dist/index.js

              var dist_exports = {};

              __export(dist_exports, {

              \  Alias: () => Alias,

              \  CST: () => cst_exports,

              \  Composer: () => Composer,

              \  Document: () => Document,

              \  Lexer: () => Lexer,

              \  LineCounter: () => LineCounter,

              \  Pair: () => Pair,

              \  Parser: () => Parser,

              \  Scalar: () => Scalar,

              \  Schema: () => Schema,

              \  YAMLError: () => YAMLError,

              \  YAMLMap: () => YAMLMap,

              \  YAMLParseError: () => YAMLParseError,

              \  YAMLSeq: () => YAMLSeq,

              \  YAMLWarning: () => YAMLWarning,

              \  isAlias: () => isAlias,

              \  isCollection: () => isCollection,

              \  isDocument: () => isDocument,

              \  isMap: () => isMap,

              \  isNode: () => isNode,

              \  isPair: () => isPair,

              \  isScalar: () => isScalar,

              \  isSeq: () => isSeq,

              \  parse: () => parse,

              \  parseAllDocuments: () => parseAllDocuments,

              \  parseDocument: () => parseDocument,

              \  stringify: () => stringify3,

              \  visit: () => visit,

              \  visitAsync: () => visitAsync

              });


              // node_modules/yaml/browser/dist/nodes/identity.js

              var ALIAS = Symbol.for(\"yaml.alias\");

              var DOC = Symbol.for(\"yaml.document\");

              var MAP = Symbol.for(\"yaml.map\");

              var PAIR = Symbol.for(\"yaml.pair\");

              var SCALAR = Symbol.for(\"yaml.scalar\");

              var SEQ = Symbol.for(\"yaml.seq\");

              var NODE_TYPE = Symbol.for(\"yaml.node.type\");

              var isAlias = (node) => !!node && typeof node === \"object\" &&
              node[NODE_TYPE] === ALIAS;

              var isDocument = (node) => !!node && typeof node === \"object\" &&
              node[NODE_TYPE] === DOC;

              var isMap = (node) => !!node && typeof node === \"object\" &&
              node[NODE_TYPE] === MAP;

              var isPair = (node) => !!node && typeof node === \"object\" &&
              node[NODE_TYPE] === PAIR;

              var isScalar = (node) => !!node && typeof node === \"object\" &&
              node[NODE_TYPE] === SCALAR;

              var isSeq = (node) => !!node && typeof node === \"object\" &&
              node[NODE_TYPE] === SEQ;

              function isCollection(node) {

              \  if (node && typeof node === \"object\")

              \  switch (node[NODE_TYPE]) {

              \    case MAP:

              \    case SEQ:

              \      return true;

              \  }

              \  return false;

              }

              function isNode(node) {

              \  if (node && typeof node === \"object\")

              \  switch (node[NODE_TYPE]) {

              \    case ALIAS:

              \    case MAP:

              \    case SCALAR:

              \    case SEQ:

              \      return true;

              \  }

              \  return false;

              }

              var hasAnchor = (node) => (isScalar(node) || isCollection(node))
              && !!node.anchor;


              // node_modules/yaml/browser/dist/visit.js

              var BREAK = Symbol(\"break visit\");

              var SKIP = Symbol(\"skip children\");

              var REMOVE = Symbol(\"remove node\");

              function visit(node, visitor) {

              \  const visitor_ = initVisitor(visitor);

              \  if (isDocument(node)) {

              \    const cd = visit_(null, node.contents, visitor_,
              Object.freeze([node]));

              \    if (cd === REMOVE)

              \    node.contents = null;

              \  } else

              \  visit_(null, node, visitor_, Object.freeze([]));

              }

              visit.BREAK = BREAK;

              visit.SKIP = SKIP;

              visit.REMOVE = REMOVE;

              function visit_(key, node, visitor, path) {

              \  const ctrl = callVisitor(key, node, visitor, path);

              \  if (isNode(ctrl) || isPair(ctrl)) {

              \    replaceNode(key, path, ctrl);

              \    return visit_(key, ctrl, visitor, path);

              \  }

              \  if (typeof ctrl !== \"symbol\") {

              \    if (isCollection(node)) {

              \      path = Object.freeze(path.concat(node));

              \      for (let i = 0; i < node.items.length; ++i) {

              \        const ci = visit_(i, node.items[i], visitor, path);

              \        if (typeof ci === \"number\")

              \        i = ci - 1;else

              \        if (ci === BREAK)

              \        return BREAK;else

              \        if (ci === REMOVE) {

              \          node.items.splice(i, 1);

              \          i -= 1;

              \        }

              \      }

              \    } else if (isPair(node)) {

              \      path = Object.freeze(path.concat(node));

              \      const ck = visit_(\"key\", node.key, visitor, path);

              \      if (ck === BREAK)

              \      return BREAK;else

              \      if (ck === REMOVE)

              \      node.key = null;

              \      const cv = visit_(\"value\", node.value, visitor, path);

              \      if (cv === BREAK)

              \      return BREAK;else

              \      if (cv === REMOVE)

              \      node.value = null;

              \    }

              \  }

              \  return ctrl;

              }

              function visitAsync(node, visitor) {

              \  return __async(this, null, function* () {

              \    const visitor_ = initVisitor(visitor);

              \    if (isDocument(node)) {

              \      const cd = yield visitAsync_(null, node.contents, visitor_,
              Object.freeze([node]));

              \      if (cd === REMOVE)

              \      node.contents = null;

              \    } else

              \    yield visitAsync_(null, node, visitor_, Object.freeze([]));

              \  });

              }

              visitAsync.BREAK = BREAK;

              visitAsync.SKIP = SKIP;

              visitAsync.REMOVE = REMOVE;

              function visitAsync_(key, node, visitor, path) {

              \  return __async(this, null, function* () {

              \    const ctrl = yield callVisitor(key, node, visitor, path);

              \    if (isNode(ctrl) || isPair(ctrl)) {

              \      replaceNode(key, path, ctrl);

              \      return visitAsync_(key, ctrl, visitor, path);

              \    }

              \    if (typeof ctrl !== \"symbol\") {

              \      if (isCollection(node)) {

              \        path = Object.freeze(path.concat(node));

              \        for (let i = 0; i < node.items.length; ++i) {

              \          const ci = yield visitAsync_(i, node.items[i], visitor,
              path);

              \          if (typeof ci === \"number\")

              \          i = ci - 1;else

              \          if (ci === BREAK)

              \          return BREAK;else

              \          if (ci === REMOVE) {

              \            node.items.splice(i, 1);

              \            i -= 1;

              \          }

              \        }

              \      } else if (isPair(node)) {

              \        path = Object.freeze(path.concat(node));

              \        const ck = yield visitAsync_(\"key\", node.key, visitor,
              path);

              \        if (ck === BREAK)

              \        return BREAK;else

              \        if (ck === REMOVE)

              \        node.key = null;

              \        const cv = yield visitAsync_(\"value\", node.value,
              visitor, path);

              \        if (cv === BREAK)

              \        return BREAK;else

              \        if (cv === REMOVE)

              \        node.value = null;

              \      }

              \    }

              \    return ctrl;

              \  });

              }

              function initVisitor(visitor) {

              \  if (typeof visitor === \"object\" && (visitor.Collection ||
              visitor.Node || visitor.Value)) {

              \    return Object.assign({

              \      Alias: visitor.Node,

              \      Map: visitor.Node,

              \      Scalar: visitor.Node,

              \      Seq: visitor.Node

              \    }, visitor.Value && {

              \      Map: visitor.Value,

              \      Scalar: visitor.Value,

              \      Seq: visitor.Value

              \    }, visitor.Collection && {

              \      Map: visitor.Collection,

              \      Seq: visitor.Collection

              \    }, visitor);

              \  }

              \  return visitor;

              }

              function callVisitor(key, node, visitor, path) {

              \  var _a, _b, _c, _d, _e;

              \  if (typeof visitor === \"function\")

              \  return visitor(key, node, path);

              \  if (isMap(node))

              \  return (_a = visitor.Map) == null ? void 0 : _a.call(visitor,
              key, node, path);

              \  if (isSeq(node))

              \  return (_b = visitor.Seq) == null ? void 0 : _b.call(visitor,
              key, node, path);

              \  if (isPair(node))

              \  return (_c = visitor.Pair) == null ? void 0 : _c.call(visitor,
              key, node, path);

              \  if (isScalar(node))

              \  return (_d = visitor.Scalar) == null ? void 0 :
              _d.call(visitor, key, node, path);

              \  if (isAlias(node))

              \  return (_e = visitor.Alias) == null ? void 0 : _e.call(visitor,
              key, node, path);

              \  return void 0;

              }

              function replaceNode(key, path, node) {

              \  const parent = path[path.length - 1];

              \  if (isCollection(parent)) {

              \    parent.items[key] = node;

              \  } else if (isPair(parent)) {

              \    if (key === \"key\")

              \    parent.key = node;else


              \    parent.value = node;

              \  } else if (isDocument(parent)) {

              \    parent.contents = node;

              \  } else {

              \    const pt = isAlias(parent) ? \"alias\" : \"scalar\";

              \    throw new Error(`Cannot replace node with ${pt} parent`);

              \  }

              }


              // node_modules/yaml/browser/dist/doc/directives.js

              var escapeChars = {

              \  \"!\": \"%21\",

              \  \",\": \"%2C\",

              \  \"[\": \"%5B\",

              \  \"]\": \"%5D\",

              \  \"{\": \"%7B\",

              \  \"}\": \"%7D\"

              };

              var escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, (ch) =>
              escapeChars[ch]);

              var Directives = class _Directives {

              \  constructor(yaml, tags) {

              \    this.docStart = null;

              \    this.docEnd = false;

              \    this.yaml = Object.assign({}, _Directives.defaultYaml, yaml);

              \    this.tags = Object.assign({}, _Directives.defaultTags, tags);

              \  }

              \  clone() {

              \    const copy = new _Directives(this.yaml, this.tags);

              \    copy.docStart = this.docStart;

              \    return copy;

              \  }

              \  /**

              \   * During parsing, get a Directives instance for the current
              document and

              \   * update the stream state according to the current version's
              spec.

              \   */

              \  atDocument() {

              \    const res = new _Directives(this.yaml, this.tags);

              \    switch (this.yaml.version) {

              \      case \"1.1\":

              \        this.atNextDocument = true;

              \        break;

              \      case \"1.2\":

              \        this.atNextDocument = false;

              \        this.yaml = {

              \          explicit: _Directives.defaultYaml.explicit,

              \          version: \"1.2\"

              \        };

              \        this.tags = Object.assign({}, _Directives.defaultTags);

              \        break;

              \    }

              \    return res;

              \  }

              \  /**

              \   * @param onError - May be called even if the action was
              successful

              \   * @returns `true` on success

              \   */

              \  add(line, onError) {

              \    if (this.atNextDocument) {

              \      this.yaml = { explicit: _Directives.defaultYaml.explicit,
              version: \"1.1\" };

              \      this.tags = Object.assign({}, _Directives.defaultTags);

              \      this.atNextDocument = false;

              \    }

              \    const parts = line.trim().split(/[ \\t]+/);

              \    const name = parts.shift();

              \    switch (name) {

              \      case \"%TAG\":{

              \          if (parts.length !== 2) {

              \            onError(0, \"%TAG directive should contain exactly
              two parts\");

              \            if (parts.length < 2)

              \            return false;

              \          }

              \          const [handle, prefix] = parts;

              \          this.tags[handle] = prefix;

              \          return true;

              \        }

              \      case \"%YAML\":{

              \          this.yaml.explicit = true;

              \          if (parts.length !== 1) {

              \            onError(0, \"%YAML directive should contain exactly
              one part\");

              \            return false;

              \          }

              \          const [version] = parts;

              \          if (version === \"1.1\" || version === \"1.2\") {

              \            this.yaml.version = version;

              \            return true;

              \          } else {

              \            const isValid = /^\\d+\\.\\d+$/.test(version);

              \            onError(6, `Unsupported YAML version ${version}`,
              isValid);

              \            return false;

              \          }

              \        }

              \      default:

              \        onError(0, `Unknown directive ${name}`, true);

              \        return false;

              \    }

              \  }

              \  /**

              \   * Resolves a tag, matching handles to those defined in %TAG
              directives.

              \   *

              \   * @returns Resolved tag, which may also be the non-specific
              tag `'!'` or a

              \   *   `'!local'` tag, or `null` if unresolvable.

              \   */

              \  tagName(source, onError) {

              \    if (source === \"!\")

              \    return \"!\";

              \    if (source[0] !== \"!\") {

              \      onError(`Not a valid tag: ${source}`);

              \      return null;

              \    }

              \    if (source[1] === \"<\") {

              \      const verbatim = source.slice(2, -1);

              \      if (verbatim === \"!\" || verbatim === \"!!\") {

              \        onError(`Verbatim tags aren't resolved, so ${source} is
              invalid.`);

              \        return null;

              \      }

              \      if (source[source.length - 1] !== \">\")

              \      onError(\"Verbatim tags must end with a >\");

              \      return verbatim;

              \    }

              \    const [, handle, suffix] = source.match(new
              RegExp(\"^(.*!)([^!]*)$\", \"s\"));

              \    if (!suffix)

              \    onError(`The ${source} tag has no suffix`);

              \    const prefix = this.tags[handle];

              \    if (prefix) {

              \      try {

              \        return prefix + decodeURIComponent(suffix);

              \      } catch (error) {

              \        onError(String(error));

              \        return null;

              \      }

              \    }

              \    if (handle === \"!\")

              \    return source;

              \    onError(`Could not resolve tag: ${source}`);

              \    return null;

              \  }

              \  /**

              \   * Given a fully resolved tag, returns its printable string
              form,

              \   * taking into account current tag prefixes and defaults.

              \   */

              \  tagString(tag) {

              \    for (const [handle, prefix] of Object.entries(this.tags)) {

              \      if (tag.startsWith(prefix))

              \      return handle +
              escapeTagName(tag.substring(prefix.length));

              \    }

              \    return tag[0] === \"!\" ? tag : `!<${tag}>`;

              \  }

              \  toString(doc) {

              \    const lines = this.yaml.explicit ? [`%YAML
              ${this.yaml.version || \"1.2\"}`] : [];

              \    const tagEntries = Object.entries(this.tags);

              \    let tagNames;

              \    if (doc && tagEntries.length > 0 && isNode(doc.contents)) {

              \      const tags = {};

              \      visit(doc.contents, (_key, node) => {

              \        if (isNode(node) && node.tag)

              \        tags[node.tag] = true;

              \      });

              \      tagNames = Object.keys(tags);

              \    } else

              \    tagNames = [];

              \    for (const [handle, prefix] of tagEntries) {

              \      if (handle === \"!!\" && prefix === \"tag:yaml.org,2002:\")

              \      continue;

              \      if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))

              \      lines.push(`%TAG ${handle} ${prefix}`);

              \    }

              \    return lines.join(\"\\n\");

              \  }

              };

              Directives.defaultYaml = { explicit: false, version: \"1.2\" };

              Directives.defaultTags = { \"!!\": \"tag:yaml.org,2002:\" };


              // node_modules/yaml/browser/dist/doc/anchors.js

              function anchorIsValid(anchor) {

              \  if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {

              \    const sa = JSON.stringify(anchor);

              \    const msg = `Anchor must not contain whitespace or control
              characters: ${sa}`;

              \    throw new Error(msg);

              \  }

              \  return true;

              }

              function anchorNames(root) {

              \  const anchors = /* @__PURE__ */new Set();

              \  visit(root, {

              \    Value(_key, node) {

              \      if (node.anchor)

              \      anchors.add(node.anchor);

              \    }

              \  });

              \  return anchors;

              }

              function findNewAnchor(prefix, exclude) {

              \  for (let i = 1; true; ++i) {

              \    const name = `${prefix}${i}`;

              \    if (!exclude.has(name))

              \    return name;

              \  }

              }

              function createNodeAnchors(doc, prefix) {

              \  const aliasObjects = [];

              \  const sourceObjects = /* @__PURE__ */new Map();

              \  let prevAnchors = null;

              \  return {

              \    onAnchor: (source) => {

              \      aliasObjects.push(source);

              \      if (!prevAnchors)

              \      prevAnchors = anchorNames(doc);

              \      const anchor = findNewAnchor(prefix, prevAnchors);

              \      prevAnchors.add(anchor);

              \      return anchor;

              \    },

              \    /**

              \     * With circular references, the source node is only resolved
              after all

              \     * of its child nodes are. This is why anchors are set only
              after all of

              \     * the nodes have been created.

              \     */

              \    setAnchors: () => {

              \      for (const source of aliasObjects) {

              \        const ref = sourceObjects.get(source);

              \        if (typeof ref === \"object\" && ref.anchor &&
              (isScalar(ref.node) || isCollection(ref.node))) {

              \          ref.node.anchor = ref.anchor;

              \        } else {

              \          const error = new Error(\"Failed to resolve repeated
              object (this should not happen)\");

              \          error.source = source;

              \          throw error;

              \        }

              \      }

              \    },

              \    sourceObjects

              \  };

              }


              // node_modules/yaml/browser/dist/doc/applyReviver.js

              function applyReviver(reviver, obj, key, val) {

              \  if (val && typeof val === \"object\") {

              \    if (Array.isArray(val)) {

              \      for (let i = 0, len = val.length; i < len; ++i) {

              \        const v0 = val[i];

              \        const v1 = applyReviver(reviver, val, String(i), v0);

              \        if (v1 === void 0)

              \        delete val[i];else

              \        if (v1 !== v0)

              \        val[i] = v1;

              \      }

              \    } else if (val instanceof Map) {

              \      for (const k of Array.from(val.keys())) {

              \        const v0 = val.get(k);

              \        const v1 = applyReviver(reviver, val, k, v0);

              \        if (v1 === void 0)

              \        val.delete(k);else

              \        if (v1 !== v0)

              \        val.set(k, v1);

              \      }

              \    } else if (val instanceof Set) {

              \      for (const v0 of Array.from(val)) {

              \        const v1 = applyReviver(reviver, val, v0, v0);

              \        if (v1 === void 0)

              \        val.delete(v0);else

              \        if (v1 !== v0) {

              \          val.delete(v0);

              \          val.add(v1);

              \        }

              \      }

              \    } else {

              \      for (const [k, v0] of Object.entries(val)) {

              \        const v1 = applyReviver(reviver, val, k, v0);

              \        if (v1 === void 0)

              \        delete val[k];else

              \        if (v1 !== v0)

              \        val[k] = v1;

              \      }

              \    }

              \  }

              \  return reviver.call(obj, key, val);

              }


              // node_modules/yaml/browser/dist/nodes/toJS.js

              function toJS(value, arg, ctx) {

              \  if (Array.isArray(value))

              \  return value.map((v, i) => toJS(v, String(i), ctx));

              \  if (value && typeof value.toJSON === \"function\") {

              \    if (!ctx || !hasAnchor(value))

              \    return value.toJSON(arg, ctx);

              \    const data = { aliasCount: 0, count: 1, res: void 0 };

              \    ctx.anchors.set(value, data);

              \    ctx.onCreate = (res2) => {

              \      data.res = res2;

              \      delete ctx.onCreate;

              \    };

              \    const res = value.toJSON(arg, ctx);

              \    if (ctx.onCreate)

              \    ctx.onCreate(res);

              \    return res;

              \  }

              \  if (typeof value === \"bigint\" && !(ctx == null ? void 0 :
              ctx.keep))

              \  return Number(value);

              \  return value;

              }


              // node_modules/yaml/browser/dist/nodes/Node.js

              var NodeBase = class {

              \  constructor(type) {

              \    Object.defineProperty(this, NODE_TYPE, { value: type });

              \  }

              \  /** Create a copy of this node.  */

              \  clone() {

              \    const copy = Object.create(Object.getPrototypeOf(this),
              Object.getOwnPropertyDescriptors(this));

              \    if (this.range)

              \    copy.range = this.range.slice();

              \    return copy;

              \  }

              \  /** A plain JavaScript representation of this node. */

              \  toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {})
              {

              \    if (!isDocument(doc))

              \    throw new TypeError(\"A document argument is required\");

              \    const ctx = {

              \      anchors: /* @__PURE__ */new Map(),

              \      doc,

              \      keep: true,

              \      mapAsMap: mapAsMap === true,

              \      mapKeyWarned: false,

              \      maxAliasCount: typeof maxAliasCount === \"number\" ?
              maxAliasCount : 100

              \    };

              \    const res = toJS(this, \"\", ctx);

              \    if (typeof onAnchor === \"function\")

              \    for (const { count, res: res2 } of ctx.anchors.values())

              \    onAnchor(res2, count);

              \    return typeof reviver === \"function\" ?
              applyReviver(reviver, { \"\": res }, \"\", res) : res;

              \  }

              };


              // node_modules/yaml/browser/dist/nodes/Alias.js

              var Alias = class extends NodeBase {

              \  constructor(source) {

              \    super(ALIAS);

              \    this.source = source;

              \    Object.defineProperty(this, \"tag\", {

              \      set() {

              \        throw new Error(\"Alias nodes cannot have tags\");

              \      }

              \    });

              \  }

              \  /**

              \   * Resolve the value of this alias within `doc`, finding the
              last

              \   * instance of the `source` anchor before this node.

              \   */

              \  resolve(doc) {

              \    let found = void 0;

              \    visit(doc, {

              \      Node: (_key, node) => {

              \        if (node === this)

              \        return visit.BREAK;

              \        if (node.anchor === this.source)

              \        found = node;

              \      }

              \    });

              \    return found;

              \  }

              \  toJSON(_arg, ctx) {

              \    if (!ctx)

              \    return { source: this.source };

              \    const { anchors, doc, maxAliasCount } = ctx;

              \    const source = this.resolve(doc);

              \    if (!source) {

              \      const msg = `Unresolved alias (the anchor must be set
              before the alias): ${this.source}`;

              \      throw new ReferenceError(msg);

              \    }

              \    let data = anchors.get(source);

              \    if (!data) {

              \      toJS(source, null, ctx);

              \      data = anchors.get(source);

              \    }

              \    if (!data || data.res === void 0) {

              \      const msg = \"This should not happen: Alias anchor was not
              resolved?\";

              \      throw new ReferenceError(msg);

              \    }

              \    if (maxAliasCount >= 0) {

              \      data.count += 1;

              \      if (data.aliasCount === 0)

              \      data.aliasCount = getAliasCount(doc, source, anchors);

              \      if (data.count * data.aliasCount > maxAliasCount) {

              \        const msg = \"Excessive alias count indicates a resource
              exhaustion attack\";

              \        throw new ReferenceError(msg);

              \      }

              \    }

              \    return data.res;

              \  }

              \  toString(ctx, _onComment, _onChompKeep) {

              \    const src = `*${this.source}`;

              \    if (ctx) {

              \      anchorIsValid(this.source);

              \      if (ctx.options.verifyAliasOrder &&
              !ctx.anchors.has(this.source)) {

              \        const msg = `Unresolved alias (the anchor must be set
              before the alias): ${this.source}`;

              \        throw new Error(msg);

              \      }

              \      if (ctx.implicitKey)

              \      return `${src} `;

              \    }

              \    return src;

              \  }

              };

              function getAliasCount(doc, node, anchors) {

              \  if (isAlias(node)) {

              \    const source = node.resolve(doc);

              \    const anchor = anchors && source && anchors.get(source);

              \    return anchor ? anchor.count * anchor.aliasCount : 0;

              \  } else if (isCollection(node)) {

              \    let count = 0;

              \    for (const item of node.items) {

              \      const c = getAliasCount(doc, item, anchors);

              \      if (c > count)

              \      count = c;

              \    }

              \    return count;

              \  } else if (isPair(node)) {

              \    const kc = getAliasCount(doc, node.key, anchors);

              \    const vc = getAliasCount(doc, node.value, anchors);

              \    return Math.max(kc, vc);

              \  }

              \  return 1;

              }


              // node_modules/yaml/browser/dist/nodes/Scalar.js

              var isScalarValue = (value) => !value || typeof value !==
              \"function\" && typeof value !== \"object\";

              var Scalar = class extends NodeBase {

              \  constructor(value) {

              \    super(SCALAR);

              \    this.value = value;

              \  }

              \  toJSON(arg, ctx) {

              \    return (ctx == null ? void 0 : ctx.keep) ? this.value :
              toJS(this.value, arg, ctx);

              \  }

              \  toString() {

              \    return String(this.value);

              \  }

              };

              Scalar.BLOCK_FOLDED = \"BLOCK_FOLDED\";

              Scalar.BLOCK_LITERAL = \"BLOCK_LITERAL\";

              Scalar.PLAIN = \"PLAIN\";

              Scalar.QUOTE_DOUBLE = \"QUOTE_DOUBLE\";

              Scalar.QUOTE_SINGLE = \"QUOTE_SINGLE\";


              // node_modules/yaml/browser/dist/doc/createNode.js

              var defaultTagPrefix = \"tag:yaml.org,2002:\";

              function findTagObject(value, tagName, tags) {

              \  var _a;

              \  if (tagName) {

              \    const match = tags.filter((t) => t.tag === tagName);

              \    const tagObj = (_a = match.find((t) => !t.format)) != null ?
              _a : match[0];

              \    if (!tagObj)

              \    throw new Error(`Tag ${tagName} not found`);

              \    return tagObj;

              \  }

              \  return tags.find((t) => {

              \    var _a2;

              \    return ((_a2 = t.identify) == null ? void 0 : _a2.call(t,
              value)) && !t.format;

              \  });

              }

              function createNode(value, tagName, ctx) {

              \  var _a, _b, _c;

              \  if (isDocument(value))

              \  value = value.contents;

              \  if (isNode(value))

              \  return value;

              \  if (isPair(value)) {

              \    const map2 = (_b = (_a = ctx.schema[MAP]).createNode) == null
              ? void 0 : _b.call(_a, ctx.schema, null, ctx);

              \    map2.items.push(value);

              \    return map2;

              \  }

              \  if (value instanceof String || value instanceof Number || value
              instanceof Boolean || typeof BigInt !== \"undefined\" && value
              instanceof BigInt) {

              \    value = value.valueOf();

              \  }

              \  const { aliasDuplicateObjects, onAnchor, onTagObj, schema:
              schema4, sourceObjects } = ctx;

              \  let ref = void 0;

              \  if (aliasDuplicateObjects && value && typeof value ===
              \"object\") {

              \    ref = sourceObjects.get(value);

              \    if (ref) {

              \      if (!ref.anchor)

              \      ref.anchor = onAnchor(value);

              \      return new Alias(ref.anchor);

              \    } else {

              \      ref = { anchor: null, node: null };

              \      sourceObjects.set(value, ref);

              \    }

              \  }

              \  if (tagName == null ? void 0 : tagName.startsWith(\"!!\"))

              \  tagName = defaultTagPrefix + tagName.slice(2);

              \  let tagObj = findTagObject(value, tagName, schema4.tags);

              \  if (!tagObj) {

              \    if (value && typeof value.toJSON === \"function\") {

              \      value = value.toJSON();

              \    }

              \    if (!value || typeof value !== \"object\") {

              \      const node2 = new Scalar(value);

              \      if (ref)

              \      ref.node = node2;

              \      return node2;

              \    }

              \    tagObj = value instanceof Map ? schema4[MAP] :
              Symbol.iterator in Object(value) ? schema4[SEQ] : schema4[MAP];

              \  }

              \  if (onTagObj) {

              \    onTagObj(tagObj);

              \    delete ctx.onTagObj;

              \  }

              \  const node = (tagObj == null ? void 0 : tagObj.createNode) ?
              tagObj.createNode(ctx.schema, value, ctx) : typeof ((_c = tagObj
              == null ? void 0 : tagObj.nodeClass) == null ? void 0 : _c.from)
              === \"function\" ? tagObj.nodeClass.from(ctx.schema, value, ctx) :
              new Scalar(value);

              \  if (tagName)

              \  node.tag = tagName;else

              \  if (!tagObj.default)

              \  node.tag = tagObj.tag;

              \  if (ref)

              \  ref.node = node;

              \  return node;

              }


              // node_modules/yaml/browser/dist/nodes/Collection.js

              function collectionFromPath(schema4, path, value) {

              \  let v = value;

              \  for (let i = path.length - 1; i >= 0; --i) {

              \    const k = path[i];

              \    if (typeof k === \"number\" && Number.isInteger(k) && k >= 0)
              {

              \      const a = [];

              \      a[k] = v;

              \      v = a;

              \    } else {

              \      v = /* @__PURE__ */new Map([[k, v]]);

              \    }

              \  }

              \  return createNode(v, void 0, {

              \    aliasDuplicateObjects: false,

              \    keepUndefined: false,

              \    onAnchor: () => {

              \      throw new Error(\"This should not happen, please report a
              bug.\");

              \    },

              \    schema: schema4,

              \    sourceObjects: /* @__PURE__ */new Map()

              \  });

              }

              var isEmptyPath = (path) => path == null || typeof path ===
              \"object\" && !!path[Symbol.iterator]().next().done;

              var Collection = class extends NodeBase {

              \  constructor(type, schema4) {

              \    super(type);

              \    Object.defineProperty(this, \"schema\", {

              \      value: schema4,

              \      configurable: true,

              \      enumerable: false,

              \      writable: true

              \    });

              \  }

              \  /**

              \   * Create a copy of this collection.

              \   *

              \   * @param schema - If defined, overwrites the original's schema

              \   */

              \  clone(schema4) {

              \    const copy = Object.create(Object.getPrototypeOf(this),
              Object.getOwnPropertyDescriptors(this));

              \    if (schema4)

              \    copy.schema = schema4;

              \    copy.items = copy.items.map((it) => isNode(it) || isPair(it)
              ? it.clone(schema4) : it);

              \    if (this.range)

              \    copy.range = this.range.slice();

              \    return copy;

              \  }

              \  /**

              \   * Adds a value to the collection. For `!!map` and `!!omap` the
              value must

              \   * be a Pair instance or a `{ key, value }` object, which may
              not have a key

              \   * that already exists in the map.

              \   */

              \  addIn(path, value) {

              \    if (isEmptyPath(path))

              \    this.add(value);else

              \    {

              \      const [key, ...rest] = path;

              \      const node = this.get(key, true);

              \      if (isCollection(node))

              \      node.addIn(rest, value);else

              \      if (node === void 0 && this.schema)

              \      this.set(key, collectionFromPath(this.schema, rest,
              value));else


              \      throw new Error(`Expected YAML collection at ${key}.
              Remaining path: ${rest}`);

              \    }

              \  }

              \  /**

              \   * Removes a value from the collection.

              \   * @returns `true` if the item was found and removed.

              \   */

              \  deleteIn(path) {

              \    const [key, ...rest] = path;

              \    if (rest.length === 0)

              \    return this.delete(key);

              \    const node = this.get(key, true);

              \    if (isCollection(node))

              \    return node.deleteIn(rest);else


              \    throw new Error(`Expected YAML collection at ${key}.
              Remaining path: ${rest}`);

              \  }

              \  /**

              \   * Returns item at `key`, or `undefined` if not found. By
              default unwraps

              \   * scalar values from their surrounding node; to disable set
              `keepScalar` to

              \   * `true` (collections are always returned intact).

              \   */

              \  getIn(path, keepScalar) {

              \    const [key, ...rest] = path;

              \    const node = this.get(key, true);

              \    if (rest.length === 0)

              \    return !keepScalar && isScalar(node) ? node.value : node;else


              \    return isCollection(node) ? node.getIn(rest, keepScalar) :
              void 0;

              \  }

              \  hasAllNullValues(allowScalar) {

              \    return this.items.every((node) => {

              \      if (!isPair(node))

              \      return false;

              \      const n = node.value;

              \      return n == null || allowScalar && isScalar(n) && n.value
              == null && !n.commentBefore && !n.comment && !n.tag;

              \    });

              \  }

              \  /**

              \   * Checks if the collection includes a value with the key
              `key`.

              \   */

              \  hasIn(path) {

              \    const [key, ...rest] = path;

              \    if (rest.length === 0)

              \    return this.has(key);

              \    const node = this.get(key, true);

              \    return isCollection(node) ? node.hasIn(rest) : false;

              \  }

              \  /**

              \   * Sets a value in this collection. For `!!set`, `value` needs
              to be a

              \   * boolean to add/remove the item from the set.

              \   */

              \  setIn(path, value) {

              \    const [key, ...rest] = path;

              \    if (rest.length === 0) {

              \      this.set(key, value);

              \    } else {

              \      const node = this.get(key, true);

              \      if (isCollection(node))

              \      node.setIn(rest, value);else

              \      if (node === void 0 && this.schema)

              \      this.set(key, collectionFromPath(this.schema, rest,
              value));else


              \      throw new Error(`Expected YAML collection at ${key}.
              Remaining path: ${rest}`);

              \    }

              \  }

              };

              Collection.maxFlowStringSingleLineLength = 60;


              // node_modules/yaml/browser/dist/stringify/stringifyComment.js

              var stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm,
              \"#\");

              function indentComment(comment, indent) {

              \  if (/^\\n+$/.test(comment))

              \  return comment.substring(1);

              \  return indent ? comment.replace(/^(?! *$)/gm, indent) :
              comment;

              }

              var lineComment = (str, indent, comment) => str.endsWith(\"\\n\")
              ? indentComment(comment, indent) : comment.includes(\"\\n\") ?
              \"\\n\" + indentComment(comment, indent) : (str.endsWith(\" \") ?
              \"\" : \" \") + comment;


              // node_modules/yaml/browser/dist/stringify/foldFlowLines.js

              var FOLD_FLOW = \"flow\";

              var FOLD_BLOCK = \"block\";

              var FOLD_QUOTED = \"quoted\";

              function foldFlowLines(text, indent, mode = \"flow\", {
              indentAtStart, lineWidth = 80, minContentWidth = 20, onFold,
              onOverflow } = {}) {

              \  if (!lineWidth || lineWidth < 0)

              \  return text;

              \  const endStep = Math.max(1 + minContentWidth, 1 + lineWidth -
              indent.length);

              \  if (text.length <= endStep)

              \  return text;

              \  const folds = [];

              \  const escapedFolds = {};

              \  let end = lineWidth - indent.length;

              \  if (typeof indentAtStart === \"number\") {

              \    if (indentAtStart > lineWidth - Math.max(2, minContentWidth))

              \    folds.push(0);else


              \    end = lineWidth - indentAtStart;

              \  }

              \  let split = void 0;

              \  let prev = void 0;

              \  let overflow = false;

              \  let i = -1;

              \  let escStart = -1;

              \  let escEnd = -1;

              \  if (mode === FOLD_BLOCK) {

              \    i = consumeMoreIndentedLines(text, i, indent.length);

              \    if (i !== -1)

              \    end = i + endStep;

              \  }

              \  for (let ch; ch = text[i += 1];) {

              \    if (mode === FOLD_QUOTED && ch === \"\\\\\") {

              \      escStart = i;

              \      switch (text[i + 1]) {

              \        case \"x\":

              \          i += 3;

              \          break;

              \        case \"u\":

              \          i += 5;

              \          break;

              \        case \"U\":

              \          i += 9;

              \          break;

              \        default:

              \          i += 1;

              \      }

              \      escEnd = i;

              \    }

              \    if (ch === \"\\n\") {

              \      if (mode === FOLD_BLOCK)

              \      i = consumeMoreIndentedLines(text, i, indent.length);

              \      end = i + indent.length + endStep;

              \      split = void 0;

              \    } else {

              \      if (ch === \" \" && prev && prev !== \" \" && prev !==
              \"\\n\" && prev !== \"\t\") {

              \        const next = text[i + 1];

              \        if (next && next !== \" \" && next !== \"\\n\" && next
              !== \"\t\")

              \        split = i;

              \      }

              \      if (i >= end) {

              \        if (split) {

              \          folds.push(split);

              \          end = split + endStep;

              \          split = void 0;

              \        } else if (mode === FOLD_QUOTED) {

              \          while (prev === \" \" || prev === \"\t\") {

              \            prev = ch;

              \            ch = text[i += 1];

              \            overflow = true;

              \          }

              \          const j = i > escEnd + 1 ? i - 2 : escStart - 1;

              \          if (escapedFolds[j])

              \          return text;

              \          folds.push(j);

              \          escapedFolds[j] = true;

              \          end = j + endStep;

              \          split = void 0;

              \        } else {

              \          overflow = true;

              \        }

              \      }

              \    }

              \    prev = ch;

              \  }

              \  if (overflow && onOverflow)

              \  onOverflow();

              \  if (folds.length === 0)

              \  return text;

              \  if (onFold)

              \  onFold();

              \  let res = text.slice(0, folds[0]);

              \  for (let i2 = 0; i2 < folds.length; ++i2) {

              \    const fold = folds[i2];

              \    const end2 = folds[i2 + 1] || text.length;

              \    if (fold === 0)

              \    res = `

              ${indent}${text.slice(0, end2)}`;else

              \    {

              \      if (mode === FOLD_QUOTED && escapedFolds[fold])

              \      res += `${text[fold]}\\\\`;

              \      res += `

              ${indent}${text.slice(fold + 1, end2)}`;

              \    }

              \  }

              \  return res;

              }

              function consumeMoreIndentedLines(text, i, indent) {

              \  let end = i;

              \  let start = i + 1;

              \  let ch = text[start];

              \  while (ch === \" \" || ch === \"\t\") {

              \    if (i < start + indent) {

              \      ch = text[++i];

              \    } else {

              \      do {

              \        ch = text[++i];

              \      } while (ch && ch !== \"\\n\");

              \      end = i;

              \      start = i + 1;

              \      ch = text[start];

              \    }

              \  }

              \  return end;

              }


              // node_modules/yaml/browser/dist/stringify/stringifyString.js

              var getFoldOptions = (ctx, isBlock2) => ({

              \  indentAtStart: isBlock2 ? ctx.indent.length :
              ctx.indentAtStart,

              \  lineWidth: ctx.options.lineWidth,

              \  minContentWidth: ctx.options.minContentWidth

              });

              var containsDocumentMarker = (str) =>
              /^(%|---|\\.\\.\\.)/m.test(str);

              function lineLengthOverLimit(str, lineWidth, indentLength) {

              \  if (!lineWidth || lineWidth < 0)

              \  return false;

              \  const limit = lineWidth - indentLength;

              \  const strLen = str.length;

              \  if (strLen <= limit)

              \  return false;

              \  for (let i = 0, start = 0; i < strLen; ++i) {

              \    if (str[i] === \"\\n\") {

              \      if (i - start > limit)

              \      return true;

              \      start = i + 1;

              \      if (strLen - start <= limit)

              \      return false;

              \    }

              \  }

              \  return true;

              }

              function doubleQuotedString(value, ctx) {

              \  const json = JSON.stringify(value);

              \  if (ctx.options.doubleQuotedAsJSON)

              \  return json;

              \  const { implicitKey } = ctx;

              \  const minMultiLineLength =
              ctx.options.doubleQuotedMinMultiLineLength;

              \  const indent = ctx.indent || (containsDocumentMarker(value) ?
              \"  \" : \"\");

              \  let str = \"\";

              \  let start = 0;

              \  for (let i = 0, ch = json[i]; ch; ch = json[++i]) {

              \    if (ch === \" \" && json[i + 1] === \"\\\\\" && json[i + 2]
              === \"n\") {

              \      str += json.slice(start, i) + \"\\\\ \";

              \      i += 1;

              \      start = i;

              \      ch = \"\\\\\";

              \    }

              \    if (ch === \"\\\\\")

              \    switch (json[i + 1]) {

              \      case \"u\":

              \        {

              \          str += json.slice(start, i);

              \          const code = json.substr(i + 2, 4);

              \          switch (code) {

              \            case \"0000\":

              \              str += \"\\\\0\";

              \              break;

              \            case \"0007\":

              \              str += \"\\\\a\";

              \              break;

              \            case \"000b\":

              \              str += \"\\\\v\";

              \              break;

              \            case \"001b\":

              \              str += \"\\\\e\";

              \              break;

              \            case \"0085\":

              \              str += \"\\\\N\";

              \              break;

              \            case \"00a0\":

              \              str += \"\\\\_\";

              \              break;

              \            case \"2028\":

              \              str += \"\\\\L\";

              \              break;

              \            case \"2029\":

              \              str += \"\\\\P\";

              \              break;

              \            default:

              \              if (code.substr(0, 2) === \"00\")

              \              str += \"\\\\x\" + code.substr(2);else


              \              str += json.substr(i, 6);

              \          }

              \          i += 5;

              \          start = i + 1;

              \        }

              \        break;

              \      case \"n\":

              \        if (implicitKey || json[i + 2] === '\"' || json.length <
              minMultiLineLength) {

              \          i += 1;

              \        } else {

              \          str += json.slice(start, i) + \"\\n\\n\";

              \          while (json[i + 2] === \"\\\\\" && json[i + 3] ===
              \"n\" && json[i + 4] !== '\"') {

              \            str += \"\\n\";

              \            i += 2;

              \          }

              \          str += indent;

              \          if (json[i + 2] === \" \")

              \          str += \"\\\\\";

              \          i += 1;

              \          start = i + 1;

              \        }

              \        break;

              \      default:

              \        i += 1;

              \    }

              \  }

              \  str = start ? str + json.slice(start) : json;

              \  return implicitKey ? str : foldFlowLines(str, indent,
              FOLD_QUOTED, getFoldOptions(ctx, false));

              }

              function singleQuotedString(value, ctx) {

              \  if (ctx.options.singleQuote === false || ctx.implicitKey &&
              value.includes(\"\\n\") || /[ \\t]\\n|\\n[ \\t]/.test(value))

              \  return doubleQuotedString(value, ctx);

              \  const indent = ctx.indent || (containsDocumentMarker(value) ?
              \"  \" : \"\");

              \  const res = \"'\" + value.replace(/'/g,
              \"''\").replace(/\\n+/g, `$&

              ${indent}`) + \"'\";

              \  return ctx.implicitKey ? res : foldFlowLines(res, indent,
              FOLD_FLOW, getFoldOptions(ctx, false));

              }

              function quotedString(value, ctx) {

              \  const { singleQuote } = ctx.options;

              \  let qs;

              \  if (singleQuote === false)

              \  qs = doubleQuotedString;else

              \  {

              \    const hasDouble = value.includes('\"');

              \    const hasSingle = value.includes(\"'\");

              \    if (hasDouble && !hasSingle)

              \    qs = singleQuotedString;else

              \    if (hasSingle && !hasDouble)

              \    qs = doubleQuotedString;else


              \    qs = singleQuote ? singleQuotedString : doubleQuotedString;

              \  }

              \  return qs(value, ctx);

              }

              var blockEndNewlines;

              try {

              \  blockEndNewlines = new RegExp(\"(^|(?<!\\n))\\n+(?!\\n|$)\",
              \"g\");

              } catch (e) {

              \  blockEndNewlines = /\\n+(?!\\n|$)/g;

              }

              function blockString({ comment, type, value }, ctx, onComment,
              onChompKeep) {

              \  const { blockQuote, commentString, lineWidth } = ctx.options;

              \  if (!blockQuote || /\\n[\\t ]+$/.test(value) ||
              /^\\s*$/.test(value)) {

              \    return quotedString(value, ctx);

              \  }

              \  const indent = ctx.indent || (ctx.forceBlockIndent ||
              containsDocumentMarker(value) ? \"  \" : \"\");

              \  const literal = blockQuote === \"literal\" ? true : blockQuote
              === \"folded\" || type === Scalar.BLOCK_FOLDED ? false : type ===
              Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value,
              lineWidth, indent.length);

              \  if (!value)

              \  return literal ? \"|\\n\" : \">\\n\";

              \  let chomp;

              \  let endStart;

              \  for (endStart = value.length; endStart > 0; --endStart) {

              \    const ch = value[endStart - 1];

              \    if (ch !== \"\\n\" && ch !== \"\t\" && ch !== \" \")

              \    break;

              \  }

              \  let end = value.substring(endStart);

              \  const endNlPos = end.indexOf(\"\\n\");

              \  if (endNlPos === -1) {

              \    chomp = \"-\";

              \  } else if (value === end || endNlPos !== end.length - 1) {

              \    chomp = \"+\";

              \    if (onChompKeep)

              \    onChompKeep();

              \  } else {

              \    chomp = \"\";

              \  }

              \  if (end) {

              \    value = value.slice(0, -end.length);

              \    if (end[end.length - 1] === \"\\n\")

              \    end = end.slice(0, -1);

              \    end = end.replace(blockEndNewlines, `$&${indent}`);

              \  }

              \  let startWithSpace = false;

              \  let startEnd;

              \  let startNlPos = -1;

              \  for (startEnd = 0; startEnd < value.length; ++startEnd) {

              \    const ch = value[startEnd];

              \    if (ch === \" \")

              \    startWithSpace = true;else

              \    if (ch === \"\\n\")

              \    startNlPos = startEnd;else


              \    break;

              \  }

              \  let start = value.substring(0, startNlPos < startEnd ?
              startNlPos + 1 : startEnd);

              \  if (start) {

              \    value = value.substring(start.length);

              \    start = start.replace(/\\n+/g, `$&${indent}`);

              \  }

              \  const indentSize = indent ? \"2\" : \"1\";

              \  let header = (literal ? \"|\" : \">\") + (startWithSpace ?
              indentSize : \"\") + chomp;

              \  if (comment) {

              \    header += \" \" + commentString(comment.replace(/
              ?[\\r\\n]+/g, \" \"));

              \    if (onComment)

              \    onComment();

              \  }

              \  if (literal) {

              \    value = value.replace(/\\n+/g, `$&${indent}`);

              \    return `${header}

              ${indent}${start}${value}${end}`;

              \  }

              \  value = value.replace(/\\n+/g,
              \"\\n$&\").replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t
              ]*)\\n(?![\\n\\t ]))?/g, \"$1$2\").replace(/\\n+/g,
              `$&${indent}`);

              \  const body = foldFlowLines(`${start}${value}${end}`, indent,
              FOLD_BLOCK, getFoldOptions(ctx, true));

              \  return `${header}

              ${indent}${body}`;

              }

              function plainString(item, ctx, onComment, onChompKeep) {

              \  const { type, value } = item;

              \  const { actualString, implicitKey, indent, indentStep, inFlow }
              = ctx;

              \  if (implicitKey && value.includes(\"\\n\") || inFlow &&
              /[[\\]{},]/.test(value)) {

              \    return quotedString(value, ctx);

              \  }

              \  if (!value || /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][
              \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {

              \    return implicitKey || inFlow || !value.includes(\"\\n\") ?
              quotedString(value, ctx) : blockString(item, ctx, onComment,
              onChompKeep);

              \  }

              \  if (!implicitKey && !inFlow && type !== Scalar.PLAIN &&
              value.includes(\"\\n\")) {

              \    return blockString(item, ctx, onComment, onChompKeep);

              \  }

              \  if (containsDocumentMarker(value)) {

              \    if (indent === \"\") {

              \      ctx.forceBlockIndent = true;

              \      return blockString(item, ctx, onComment, onChompKeep);

              \    } else if (implicitKey && indent === indentStep) {

              \      return quotedString(value, ctx);

              \    }

              \  }

              \  const str = value.replace(/\\n+/g, `$&

              ${indent}`);

              \  if (actualString) {

              \    const test = (tag) => {

              \      var _a;

              \      return tag.default && tag.tag !== \"tag:yaml.org,2002:str\"
              && ((_a = tag.test) == null ? void 0 : _a.test(str));

              \    };

              \    const { compat, tags } = ctx.doc.schema;

              \    if (tags.some(test) || (compat == null ? void 0 :
              compat.some(test)))

              \    return quotedString(value, ctx);

              \  }

              \  return implicitKey ? str : foldFlowLines(str, indent,
              FOLD_FLOW, getFoldOptions(ctx, false));

              }

              function stringifyString(item, ctx, onComment, onChompKeep) {

              \  const { implicitKey, inFlow } = ctx;

              \  const ss = typeof item.value === \"string\" ? item :
              Object.assign({}, item, { value: String(item.value) });

              \  let { type } = item;

              \  if (type !== Scalar.QUOTE_DOUBLE) {

              \    if
              (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(s\
              s.value))

              \    type = Scalar.QUOTE_DOUBLE;

              \  }

              \  const _stringify = (_type) => {

              \    switch (_type) {

              \      case Scalar.BLOCK_FOLDED:

              \      case Scalar.BLOCK_LITERAL:

              \        return implicitKey || inFlow ? quotedString(ss.value,
              ctx) : blockString(ss, ctx, onComment, onChompKeep);

              \      case Scalar.QUOTE_DOUBLE:

              \        return doubleQuotedString(ss.value, ctx);

              \      case Scalar.QUOTE_SINGLE:

              \        return singleQuotedString(ss.value, ctx);

              \      case Scalar.PLAIN:

              \        return plainString(ss, ctx, onComment, onChompKeep);

              \      default:

              \        return null;

              \    }

              \  };

              \  let res = _stringify(type);

              \  if (res === null) {

              \    const { defaultKeyType, defaultStringType } = ctx.options;

              \    const t = implicitKey && defaultKeyType || defaultStringType;

              \    res = _stringify(t);

              \    if (res === null)

              \    throw new Error(`Unsupported default string type ${t}`);

              \  }

              \  return res;

              }


              // node_modules/yaml/browser/dist/stringify/stringify.js

              function createStringifyContext(doc, options) {

              \  const opt = Object.assign({

              \    blockQuote: true,

              \    commentString: stringifyComment,

              \    defaultKeyType: null,

              \    defaultStringType: \"PLAIN\",

              \    directives: null,

              \    doubleQuotedAsJSON: false,

              \    doubleQuotedMinMultiLineLength: 40,

              \    falseStr: \"false\",

              \    flowCollectionPadding: true,

              \    indentSeq: true,

              \    lineWidth: 80,

              \    minContentWidth: 20,

              \    nullStr: \"null\",

              \    simpleKeys: false,

              \    singleQuote: null,

              \    trueStr: \"true\",

              \    verifyAliasOrder: true

              \  }, doc.schema.toStringOptions, options);

              \  let inFlow;

              \  switch (opt.collectionStyle) {

              \    case \"block\":

              \      inFlow = false;

              \      break;

              \    case \"flow\":

              \      inFlow = true;

              \      break;

              \    default:

              \      inFlow = null;

              \  }

              \  return {

              \    anchors: /* @__PURE__ */new Set(),

              \    doc,

              \    flowCollectionPadding: opt.flowCollectionPadding ? \" \" :
              \"\",

              \    indent: \"\",

              \    indentStep: typeof opt.indent === \"number\" ? \"
              \".repeat(opt.indent) : \"  \",

              \    inFlow,

              \    options: opt

              \  };

              }

              function getTagObject(tags, item) {

              \  var _a, _b, _c, _d;

              \  if (item.tag) {

              \    const match = tags.filter((t) => t.tag === item.tag);

              \    if (match.length > 0)

              \    return (_a = match.find((t) => t.format === item.format)) !=
              null ? _a : match[0];

              \  }

              \  let tagObj = void 0;

              \  let obj;

              \  if (isScalar(item)) {

              \    obj = item.value;

              \    const match = tags.filter((t) => {

              \      var _a2;

              \      return (_a2 = t.identify) == null ? void 0 : _a2.call(t,
              obj);

              \    });

              \    tagObj = (_b = match.find((t) => t.format === item.format))
              != null ? _b : match.find((t) => !t.format);

              \  } else {

              \    obj = item;

              \    tagObj = tags.find((t) => t.nodeClass && obj instanceof
              t.nodeClass);

              \  }

              \  if (!tagObj) {

              \    const name = (_d = (_c = obj == null ? void 0 :
              obj.constructor) == null ? void 0 : _c.name) != null ? _d : typeof
              obj;

              \    throw new Error(`Tag not resolved for ${name} value`);

              \  }

              \  return tagObj;

              }

              function stringifyProps(node, tagObj, { anchors, doc }) {

              \  if (!doc.directives)

              \  return \"\";

              \  const props = [];

              \  const anchor = (isScalar(node) || isCollection(node)) &&
              node.anchor;

              \  if (anchor && anchorIsValid(anchor)) {

              \    anchors.add(anchor);

              \    props.push(`&${anchor}`);

              \  }

              \  const tag = node.tag ? node.tag : tagObj.default ? null :
              tagObj.tag;

              \  if (tag)

              \  props.push(doc.directives.tagString(tag));

              \  return props.join(\" \");

              }

              function stringify(item, ctx, onComment, onChompKeep) {

              \  var _a, _b;

              \  if (isPair(item))

              \  return item.toString(ctx, onComment, onChompKeep);

              \  if (isAlias(item)) {

              \    if (ctx.doc.directives)

              \    return item.toString(ctx);

              \    if ((_a = ctx.resolvedAliases) == null ? void 0 :
              _a.has(item)) {

              \      throw new TypeError(`Cannot stringify circular structure
              without alias nodes`);

              \    } else {

              \      if (ctx.resolvedAliases)

              \      ctx.resolvedAliases.add(item);else


              \      ctx.resolvedAliases = /* @__PURE__ */new Set([item]);

              \      item = item.resolve(ctx.doc);

              \    }

              \  }

              \  let tagObj = void 0;

              \  const node = isNode(item) ? item : ctx.doc.createNode(item, {
              onTagObj: (o) => tagObj = o });

              \  if (!tagObj)

              \  tagObj = getTagObject(ctx.doc.schema.tags, node);

              \  const props = stringifyProps(node, tagObj, ctx);

              \  if (props.length > 0)

              \  ctx.indentAtStart = ((_b = ctx.indentAtStart) != null ? _b : 0)
              + props.length + 1;

              \  const str = typeof tagObj.stringify === \"function\" ?
              tagObj.stringify(node, ctx, onComment, onChompKeep) :
              isScalar(node) ? stringifyString(node, ctx, onComment,
              onChompKeep) : node.toString(ctx, onComment, onChompKeep);

              \  if (!props)

              \  return str;

              \  return isScalar(node) || str[0] === \"{\" || str[0] === \"[\" ?
              `${props} ${str}` : `${props}

              ${ctx.indent}${str}`;

              }


              // node_modules/yaml/browser/dist/stringify/stringifyPair.js

              function stringifyPair({ key, value }, ctx, onComment,
              onChompKeep) {

              \  var _a, _b;

              \  const { allNullValues, doc, indent, indentStep, options: {
              commentString, indentSeq, simpleKeys } } = ctx;

              \  let keyComment = isNode(key) && key.comment || null;

              \  if (simpleKeys) {

              \    if (keyComment) {

              \      throw new Error(\"With simple keys, key nodes cannot have
              comments\");

              \    }

              \    if (isCollection(key) || !isNode(key) && typeof key ===
              \"object\") {

              \      const msg = \"With simple keys, collection cannot be used
              as a key value\";

              \      throw new Error(msg);

              \    }

              \  }

              \  let explicitKey = !simpleKeys && (!key || keyComment && value
              == null && !ctx.inFlow || isCollection(key) || (isScalar(key) ?
              key.type === Scalar.BLOCK_FOLDED || key.type ===
              Scalar.BLOCK_LITERAL : typeof key === \"object\"));

              \  ctx = Object.assign({}, ctx, {

              \    allNullValues: false,

              \    implicitKey: !explicitKey && (simpleKeys || !allNullValues),

              \    indent: indent + indentStep

              \  });

              \  let keyCommentDone = false;

              \  let chompKeep = false;

              \  let str = stringify(key, ctx, () => keyCommentDone = true, ()
              => chompKeep = true);

              \  if (!explicitKey && !ctx.inFlow && str.length > 1024) {

              \    if (simpleKeys)

              \    throw new Error(\"With simple keys, single line scalar must
              not span more than 1024 characters\");

              \    explicitKey = true;

              \  }

              \  if (ctx.inFlow) {

              \    if (allNullValues || value == null) {

              \      if (keyCommentDone && onComment)

              \      onComment();

              \      return str === \"\" ? \"?\" : explicitKey ? `? ${str}` :
              str;

              \    }

              \  } else if (allNullValues && !simpleKeys || value == null &&
              explicitKey) {

              \    str = `? ${str}`;

              \    if (keyComment && !keyCommentDone) {

              \      str += lineComment(str, ctx.indent,
              commentString(keyComment));

              \    } else if (chompKeep && onChompKeep)

              \    onChompKeep();

              \    return str;

              \  }

              \  if (keyCommentDone)

              \  keyComment = null;

              \  if (explicitKey) {

              \    if (keyComment)

              \    str += lineComment(str, ctx.indent,
              commentString(keyComment));

              \    str = `? ${str}

              ${indent}:`;

              \  } else {

              \    str = `${str}:`;

              \    if (keyComment)

              \    str += lineComment(str, ctx.indent,
              commentString(keyComment));

              \  }

              \  let vsb, vcb, valueComment;

              \  if (isNode(value)) {

              \    vsb = !!value.spaceBefore;

              \    vcb = value.commentBefore;

              \    valueComment = value.comment;

              \  } else {

              \    vsb = false;

              \    vcb = null;

              \    valueComment = null;

              \    if (value && typeof value === \"object\")

              \    value = doc.createNode(value);

              \  }

              \  ctx.implicitKey = false;

              \  if (!explicitKey && !keyComment && isScalar(value))

              \  ctx.indentAtStart = str.length + 1;

              \  chompKeep = false;

              \  if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow &&
              !explicitKey && isSeq(value) && !value.flow && !value.tag &&
              !value.anchor) {

              \    ctx.indent = ctx.indent.substring(2);

              \  }

              \  let valueCommentDone = false;

              \  const valueStr = stringify(value, ctx, () => valueCommentDone =
              true, () => chompKeep = true);

              \  let ws = \" \";

              \  if (keyComment || vsb || vcb) {

              \    ws = vsb ? \"\\n\" : \"\";

              \    if (vcb) {

              \      const cs = commentString(vcb);

              \      ws += `

              ${indentComment(cs, ctx.indent)}`;

              \    }

              \    if (valueStr === \"\" && !ctx.inFlow) {

              \      if (ws === \"\\n\")

              \      ws = \"\\n\\n\";

              \    } else {

              \      ws += `

              ${ctx.indent}`;

              \    }

              \  } else if (!explicitKey && isCollection(value)) {

              \    const vs0 = valueStr[0];

              \    const nl0 = valueStr.indexOf(\"\\n\");

              \    const hasNewline = nl0 !== -1;

              \    const flow = (_b = (_a = ctx.inFlow) != null ? _a :
              value.flow) != null ? _b : value.items.length === 0;

              \    if (hasNewline || !flow) {

              \      let hasPropsLine = false;

              \      if (hasNewline && (vs0 === \"&\" || vs0 === \"!\")) {

              \        let sp0 = valueStr.indexOf(\" \");

              \        if (vs0 === \"&\" && sp0 !== -1 && sp0 < nl0 &&
              valueStr[sp0 + 1] === \"!\") {

              \          sp0 = valueStr.indexOf(\" \", sp0 + 1);

              \        }

              \        if (sp0 === -1 || nl0 < sp0)

              \        hasPropsLine = true;

              \      }

              \      if (!hasPropsLine)

              \      ws = `

              ${ctx.indent}`;

              \    }

              \  } else if (valueStr === \"\" || valueStr[0] === \"\\n\") {

              \    ws = \"\";

              \  }

              \  str += ws + valueStr;

              \  if (ctx.inFlow) {

              \    if (valueCommentDone && onComment)

              \    onComment();

              \  } else if (valueComment && !valueCommentDone) {

              \    str += lineComment(str, ctx.indent,
              commentString(valueComment));

              \  } else if (chompKeep && onChompKeep) {

              \    onChompKeep();

              \  }

              \  return str;

              }


              // node_modules/yaml/browser/dist/log.js

              function warn(logLevel, warning) {

              \  if (logLevel === \"debug\" || logLevel === \"warn\") {

              \    if (typeof process !== \"undefined\" && process.emitWarning)

              \    process.emitWarning(warning);else


              \    console.warn(warning);

              \  }

              }


              // node_modules/yaml/browser/dist/nodes/addPairToJSMap.js

              var MERGE_KEY = \"<<\";

              function addPairToJSMap(ctx, map2, { key, value }) {

              \  if ((ctx == null ? void 0 : ctx.doc.schema.merge) &&
              isMergeKey(key)) {

              \    value = isAlias(value) ? value.resolve(ctx.doc) : value;

              \    if (isSeq(value))

              \    for (const it of value.items)

              \    mergeToJSMap(ctx, map2, it);else

              \    if (Array.isArray(value))

              \    for (const it of value)

              \    mergeToJSMap(ctx, map2, it);else


              \    mergeToJSMap(ctx, map2, value);

              \  } else {

              \    const jsKey = toJS(key, \"\", ctx);

              \    if (map2 instanceof Map) {

              \      map2.set(jsKey, toJS(value, jsKey, ctx));

              \    } else if (map2 instanceof Set) {

              \      map2.add(jsKey);

              \    } else {

              \      const stringKey = stringifyKey(key, jsKey, ctx);

              \      const jsValue = toJS(value, stringKey, ctx);

              \      if (stringKey in map2)

              \      Object.defineProperty(map2, stringKey, {

              \        value: jsValue,

              \        writable: true,

              \        enumerable: true,

              \        configurable: true

              \      });else


              \      map2[stringKey] = jsValue;

              \    }

              \  }

              \  return map2;

              }

              var isMergeKey = (key) => key === MERGE_KEY || isScalar(key) &&
              key.value === MERGE_KEY && (!key.type || key.type ===
              Scalar.PLAIN);

              function mergeToJSMap(ctx, map2, value) {

              \  const source = ctx && isAlias(value) ? value.resolve(ctx.doc) :
              value;

              \  if (!isMap(source))

              \  throw new Error(\"Merge sources must be maps or map aliases\");

              \  const srcMap = source.toJSON(null, ctx, Map);

              \  for (const [key, value2] of srcMap) {

              \    if (map2 instanceof Map) {

              \      if (!map2.has(key))

              \      map2.set(key, value2);

              \    } else if (map2 instanceof Set) {

              \      map2.add(key);

              \    } else if (!Object.prototype.hasOwnProperty.call(map2, key))
              {

              \      Object.defineProperty(map2, key, {

              \        value: value2,

              \        writable: true,

              \        enumerable: true,

              \        configurable: true

              \      });

              \    }

              \  }

              \  return map2;

              }

              function stringifyKey(key, jsKey, ctx) {

              \  if (jsKey === null)

              \  return \"\";

              \  if (typeof jsKey !== \"object\")

              \  return String(jsKey);

              \  if (isNode(key) && (ctx == null ? void 0 : ctx.doc)) {

              \    const strCtx = createStringifyContext(ctx.doc, {});

              \    strCtx.anchors = /* @__PURE__ */new Set();

              \    for (const node of ctx.anchors.keys())

              \    strCtx.anchors.add(node.anchor);

              \    strCtx.inFlow = true;

              \    strCtx.inStringifyKey = true;

              \    const strKey = key.toString(strCtx);

              \    if (!ctx.mapKeyWarned) {

              \      let jsonStr = JSON.stringify(strKey);

              \      if (jsonStr.length > 40)

              \      jsonStr = jsonStr.substring(0, 36) + '...\"';

              \      warn(ctx.doc.options.logLevel, `Keys with collection values
              will be stringified due to JS Object restrictions: ${jsonStr}. Set
              mapAsMap: true to use object keys.`);

              \      ctx.mapKeyWarned = true;

              \    }

              \    return strKey;

              \  }

              \  return JSON.stringify(jsKey);

              }


              // node_modules/yaml/browser/dist/nodes/Pair.js

              function createPair(key, value, ctx) {

              \  const k = createNode(key, void 0, ctx);

              \  const v = createNode(value, void 0, ctx);

              \  return new Pair(k, v);

              }

              var Pair = class _Pair {

              \  constructor(key, value = null) {

              \    Object.defineProperty(this, NODE_TYPE, { value: PAIR });

              \    this.key = key;

              \    this.value = value;

              \  }

              \  clone(schema4) {

              \    let { key, value } = this;

              \    if (isNode(key))

              \    key = key.clone(schema4);

              \    if (isNode(value))

              \    value = value.clone(schema4);

              \    return new _Pair(key, value);

              \  }

              \  toJSON(_, ctx) {

              \    const pair = (ctx == null ? void 0 : ctx.mapAsMap) ? /*
              @__PURE__ */new Map() : {};

              \    return addPairToJSMap(ctx, pair, this);

              \  }

              \  toString(ctx, onComment, onChompKeep) {

              \    return (ctx == null ? void 0 : ctx.doc) ? stringifyPair(this,
              ctx, onComment, onChompKeep) : JSON.stringify(this);

              \  }

              };


              // node_modules/yaml/browser/dist/stringify/stringifyCollection.js

              function stringifyCollection(collection, ctx, options) {

              \  var _a;

              \  const flow = (_a = ctx.inFlow) != null ? _a : collection.flow;

              \  const stringify4 = flow ? stringifyFlowCollection :
              stringifyBlockCollection;

              \  return stringify4(collection, ctx, options);

              }

              function stringifyBlockCollection({ comment, items }, ctx, {
              blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment })
              {

              \  const { indent, options: { commentString } } = ctx;

              \  const itemCtx = Object.assign({}, ctx, { indent: itemIndent,
              type: null });

              \  let chompKeep = false;

              \  const lines = [];

              \  for (let i = 0; i < items.length; ++i) {

              \    const item = items[i];

              \    let comment2 = null;

              \    if (isNode(item)) {

              \      if (!chompKeep && item.spaceBefore)

              \      lines.push(\"\");

              \      addCommentBefore(ctx, lines, item.commentBefore,
              chompKeep);

              \      if (item.comment)

              \      comment2 = item.comment;

              \    } else if (isPair(item)) {

              \      const ik = isNode(item.key) ? item.key : null;

              \      if (ik) {

              \        if (!chompKeep && ik.spaceBefore)

              \        lines.push(\"\");

              \        addCommentBefore(ctx, lines, ik.commentBefore,
              chompKeep);

              \      }

              \    }

              \    chompKeep = false;

              \    let str2 = stringify(item, itemCtx, () => comment2 = null, ()
              => chompKeep = true);

              \    if (comment2)

              \    str2 += lineComment(str2, itemIndent,
              commentString(comment2));

              \    if (chompKeep && comment2)

              \    chompKeep = false;

              \    lines.push(blockItemPrefix + str2);

              \  }

              \  let str;

              \  if (lines.length === 0) {

              \    str = flowChars.start + flowChars.end;

              \  } else {

              \    str = lines[0];

              \    for (let i = 1; i < lines.length; ++i) {

              \      const line = lines[i];

              \      str += line ? `

              ${indent}${line}` : \"\\n\";

              \    }

              \  }

              \  if (comment) {

              \    str += \"\\n\" + indentComment(commentString(comment),
              indent);

              \    if (onComment)

              \    onComment();

              \  } else if (chompKeep && onChompKeep)

              \  onChompKeep();

              \  return str;

              }

              function stringifyFlowCollection({ items }, ctx, { flowChars,
              itemIndent }) {

              \  const { indent, indentStep, flowCollectionPadding: fcPadding,
              options: { commentString } } = ctx;

              \  itemIndent += indentStep;

              \  const itemCtx = Object.assign({}, ctx, {

              \    indent: itemIndent,

              \    inFlow: true,

              \    type: null

              \  });

              \  let reqNewline = false;

              \  let linesAtValue = 0;

              \  const lines = [];

              \  for (let i = 0; i < items.length; ++i) {

              \    const item = items[i];

              \    let comment = null;

              \    if (isNode(item)) {

              \      if (item.spaceBefore)

              \      lines.push(\"\");

              \      addCommentBefore(ctx, lines, item.commentBefore, false);

              \      if (item.comment)

              \      comment = item.comment;

              \    } else if (isPair(item)) {

              \      const ik = isNode(item.key) ? item.key : null;

              \      if (ik) {

              \        if (ik.spaceBefore)

              \        lines.push(\"\");

              \        addCommentBefore(ctx, lines, ik.commentBefore, false);

              \        if (ik.comment)

              \        reqNewline = true;

              \      }

              \      const iv = isNode(item.value) ? item.value : null;

              \      if (iv) {

              \        if (iv.comment)

              \        comment = iv.comment;

              \        if (iv.commentBefore)

              \        reqNewline = true;

              \      } else if (item.value == null && (ik == null ? void 0 :
              ik.comment)) {

              \        comment = ik.comment;

              \      }

              \    }

              \    if (comment)

              \    reqNewline = true;

              \    let str = stringify(item, itemCtx, () => comment = null);

              \    if (i < items.length - 1)

              \    str += \",\";

              \    if (comment)

              \    str += lineComment(str, itemIndent, commentString(comment));

              \    if (!reqNewline && (lines.length > linesAtValue ||
              str.includes(\"\\n\")))

              \    reqNewline = true;

              \    lines.push(str);

              \    linesAtValue = lines.length;

              \  }

              \  const { start, end } = flowChars;

              \  if (lines.length === 0) {

              \    return start + end;

              \  } else {

              \    if (!reqNewline) {

              \      const len = lines.reduce((sum, line) => sum + line.length +
              2, 2);

              \      reqNewline = ctx.options.lineWidth > 0 && len >
              ctx.options.lineWidth;

              \    }

              \    if (reqNewline) {

              \      let str = start;

              \      for (const line of lines)

              \      str += line ? `

              ${indentStep}${indent}${line}` : \"\\n\";

              \      return `${str}

              ${indent}${end}`;

              \    } else {

              \      return `${start}${fcPadding}${lines.join(\"
              \")}${fcPadding}${end}`;

              \    }

              \  }

              }

              function addCommentBefore({ indent, options: { commentString } },
              lines, comment, chompKeep) {

              \  if (comment && chompKeep)

              \  comment = comment.replace(/^\\n+/, \"\");

              \  if (comment) {

              \    const ic = indentComment(commentString(comment), indent);

              \    lines.push(ic.trimStart());

              \  }

              }


              // node_modules/yaml/browser/dist/nodes/YAMLMap.js

              function findPair(items, key) {

              \  const k = isScalar(key) ? key.value : key;

              \  for (const it of items) {

              \    if (isPair(it)) {

              \      if (it.key === key || it.key === k)

              \      return it;

              \      if (isScalar(it.key) && it.key.value === k)

              \      return it;

              \    }

              \  }

              \  return void 0;

              }

              var YAMLMap = class extends Collection {

              \  static get tagName() {

              \    return \"tag:yaml.org,2002:map\";

              \  }

              \  constructor(schema4) {

              \    super(MAP, schema4);

              \    this.items = [];

              \  }

              \  /**

              \   * A generic collection parsing method that can be extended

              \   * to other node classes that inherit from YAMLMap

              \   */

              \  static from(schema4, obj, ctx) {

              \    const { keepUndefined, replacer } = ctx;

              \    const map2 = new this(schema4);

              \    const add = (key, value) => {

              \      if (typeof replacer === \"function\")

              \      value = replacer.call(obj, key, value);else

              \      if (Array.isArray(replacer) && !replacer.includes(key))

              \      return;

              \      if (value !== void 0 || keepUndefined)

              \      map2.items.push(createPair(key, value, ctx));

              \    };

              \    if (obj instanceof Map) {

              \      for (const [key, value] of obj)

              \      add(key, value);

              \    } else if (obj && typeof obj === \"object\") {

              \      for (const key of Object.keys(obj))

              \      add(key, obj[key]);

              \    }

              \    if (typeof schema4.sortMapEntries === \"function\") {

              \      map2.items.sort(schema4.sortMapEntries);

              \    }

              \    return map2;

              \  }

              \  /**

              \   * Adds a value to the collection.

              \   *

              \   * @param overwrite - If not set `true`, using a key that is
              already in the

              \   *   collection will throw. Otherwise, overwrites the previous
              value.

              \   */

              \  add(pair, overwrite) {

              \    var _a;

              \    let _pair;

              \    if (isPair(pair))

              \    _pair = pair;else

              \    if (!pair || typeof pair !== \"object\" || !(\"key\" in
              pair)) {

              \      _pair = new Pair(pair, pair == null ? void 0 : pair.value);

              \    } else

              \    _pair = new Pair(pair.key, pair.value);

              \    const prev = findPair(this.items, _pair.key);

              \    const sortEntries = (_a = this.schema) == null ? void 0 :
              _a.sortMapEntries;

              \    if (prev) {

              \      if (!overwrite)

              \      throw new Error(`Key ${_pair.key} already set`);

              \      if (isScalar(prev.value) && isScalarValue(_pair.value))

              \      prev.value.value = _pair.value;else


              \      prev.value = _pair.value;

              \    } else if (sortEntries) {

              \      const i = this.items.findIndex((item) => sortEntries(_pair,
              item) < 0);

              \      if (i === -1)

              \      this.items.push(_pair);else


              \      this.items.splice(i, 0, _pair);

              \    } else {

              \      this.items.push(_pair);

              \    }

              \  }

              \  delete(key) {

              \    const it = findPair(this.items, key);

              \    if (!it)

              \    return false;

              \    const del = this.items.splice(this.items.indexOf(it), 1);

              \    return del.length > 0;

              \  }

              \  get(key, keepScalar) {

              \    var _a;

              \    const it = findPair(this.items, key);

              \    const node = it == null ? void 0 : it.value;

              \    return (_a = !keepScalar && isScalar(node) ? node.value :
              node) != null ? _a : void 0;

              \  }

              \  has(key) {

              \    return !!findPair(this.items, key);

              \  }

              \  set(key, value) {

              \    this.add(new Pair(key, value), true);

              \  }

              \  /**

              \   * @param ctx - Conversion context, originally set in
              Document#toJS()

              \   * @param {Class} Type - If set, forces the returned collection
              type

              \   * @returns Instance of Type, Map, or Object

              \   */

              \  toJSON(_, ctx, Type) {

              \    const map2 = Type ? new Type() : (ctx == null ? void 0 :
              ctx.mapAsMap) ? /* @__PURE__ */new Map() : {};

              \    if (ctx == null ? void 0 : ctx.onCreate)

              \    ctx.onCreate(map2);

              \    for (const item of this.items)

              \    addPairToJSMap(ctx, map2, item);

              \    return map2;

              \  }

              \  toString(ctx, onComment, onChompKeep) {

              \    if (!ctx)

              \    return JSON.stringify(this);

              \    for (const item of this.items) {

              \      if (!isPair(item))

              \      throw new Error(`Map items must all be pairs; found
              ${JSON.stringify(item)} instead`);

              \    }

              \    if (!ctx.allNullValues && this.hasAllNullValues(false))

              \    ctx = Object.assign({}, ctx, { allNullValues: true });

              \    return stringifyCollection(this, ctx, {

              \      blockItemPrefix: \"\",

              \      flowChars: { start: \"{\", end: \"}\" },

              \      itemIndent: ctx.indent || \"\",

              \      onChompKeep,

              \      onComment

              \    });

              \  }

              };


              // node_modules/yaml/browser/dist/schema/common/map.js

              var map = {

              \  collection: \"map\",

              \  default: true,

              \  nodeClass: YAMLMap,

              \  tag: \"tag:yaml.org,2002:map\",

              \  resolve(map2, onError) {

              \    if (!isMap(map2))

              \    onError(\"Expected a mapping for this tag\");

              \    return map2;

              \  },

              \  createNode: (schema4, obj, ctx) => YAMLMap.from(schema4, obj,
              ctx)

              };


              // node_modules/yaml/browser/dist/nodes/YAMLSeq.js

              var YAMLSeq = class extends Collection {

              \  static get tagName() {

              \    return \"tag:yaml.org,2002:seq\";

              \  }

              \  constructor(schema4) {

              \    super(SEQ, schema4);

              \    this.items = [];

              \  }

              \  add(value) {

              \    this.items.push(value);

              \  }

              \  /**

              \   * Removes a value from the collection.

              \   *

              \   * `key` must contain a representation of an integer for this
              to succeed.

              \   * It may be wrapped in a `Scalar`.

              \   *

              \   * @returns `true` if the item was found and removed.

              \   */

              \  delete(key) {

              \    const idx = asItemIndex(key);

              \    if (typeof idx !== \"number\")

              \    return false;

              \    const del = this.items.splice(idx, 1);

              \    return del.length > 0;

              \  }

              \  get(key, keepScalar) {

              \    const idx = asItemIndex(key);

              \    if (typeof idx !== \"number\")

              \    return void 0;

              \    const it = this.items[idx];

              \    return !keepScalar && isScalar(it) ? it.value : it;

              \  }

              \  /**

              \   * Checks if the collection includes a value with the key
              `key`.

              \   *

              \   * `key` must contain a representation of an integer for this
              to succeed.

              \   * It may be wrapped in a `Scalar`.

              \   */

              \  has(key) {

              \    const idx = asItemIndex(key);

              \    return typeof idx === \"number\" && idx < this.items.length;

              \  }

              \  /**

              \   * Sets a value in this collection. For `!!set`, `value` needs
              to be a

              \   * boolean to add/remove the item from the set.

              \   *

              \   * If `key` does not contain a representation of an integer,
              this will throw.

              \   * It may be wrapped in a `Scalar`.

              \   */

              \  set(key, value) {

              \    const idx = asItemIndex(key);

              \    if (typeof idx !== \"number\")

              \    throw new Error(`Expected a valid index, not ${key}.`);

              \    const prev = this.items[idx];

              \    if (isScalar(prev) && isScalarValue(value))

              \    prev.value = value;else


              \    this.items[idx] = value;

              \  }

              \  toJSON(_, ctx) {

              \    const seq2 = [];

              \    if (ctx == null ? void 0 : ctx.onCreate)

              \    ctx.onCreate(seq2);

              \    let i = 0;

              \    for (const item of this.items)

              \    seq2.push(toJS(item, String(i++), ctx));

              \    return seq2;

              \  }

              \  toString(ctx, onComment, onChompKeep) {

              \    if (!ctx)

              \    return JSON.stringify(this);

              \    return stringifyCollection(this, ctx, {

              \      blockItemPrefix: \"- \",

              \      flowChars: { start: \"[\", end: \"]\" },

              \      itemIndent: (ctx.indent || \"\") + \"  \",

              \      onChompKeep,

              \      onComment

              \    });

              \  }

              \  static from(schema4, obj, ctx) {

              \    const { replacer } = ctx;

              \    const seq2 = new this(schema4);

              \    if (obj && Symbol.iterator in Object(obj)) {

              \      let i = 0;

              \      for (let it of obj) {

              \        if (typeof replacer === \"function\") {

              \          const key = obj instanceof Set ? it : String(i++);

              \          it = replacer.call(obj, key, it);

              \        }

              \        seq2.items.push(createNode(it, void 0, ctx));

              \      }

              \    }

              \    return seq2;

              \  }

              };

              function asItemIndex(key) {

              \  let idx = isScalar(key) ? key.value : key;

              \  if (idx && typeof idx === \"string\")

              \  idx = Number(idx);

              \  return typeof idx === \"number\" && Number.isInteger(idx) &&
              idx >= 0 ? idx : null;

              }


              // node_modules/yaml/browser/dist/schema/common/seq.js

              var seq = {

              \  collection: \"seq\",

              \  default: true,

              \  nodeClass: YAMLSeq,

              \  tag: \"tag:yaml.org,2002:seq\",

              \  resolve(seq2, onError) {

              \    if (!isSeq(seq2))

              \    onError(\"Expected a sequence for this tag\");

              \    return seq2;

              \  },

              \  createNode: (schema4, obj, ctx) => YAMLSeq.from(schema4, obj,
              ctx)

              };


              // node_modules/yaml/browser/dist/schema/common/string.js

              var string = {

              \  identify: (value) => typeof value === \"string\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:str\",

              \  resolve: (str) => str,

              \  stringify(item, ctx, onComment, onChompKeep) {

              \    ctx = Object.assign({ actualString: true }, ctx);

              \    return stringifyString(item, ctx, onComment, onChompKeep);

              \  }

              };


              // node_modules/yaml/browser/dist/schema/common/null.js

              var nullTag = {

              \  identify: (value) => value == null,

              \  createNode: () => new Scalar(null),

              \  default: true,

              \  tag: \"tag:yaml.org,2002:null\",

              \  test: /^(?:~|[Nn]ull|NULL)?$/,

              \  resolve: () => new Scalar(null),

              \  stringify: ({ source }, ctx) => typeof source === \"string\" &&
              nullTag.test.test(source) ? source : ctx.options.nullStr

              };


              // node_modules/yaml/browser/dist/schema/core/bool.js

              var boolTag = {

              \  identify: (value) => typeof value === \"boolean\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:bool\",

              \  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,

              \  resolve: (str) => new Scalar(str[0] === \"t\" || str[0] ===
              \"T\"),

              \  stringify({ source, value }, ctx) {

              \    if (source && boolTag.test.test(source)) {

              \      const sv = source[0] === \"t\" || source[0] === \"T\";

              \      if (value === sv)

              \      return source;

              \    }

              \    return value ? ctx.options.trueStr : ctx.options.falseStr;

              \  }

              };


              // node_modules/yaml/browser/dist/stringify/stringifyNumber.js

              function stringifyNumber({ format, minFractionDigits, tag, value
              }) {

              \  if (typeof value === \"bigint\")

              \  return String(value);

              \  const num = typeof value === \"number\" ? value :
              Number(value);

              \  if (!isFinite(num))

              \  return isNaN(num) ? \".nan\" : num < 0 ? \"-.inf\" : \".inf\";

              \  let n = JSON.stringify(value);

              \  if (!format && minFractionDigits && (!tag || tag ===
              \"tag:yaml.org,2002:float\") && /^\\d/.test(n)) {

              \    let i = n.indexOf(\".\");

              \    if (i < 0) {

              \      i = n.length;

              \      n += \".\";

              \    }

              \    let d = minFractionDigits - (n.length - i - 1);

              \    while (d-- > 0)

              \    n += \"0\";

              \  }

              \  return n;

              }


              // node_modules/yaml/browser/dist/schema/core/float.js

              var floatNaN = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,

              \  resolve: (str) => str.slice(-3).toLowerCase() === \"nan\" ? NaN
              : str[0] === \"-\" ? Number.NEGATIVE_INFINITY :
              Number.POSITIVE_INFINITY,

              \  stringify: stringifyNumber

              };

              var floatExp = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  format: \"EXP\",

              \  test:
              /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,

              \  resolve: (str) => parseFloat(str),

              \  stringify(node) {

              \    const num = Number(node.value);

              \    return isFinite(num) ? num.toExponential() :
              stringifyNumber(node);

              \  }

              };

              var float = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,

              \  resolve(str) {

              \    const node = new Scalar(parseFloat(str));

              \    const dot = str.indexOf(\".\");

              \    if (dot !== -1 && str[str.length - 1] === \"0\")

              \    node.minFractionDigits = str.length - dot - 1;

              \    return node;

              \  },

              \  stringify: stringifyNumber

              };


              // node_modules/yaml/browser/dist/schema/core/int.js

              var intIdentify = (value) => typeof value === \"bigint\" ||
              Number.isInteger(value);

              var intResolve = (str, offset, radix, { intAsBigInt }) =>
              intAsBigInt ? BigInt(str) : parseInt(str.substring(offset),
              radix);

              function intStringify(node, radix, prefix) {

              \  const { value } = node;

              \  if (intIdentify(value) && value >= 0)

              \  return prefix + value.toString(radix);

              \  return stringifyNumber(node);

              }

              var intOct = {

              \  identify: (value) => intIdentify(value) && value >= 0,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  format: \"OCT\",

              \  test: /^0o[0-7]+$/,

              \  resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),

              \  stringify: (node) => intStringify(node, 8, \"0o\")

              };

              var int = {

              \  identify: intIdentify,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  test: /^[-+]?[0-9]+$/,

              \  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),

              \  stringify: stringifyNumber

              };

              var intHex = {

              \  identify: (value) => intIdentify(value) && value >= 0,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  format: \"HEX\",

              \  test: /^0x[0-9a-fA-F]+$/,

              \  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),

              \  stringify: (node) => intStringify(node, 16, \"0x\")

              };


              // node_modules/yaml/browser/dist/schema/core/schema.js

              var schema = [

              map,

              seq,

              string,

              nullTag,

              boolTag,

              intOct,

              int,

              intHex,

              floatNaN,

              floatExp,

              float];



              // node_modules/yaml/browser/dist/schema/json/schema.js

              function intIdentify2(value) {

              \  return typeof value === \"bigint\" || Number.isInteger(value);

              }

              var stringifyJSON = ({ value }) => JSON.stringify(value);

              var jsonScalars = [

              {

              \  identify: (value) => typeof value === \"string\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:str\",

              \  resolve: (str) => str,

              \  stringify: stringifyJSON

              },

              {

              \  identify: (value) => value == null,

              \  createNode: () => new Scalar(null),

              \  default: true,

              \  tag: \"tag:yaml.org,2002:null\",

              \  test: /^null$/,

              \  resolve: () => null,

              \  stringify: stringifyJSON

              },

              {

              \  identify: (value) => typeof value === \"boolean\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:bool\",

              \  test: /^true|false$/,

              \  resolve: (str) => str === \"true\",

              \  stringify: stringifyJSON

              },

              {

              \  identify: intIdentify2,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  test: /^-?(?:0|[1-9][0-9]*)$/,

              \  resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ?
              BigInt(str) : parseInt(str, 10),

              \  stringify: ({ value }) => intIdentify2(value) ?
              value.toString() : JSON.stringify(value)

              },

              {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  test:
              /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,

              \  resolve: (str) => parseFloat(str),

              \  stringify: stringifyJSON

              }];


              var jsonError = {

              \  default: true,

              \  tag: \"\",

              \  test: /^/,

              \  resolve(str, onError) {

              \    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);

              \    return str;

              \  }

              };

              var schema2 = [map, seq].concat(jsonScalars, jsonError);


              // node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js

              var binary = {

              \  identify: (value) => value instanceof Uint8Array,

              \  // Buffer inherits from Uint8Array

              \  default: false,

              \  tag: \"tag:yaml.org,2002:binary\",

              \  /**

              \   * Returns a Buffer in node and an Uint8Array in browsers

              \   *

              \   * To use the resulting buffer as an image, you'll want to do
              something like:

              \   *

              \   *   const blob = new Blob([buffer], { type: 'image/jpeg' })

              \   *   document.querySelector('#photo').src =
              URL.createObjectURL(blob)

              \   */

              \  resolve(src, onError) {

              \    if (typeof Buffer === \"function\") {

              \      return Buffer.from(src, \"base64\");

              \    } else if (typeof atob === \"function\") {

              \      const str = atob(src.replace(/[\\n\\r]/g, \"\"));

              \      const buffer = new Uint8Array(str.length);

              \      for (let i = 0; i < str.length; ++i)

              \      buffer[i] = str.charCodeAt(i);

              \      return buffer;

              \    } else {

              \      onError(\"This environment does not support reading binary
              tags; either Buffer or atob is required\");

              \      return src;

              \    }

              \  },

              \  stringify({ comment, type, value }, ctx, onComment,
              onChompKeep) {

              \    const buf = value;

              \    let str;

              \    if (typeof Buffer === \"function\") {

              \      str = buf instanceof Buffer ? buf.toString(\"base64\") :
              Buffer.from(buf.buffer).toString(\"base64\");

              \    } else if (typeof btoa === \"function\") {

              \      let s = \"\";

              \      for (let i = 0; i < buf.length; ++i)

              \      s += String.fromCharCode(buf[i]);

              \      str = btoa(s);

              \    } else {

              \      throw new Error(\"This environment does not support writing
              binary tags; either Buffer or btoa is required\");

              \    }

              \    if (!type)

              \    type = Scalar.BLOCK_LITERAL;

              \    if (type !== Scalar.QUOTE_DOUBLE) {

              \      const lineWidth = Math.max(ctx.options.lineWidth -
              ctx.indent.length, ctx.options.minContentWidth);

              \      const n = Math.ceil(str.length / lineWidth);

              \      const lines = new Array(n);

              \      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {

              \        lines[i] = str.substr(o, lineWidth);

              \      }

              \      str = lines.join(type === Scalar.BLOCK_LITERAL ? \"\\n\" :
              \" \");

              \    }

              \    return stringifyString({ comment, type, value: str }, ctx,
              onComment, onChompKeep);

              \  }

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js

              function resolvePairs(seq2, onError) {

              \  var _a;

              \  if (isSeq(seq2)) {

              \    for (let i = 0; i < seq2.items.length; ++i) {

              \      let item = seq2.items[i];

              \      if (isPair(item))

              \      continue;else

              \      if (isMap(item)) {

              \        if (item.items.length > 1)

              \        onError(\"Each pair must have its own sequence
              indicator\");

              \        const pair = item.items[0] || new Pair(new Scalar(null));

              \        if (item.commentBefore)

              \        pair.key.commentBefore = pair.key.commentBefore ?
              `${item.commentBefore}

              ${pair.key.commentBefore}` : item.commentBefore;

              \        if (item.comment) {

              \          const cn = (_a = pair.value) != null ? _a : pair.key;

              \          cn.comment = cn.comment ? `${item.comment}

              ${cn.comment}` : item.comment;

              \        }

              \        item = pair;

              \      }

              \      seq2.items[i] = isPair(item) ? item : new Pair(item);

              \    }

              \  } else

              \  onError(\"Expected a sequence for this tag\");

              \  return seq2;

              }

              function createPairs(schema4, iterable, ctx) {

              \  const { replacer } = ctx;

              \  const pairs2 = new YAMLSeq(schema4);

              \  pairs2.tag = \"tag:yaml.org,2002:pairs\";

              \  let i = 0;

              \  if (iterable && Symbol.iterator in Object(iterable))

              \  for (let it of iterable) {

              \    if (typeof replacer === \"function\")

              \    it = replacer.call(iterable, String(i++), it);

              \    let key, value;

              \    if (Array.isArray(it)) {

              \      if (it.length === 2) {

              \        key = it[0];

              \        value = it[1];

              \      } else

              \      throw new TypeError(`Expected [key, value] tuple: ${it}`);

              \    } else if (it && it instanceof Object) {

              \      const keys = Object.keys(it);

              \      if (keys.length === 1) {

              \        key = keys[0];

              \        value = it[key];

              \      } else {

              \        throw new TypeError(`Expected tuple with one key, not
              ${keys.length} keys`);

              \      }

              \    } else {

              \      key = it;

              \    }

              \    pairs2.items.push(createPair(key, value, ctx));

              \  }

              \  return pairs2;

              }

              var pairs = {

              \  collection: \"seq\",

              \  default: false,

              \  tag: \"tag:yaml.org,2002:pairs\",

              \  resolve: resolvePairs,

              \  createNode: createPairs

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js

              var YAMLOMap = class _YAMLOMap extends YAMLSeq {

              \  constructor() {

              \    super();

              \    this.add = YAMLMap.prototype.add.bind(this);

              \    this.delete = YAMLMap.prototype.delete.bind(this);

              \    this.get = YAMLMap.prototype.get.bind(this);

              \    this.has = YAMLMap.prototype.has.bind(this);

              \    this.set = YAMLMap.prototype.set.bind(this);

              \    this.tag = _YAMLOMap.tag;

              \  }

              \  /**

              \   * If `ctx` is given, the return type is actually `Map<unknown,
              unknown>`,

              \   * but TypeScript won't allow widening the signature of a child
              method.

              \   */

              \  toJSON(_, ctx) {

              \    if (!ctx)

              \    return super.toJSON(_);

              \    const map2 = /* @__PURE__ */new Map();

              \    if (ctx == null ? void 0 : ctx.onCreate)

              \    ctx.onCreate(map2);

              \    for (const pair of this.items) {

              \      let key, value;

              \      if (isPair(pair)) {

              \        key = toJS(pair.key, \"\", ctx);

              \        value = toJS(pair.value, key, ctx);

              \      } else {

              \        key = toJS(pair, \"\", ctx);

              \      }

              \      if (map2.has(key))

              \      throw new Error(\"Ordered maps must not include duplicate
              keys\");

              \      map2.set(key, value);

              \    }

              \    return map2;

              \  }

              \  static from(schema4, iterable, ctx) {

              \    const pairs2 = createPairs(schema4, iterable, ctx);

              \    const omap2 = new this();

              \    omap2.items = pairs2.items;

              \    return omap2;

              \  }

              };

              YAMLOMap.tag = \"tag:yaml.org,2002:omap\";

              var omap = {

              \  collection: \"seq\",

              \  identify: (value) => value instanceof Map,

              \  nodeClass: YAMLOMap,

              \  default: false,

              \  tag: \"tag:yaml.org,2002:omap\",

              \  resolve(seq2, onError) {

              \    const pairs2 = resolvePairs(seq2, onError);

              \    const seenKeys = [];

              \    for (const { key } of pairs2.items) {

              \      if (isScalar(key)) {

              \        if (seenKeys.includes(key.value)) {

              \          onError(`Ordered maps must not include duplicate keys:
              ${key.value}`);

              \        } else {

              \          seenKeys.push(key.value);

              \        }

              \      }

              \    }

              \    return Object.assign(new YAMLOMap(), pairs2);

              \  },

              \  createNode: (schema4, iterable, ctx) => YAMLOMap.from(schema4,
              iterable, ctx)

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js

              function boolStringify({ value, source }, ctx) {

              \  const boolObj = value ? trueTag : falseTag;

              \  if (source && boolObj.test.test(source))

              \  return source;

              \  return value ? ctx.options.trueStr : ctx.options.falseStr;

              }

              var trueTag = {

              \  identify: (value) => value === true,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:bool\",

              \  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,

              \  resolve: () => new Scalar(true),

              \  stringify: boolStringify

              };

              var falseTag = {

              \  identify: (value) => value === false,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:bool\",

              \  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,

              \  resolve: () => new Scalar(false),

              \  stringify: boolStringify

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/float.js

              var floatNaN2 = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,

              \  resolve: (str) => str.slice(-3).toLowerCase() === \"nan\" ? NaN
              : str[0] === \"-\" ? Number.NEGATIVE_INFINITY :
              Number.POSITIVE_INFINITY,

              \  stringify: stringifyNumber

              };

              var floatExp2 = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  format: \"EXP\",

              \  test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,

              \  resolve: (str) => parseFloat(str.replace(/_/g, \"\")),

              \  stringify(node) {

              \    const num = Number(node.value);

              \    return isFinite(num) ? num.toExponential() :
              stringifyNumber(node);

              \  }

              };

              var float2 = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,

              \  resolve(str) {

              \    const node = new Scalar(parseFloat(str.replace(/_/g, \"\")));

              \    const dot = str.indexOf(\".\");

              \    if (dot !== -1) {

              \      const f = str.substring(dot + 1).replace(/_/g, \"\");

              \      if (f[f.length - 1] === \"0\")

              \      node.minFractionDigits = f.length;

              \    }

              \    return node;

              \  },

              \  stringify: stringifyNumber

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/int.js

              var intIdentify3 = (value) => typeof value === \"bigint\" ||
              Number.isInteger(value);

              function intResolve2(str, offset, radix, { intAsBigInt }) {

              \  const sign = str[0];

              \  if (sign === \"-\" || sign === \"+\")

              \  offset += 1;

              \  str = str.substring(offset).replace(/_/g, \"\");

              \  if (intAsBigInt) {

              \    switch (radix) {

              \      case 2:

              \        str = `0b${str}`;

              \        break;

              \      case 8:

              \        str = `0o${str}`;

              \        break;

              \      case 16:

              \        str = `0x${str}`;

              \        break;

              \    }

              \    const n2 = BigInt(str);

              \    return sign === \"-\" ? BigInt(-1) * n2 : n2;

              \  }

              \  const n = parseInt(str, radix);

              \  return sign === \"-\" ? -1 * n : n;

              }

              function intStringify2(node, radix, prefix) {

              \  const { value } = node;

              \  if (intIdentify3(value)) {

              \    const str = value.toString(radix);

              \    return value < 0 ? \"-\" + prefix + str.substr(1) : prefix +
              str;

              \  }

              \  return stringifyNumber(node);

              }

              var intBin = {

              \  identify: intIdentify3,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  format: \"BIN\",

              \  test: /^[-+]?0b[0-1_]+$/,

              \  resolve: (str, _onError, opt) => intResolve2(str, 2, 2, opt),

              \  stringify: (node) => intStringify2(node, 2, \"0b\")

              };

              var intOct2 = {

              \  identify: intIdentify3,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  format: \"OCT\",

              \  test: /^[-+]?0[0-7_]+$/,

              \  resolve: (str, _onError, opt) => intResolve2(str, 1, 8, opt),

              \  stringify: (node) => intStringify2(node, 8, \"0\")

              };

              var int2 = {

              \  identify: intIdentify3,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  test: /^[-+]?[0-9][0-9_]*$/,

              \  resolve: (str, _onError, opt) => intResolve2(str, 0, 10, opt),

              \  stringify: stringifyNumber

              };

              var intHex2 = {

              \  identify: intIdentify3,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  format: \"HEX\",

              \  test: /^[-+]?0x[0-9a-fA-F_]+$/,

              \  resolve: (str, _onError, opt) => intResolve2(str, 2, 16, opt),

              \  stringify: (node) => intStringify2(node, 16, \"0x\")

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/set.js

              var YAMLSet = class _YAMLSet extends YAMLMap {

              \  constructor(schema4) {

              \    super(schema4);

              \    this.tag = _YAMLSet.tag;

              \  }

              \  add(key) {

              \    let pair;

              \    if (isPair(key))

              \    pair = key;else

              \    if (key && typeof key === \"object\" && \"key\" in key &&
              \"value\" in key && key.value === null)

              \    pair = new Pair(key.key, null);else


              \    pair = new Pair(key, null);

              \    const prev = findPair(this.items, pair.key);

              \    if (!prev)

              \    this.items.push(pair);

              \  }

              \  /**

              \   * If `keepPair` is `true`, returns the Pair matching `key`.

              \   * Otherwise, returns the value of that Pair's key.

              \   */

              \  get(key, keepPair) {

              \    const pair = findPair(this.items, key);

              \    return !keepPair && isPair(pair) ? isScalar(pair.key) ?
              pair.key.value : pair.key : pair;

              \  }

              \  set(key, value) {

              \    if (typeof value !== \"boolean\")

              \    throw new Error(`Expected boolean value for set(key, value)
              in a YAML set, not ${typeof value}`);

              \    const prev = findPair(this.items, key);

              \    if (prev && !value) {

              \      this.items.splice(this.items.indexOf(prev), 1);

              \    } else if (!prev && value) {

              \      this.items.push(new Pair(key));

              \    }

              \  }

              \  toJSON(_, ctx) {

              \    return super.toJSON(_, ctx, Set);

              \  }

              \  toString(ctx, onComment, onChompKeep) {

              \    if (!ctx)

              \    return JSON.stringify(this);

              \    if (this.hasAllNullValues(true))

              \    return super.toString(Object.assign({}, ctx, { allNullValues:
              true }), onComment, onChompKeep);else


              \    throw new Error(\"Set items must all have null values\");

              \  }

              \  static from(schema4, iterable, ctx) {

              \    const { replacer } = ctx;

              \    const set2 = new this(schema4);

              \    if (iterable && Symbol.iterator in Object(iterable))

              \    for (let value of iterable) {

              \      if (typeof replacer === \"function\")

              \      value = replacer.call(iterable, value, value);

              \      set2.items.push(createPair(value, null, ctx));

              \    }

              \    return set2;

              \  }

              };

              YAMLSet.tag = \"tag:yaml.org,2002:set\";

              var set = {

              \  collection: \"map\",

              \  identify: (value) => value instanceof Set,

              \  nodeClass: YAMLSet,

              \  default: false,

              \  tag: \"tag:yaml.org,2002:set\",

              \  createNode: (schema4, iterable, ctx) => YAMLSet.from(schema4,
              iterable, ctx),

              \  resolve(map2, onError) {

              \    if (isMap(map2)) {

              \      if (map2.hasAllNullValues(true))

              \      return Object.assign(new YAMLSet(), map2);else


              \      onError(\"Set items must all have null values\");

              \    } else

              \    onError(\"Expected a mapping for this tag\");

              \    return map2;

              \  }

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js

              function parseSexagesimal(str, asBigInt) {

              \  const sign = str[0];

              \  const parts = sign === \"-\" || sign === \"+\" ?
              str.substring(1) : str;

              \  const num = (n) => asBigInt ? BigInt(n) : Number(n);

              \  const res = parts.replace(/_/g,
              \"\").split(\":\").reduce((res2, p) => res2 * num(60) + num(p),
              num(0));

              \  return sign === \"-\" ? num(-1) * res : res;

              }

              function stringifySexagesimal(node) {

              \  let { value } = node;

              \  let num = (n) => n;

              \  if (typeof value === \"bigint\")

              \  num = (n) => BigInt(n);else

              \  if (isNaN(value) || !isFinite(value))

              \  return stringifyNumber(node);

              \  let sign = \"\";

              \  if (value < 0) {

              \    sign = \"-\";

              \    value *= num(-1);

              \  }

              \  const _60 = num(60);

              \  const parts = [value % _60];

              \  if (value < 60) {

              \    parts.unshift(0);

              \  } else {

              \    value = (value - parts[0]) / _60;

              \    parts.unshift(value % _60);

              \    if (value >= 60) {

              \      value = (value - parts[0]) / _60;

              \      parts.unshift(value);

              \    }

              \  }

              \  return sign + parts.map((n) => String(n).padStart(2,
              \"0\")).join(\":\").replace(/000000\\d*$/, \"\");

              }

              var intTime = {

              \  identify: (value) => typeof value === \"bigint\" ||
              Number.isInteger(value),

              \  default: true,

              \  tag: \"tag:yaml.org,2002:int\",

              \  format: \"TIME\",

              \  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,

              \  resolve: (str, _onError, { intAsBigInt }) =>
              parseSexagesimal(str, intAsBigInt),

              \  stringify: stringifySexagesimal

              };

              var floatTime = {

              \  identify: (value) => typeof value === \"number\",

              \  default: true,

              \  tag: \"tag:yaml.org,2002:float\",

              \  format: \"TIME\",

              \  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,

              \  resolve: (str) => parseSexagesimal(str, false),

              \  stringify: stringifySexagesimal

              };

              var timestamp = {

              \  identify: (value) => value instanceof Date,

              \  default: true,

              \  tag: \"tag:yaml.org,2002:timestamp\",

              \  // If the time zone is omitted, the timestamp is assumed to be
              specified in UTC. The time part

              \  // may be omitted altogether, resulting in a date format. In
              such a case, the time part is

              \  // assumed to be 00:00:00Z (start of day, UTC).

              \  test: RegExp(\"^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[
              \\\\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)(?:[
              \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$\"),

              \  resolve(str) {

              \    const match = str.match(timestamp.test);

              \    if (!match)

              \    throw new Error(\"!!timestamp expects a date, starting with
              yyyy-mm-dd\");

              \    const [, year, month, day, hour, minute, second] =
              match.map(Number);

              \    const millisec = match[7] ? Number((match[7] +
              \"00\").substr(1, 3)) : 0;

              \    let date = Date.UTC(year, month - 1, day, hour || 0, minute
              || 0, second || 0, millisec);

              \    const tz = match[8];

              \    if (tz && tz !== \"Z\") {

              \      let d = parseSexagesimal(tz, false);

              \      if (Math.abs(d) < 30)

              \      d *= 60;

              \      date -= 6e4 * d;

              \    }

              \    return new Date(date);

              \  },

              \  stringify: ({ value }) =>
              value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, \"\")

              };


              // node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js

              var schema3 = [

              map,

              seq,

              string,

              nullTag,

              trueTag,

              falseTag,

              intBin,

              intOct2,

              int2,

              intHex2,

              floatNaN2,

              floatExp2,

              float2,

              binary,

              omap,

              pairs,

              set,

              intTime,

              floatTime,

              timestamp];



              // node_modules/yaml/browser/dist/schema/tags.js

              var schemas = /* @__PURE__ */new Map([

              [\"core\", schema],

              [\"failsafe\", [map, seq, string]],

              [\"json\", schema2],

              [\"yaml11\", schema3],

              [\"yaml-1.1\", schema3]]

              );

              var tagsByName = {

              \  binary,

              \  bool: boolTag,

              \  float,

              \  floatExp,

              \  floatNaN,

              \  floatTime,

              \  int,

              \  intHex,

              \  intOct,

              \  intTime,

              \  map,

              \  null: nullTag,

              \  omap,

              \  pairs,

              \  seq,

              \  set,

              \  timestamp

              };

              var coreKnownTags = {

              \  \"tag:yaml.org,2002:binary\": binary,

              \  \"tag:yaml.org,2002:omap\": omap,

              \  \"tag:yaml.org,2002:pairs\": pairs,

              \  \"tag:yaml.org,2002:set\": set,

              \  \"tag:yaml.org,2002:timestamp\": timestamp

              };

              function getTags(customTags, schemaName) {

              \  let tags = schemas.get(schemaName);

              \  if (!tags) {

              \    if (Array.isArray(customTags))

              \    tags = [];else

              \    {

              \      const keys = Array.from(schemas.keys()).filter((key) => key
              !== \"yaml11\").map((key) => JSON.stringify(key)).join(\", \");

              \      throw new Error(`Unknown schema \"${schemaName}\"; use one
              of ${keys} or define customTags array`);

              \    }

              \  }

              \  if (Array.isArray(customTags)) {

              \    for (const tag of customTags)

              \    tags = tags.concat(tag);

              \  } else if (typeof customTags === \"function\") {

              \    tags = customTags(tags.slice());

              \  }

              \  return tags.map((tag) => {

              \    if (typeof tag !== \"string\")

              \    return tag;

              \    const tagObj = tagsByName[tag];

              \    if (tagObj)

              \    return tagObj;

              \    const keys = Object.keys(tagsByName).map((key) =>
              JSON.stringify(key)).join(\", \");

              \    throw new Error(`Unknown custom tag \"${tag}\"; use one of
              ${keys}`);

              \  });

              }


              // node_modules/yaml/browser/dist/schema/Schema.js

              var sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key >
              b.key ? 1 : 0;

              var Schema = class _Schema {

              \  constructor({ compat, customTags, merge, resolveKnownTags,
              schema: schema4, sortMapEntries, toStringDefaults }) {

              \    this.compat = Array.isArray(compat) ? getTags(compat,
              \"compat\") : compat ? getTags(null, compat) : null;

              \    this.merge = !!merge;

              \    this.name = typeof schema4 === \"string\" && schema4 ||
              \"core\";

              \    this.knownTags = resolveKnownTags ? coreKnownTags : {};

              \    this.tags = getTags(customTags, this.name);

              \    this.toStringOptions = toStringDefaults != null ?
              toStringDefaults : null;

              \    Object.defineProperty(this, MAP, { value: map });

              \    Object.defineProperty(this, SCALAR, { value: string });

              \    Object.defineProperty(this, SEQ, { value: seq });

              \    this.sortMapEntries = typeof sortMapEntries === \"function\"
              ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey :
              null;

              \  }

              \  clone() {

              \    const copy = Object.create(_Schema.prototype,
              Object.getOwnPropertyDescriptors(this));

              \    copy.tags = this.tags.slice();

              \    return copy;

              \  }

              };


              // node_modules/yaml/browser/dist/stringify/stringifyDocument.js

              function stringifyDocument(doc, options) {

              \  var _a;

              \  const lines = [];

              \  let hasDirectives = options.directives === true;

              \  if (options.directives !== false && doc.directives) {

              \    const dir = doc.directives.toString(doc);

              \    if (dir) {

              \      lines.push(dir);

              \      hasDirectives = true;

              \    } else if (doc.directives.docStart)

              \    hasDirectives = true;

              \  }

              \  if (hasDirectives)

              \  lines.push(\"---\");

              \  const ctx = createStringifyContext(doc, options);

              \  const { commentString } = ctx.options;

              \  if (doc.commentBefore) {

              \    if (lines.length !== 1)

              \    lines.unshift(\"\");

              \    const cs = commentString(doc.commentBefore);

              \    lines.unshift(indentComment(cs, \"\"));

              \  }

              \  let chompKeep = false;

              \  let contentComment = null;

              \  if (doc.contents) {

              \    if (isNode(doc.contents)) {

              \      if (doc.contents.spaceBefore && hasDirectives)

              \      lines.push(\"\");

              \      if (doc.contents.commentBefore) {

              \        const cs = commentString(doc.contents.commentBefore);

              \        lines.push(indentComment(cs, \"\"));

              \      }

              \      ctx.forceBlockIndent = !!doc.comment;

              \      contentComment = doc.contents.comment;

              \    }

              \    const onChompKeep = contentComment ? void 0 : () => chompKeep
              = true;

              \    let body = stringify(doc.contents, ctx, () => contentComment
              = null, onChompKeep);

              \    if (contentComment)

              \    body += lineComment(body, \"\",
              commentString(contentComment));

              \    if ((body[0] === \"|\" || body[0] === \">\") &&
              lines[lines.length - 1] === \"---\") {

              \      lines[lines.length - 1] = `--- ${body}`;

              \    } else

              \    lines.push(body);

              \  } else {

              \    lines.push(stringify(doc.contents, ctx));

              \  }

              \  if ((_a = doc.directives) == null ? void 0 : _a.docEnd) {

              \    if (doc.comment) {

              \      const cs = commentString(doc.comment);

              \      if (cs.includes(\"\\n\")) {

              \        lines.push(\"...\");

              \        lines.push(indentComment(cs, \"\"));

              \      } else {

              \        lines.push(`... ${cs}`);

              \      }

              \    } else {

              \      lines.push(\"...\");

              \    }

              \  } else {

              \    let dc = doc.comment;

              \    if (dc && chompKeep)

              \    dc = dc.replace(/^\\n+/, \"\");

              \    if (dc) {

              \      if ((!chompKeep || contentComment) && lines[lines.length -
              1] !== \"\")

              \      lines.push(\"\");

              \      lines.push(indentComment(commentString(dc), \"\"));

              \    }

              \  }

              \  return lines.join(\"\\n\") + \"\\n\";

              }


              // node_modules/yaml/browser/dist/doc/Document.js

              var Document = class _Document {

              \  constructor(value, replacer, options) {

              \    this.commentBefore = null;

              \    this.comment = null;

              \    this.errors = [];

              \    this.warnings = [];

              \    Object.defineProperty(this, NODE_TYPE, { value: DOC });

              \    let _replacer = null;

              \    if (typeof replacer === \"function\" ||
              Array.isArray(replacer)) {

              \      _replacer = replacer;

              \    } else if (options === void 0 && replacer) {

              \      options = replacer;

              \      replacer = void 0;

              \    }

              \    const opt = Object.assign({

              \      intAsBigInt: false,

              \      keepSourceTokens: false,

              \      logLevel: \"warn\",

              \      prettyErrors: true,

              \      strict: true,

              \      uniqueKeys: true,

              \      version: \"1.2\"

              \    }, options);

              \    this.options = opt;

              \    let { version } = opt;

              \    if (options == null ? void 0 : options._directives) {

              \      this.directives = options._directives.atDocument();

              \      if (this.directives.yaml.explicit)

              \      version = this.directives.yaml.version;

              \    } else

              \    this.directives = new Directives({ version });

              \    this.setSchema(version, options);

              \    this.contents = value === void 0 ? null :
              this.createNode(value, _replacer, options);

              \  }

              \  /**

              \   * Create a deep copy of this Document and its contents.

              \   *

              \   * Custom Node values that inherit from `Object` still refer to
              their original instances.

              \   */

              \  clone() {

              \    const copy = Object.create(_Document.prototype, {

              \      [NODE_TYPE]: { value: DOC }

              \    });

              \    copy.commentBefore = this.commentBefore;

              \    copy.comment = this.comment;

              \    copy.errors = this.errors.slice();

              \    copy.warnings = this.warnings.slice();

              \    copy.options = Object.assign({}, this.options);

              \    if (this.directives)

              \    copy.directives = this.directives.clone();

              \    copy.schema = this.schema.clone();

              \    copy.contents = isNode(this.contents) ?
              this.contents.clone(copy.schema) : this.contents;

              \    if (this.range)

              \    copy.range = this.range.slice();

              \    return copy;

              \  }

              \  /** Adds a value to the document. */

              \  add(value) {

              \    if (assertCollection(this.contents))

              \    this.contents.add(value);

              \  }

              \  /** Adds a value to the document. */

              \  addIn(path, value) {

              \    if (assertCollection(this.contents))

              \    this.contents.addIn(path, value);

              \  }

              \  /**

              \   * Create a new `Alias` node, ensuring that the target `node`
              has the required anchor.

              \   *

              \   * If `node` already has an anchor, `name` is ignored.

              \   * Otherwise, the `node.anchor` value will be set to `name`,

              \   * or if an anchor with that name is already present in the
              document,

              \   * `name` will be used as a prefix for a new unique anchor.

              \   * If `name` is undefined, the generated anchor will use 'a' as
              a prefix.

              \   */

              \  createAlias(node, name) {

              \    if (!node.anchor) {

              \      const prev = anchorNames(this);

              \      node.anchor = // eslint-disable-next-line
              @typescript-eslint/prefer-nullish-coalescing

              \      !name || prev.has(name) ? findNewAnchor(name || \"a\",
              prev) : name;

              \    }

              \    return new Alias(node.anchor);

              \  }

              \  createNode(value, replacer, options) {

              \    let _replacer = void 0;

              \    if (typeof replacer === \"function\") {

              \      value = replacer.call({ \"\": value }, \"\", value);

              \      _replacer = replacer;

              \    } else if (Array.isArray(replacer)) {

              \      const keyToStr = (v) => typeof v === \"number\" || v
              instanceof String || v instanceof Number;

              \      const asStr = replacer.filter(keyToStr).map(String);

              \      if (asStr.length > 0)

              \      replacer = replacer.concat(asStr);

              \      _replacer = replacer;

              \    } else if (options === void 0 && replacer) {

              \      options = replacer;

              \      replacer = void 0;

              \    }

              \    const { aliasDuplicateObjects, anchorPrefix, flow,
              keepUndefined, onTagObj, tag } = options != null ? options : {};

              \    const { onAnchor, setAnchors, sourceObjects } =
              createNodeAnchors(

              \      this,

              \      // eslint-disable-next-line
              @typescript-eslint/prefer-nullish-coalescing

              \      anchorPrefix || \"a\"

              \    );

              \    const ctx = {

              \      aliasDuplicateObjects: aliasDuplicateObjects != null ?
              aliasDuplicateObjects : true,

              \      keepUndefined: keepUndefined != null ? keepUndefined :
              false,

              \      onAnchor,

              \      onTagObj,

              \      replacer: _replacer,

              \      schema: this.schema,

              \      sourceObjects

              \    };

              \    const node = createNode(value, tag, ctx);

              \    if (flow && isCollection(node))

              \    node.flow = true;

              \    setAnchors();

              \    return node;

              \  }

              \  /**

              \   * Convert a key and a value into a `Pair` using the current
              schema,

              \   * recursively wrapping all values as `Scalar` or `Collection`
              nodes.

              \   */

              \  createPair(key, value, options = {}) {

              \    const k = this.createNode(key, null, options);

              \    const v = this.createNode(value, null, options);

              \    return new Pair(k, v);

              \  }

              \  /**

              \   * Removes a value from the document.

              \   * @returns `true` if the item was found and removed.

              \   */

              \  delete(key) {

              \    return assertCollection(this.contents) ?
              this.contents.delete(key) : false;

              \  }

              \  /**

              \   * Removes a value from the document.

              \   * @returns `true` if the item was found and removed.

              \   */

              \  deleteIn(path) {

              \    if (isEmptyPath(path)) {

              \      if (this.contents == null)

              \      return false;

              \      this.contents = null;

              \      return true;

              \    }

              \    return assertCollection(this.contents) ?
              this.contents.deleteIn(path) : false;

              \  }

              \  /**

              \   * Returns item at `key`, or `undefined` if not found. By
              default unwraps

              \   * scalar values from their surrounding node; to disable set
              `keepScalar` to

              \   * `true` (collections are always returned intact).

              \   */

              \  get(key, keepScalar) {

              \    return isCollection(this.contents) ? this.contents.get(key,
              keepScalar) : void 0;

              \  }

              \  /**

              \   * Returns item at `path`, or `undefined` if not found. By
              default unwraps

              \   * scalar values from their surrounding node; to disable set
              `keepScalar` to

              \   * `true` (collections are always returned intact).

              \   */

              \  getIn(path, keepScalar) {

              \    if (isEmptyPath(path))

              \    return !keepScalar && isScalar(this.contents) ?
              this.contents.value : this.contents;

              \    return isCollection(this.contents) ?
              this.contents.getIn(path, keepScalar) : void 0;

              \  }

              \  /**

              \   * Checks if the document includes a value with the key `key`.

              \   */

              \  has(key) {

              \    return isCollection(this.contents) ? this.contents.has(key) :
              false;

              \  }

              \  /**

              \   * Checks if the document includes a value at `path`.

              \   */

              \  hasIn(path) {

              \    if (isEmptyPath(path))

              \    return this.contents !== void 0;

              \    return isCollection(this.contents) ?
              this.contents.hasIn(path) : false;

              \  }

              \  /**

              \   * Sets a value in this document. For `!!set`, `value` needs to
              be a

              \   * boolean to add/remove the item from the set.

              \   */

              \  set(key, value) {

              \    if (this.contents == null) {

              \      this.contents = collectionFromPath(this.schema, [key],
              value);

              \    } else if (assertCollection(this.contents)) {

              \      this.contents.set(key, value);

              \    }

              \  }

              \  /**

              \   * Sets a value in this document. For `!!set`, `value` needs to
              be a

              \   * boolean to add/remove the item from the set.

              \   */

              \  setIn(path, value) {

              \    if (isEmptyPath(path)) {

              \      this.contents = value;

              \    } else if (this.contents == null) {

              \      this.contents = collectionFromPath(this.schema,
              Array.from(path), value);

              \    } else if (assertCollection(this.contents)) {

              \      this.contents.setIn(path, value);

              \    }

              \  }

              \  /**

              \   * Change the YAML version and schema used by the document.

              \   * A `null` version disables support for directives, explicit
              tags, anchors, and aliases.

              \   * It also requires the `schema` option to be given as a
              `Schema` instance value.

              \   *

              \   * Overrides all previously set schema options.

              \   */

              \  setSchema(version, options = {}) {

              \    if (typeof version === \"number\")

              \    version = String(version);

              \    let opt;

              \    switch (version) {

              \      case \"1.1\":

              \        if (this.directives)

              \        this.directives.yaml.version = \"1.1\";else


              \        this.directives = new Directives({ version: \"1.1\" });

              \        opt = { merge: true, resolveKnownTags: false, schema:
              \"yaml-1.1\" };

              \        break;

              \      case \"1.2\":

              \      case \"next\":

              \        if (this.directives)

              \        this.directives.yaml.version = version;else


              \        this.directives = new Directives({ version });

              \        opt = { merge: false, resolveKnownTags: true, schema:
              \"core\" };

              \        break;

              \      case null:

              \        if (this.directives)

              \        delete this.directives;

              \        opt = null;

              \        break;

              \      default:{

              \          const sv = JSON.stringify(version);

              \          throw new Error(`Expected '1.1', '1.2' or null as first
              argument, but found: ${sv}`);

              \        }

              \    }

              \    if (options.schema instanceof Object)

              \    this.schema = options.schema;else

              \    if (opt)

              \    this.schema = new Schema(Object.assign(opt, options));else


              \    throw new Error(`With a null YAML version, the { schema:
              Schema } option is required`);

              \  }

              \  // json & jsonArg are only used from toJSON()

              \  toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor,
              reviver } = {}) {

              \    const ctx = {

              \      anchors: /* @__PURE__ */new Map(),

              \      doc: this,

              \      keep: !json,

              \      mapAsMap: mapAsMap === true,

              \      mapKeyWarned: false,

              \      maxAliasCount: typeof maxAliasCount === \"number\" ?
              maxAliasCount : 100

              \    };

              \    const res = toJS(this.contents, jsonArg != null ? jsonArg :
              \"\", ctx);

              \    if (typeof onAnchor === \"function\")

              \    for (const { count, res: res2 } of ctx.anchors.values())

              \    onAnchor(res2, count);

              \    return typeof reviver === \"function\" ?
              applyReviver(reviver, { \"\": res }, \"\", res) : res;

              \  }

              \  /**

              \   * A JSON representation of the document `contents`.

              \   *

              \   * @param jsonArg Used by `JSON.stringify` to indicate the
              array index or

              \   *   property name.

              \   */

              \  toJSON(jsonArg, onAnchor) {

              \    return this.toJS({ json: true, jsonArg, mapAsMap: false,
              onAnchor });

              \  }

              \  /** A YAML representation of the document. */

              \  toString(options = {}) {

              \    if (this.errors.length > 0)

              \    throw new Error(\"Document with errors cannot be
              stringified\");

              \    if (\"indent\" in options &&
              (!Number.isInteger(options.indent) || Number(options.indent) <=
              0)) {

              \      const s = JSON.stringify(options.indent);

              \      throw new Error(`\"indent\" option must be a positive
              integer, not ${s}`);

              \    }

              \    return stringifyDocument(this, options);

              \  }

              };

              function assertCollection(contents) {

              \  if (isCollection(contents))

              \  return true;

              \  throw new Error(\"Expected a YAML collection as document
              contents\");

              }


              // node_modules/yaml/browser/dist/errors.js

              var YAMLError = class extends Error {

              \  constructor(name, pos, code, message) {

              \    super();

              \    this.name = name;

              \    this.code = code;

              \    this.message = message;

              \    this.pos = pos;

              \  }

              };

              var YAMLParseError = class extends YAMLError {

              \  constructor(pos, code, message) {

              \    super(\"YAMLParseError\", pos, code, message);

              \  }

              };

              var YAMLWarning = class extends YAMLError {

              \  constructor(pos, code, message) {

              \    super(\"YAMLWarning\", pos, code, message);

              \  }

              };

              var prettifyError = (src, lc) => (error) => {

              \  if (error.pos[0] === -1)

              \  return;

              \  error.linePos = error.pos.map((pos) => lc.linePos(pos));

              \  const { line, col } = error.linePos[0];

              \  error.message += ` at line ${line}, column ${col}`;

              \  let ci = col - 1;

              \  let lineStr = src.substring(lc.lineStarts[line - 1],
              lc.lineStarts[line]).replace(/[\\n\\r]+$/, \"\");

              \  if (ci >= 60 && lineStr.length > 80) {

              \    const trimStart = Math.min(ci - 39, lineStr.length - 79);

              \    lineStr = \"\\u2026\" + lineStr.substring(trimStart);

              \    ci -= trimStart - 1;

              \  }

              \  if (lineStr.length > 80)

              \  lineStr = lineStr.substring(0, 79) + \"\\u2026\";

              \  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {

              \    let prev = src.substring(lc.lineStarts[line - 2],
              lc.lineStarts[line - 1]);

              \    if (prev.length > 80)

              \    prev = prev.substring(0, 79) + \"\\u2026\\n\";

              \    lineStr = prev + lineStr;

              \  }

              \  if (/[^ ]/.test(lineStr)) {

              \    let count = 1;

              \    const end = error.linePos[1];

              \    if (end && end.line === line && end.col > col) {

              \      count = Math.max(1, Math.min(end.col - col, 80 - ci));

              \    }

              \    const pointer = \" \".repeat(ci) + \"^\".repeat(count);

              \    error.message += `:


              ${lineStr}

              ${pointer}

              `;

              \  }

              };


              // node_modules/yaml/browser/dist/compose/resolve-props.js

              function resolveProps(tokens, { flow, indicator, next, offset,
              onError, parentIndent, startOnNewline }) {

              \  let spaceBefore = false;

              \  let atNewline = startOnNewline;

              \  let hasSpace = startOnNewline;

              \  let comment = \"\";

              \  let commentSep = \"\";

              \  let hasNewline = false;

              \  let hasNewlineAfterProp = false;

              \  let reqSpace = false;

              \  let tab = null;

              \  let anchor = null;

              \  let tag = null;

              \  let comma = null;

              \  let found = null;

              \  let start = null;

              \  for (const token of tokens) {

              \    if (reqSpace) {

              \      if (token.type !== \"space\" && token.type !== \"newline\"
              && token.type !== \"comma\")

              \      onError(token.offset, \"MISSING_CHAR\", \"Tags and anchors
              must be separated from the next token by white space\");

              \      reqSpace = false;

              \    }

              \    if (tab) {

              \      if (atNewline && token.type !== \"comment\" && token.type
              !== \"newline\") {

              \        onError(tab, \"TAB_AS_INDENT\", \"Tabs are not allowed as
              indentation\");

              \      }

              \      tab = null;

              \    }

              \    switch (token.type) {

              \      case \"space\":

              \        if (!flow && (indicator !== \"doc-start\" || (next ==
              null ? void 0 : next.type) !== \"flow-collection\") &&
              token.source.includes(\"\t\")) {

              \          tab = token;

              \        }

              \        hasSpace = true;

              \        break;

              \      case \"comment\":{

              \          if (!hasSpace)

              \          onError(token, \"MISSING_CHAR\", \"Comments must be
              separated from other tokens by white space characters\");

              \          const cb = token.source.substring(1) || \" \";

              \          if (!comment)

              \          comment = cb;else


              \          comment += commentSep + cb;

              \          commentSep = \"\";

              \          atNewline = false;

              \          break;

              \        }

              \      case \"newline\":

              \        if (atNewline) {

              \          if (comment)

              \          comment += token.source;else


              \          spaceBefore = true;

              \        } else

              \        commentSep += token.source;

              \        atNewline = true;

              \        hasNewline = true;

              \        if (anchor || tag)

              \        hasNewlineAfterProp = true;

              \        hasSpace = true;

              \        break;

              \      case \"anchor\":

              \        if (anchor)

              \        onError(token, \"MULTIPLE_ANCHORS\", \"A node can have at
              most one anchor\");

              \        if (token.source.endsWith(\":\"))

              \        onError(token.offset + token.source.length - 1,
              \"BAD_ALIAS\", \"Anchor ending in : is ambiguous\", true);

              \        anchor = token;

              \        if (start === null)

              \        start = token.offset;

              \        atNewline = false;

              \        hasSpace = false;

              \        reqSpace = true;

              \        break;

              \      case \"tag\":{

              \          if (tag)

              \          onError(token, \"MULTIPLE_TAGS\", \"A node can have at
              most one tag\");

              \          tag = token;

              \          if (start === null)

              \          start = token.offset;

              \          atNewline = false;

              \          hasSpace = false;

              \          reqSpace = true;

              \          break;

              \        }

              \      case indicator:

              \        if (anchor || tag)

              \        onError(token, \"BAD_PROP_ORDER\", `Anchors and tags must
              be after the ${token.source} indicator`);

              \        if (found)

              \        onError(token, \"UNEXPECTED_TOKEN\", `Unexpected
              ${token.source} in ${flow != null ? flow : \"collection\"}`);

              \        found = token;

              \        atNewline = indicator === \"seq-item-ind\" || indicator
              === \"explicit-key-ind\";

              \        hasSpace = false;

              \        break;

              \      case \"comma\":

              \        if (flow) {

              \          if (comma)

              \          onError(token, \"UNEXPECTED_TOKEN\", `Unexpected , in
              ${flow}`);

              \          comma = token;

              \          atNewline = false;

              \          hasSpace = false;

              \          break;

              \        }

              \      default:

              \        onError(token, \"UNEXPECTED_TOKEN\", `Unexpected
              ${token.type} token`);

              \        atNewline = false;

              \        hasSpace = false;

              \    }

              \  }

              \  const last = tokens[tokens.length - 1];

              \  const end = last ? last.offset + last.source.length : offset;

              \  if (reqSpace && next && next.type !== \"space\" && next.type
              !== \"newline\" && next.type !== \"comma\" && (next.type !==
              \"scalar\" || next.source !== \"\")) {

              \    onError(next.offset, \"MISSING_CHAR\", \"Tags and anchors
              must be separated from the next token by white space\");

              \  }

              \  if (tab && (atNewline && tab.indent <= parentIndent || (next ==
              null ? void 0 : next.type) === \"block-map\" || (next == null ?
              void 0 : next.type) === \"block-seq\"))

              \  onError(tab, \"TAB_AS_INDENT\", \"Tabs are not allowed as
              indentation\");

              \  return {

              \    comma,

              \    found,

              \    spaceBefore,

              \    comment,

              \    hasNewline,

              \    hasNewlineAfterProp,

              \    anchor,

              \    tag,

              \    end,

              \    start: start != null ? start : end

              \  };

              }


              // node_modules/yaml/browser/dist/compose/util-contains-newline.js

              function containsNewline(key) {

              \  if (!key)

              \  return null;

              \  switch (key.type) {

              \    case \"alias\":

              \    case \"scalar\":

              \    case \"double-quoted-scalar\":

              \    case \"single-quoted-scalar\":

              \      if (key.source.includes(\"\\n\"))

              \      return true;

              \      if (key.end) {

              \        for (const st of key.end)

              \        if (st.type === \"newline\")

              \        return true;

              \      }

              \      return false;

              \    case \"flow-collection\":

              \      for (const it of key.items) {

              \        for (const st of it.start)

              \        if (st.type === \"newline\")

              \        return true;

              \        if (it.sep) {

              \          for (const st of it.sep)

              \          if (st.type === \"newline\")

              \          return true;

              \        }

              \        if (containsNewline(it.key) || containsNewline(it.value))

              \        return true;

              \      }

              \      return false;

              \    default:

              \      return true;

              \  }

              }


              //
              node_modules/yaml/browser/dist/compose/util-flow-indent-check.js

              function flowIndentCheck(indent, fc, onError) {

              \  if ((fc == null ? void 0 : fc.type) === \"flow-collection\") {

              \    const end = fc.end[0];

              \    if (end.indent === indent && (end.source === \"]\" ||
              end.source === \"}\") && containsNewline(fc)) {

              \      const msg = \"Flow end indicator should be more indented
              than parent\";

              \      onError(end, \"BAD_INDENT\", msg, true);

              \    }

              \  }

              }


              // node_modules/yaml/browser/dist/compose/util-map-includes.js

              function mapIncludes(ctx, items, search) {

              \  const { uniqueKeys } = ctx.options;

              \  if (uniqueKeys === false)

              \  return false;

              \  const isEqual = typeof uniqueKeys === \"function\" ? uniqueKeys
              : (a, b) => a === b || isScalar(a) && isScalar(b) && a.value ===
              b.value && !(a.value === \"<<\" && ctx.schema.merge);

              \  return items.some((pair) => isEqual(pair.key, search));

              }


              // node_modules/yaml/browser/dist/compose/resolve-block-map.js

              var startColMsg = \"All mapping items must start at the same
              column\";

              function resolveBlockMap({ composeNode: composeNode2,
              composeEmptyNode: composeEmptyNode2 }, ctx, bm, onError, tag) {

              \  var _a, _b;

              \  const NodeClass = (_a = tag == null ? void 0 : tag.nodeClass)
              != null ? _a : YAMLMap;

              \  const map2 = new NodeClass(ctx.schema);

              \  if (ctx.atRoot)

              \  ctx.atRoot = false;

              \  let offset = bm.offset;

              \  let commentEnd = null;

              \  for (const collItem of bm.items) {

              \    const { start, key, sep, value } = collItem;

              \    const keyProps = resolveProps(start, {

              \      indicator: \"explicit-key-ind\",

              \      next: key != null ? key : sep == null ? void 0 : sep[0],

              \      offset,

              \      onError,

              \      parentIndent: bm.indent,

              \      startOnNewline: true

              \    });

              \    const implicitKey = !keyProps.found;

              \    if (implicitKey) {

              \      if (key) {

              \        if (key.type === \"block-seq\")

              \        onError(offset, \"BLOCK_AS_IMPLICIT_KEY\", \"A block
              sequence may not be used as an implicit map key\");else

              \        if (\"indent\" in key && key.indent !== bm.indent)

              \        onError(offset, \"BAD_INDENT\", startColMsg);

              \      }

              \      if (!keyProps.anchor && !keyProps.tag && !sep) {

              \        commentEnd = keyProps.end;

              \        if (keyProps.comment) {

              \          if (map2.comment)

              \          map2.comment += \"\\n\" + keyProps.comment;else


              \          map2.comment = keyProps.comment;

              \        }

              \        continue;

              \      }

              \      if (keyProps.hasNewlineAfterProp || containsNewline(key)) {

              \        onError(key != null ? key : start[start.length - 1],
              \"MULTILINE_IMPLICIT_KEY\", \"Implicit keys need to be on a single
              line\");

              \      }

              \    } else if (((_b = keyProps.found) == null ? void 0 :
              _b.indent) !== bm.indent) {

              \      onError(offset, \"BAD_INDENT\", startColMsg);

              \    }

              \    const keyStart = keyProps.end;

              \    const keyNode = key ? composeNode2(ctx, key, keyProps,
              onError) : composeEmptyNode2(ctx, keyStart, start, null, keyProps,
              onError);

              \    if (ctx.schema.compat)

              \    flowIndentCheck(bm.indent, key, onError);

              \    if (mapIncludes(ctx, map2.items, keyNode))

              \    onError(keyStart, \"DUPLICATE_KEY\", \"Map keys must be
              unique\");

              \    const valueProps = resolveProps(sep != null ? sep : [], {

              \      indicator: \"map-value-ind\",

              \      next: value,

              \      offset: keyNode.range[2],

              \      onError,

              \      parentIndent: bm.indent,

              \      startOnNewline: !key || key.type === \"block-scalar\"

              \    });

              \    offset = valueProps.end;

              \    if (valueProps.found) {

              \      if (implicitKey) {

              \        if ((value == null ? void 0 : value.type) ===
              \"block-map\" && !valueProps.hasNewline)

              \        onError(offset, \"BLOCK_AS_IMPLICIT_KEY\", \"Nested
              mappings are not allowed in compact mappings\");

              \        if (ctx.options.strict && keyProps.start <
              valueProps.found.offset - 1024)

              \        onError(keyNode.range, \"KEY_OVER_1024_CHARS\", \"The :
              indicator must be at most 1024 chars after the start of an
              implicit block mapping key\");

              \      }

              \      const valueNode = value ? composeNode2(ctx, value,
              valueProps, onError) : composeEmptyNode2(ctx, offset, sep, null,
              valueProps, onError);

              \      if (ctx.schema.compat)

              \      flowIndentCheck(bm.indent, value, onError);

              \      offset = valueNode.range[2];

              \      const pair = new Pair(keyNode, valueNode);

              \      if (ctx.options.keepSourceTokens)

              \      pair.srcToken = collItem;

              \      map2.items.push(pair);

              \    } else {

              \      if (implicitKey)

              \      onError(keyNode.range, \"MISSING_CHAR\", \"Implicit map
              keys need to be followed by map values\");

              \      if (valueProps.comment) {

              \        if (keyNode.comment)

              \        keyNode.comment += \"\\n\" + valueProps.comment;else


              \        keyNode.comment = valueProps.comment;

              \      }

              \      const pair = new Pair(keyNode);

              \      if (ctx.options.keepSourceTokens)

              \      pair.srcToken = collItem;

              \      map2.items.push(pair);

              \    }

              \  }

              \  if (commentEnd && commentEnd < offset)

              \  onError(commentEnd, \"IMPOSSIBLE\", \"Map comment with trailing
              content\");

              \  map2.range = [bm.offset, offset, commentEnd != null ?
              commentEnd : offset];

              \  return map2;

              }


              // node_modules/yaml/browser/dist/compose/resolve-block-seq.js

              function resolveBlockSeq({ composeNode: composeNode2,
              composeEmptyNode: composeEmptyNode2 }, ctx, bs, onError, tag) {

              \  var _a;

              \  const NodeClass = (_a = tag == null ? void 0 : tag.nodeClass)
              != null ? _a : YAMLSeq;

              \  const seq2 = new NodeClass(ctx.schema);

              \  if (ctx.atRoot)

              \  ctx.atRoot = false;

              \  let offset = bs.offset;

              \  let commentEnd = null;

              \  for (const { start, value } of bs.items) {

              \    const props = resolveProps(start, {

              \      indicator: \"seq-item-ind\",

              \      next: value,

              \      offset,

              \      onError,

              \      parentIndent: bs.indent,

              \      startOnNewline: true

              \    });

              \    if (!props.found) {

              \      if (props.anchor || props.tag || value) {

              \        if (value && value.type === \"block-seq\")

              \        onError(props.end, \"BAD_INDENT\", \"All sequence items
              must start at the same column\");else


              \        onError(offset, \"MISSING_CHAR\", \"Sequence item without
              - indicator\");

              \      } else {

              \        commentEnd = props.end;

              \        if (props.comment)

              \        seq2.comment = props.comment;

              \        continue;

              \      }

              \    }

              \    const node = value ? composeNode2(ctx, value, props, onError)
              : composeEmptyNode2(ctx, props.end, start, null, props, onError);

              \    if (ctx.schema.compat)

              \    flowIndentCheck(bs.indent, value, onError);

              \    offset = node.range[2];

              \    seq2.items.push(node);

              \  }

              \  seq2.range = [bs.offset, offset, commentEnd != null ?
              commentEnd : offset];

              \  return seq2;

              }


              // node_modules/yaml/browser/dist/compose/resolve-end.js

              function resolveEnd(end, offset, reqSpace, onError) {

              \  let comment = \"\";

              \  if (end) {

              \    let hasSpace = false;

              \    let sep = \"\";

              \    for (const token of end) {

              \      const { source, type } = token;

              \      switch (type) {

              \        case \"space\":

              \          hasSpace = true;

              \          break;

              \        case \"comment\":{

              \            if (reqSpace && !hasSpace)

              \            onError(token, \"MISSING_CHAR\", \"Comments must be
              separated from other tokens by white space characters\");

              \            const cb = source.substring(1) || \" \";

              \            if (!comment)

              \            comment = cb;else


              \            comment += sep + cb;

              \            sep = \"\";

              \            break;

              \          }

              \        case \"newline\":

              \          if (comment)

              \          sep += source;

              \          hasSpace = true;

              \          break;

              \        default:

              \          onError(token, \"UNEXPECTED_TOKEN\", `Unexpected
              ${type} at node end`);

              \      }

              \      offset += source.length;

              \    }

              \  }

              \  return { comment, offset };

              }


              //
              node_modules/yaml/browser/dist/compose/resolve-flow-collection.js

              var blockMsg = \"Block collections are not allowed within flow
              collections\";

              var isBlock = (token) => token && (token.type === \"block-map\" ||
              token.type === \"block-seq\");

              function resolveFlowCollection({ composeNode: composeNode2,
              composeEmptyNode: composeEmptyNode2 }, ctx, fc, onError, tag) {

              \  var _a, _b;

              \  const isMap2 = fc.start.source === \"{\";

              \  const fcName = isMap2 ? \"flow map\" : \"flow sequence\";

              \  const NodeClass = (_a = tag == null ? void 0 : tag.nodeClass)
              != null ? _a : isMap2 ? YAMLMap : YAMLSeq;

              \  const coll = new NodeClass(ctx.schema);

              \  coll.flow = true;

              \  const atRoot = ctx.atRoot;

              \  if (atRoot)

              \  ctx.atRoot = false;

              \  let offset = fc.offset + fc.start.source.length;

              \  for (let i = 0; i < fc.items.length; ++i) {

              \    const collItem = fc.items[i];

              \    const { start, key, sep, value } = collItem;

              \    const props = resolveProps(start, {

              \      flow: fcName,

              \      indicator: \"explicit-key-ind\",

              \      next: key != null ? key : sep == null ? void 0 : sep[0],

              \      offset,

              \      onError,

              \      parentIndent: fc.indent,

              \      startOnNewline: false

              \    });

              \    if (!props.found) {

              \      if (!props.anchor && !props.tag && !sep && !value) {

              \        if (i === 0 && props.comma)

              \        onError(props.comma, \"UNEXPECTED_TOKEN\", `Unexpected ,
              in ${fcName}`);else

              \        if (i < fc.items.length - 1)

              \        onError(props.start, \"UNEXPECTED_TOKEN\", `Unexpected
              empty item in ${fcName}`);

              \        if (props.comment) {

              \          if (coll.comment)

              \          coll.comment += \"\\n\" + props.comment;else


              \          coll.comment = props.comment;

              \        }

              \        offset = props.end;

              \        continue;

              \      }

              \      if (!isMap2 && ctx.options.strict && containsNewline(key))

              \      onError(

              \        key,

              \        // checked by containsNewline()

              \        \"MULTILINE_IMPLICIT_KEY\",

              \        \"Implicit keys of flow sequence pairs need to be on a
              single line\"

              \      );

              \    }

              \    if (i === 0) {

              \      if (props.comma)

              \      onError(props.comma, \"UNEXPECTED_TOKEN\", `Unexpected , in
              ${fcName}`);

              \    } else {

              \      if (!props.comma)

              \      onError(props.start, \"MISSING_CHAR\", `Missing , between
              ${fcName} items`);

              \      if (props.comment) {

              \        let prevItemComment = \"\";

              \        loop: for (const st of start) {

              \          switch (st.type) {

              \            case \"comma\":

              \            case \"space\":

              \              break;

              \            case \"comment\":

              \              prevItemComment = st.source.substring(1);

              \              break loop;

              \            default:

              \              break loop;

              \          }

              \        }

              \        if (prevItemComment) {

              \          let prev = coll.items[coll.items.length - 1];

              \          if (isPair(prev))

              \          prev = (_b = prev.value) != null ? _b : prev.key;

              \          if (prev.comment)

              \          prev.comment += \"\\n\" + prevItemComment;else


              \          prev.comment = prevItemComment;

              \          props.comment =
              props.comment.substring(prevItemComment.length + 1);

              \        }

              \      }

              \    }

              \    if (!isMap2 && !sep && !props.found) {

              \      const valueNode = value ? composeNode2(ctx, value, props,
              onError) : composeEmptyNode2(ctx, props.end, sep, null, props,
              onError);

              \      coll.items.push(valueNode);

              \      offset = valueNode.range[2];

              \      if (isBlock(value))

              \      onError(valueNode.range, \"BLOCK_IN_FLOW\", blockMsg);

              \    } else {

              \      const keyStart = props.end;

              \      const keyNode = key ? composeNode2(ctx, key, props,
              onError) : composeEmptyNode2(ctx, keyStart, start, null, props,
              onError);

              \      if (isBlock(key))

              \      onError(keyNode.range, \"BLOCK_IN_FLOW\", blockMsg);

              \      const valueProps = resolveProps(sep != null ? sep : [], {

              \        flow: fcName,

              \        indicator: \"map-value-ind\",

              \        next: value,

              \        offset: keyNode.range[2],

              \        onError,

              \        parentIndent: fc.indent,

              \        startOnNewline: false

              \      });

              \      if (valueProps.found) {

              \        if (!isMap2 && !props.found && ctx.options.strict) {

              \          if (sep)

              \          for (const st of sep) {

              \            if (st === valueProps.found)

              \            break;

              \            if (st.type === \"newline\") {

              \              onError(st, \"MULTILINE_IMPLICIT_KEY\", \"Implicit
              keys of flow sequence pairs need to be on a single line\");

              \              break;

              \            }

              \          }

              \          if (props.start < valueProps.found.offset - 1024)

              \          onError(valueProps.found, \"KEY_OVER_1024_CHARS\",
              \"The : indicator must be at most 1024 chars after the start of an
              implicit flow sequence key\");

              \        }

              \      } else if (value) {

              \        if (\"source\" in value && value.source &&
              value.source[0] === \":\")

              \        onError(value, \"MISSING_CHAR\", `Missing space after :
              in ${fcName}`);else


              \        onError(valueProps.start, \"MISSING_CHAR\", `Missing , or
              : between ${fcName} items`);

              \      }

              \      const valueNode = value ? composeNode2(ctx, value,
              valueProps, onError) : valueProps.found ? composeEmptyNode2(ctx,
              valueProps.end, sep, null, valueProps, onError) : null;

              \      if (valueNode) {

              \        if (isBlock(value))

              \        onError(valueNode.range, \"BLOCK_IN_FLOW\", blockMsg);

              \      } else if (valueProps.comment) {

              \        if (keyNode.comment)

              \        keyNode.comment += \"\\n\" + valueProps.comment;else


              \        keyNode.comment = valueProps.comment;

              \      }

              \      const pair = new Pair(keyNode, valueNode);

              \      if (ctx.options.keepSourceTokens)

              \      pair.srcToken = collItem;

              \      if (isMap2) {

              \        const map2 = coll;

              \        if (mapIncludes(ctx, map2.items, keyNode))

              \        onError(keyStart, \"DUPLICATE_KEY\", \"Map keys must be
              unique\");

              \        map2.items.push(pair);

              \      } else {

              \        const map2 = new YAMLMap(ctx.schema);

              \        map2.flow = true;

              \        map2.items.push(pair);

              \        coll.items.push(map2);

              \      }

              \      offset = valueNode ? valueNode.range[2] : valueProps.end;

              \    }

              \  }

              \  const expectedEnd = isMap2 ? \"}\" : \"]\";

              \  const [ce, ...ee] = fc.end;

              \  let cePos = offset;

              \  if (ce && ce.source === expectedEnd)

              \  cePos = ce.offset + ce.source.length;else

              \  {

              \    const name = fcName[0].toUpperCase() + fcName.substring(1);

              \    const msg = atRoot ? `${name} must end with a ${expectedEnd}`
              : `${name} in block collection must be sufficiently indented and
              end with a ${expectedEnd}`;

              \    onError(offset, atRoot ? \"MISSING_CHAR\" : \"BAD_INDENT\",
              msg);

              \    if (ce && ce.source.length !== 1)

              \    ee.unshift(ce);

              \  }

              \  if (ee.length > 0) {

              \    const end = resolveEnd(ee, cePos, ctx.options.strict,
              onError);

              \    if (end.comment) {

              \      if (coll.comment)

              \      coll.comment += \"\\n\" + end.comment;else


              \      coll.comment = end.comment;

              \    }

              \    coll.range = [fc.offset, cePos, end.offset];

              \  } else {

              \    coll.range = [fc.offset, cePos, cePos];

              \  }

              \  return coll;

              }


              // node_modules/yaml/browser/dist/compose/compose-collection.js

              function resolveCollection(CN2, ctx, token, onError, tagName, tag)
              {

              \  const coll = token.type === \"block-map\" ?
              resolveBlockMap(CN2, ctx, token, onError, tag) : token.type ===
              \"block-seq\" ? resolveBlockSeq(CN2, ctx, token, onError, tag) :
              resolveFlowCollection(CN2, ctx, token, onError, tag);

              \  const Coll = coll.constructor;

              \  if (tagName === \"!\" || tagName === Coll.tagName) {

              \    coll.tag = Coll.tagName;

              \    return coll;

              \  }

              \  if (tagName)

              \  coll.tag = tagName;

              \  return coll;

              }

              function composeCollection(CN2, ctx, token, tagToken, onError) {

              \  var _a, _b;

              \  const tagName = !tagToken ? null :
              ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken,
              \"TAG_RESOLVE_FAILED\", msg));

              \  const expType = token.type === \"block-map\" ? \"map\" :
              token.type === \"block-seq\" ? \"seq\" : token.start.source ===
              \"{\" ? \"map\" : \"seq\";

              \  if (!tagToken || !tagName || tagName === \"!\" || tagName ===
              YAMLMap.tagName && expType === \"map\" || tagName ===
              YAMLSeq.tagName && expType === \"seq\" || !expType) {

              \    return resolveCollection(CN2, ctx, token, onError, tagName);

              \  }

              \  let tag = ctx.schema.tags.find((t) => t.tag === tagName &&
              t.collection === expType);

              \  if (!tag) {

              \    const kt = ctx.schema.knownTags[tagName];

              \    if (kt && kt.collection === expType) {

              \      ctx.schema.tags.push(Object.assign({}, kt, { default: false
              }));

              \      tag = kt;

              \    } else {

              \      if (kt == null ? void 0 : kt.collection) {

              \        onError(tagToken, \"BAD_COLLECTION_TYPE\", `${kt.tag}
              used for ${expType} collection, but expects ${kt.collection}`,
              true);

              \      } else {

              \        onError(tagToken, \"TAG_RESOLVE_FAILED\", `Unresolved
              tag: ${tagName}`, true);

              \      }

              \      return resolveCollection(CN2, ctx, token, onError,
              tagName);

              \    }

              \  }

              \  const coll = resolveCollection(CN2, ctx, token, onError,
              tagName, tag);

              \  const res = (_b = (_a = tag.resolve) == null ? void 0 :
              _a.call(tag, coll, (msg) => onError(tagToken,
              \"TAG_RESOLVE_FAILED\", msg), ctx.options)) != null ? _b : coll;

              \  const node = isNode(res) ? res : new Scalar(res);

              \  node.range = coll.range;

              \  node.tag = tagName;

              \  if (tag == null ? void 0 : tag.format)

              \  node.format = tag.format;

              \  return node;

              }


              // node_modules/yaml/browser/dist/compose/resolve-block-scalar.js

              function resolveBlockScalar(ctx, scalar, onError) {

              \  const start = scalar.offset;

              \  const header = parseBlockScalarHeader(scalar,
              ctx.options.strict, onError);

              \  if (!header)

              \  return { value: \"\", type: null, comment: \"\", range: [start,
              start, start] };

              \  const type = header.mode === \">\" ? Scalar.BLOCK_FOLDED :
              Scalar.BLOCK_LITERAL;

              \  const lines = scalar.source ? splitLines(scalar.source) : [];

              \  let chompStart = lines.length;

              \  for (let i = lines.length - 1; i >= 0; --i) {

              \    const content = lines[i][1];

              \    if (content === \"\" || content === \"\\r\")

              \    chompStart = i;else


              \    break;

              \  }

              \  if (chompStart === 0) {

              \    const value2 = header.chomp === \"+\" && lines.length > 0 ?
              \"\\n\".repeat(Math.max(1, lines.length - 1)) : \"\";

              \    let end2 = start + header.length;

              \    if (scalar.source)

              \    end2 += scalar.source.length;

              \    return { value: value2, type, comment: header.comment, range:
              [start, end2, end2] };

              \  }

              \  let trimIndent = scalar.indent + header.indent;

              \  let offset = scalar.offset + header.length;

              \  let contentStart = 0;

              \  for (let i = 0; i < chompStart; ++i) {

              \    const [indent, content] = lines[i];

              \    if (content === \"\" || content === \"\\r\") {

              \      if (header.indent === 0 && indent.length > trimIndent)

              \      trimIndent = indent.length;

              \    } else {

              \      if (indent.length < trimIndent) {

              \        const message = \"Block scalars with more-indented
              leading empty lines must use an explicit indentation indicator\";

              \        onError(offset + indent.length, \"MISSING_CHAR\",
              message);

              \      }

              \      if (header.indent === 0)

              \      trimIndent = indent.length;

              \      contentStart = i;

              \      if (trimIndent === 0 && !ctx.atRoot) {

              \        const message = \"Block scalar values in collections must
              be indented\";

              \        onError(offset, \"BAD_INDENT\", message);

              \      }

              \      break;

              \    }

              \    offset += indent.length + content.length + 1;

              \  }

              \  for (let i = lines.length - 1; i >= chompStart; --i) {

              \    if (lines[i][0].length > trimIndent)

              \    chompStart = i + 1;

              \  }

              \  let value = \"\";

              \  let sep = \"\";

              \  let prevMoreIndented = false;

              \  for (let i = 0; i < contentStart; ++i)

              \  value += lines[i][0].slice(trimIndent) + \"\\n\";

              \  for (let i = contentStart; i < chompStart; ++i) {

              \    let [indent, content] = lines[i];

              \    offset += indent.length + content.length + 1;

              \    const crlf = content[content.length - 1] === \"\\r\";

              \    if (crlf)

              \    content = content.slice(0, -1);

              \    if (content && indent.length < trimIndent) {

              \      const src = header.indent ? \"explicit indentation
              indicator\" : \"first line\";

              \      const message = `Block scalar lines must not be less
              indented than their ${src}`;

              \      onError(offset - content.length - (crlf ? 2 : 1),
              \"BAD_INDENT\", message);

              \      indent = \"\";

              \    }

              \    if (type === Scalar.BLOCK_LITERAL) {

              \      value += sep + indent.slice(trimIndent) + content;

              \      sep = \"\\n\";

              \    } else if (indent.length > trimIndent || content[0] ===
              \"\t\") {

              \      if (sep === \" \")

              \      sep = \"\\n\";else

              \      if (!prevMoreIndented && sep === \"\\n\")

              \      sep = \"\\n\\n\";

              \      value += sep + indent.slice(trimIndent) + content;

              \      sep = \"\\n\";

              \      prevMoreIndented = true;

              \    } else if (content === \"\") {

              \      if (sep === \"\\n\")

              \      value += \"\\n\";else


              \      sep = \"\\n\";

              \    } else {

              \      value += sep + content;

              \      sep = \" \";

              \      prevMoreIndented = false;

              \    }

              \  }

              \  switch (header.chomp) {

              \    case \"-\":

              \      break;

              \    case \"+\":

              \      for (let i = chompStart; i < lines.length; ++i)

              \      value += \"\\n\" + lines[i][0].slice(trimIndent);

              \      if (value[value.length - 1] !== \"\\n\")

              \      value += \"\\n\";

              \      break;

              \    default:

              \      value += \"\\n\";

              \  }

              \  const end = start + header.length + scalar.source.length;

              \  return { value, type, comment: header.comment, range: [start,
              end, end] };

              }

              function parseBlockScalarHeader({ offset, props }, strict,
              onError) {

              \  if (props[0].type !== \"block-scalar-header\") {

              \    onError(props[0], \"IMPOSSIBLE\", \"Block scalar header not
              found\");

              \    return null;

              \  }

              \  const { source } = props[0];

              \  const mode = source[0];

              \  let indent = 0;

              \  let chomp = \"\";

              \  let error = -1;

              \  for (let i = 1; i < source.length; ++i) {

              \    const ch = source[i];

              \    if (!chomp && (ch === \"-\" || ch === \"+\"))

              \    chomp = ch;else

              \    {

              \      const n = Number(ch);

              \      if (!indent && n)

              \      indent = n;else

              \      if (error === -1)

              \      error = offset + i;

              \    }

              \  }

              \  if (error !== -1)

              \  onError(error, \"UNEXPECTED_TOKEN\", `Block scalar header
              includes extra characters: ${source}`);

              \  let hasSpace = false;

              \  let comment = \"\";

              \  let length = source.length;

              \  for (let i = 1; i < props.length; ++i) {

              \    const token = props[i];

              \    switch (token.type) {

              \      case \"space\":

              \        hasSpace = true;

              \      case \"newline\":

              \        length += token.source.length;

              \        break;

              \      case \"comment\":

              \        if (strict && !hasSpace) {

              \          const message = \"Comments must be separated from other
              tokens by white space characters\";

              \          onError(token, \"MISSING_CHAR\", message);

              \        }

              \        length += token.source.length;

              \        comment = token.source.substring(1);

              \        break;

              \      case \"error\":

              \        onError(token, \"UNEXPECTED_TOKEN\", token.message);

              \        length += token.source.length;

              \        break;

              \      default:{

              \          const message = `Unexpected token in block scalar
              header: ${token.type}`;

              \          onError(token, \"UNEXPECTED_TOKEN\", message);

              \          const ts = token.source;

              \          if (ts && typeof ts === \"string\")

              \          length += ts.length;

              \        }

              \    }

              \  }

              \  return { mode, indent, chomp, comment, length };

              }

              function splitLines(source) {

              \  const split = source.split(/\\n( *)/);

              \  const first = split[0];

              \  const m = first.match(/^( *)/);

              \  const line0 = (m == null ? void 0 : m[1]) ? [m[1],
              first.slice(m[1].length)] : [\"\", first];

              \  const lines = [line0];

              \  for (let i = 1; i < split.length; i += 2)

              \  lines.push([split[i], split[i + 1]]);

              \  return lines;

              }


              // node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js

              function resolveFlowScalar(scalar, strict, onError) {

              \  const { offset, type, source, end } = scalar;

              \  let _type;

              \  let value;

              \  const _onError = (rel, code, msg) => onError(offset + rel,
              code, msg);

              \  switch (type) {

              \    case \"scalar\":

              \      _type = Scalar.PLAIN;

              \      value = plainValue(source, _onError);

              \      break;

              \    case \"single-quoted-scalar\":

              \      _type = Scalar.QUOTE_SINGLE;

              \      value = singleQuotedValue(source, _onError);

              \      break;

              \    case \"double-quoted-scalar\":

              \      _type = Scalar.QUOTE_DOUBLE;

              \      value = doubleQuotedValue(source, _onError);

              \      break;

              \    default:

              \      onError(scalar, \"UNEXPECTED_TOKEN\", `Expected a flow
              scalar value, but found: ${type}`);

              \      return {

              \        value: \"\",

              \        type: null,

              \        comment: \"\",

              \        range: [offset, offset + source.length, offset +
              source.length]

              \      };

              \  }

              \  const valueEnd = offset + source.length;

              \  const re = resolveEnd(end, valueEnd, strict, onError);

              \  return {

              \    value,

              \    type: _type,

              \    comment: re.comment,

              \    range: [offset, valueEnd, re.offset]

              \  };

              }

              function plainValue(source, onError) {

              \  let badChar = \"\";

              \  switch (source[0]) {

              \    case \"\t\":

              \      badChar = \"a tab character\";

              \      break;

              \    case \",\":

              \      badChar = \"flow indicator character ,\";

              \      break;

              \    case \"%\":

              \      badChar = \"directive indicator character %\";

              \      break;

              \    case \"|\":

              \    case \">\":{

              \        badChar = `block scalar indicator ${source[0]}`;

              \        break;

              \      }

              \    case \"@\":

              \    case \"`\":{

              \        badChar = `reserved character ${source[0]}`;

              \        break;

              \      }

              \  }

              \  if (badChar)

              \  onError(0, \"BAD_SCALAR_START\", `Plain value cannot start with
              ${badChar}`);

              \  return foldLines(source);

              }

              function singleQuotedValue(source, onError) {

              \  if (source[source.length - 1] !== \"'\" || source.length === 1)

              \  onError(source.length, \"MISSING_CHAR\", \"Missing closing
              'quote\");

              \  return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");

              }

              function foldLines(source) {

              \  var _a;

              \  let first, line;

              \  try {

              \    first = new RegExp(\"(.*?)(?<![ \t])[ \t]*\\r?\\n\", \"sy\");

              \    line = new RegExp(\"[ \t]*(.*?)(?:(?<![ \t])[
              \t]*)?\\r?\\n\", \"sy\");

              \  } catch (_) {

              \    first = new RegExp(\"(.*?)[ \\\\t]*\\\\r?\\\\n\", \"sy\");

              \    line = new RegExp(\"[ \\\\t]*(.*?)[ \\\\t]*\\\\r?\\\\n\",
              \"sy\");

              \  }

              \  let match = first.exec(source);

              \  if (!match)

              \  return source;

              \  let res = match[1];

              \  let sep = \" \";

              \  let pos = first.lastIndex;

              \  line.lastIndex = pos;

              \  while (match = line.exec(source)) {

              \    if (match[1] === \"\") {

              \      if (sep === \"\\n\")

              \      res += sep;else


              \      sep = \"\\n\";

              \    } else {

              \      res += sep + match[1];

              \      sep = \" \";

              \    }

              \    pos = line.lastIndex;

              \  }

              \  const last = new RegExp(\"[ \\\\t]*(.*)\", \"sy\");

              \  last.lastIndex = pos;

              \  match = last.exec(source);

              \  return res + sep + ((_a = match == null ? void 0 : match[1]) !=
              null ? _a : \"\");

              }

              function doubleQuotedValue(source, onError) {

              \  let res = \"\";

              \  for (let i = 1; i < source.length - 1; ++i) {

              \    const ch = source[i];

              \    if (ch === \"\\r\" && source[i + 1] === \"\\n\")

              \    continue;

              \    if (ch === \"\\n\") {

              \      const { fold, offset } = foldNewline(source, i);

              \      res += fold;

              \      i = offset;

              \    } else if (ch === \"\\\\\") {

              \      let next = source[++i];

              \      const cc = escapeCodes[next];

              \      if (cc)

              \      res += cc;else

              \      if (next === \"\\n\") {

              \        next = source[i + 1];

              \        while (next === \" \" || next === \"\t\")

              \        next = source[++i + 1];

              \      } else if (next === \"\\r\" && source[i + 1] === \"\\n\") {

              \        next = source[++i + 1];

              \        while (next === \" \" || next === \"\t\")

              \        next = source[++i + 1];

              \      } else if (next === \"x\" || next === \"u\" || next ===
              \"U\") {

              \        const length = { x: 2, u: 4, U: 8 }[next];

              \        res += parseCharCode(source, i + 1, length, onError);

              \        i += length;

              \      } else {

              \        const raw = source.substr(i - 1, 2);

              \        onError(i - 1, \"BAD_DQ_ESCAPE\", `Invalid escape
              sequence ${raw}`);

              \        res += raw;

              \      }

              \    } else if (ch === \" \" || ch === \"\t\") {

              \      const wsStart = i;

              \      let next = source[i + 1];

              \      while (next === \" \" || next === \"\t\")

              \      next = source[++i + 1];

              \      if (next !== \"\\n\" && !(next === \"\\r\" && source[i + 2]
              === \"\\n\"))

              \      res += i > wsStart ? source.slice(wsStart, i + 1) : ch;

              \    } else {

              \      res += ch;

              \    }

              \  }

              \  if (source[source.length - 1] !== '\"' || source.length === 1)

              \  onError(source.length, \"MISSING_CHAR\", 'Missing closing
              \"quote');

              \  return res;

              }

              function foldNewline(source, offset) {

              \  let fold = \"\";

              \  let ch = source[offset + 1];

              \  while (ch === \" \" || ch === \"\t\" || ch === \"\\n\" || ch
              === \"\\r\") {

              \    if (ch === \"\\r\" && source[offset + 2] !== \"\\n\")

              \    break;

              \    if (ch === \"\\n\")

              \    fold += \"\\n\";

              \    offset += 1;

              \    ch = source[offset + 1];

              \  }

              \  if (!fold)

              \  fold = \" \";

              \  return { fold, offset };

              }

              var escapeCodes = {

              \  \"0\": \"\\0\",

              \  // null character

              \  a: \"\\x07\",

              \  // bell character

              \  b: \"\\b\",

              \  // backspace

              \  e: \"\\x1B\",

              \  // escape character

              \  f: \"\\f\",

              \  // form feed

              \  n: \"\\n\",

              \  // line feed

              \  r: \"\\r\",

              \  // carriage return

              \  t: \"\t\",

              \  // horizontal tab

              \  v: \"\\v\",

              \  // vertical tab

              \  N: \"\\x85\",

              \  // Unicode next line

              \  _: \"\\xA0\",

              \  // Unicode non-breaking space

              \  L: \"\\u2028\",

              \  // Unicode line separator

              \  P: \"\\u2029\",

              \  // Unicode paragraph separator

              \  \" \": \" \",

              \  '\"': '\"',

              \  \"/\": \"/\",

              \  \"\\\\\": \"\\\\\",

              \  \"\t\": \"\t\"

              };

              function parseCharCode(source, offset, length, onError) {

              \  const cc = source.substr(offset, length);

              \  const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);

              \  const code = ok ? parseInt(cc, 16) : NaN;

              \  if (isNaN(code)) {

              \    const raw = source.substr(offset - 2, length + 2);

              \    onError(offset - 2, \"BAD_DQ_ESCAPE\", `Invalid escape
              sequence ${raw}`);

              \    return raw;

              \  }

              \  return String.fromCodePoint(code);

              }


              // node_modules/yaml/browser/dist/compose/compose-scalar.js

              function composeScalar(ctx, token, tagToken, onError) {

              \  const { value, type, comment, range } = token.type ===
              \"block-scalar\" ? resolveBlockScalar(ctx, token, onError) :
              resolveFlowScalar(token, ctx.options.strict, onError);

              \  const tagName = tagToken ?
              ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken,
              \"TAG_RESOLVE_FAILED\", msg)) : null;

              \  const tag = tagToken && tagName ?
              findScalarTagByName(ctx.schema, value, tagName, tagToken, onError)
              : token.type === \"scalar\" ? findScalarTagByTest(ctx, value,
              token, onError) : ctx.schema[SCALAR];

              \  let scalar;

              \  try {

              \    const res = tag.resolve(value, (msg) => onError(tagToken !=
              null ? tagToken : token, \"TAG_RESOLVE_FAILED\", msg),
              ctx.options);

              \    scalar = isScalar(res) ? res : new Scalar(res);

              \  } catch (error) {

              \    const msg = error instanceof Error ? error.message :
              String(error);

              \    onError(tagToken != null ? tagToken : token,
              \"TAG_RESOLVE_FAILED\", msg);

              \    scalar = new Scalar(value);

              \  }

              \  scalar.range = range;

              \  scalar.source = value;

              \  if (type)

              \  scalar.type = type;

              \  if (tagName)

              \  scalar.tag = tagName;

              \  if (tag.format)

              \  scalar.format = tag.format;

              \  if (comment)

              \  scalar.comment = comment;

              \  return scalar;

              }

              function findScalarTagByName(schema4, value, tagName, tagToken,
              onError) {

              \  var _a;

              \  if (tagName === \"!\")

              \  return schema4[SCALAR];

              \  const matchWithTest = [];

              \  for (const tag of schema4.tags) {

              \    if (!tag.collection && tag.tag === tagName) {

              \      if (tag.default && tag.test)

              \      matchWithTest.push(tag);else


              \      return tag;

              \    }

              \  }

              \  for (const tag of matchWithTest)

              \  if ((_a = tag.test) == null ? void 0 : _a.test(value))

              \  return tag;

              \  const kt = schema4.knownTags[tagName];

              \  if (kt && !kt.collection) {

              \    schema4.tags.push(Object.assign({}, kt, { default: false,
              test: void 0 }));

              \    return kt;

              \  }

              \  onError(tagToken, \"TAG_RESOLVE_FAILED\", `Unresolved tag:
              ${tagName}`, tagName !== \"tag:yaml.org,2002:str\");

              \  return schema4[SCALAR];

              }

              function findScalarTagByTest({ directives, schema: schema4 },
              value, token, onError) {

              \  var _a;

              \  const tag = schema4.tags.find((tag2) => {

              \    var _a2;

              \    return tag2.default && ((_a2 = tag2.test) == null ? void 0 :
              _a2.test(value));

              \  }) || schema4[SCALAR];

              \  if (schema4.compat) {

              \    const compat = (_a = schema4.compat.find((tag2) => {

              \      var _a2;

              \      return tag2.default && ((_a2 = tag2.test) == null ? void 0
              : _a2.test(value));

              \    })) != null ? _a : schema4[SCALAR];

              \    if (tag.tag !== compat.tag) {

              \      const ts = directives.tagString(tag.tag);

              \      const cs = directives.tagString(compat.tag);

              \      const msg = `Value may be parsed as either ${ts} or ${cs}`;

              \      onError(token, \"TAG_RESOLVE_FAILED\", msg, true);

              \    }

              \  }

              \  return tag;

              }


              //
              node_modules/yaml/browser/dist/compose/util-empty-scalar-position\
              .js

              function emptyScalarPosition(offset, before, pos) {

              \  if (before) {

              \    if (pos === null)

              \    pos = before.length;

              \    for (let i = pos - 1; i >= 0; --i) {

              \      let st = before[i];

              \      switch (st.type) {

              \        case \"space\":

              \        case \"comment\":

              \        case \"newline\":

              \          offset -= st.source.length;

              \          continue;

              \      }

              \      st = before[++i];

              \      while ((st == null ? void 0 : st.type) === \"space\") {

              \        offset += st.source.length;

              \        st = before[++i];

              \      }

              \      break;

              \    }

              \  }

              \  return offset;

              }


              // node_modules/yaml/browser/dist/compose/compose-node.js

              var CN = { composeNode, composeEmptyNode };

              function composeNode(ctx, token, props, onError) {

              \  const { spaceBefore, comment, anchor, tag } = props;

              \  let node;

              \  let isSrcToken = true;

              \  switch (token.type) {

              \    case \"alias\":

              \      node = composeAlias(ctx, token, onError);

              \      if (anchor || tag)

              \      onError(token, \"ALIAS_PROPS\", \"An alias node must not
              specify any properties\");

              \      break;

              \    case \"scalar\":

              \    case \"single-quoted-scalar\":

              \    case \"double-quoted-scalar\":

              \    case \"block-scalar\":

              \      node = composeScalar(ctx, token, tag, onError);

              \      if (anchor)

              \      node.anchor = anchor.source.substring(1);

              \      break;

              \    case \"block-map\":

              \    case \"block-seq\":

              \    case \"flow-collection\":

              \      node = composeCollection(CN, ctx, token, tag, onError);

              \      if (anchor)

              \      node.anchor = anchor.source.substring(1);

              \      break;

              \    default:{

              \        const message = token.type === \"error\" ? token.message
              : `Unsupported token (type: ${token.type})`;

              \        onError(token, \"UNEXPECTED_TOKEN\", message);

              \        node = composeEmptyNode(ctx, token.offset, void 0, null,
              props, onError);

              \        isSrcToken = false;

              \      }

              \  }

              \  if (anchor && node.anchor === \"\")

              \  onError(anchor, \"BAD_ALIAS\", \"Anchor cannot be an empty
              string\");

              \  if (spaceBefore)

              \  node.spaceBefore = true;

              \  if (comment) {

              \    if (token.type === \"scalar\" && token.source === \"\")

              \    node.comment = comment;else


              \    node.commentBefore = comment;

              \  }

              \  if (ctx.options.keepSourceTokens && isSrcToken)

              \  node.srcToken = token;

              \  return node;

              }

              function composeEmptyNode(ctx, offset, before, pos, { spaceBefore,
              comment, anchor, tag, end }, onError) {

              \  const token = {

              \    type: \"scalar\",

              \    offset: emptyScalarPosition(offset, before, pos),

              \    indent: -1,

              \    source: \"\"

              \  };

              \  const node = composeScalar(ctx, token, tag, onError);

              \  if (anchor) {

              \    node.anchor = anchor.source.substring(1);

              \    if (node.anchor === \"\")

              \    onError(anchor, \"BAD_ALIAS\", \"Anchor cannot be an empty
              string\");

              \  }

              \  if (spaceBefore)

              \  node.spaceBefore = true;

              \  if (comment) {

              \    node.comment = comment;

              \    node.range[2] = end;

              \  }

              \  return node;

              }

              function composeAlias({ options }, { offset, source, end },
              onError) {

              \  const alias = new Alias(source.substring(1));

              \  if (alias.source === \"\")

              \  onError(offset, \"BAD_ALIAS\", \"Alias cannot be an empty
              string\");

              \  if (alias.source.endsWith(\":\"))

              \  onError(offset + source.length - 1, \"BAD_ALIAS\", \"Alias
              ending in : is ambiguous\", true);

              \  const valueEnd = offset + source.length;

              \  const re = resolveEnd(end, valueEnd, options.strict, onError);

              \  alias.range = [offset, valueEnd, re.offset];

              \  if (re.comment)

              \  alias.comment = re.comment;

              \  return alias;

              }


              // node_modules/yaml/browser/dist/compose/compose-doc.js

              function composeDoc(options, directives, { offset, start, value,
              end }, onError) {

              \  const opts = Object.assign({ _directives: directives },
              options);

              \  const doc = new Document(void 0, opts);

              \  const ctx = {

              \    atRoot: true,

              \    directives: doc.directives,

              \    options: doc.options,

              \    schema: doc.schema

              \  };

              \  const props = resolveProps(start, {

              \    indicator: \"doc-start\",

              \    next: value != null ? value : end == null ? void 0 : end[0],

              \    offset,

              \    onError,

              \    parentIndent: 0,

              \    startOnNewline: true

              \  });

              \  if (props.found) {

              \    doc.directives.docStart = true;

              \    if (value && (value.type === \"block-map\" || value.type ===
              \"block-seq\") && !props.hasNewline)

              \    onError(props.end, \"MISSING_CHAR\", \"Block collection
              cannot start on same line with directives-end marker\");

              \  }

              \  doc.contents = value ? composeNode(ctx, value, props, onError)
              : composeEmptyNode(ctx, props.end, start, null, props, onError);

              \  const contentEnd = doc.contents.range[2];

              \  const re = resolveEnd(end, contentEnd, false, onError);

              \  if (re.comment)

              \  doc.comment = re.comment;

              \  doc.range = [offset, contentEnd, re.offset];

              \  return doc;

              }


              // node_modules/yaml/browser/dist/compose/composer.js

              function getErrorPos(src) {

              \  if (typeof src === \"number\")

              \  return [src, src + 1];

              \  if (Array.isArray(src))

              \  return src.length === 2 ? src : [src[0], src[1]];

              \  const { offset, source } = src;

              \  return [offset, offset + (typeof source === \"string\" ?
              source.length : 1)];

              }

              function parsePrelude(prelude) {

              \  var _a;

              \  let comment = \"\";

              \  let atComment = false;

              \  let afterEmptyLine = false;

              \  for (let i = 0; i < prelude.length; ++i) {

              \    const source = prelude[i];

              \    switch (source[0]) {

              \      case \"#\":

              \        comment += (comment === \"\" ? \"\" : afterEmptyLine ?
              \"\\n\\n\" : \"\\n\") + (source.substring(1) || \" \");

              \        atComment = true;

              \        afterEmptyLine = false;

              \        break;

              \      case \"%\":

              \        if (((_a = prelude[i + 1]) == null ? void 0 : _a[0]) !==
              \"#\")

              \        i += 1;

              \        atComment = false;

              \        break;

              \      default:

              \        if (!atComment)

              \        afterEmptyLine = true;

              \        atComment = false;

              \    }

              \  }

              \  return { comment, afterEmptyLine };

              }

              var Composer = class {

              \  constructor(options = {}) {

              \    this.doc = null;

              \    this.atDirectives = false;

              \    this.prelude = [];

              \    this.errors = [];

              \    this.warnings = [];

              \    this.onError = (source, code, message, warning) => {

              \      const pos = getErrorPos(source);

              \      if (warning)

              \      this.warnings.push(new YAMLWarning(pos, code,
              message));else


              \      this.errors.push(new YAMLParseError(pos, code, message));

              \    };

              \    this.directives = new Directives({ version: options.version
              || \"1.2\" });

              \    this.options = options;

              \  }

              \  decorate(doc, afterDoc) {

              \    const { comment, afterEmptyLine } =
              parsePrelude(this.prelude);

              \    if (comment) {

              \      const dc = doc.contents;

              \      if (afterDoc) {

              \        doc.comment = doc.comment ? `${doc.comment}

              ${comment}` : comment;

              \      } else if (afterEmptyLine || doc.directives.docStart ||
              !dc) {

              \        doc.commentBefore = comment;

              \      } else if (isCollection(dc) && !dc.flow && dc.items.length
              > 0) {

              \        let it = dc.items[0];

              \        if (isPair(it))

              \        it = it.key;

              \        const cb = it.commentBefore;

              \        it.commentBefore = cb ? `${comment}

              ${cb}` : comment;

              \      } else {

              \        const cb = dc.commentBefore;

              \        dc.commentBefore = cb ? `${comment}

              ${cb}` : comment;

              \      }

              \    }

              \    if (afterDoc) {

              \      Array.prototype.push.apply(doc.errors, this.errors);

              \      Array.prototype.push.apply(doc.warnings, this.warnings);

              \    } else {

              \      doc.errors = this.errors;

              \      doc.warnings = this.warnings;

              \    }

              \    this.prelude = [];

              \    this.errors = [];

              \    this.warnings = [];

              \  }

              \  /**

              \   * Current stream status information.

              \   *

              \   * Mostly useful at the end of input for an empty stream.

              \   */

              \  streamInfo() {

              \    return {

              \      comment: parsePrelude(this.prelude).comment,

              \      directives: this.directives,

              \      errors: this.errors,

              \      warnings: this.warnings

              \    };

              \  }

              \  /**

              \   * Compose tokens into documents.

              \   *

              \   * @param forceDoc - If the stream contains no document, still
              emit a final document including any comments and directives that
              would be applied to a subsequent document.

              \   * @param endOffset - Should be set if `forceDoc` is also set,
              to set the document range end and to indicate errors correctly.

              \   */

              \  *compose(tokens, forceDoc = false, endOffset = -1) {

              \    for (const token of tokens)

              \    yield* __yieldStar(this.next(token));

              \    yield* __yieldStar(this.end(forceDoc, endOffset));

              \  }

              \  /** Advance the composer by one CST token. */

              \  *next(token) {

              \    switch (token.type) {

              \      case \"directive\":

              \        this.directives.add(token.source, (offset, message,
              warning) => {

              \          const pos = getErrorPos(token);

              \          pos[0] += offset;

              \          this.onError(pos, \"BAD_DIRECTIVE\", message, warning);

              \        });

              \        this.prelude.push(token.source);

              \        this.atDirectives = true;

              \        break;

              \      case \"document\":{

              \          const doc = composeDoc(this.options, this.directives,
              token, this.onError);

              \          if (this.atDirectives && !doc.directives.docStart)

              \          this.onError(token, \"MISSING_CHAR\", \"Missing
              directives-end/doc-start indicator line\");

              \          this.decorate(doc, false);

              \          if (this.doc)

              \          yield this.doc;

              \          this.doc = doc;

              \          this.atDirectives = false;

              \          break;

              \        }

              \      case \"byte-order-mark\":

              \      case \"space\":

              \        break;

              \      case \"comment\":

              \      case \"newline\":

              \        this.prelude.push(token.source);

              \        break;

              \      case \"error\":{

              \          const msg = token.source ? `${token.message}:
              ${JSON.stringify(token.source)}` : token.message;

              \          const error = new YAMLParseError(getErrorPos(token),
              \"UNEXPECTED_TOKEN\", msg);

              \          if (this.atDirectives || !this.doc)

              \          this.errors.push(error);else


              \          this.doc.errors.push(error);

              \          break;

              \        }

              \      case \"doc-end\":{

              \          if (!this.doc) {

              \            const msg = \"Unexpected doc-end without preceding
              document\";

              \            this.errors.push(new
              YAMLParseError(getErrorPos(token), \"UNEXPECTED_TOKEN\", msg));

              \            break;

              \          }

              \          this.doc.directives.docEnd = true;

              \          const end = resolveEnd(token.end, token.offset +
              token.source.length, this.doc.options.strict, this.onError);

              \          this.decorate(this.doc, true);

              \          if (end.comment) {

              \            const dc = this.doc.comment;

              \            this.doc.comment = dc ? `${dc}

              ${end.comment}` : end.comment;

              \          }

              \          this.doc.range[2] = end.offset;

              \          break;

              \        }

              \      default:

              \        this.errors.push(new YAMLParseError(getErrorPos(token),
              \"UNEXPECTED_TOKEN\", `Unsupported token ${token.type}`));

              \    }

              \  }

              \  /**

              \   * Call at end of input to yield any remaining document.

              \   *

              \   * @param forceDoc - If the stream contains no document, still
              emit a final document including any comments and directives that
              would be applied to a subsequent document.

              \   * @param endOffset - Should be set if `forceDoc` is also set,
              to set the document range end and to indicate errors correctly.

              \   */

              \  *end(forceDoc = false, endOffset = -1) {

              \    if (this.doc) {

              \      this.decorate(this.doc, true);

              \      yield this.doc;

              \      this.doc = null;

              \    } else if (forceDoc) {

              \      const opts = Object.assign({ _directives: this.directives
              }, this.options);

              \      const doc = new Document(void 0, opts);

              \      if (this.atDirectives)

              \      this.onError(endOffset, \"MISSING_CHAR\", \"Missing
              directives-end indicator line\");

              \      doc.range = [0, endOffset, endOffset];

              \      this.decorate(doc, false);

              \      yield doc;

              \    }

              \  }

              };


              // node_modules/yaml/browser/dist/parse/cst.js

              var cst_exports = {};

              __export(cst_exports, {

              \  BOM: () => BOM,

              \  DOCUMENT: () => DOCUMENT,

              \  FLOW_END: () => FLOW_END,

              \  SCALAR: () => SCALAR2,

              \  createScalarToken: () => createScalarToken,

              \  isCollection: () => isCollection2,

              \  isScalar: () => isScalar2,

              \  prettyToken: () => prettyToken,

              \  resolveAsScalar: () => resolveAsScalar,

              \  setScalarValue: () => setScalarValue,

              \  stringify: () => stringify2,

              \  tokenType: () => tokenType,

              \  visit: () => visit2

              });


              // node_modules/yaml/browser/dist/parse/cst-scalar.js

              function resolveAsScalar(token, strict = true, onError) {

              \  if (token) {

              \    const _onError = (pos, code, message) => {

              \      const offset = typeof pos === \"number\" ? pos :
              Array.isArray(pos) ? pos[0] : pos.offset;

              \      if (onError)

              \      onError(offset, code, message);else


              \      throw new YAMLParseError([offset, offset + 1], code,
              message);

              \    };

              \    switch (token.type) {

              \      case \"scalar\":

              \      case \"single-quoted-scalar\":

              \      case \"double-quoted-scalar\":

              \        return resolveFlowScalar(token, strict, _onError);

              \      case \"block-scalar\":

              \        return resolveBlockScalar({ options: { strict } }, token,
              _onError);

              \    }

              \  }

              \  return null;

              }

              function createScalarToken(value, context) {

              \  var _a;

              \  const { implicitKey = false, indent, inFlow = false, offset =
              -1, type = \"PLAIN\" } = context;

              \  const source = stringifyString({ type, value }, {

              \    implicitKey,

              \    indent: indent > 0 ? \" \".repeat(indent) : \"\",

              \    inFlow,

              \    options: { blockQuote: true, lineWidth: -1 }

              \  });

              \  const end = (_a = context.end) != null ? _a : [

              \  { type: \"newline\", offset: -1, indent, source: \"\\n\" }];


              \  switch (source[0]) {

              \    case \"|\":

              \    case \">\":{

              \        const he = source.indexOf(\"\\n\");

              \        const head = source.substring(0, he);

              \        const body = source.substring(he + 1) + \"\\n\";

              \        const props = [

              \        { type: \"block-scalar-header\", offset, indent, source:
              head }];


              \        if (!addEndtoBlockProps(props, end))

              \        props.push({ type: \"newline\", offset: -1, indent,
              source: \"\\n\" });

              \        return { type: \"block-scalar\", offset, indent, props,
              source: body };

              \      }

              \    case '\"':

              \      return { type: \"double-quoted-scalar\", offset, indent,
              source, end };

              \    case \"'\":

              \      return { type: \"single-quoted-scalar\", offset, indent,
              source, end };

              \    default:

              \      return { type: \"scalar\", offset, indent, source, end };

              \  }

              }

              function setScalarValue(token, value, context = {}) {

              \  let { afterKey = false, implicitKey = false, inFlow = false,
              type } = context;

              \  let indent = \"indent\" in token ? token.indent : null;

              \  if (afterKey && typeof indent === \"number\")

              \  indent += 2;

              \  if (!type)

              \  switch (token.type) {

              \    case \"single-quoted-scalar\":

              \      type = \"QUOTE_SINGLE\";

              \      break;

              \    case \"double-quoted-scalar\":

              \      type = \"QUOTE_DOUBLE\";

              \      break;

              \    case \"block-scalar\":{

              \        const header = token.props[0];

              \        if (header.type !== \"block-scalar-header\")

              \        throw new Error(\"Invalid block scalar header\");

              \        type = header.source[0] === \">\" ? \"BLOCK_FOLDED\" :
              \"BLOCK_LITERAL\";

              \        break;

              \      }

              \    default:

              \      type = \"PLAIN\";

              \  }

              \  const source = stringifyString({ type, value }, {

              \    implicitKey: implicitKey || indent === null,

              \    indent: indent !== null && indent > 0 ? \" \".repeat(indent)
              : \"\",

              \    inFlow,

              \    options: { blockQuote: true, lineWidth: -1 }

              \  });

              \  switch (source[0]) {

              \    case \"|\":

              \    case \">\":

              \      setBlockScalarValue(token, source);

              \      break;

              \    case '\"':

              \      setFlowScalarValue(token, source,
              \"double-quoted-scalar\");

              \      break;

              \    case \"'\":

              \      setFlowScalarValue(token, source,
              \"single-quoted-scalar\");

              \      break;

              \    default:

              \      setFlowScalarValue(token, source, \"scalar\");

              \  }

              }

              function setBlockScalarValue(token, source) {

              \  const he = source.indexOf(\"\\n\");

              \  const head = source.substring(0, he);

              \  const body = source.substring(he + 1) + \"\\n\";

              \  if (token.type === \"block-scalar\") {

              \    const header = token.props[0];

              \    if (header.type !== \"block-scalar-header\")

              \    throw new Error(\"Invalid block scalar header\");

              \    header.source = head;

              \    token.source = body;

              \  } else {

              \    const { offset } = token;

              \    const indent = \"indent\" in token ? token.indent : -1;

              \    const props = [

              \    { type: \"block-scalar-header\", offset, indent, source: head
              }];


              \    if (!addEndtoBlockProps(props, \"end\" in token ? token.end :
              void 0))

              \    props.push({ type: \"newline\", offset: -1, indent, source:
              \"\\n\" });

              \    for (const key of Object.keys(token))

              \    if (key !== \"type\" && key !== \"offset\")

              \    delete token[key];

              \    Object.assign(token, { type: \"block-scalar\", indent, props,
              source: body });

              \  }

              }

              function addEndtoBlockProps(props, end) {

              \  if (end)

              \  for (const st of end)

              \  switch (st.type) {

              \    case \"space\":

              \    case \"comment\":

              \      props.push(st);

              \      break;

              \    case \"newline\":

              \      props.push(st);

              \      return true;

              \  }

              \  return false;

              }

              function setFlowScalarValue(token, source, type) {

              \  switch (token.type) {

              \    case \"scalar\":

              \    case \"double-quoted-scalar\":

              \    case \"single-quoted-scalar\":

              \      token.type = type;

              \      token.source = source;

              \      break;

              \    case \"block-scalar\":{

              \        const end = token.props.slice(1);

              \        let oa = source.length;

              \        if (token.props[0].type === \"block-scalar-header\")

              \        oa -= token.props[0].source.length;

              \        for (const tok of end)

              \        tok.offset += oa;

              \        delete token.props;

              \        Object.assign(token, { type, source, end });

              \        break;

              \      }

              \    case \"block-map\":

              \    case \"block-seq\":{

              \        const offset = token.offset + source.length;

              \        const nl = { type: \"newline\", offset, indent:
              token.indent, source: \"\\n\" };

              \        delete token.items;

              \        Object.assign(token, { type, source, end: [nl] });

              \        break;

              \      }

              \    default:{

              \        const indent = \"indent\" in token ? token.indent : -1;

              \        const end = \"end\" in token && Array.isArray(token.end)
              ? token.end.filter((st) => st.type === \"space\" || st.type ===
              \"comment\" || st.type === \"newline\") : [];

              \        for (const key of Object.keys(token))

              \        if (key !== \"type\" && key !== \"offset\")

              \        delete token[key];

              \        Object.assign(token, { type, indent, source, end });

              \      }

              \  }

              }


              // node_modules/yaml/browser/dist/parse/cst-stringify.js

              var stringify2 = (cst) => \"type\" in cst ? stringifyToken(cst) :
              stringifyItem(cst);

              function stringifyToken(token) {

              \  switch (token.type) {

              \    case \"block-scalar\":{

              \        let res = \"\";

              \        for (const tok of token.props)

              \        res += stringifyToken(tok);

              \        return res + token.source;

              \      }

              \    case \"block-map\":

              \    case \"block-seq\":{

              \        let res = \"\";

              \        for (const item of token.items)

              \        res += stringifyItem(item);

              \        return res;

              \      }

              \    case \"flow-collection\":{

              \        let res = token.start.source;

              \        for (const item of token.items)

              \        res += stringifyItem(item);

              \        for (const st of token.end)

              \        res += st.source;

              \        return res;

              \      }

              \    case \"document\":{

              \        let res = stringifyItem(token);

              \        if (token.end)

              \        for (const st of token.end)

              \        res += st.source;

              \        return res;

              \      }

              \    default:{

              \        let res = token.source;

              \        if (\"end\" in token && token.end)

              \        for (const st of token.end)

              \        res += st.source;

              \        return res;

              \      }

              \  }

              }

              function stringifyItem({ start, key, sep, value }) {

              \  let res = \"\";

              \  for (const st of start)

              \  res += st.source;

              \  if (key)

              \  res += stringifyToken(key);

              \  if (sep)

              \  for (const st of sep)

              \  res += st.source;

              \  if (value)

              \  res += stringifyToken(value);

              \  return res;

              }


              // node_modules/yaml/browser/dist/parse/cst-visit.js

              var BREAK2 = Symbol(\"break visit\");

              var SKIP2 = Symbol(\"skip children\");

              var REMOVE2 = Symbol(\"remove item\");

              function visit2(cst, visitor) {

              \  if (\"type\" in cst && cst.type === \"document\")

              \  cst = { start: cst.start, value: cst.value };

              \  _visit(Object.freeze([]), cst, visitor);

              }

              visit2.BREAK = BREAK2;

              visit2.SKIP = SKIP2;

              visit2.REMOVE = REMOVE2;

              visit2.itemAtPath = (cst, path) => {

              \  let item = cst;

              \  for (const [field, index] of path) {

              \    const tok = item == null ? void 0 : item[field];

              \    if (tok && \"items\" in tok) {

              \      item = tok.items[index];

              \    } else

              \    return void 0;

              \  }

              \  return item;

              };

              visit2.parentCollection = (cst, path) => {

              \  const parent = visit2.itemAtPath(cst, path.slice(0, -1));

              \  const field = path[path.length - 1][0];

              \  const coll = parent == null ? void 0 : parent[field];

              \  if (coll && \"items\" in coll)

              \  return coll;

              \  throw new Error(\"Parent collection not found\");

              };

              function _visit(path, item, visitor) {

              \  let ctrl = visitor(item, path);

              \  if (typeof ctrl === \"symbol\")

              \  return ctrl;

              \  for (const field of [\"key\", \"value\"]) {

              \    const token = item[field];

              \    if (token && \"items\" in token) {

              \      for (let i = 0; i < token.items.length; ++i) {

              \        const ci = _visit(Object.freeze(path.concat([[field,
              i]])), token.items[i], visitor);

              \        if (typeof ci === \"number\")

              \        i = ci - 1;else

              \        if (ci === BREAK2)

              \        return BREAK2;else

              \        if (ci === REMOVE2) {

              \          token.items.splice(i, 1);

              \          i -= 1;

              \        }

              \      }

              \      if (typeof ctrl === \"function\" && field === \"key\")

              \      ctrl = ctrl(item, path);

              \    }

              \  }

              \  return typeof ctrl === \"function\" ? ctrl(item, path) : ctrl;

              }


              // node_modules/yaml/browser/dist/parse/cst.js

              var BOM = \"\\uFEFF\";

              var DOCUMENT = \"\x02\";

              var FLOW_END = \"\x18\";

              var SCALAR2 = \"\x1f\";

              var isCollection2 = (token) => !!token && \"items\" in token;

              var isScalar2 = (token) => !!token && (token.type === \"scalar\"
              || token.type === \"single-quoted-scalar\" || token.type ===
              \"double-quoted-scalar\" || token.type === \"block-scalar\");

              function prettyToken(token) {

              \  switch (token) {

              \    case BOM:

              \      return \"<BOM>\";

              \    case DOCUMENT:

              \      return \"<DOC>\";

              \    case FLOW_END:

              \      return \"<FLOW_END>\";

              \    case SCALAR2:

              \      return \"<SCALAR>\";

              \    default:

              \      return JSON.stringify(token);

              \  }

              }

              function tokenType(source) {

              \  switch (source) {

              \    case BOM:

              \      return \"byte-order-mark\";

              \    case DOCUMENT:

              \      return \"doc-mode\";

              \    case FLOW_END:

              \      return \"flow-error-end\";

              \    case SCALAR2:

              \      return \"scalar\";

              \    case \"---\":

              \      return \"doc-start\";

              \    case \"...\":

              \      return \"doc-end\";

              \    case \"\":

              \    case \"\\n\":

              \    case \"\\r\\n\":

              \      return \"newline\";

              \    case \"-\":

              \      return \"seq-item-ind\";

              \    case \"?\":

              \      return \"explicit-key-ind\";

              \    case \":\":

              \      return \"map-value-ind\";

              \    case \"{\":

              \      return \"flow-map-start\";

              \    case \"}\":

              \      return \"flow-map-end\";

              \    case \"[\":

              \      return \"flow-seq-start\";

              \    case \"]\":

              \      return \"flow-seq-end\";

              \    case \",\":

              \      return \"comma\";

              \  }

              \  switch (source[0]) {

              \    case \" \":

              \    case \"\t\":

              \      return \"space\";

              \    case \"#\":

              \      return \"comment\";

              \    case \"%\":

              \      return \"directive-line\";

              \    case \"*\":

              \      return \"alias\";

              \    case \"&\":

              \      return \"anchor\";

              \    case \"!\":

              \      return \"tag\";

              \    case \"'\":

              \      return \"single-quoted-scalar\";

              \    case '\"':

              \      return \"double-quoted-scalar\";

              \    case \"|\":

              \    case \">\":

              \      return \"block-scalar-header\";

              \  }

              \  return null;

              }


              // node_modules/yaml/browser/dist/parse/lexer.js

              function isEmpty(ch) {

              \  switch (ch) {

              \    case void 0:

              \    case \" \":

              \    case \"\\n\":

              \    case \"\\r\":

              \    case \"\t\":

              \      return true;

              \    default:

              \      return false;

              \  }

              }

              var hexDigits = new Set(\"0123456789ABCDEFabcdef\");

              var tagChars = new
              Set(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw\
              xyz-#;/?:@&=+$_.!~*'()\");

              var flowIndicatorChars = new Set(\",[]{}\");

              var invalidAnchorChars = new Set(\" ,[]{}\\n\\r\t\");

              var isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);

              var Lexer = class {

              \  constructor() {

              \    this.atEnd = false;

              \    this.blockScalarIndent = -1;

              \    this.blockScalarKeep = false;

              \    this.buffer = \"\";

              \    this.flowKey = false;

              \    this.flowLevel = 0;

              \    this.indentNext = 0;

              \    this.indentValue = 0;

              \    this.lineEndPos = null;

              \    this.next = null;

              \    this.pos = 0;

              \  }

              \  /**

              \   * Generate YAML tokens from the `source` string. If
              `incomplete`,

              \   * a part of the last line may be left as a buffer for the next
              call.

              \   *

              \   * @returns A generator of lexical tokens

              \   */

              \  *lex(source, incomplete = false) {

              \    var _a;

              \    if (source) {

              \      if (typeof source !== \"string\")

              \      throw TypeError(\"source is not a string\");

              \      this.buffer = this.buffer ? this.buffer + source : source;

              \      this.lineEndPos = null;

              \    }

              \    this.atEnd = !incomplete;

              \    let next = (_a = this.next) != null ? _a : \"stream\";

              \    while (next && (incomplete || this.hasChars(1)))

              \    next = yield* __yieldStar(this.parseNext(next));

              \  }

              \  atLineEnd() {

              \    let i = this.pos;

              \    let ch = this.buffer[i];

              \    while (ch === \" \" || ch === \"\t\")

              \    ch = this.buffer[++i];

              \    if (!ch || ch === \"#\" || ch === \"\\n\")

              \    return true;

              \    if (ch === \"\\r\")

              \    return this.buffer[i + 1] === \"\\n\";

              \    return false;

              \  }

              \  charAt(n) {

              \    return this.buffer[this.pos + n];

              \  }

              \  continueScalar(offset) {

              \    let ch = this.buffer[offset];

              \    if (this.indentNext > 0) {

              \      let indent = 0;

              \      while (ch === \" \")

              \      ch = this.buffer[++indent + offset];

              \      if (ch === \"\\r\") {

              \        const next = this.buffer[indent + offset + 1];

              \        if (next === \"\\n\" || !next && !this.atEnd)

              \        return offset + indent + 1;

              \      }

              \      return ch === \"\\n\" || indent >= this.indentNext || !ch
              && !this.atEnd ? offset + indent : -1;

              \    }

              \    if (ch === \"-\" || ch === \".\") {

              \      const dt = this.buffer.substr(offset, 3);

              \      if ((dt === \"---\" || dt === \"...\") &&
              isEmpty(this.buffer[offset + 3]))

              \      return -1;

              \    }

              \    return offset;

              \  }

              \  getLine() {

              \    let end = this.lineEndPos;

              \    if (typeof end !== \"number\" || end !== -1 && end <
              this.pos) {

              \      end = this.buffer.indexOf(\"\\n\", this.pos);

              \      this.lineEndPos = end;

              \    }

              \    if (end === -1)

              \    return this.atEnd ? this.buffer.substring(this.pos) : null;

              \    if (this.buffer[end - 1] === \"\\r\")

              \    end -= 1;

              \    return this.buffer.substring(this.pos, end);

              \  }

              \  hasChars(n) {

              \    return this.pos + n <= this.buffer.length;

              \  }

              \  setNext(state) {

              \    this.buffer = this.buffer.substring(this.pos);

              \    this.pos = 0;

              \    this.lineEndPos = null;

              \    this.next = state;

              \    return null;

              \  }

              \  peek(n) {

              \    return this.buffer.substr(this.pos, n);

              \  }

              \  *parseNext(next) {

              \    switch (next) {

              \      case \"stream\":

              \        return yield* __yieldStar(this.parseStream());

              \      case \"line-start\":

              \        return yield* __yieldStar(this.parseLineStart());

              \      case \"block-start\":

              \        return yield* __yieldStar(this.parseBlockStart());

              \      case \"doc\":

              \        return yield* __yieldStar(this.parseDocument());

              \      case \"flow\":

              \        return yield* __yieldStar(this.parseFlowCollection());

              \      case \"quoted-scalar\":

              \        return yield* __yieldStar(this.parseQuotedScalar());

              \      case \"block-scalar\":

              \        return yield* __yieldStar(this.parseBlockScalar());

              \      case \"plain-scalar\":

              \        return yield* __yieldStar(this.parsePlainScalar());

              \    }

              \  }

              \  *parseStream() {

              \    let line = this.getLine();

              \    if (line === null)

              \    return this.setNext(\"stream\");

              \    if (line[0] === BOM) {

              \      yield* __yieldStar(this.pushCount(1));

              \      line = line.substring(1);

              \    }

              \    if (line[0] === \"%\") {

              \      let dirEnd = line.length;

              \      let cs = line.indexOf(\"#\");

              \      while (cs !== -1) {

              \        const ch = line[cs - 1];

              \        if (ch === \" \" || ch === \"\t\") {

              \          dirEnd = cs - 1;

              \          break;

              \        } else {

              \          cs = line.indexOf(\"#\", cs + 1);

              \        }

              \      }

              \      while (true) {

              \        const ch = line[dirEnd - 1];

              \        if (ch === \" \" || ch === \"\t\")

              \        dirEnd -= 1;else


              \        break;

              \      }

              \      const n = (yield* __yieldStar(this.pushCount(dirEnd))) +
              (yield* __yieldStar(this.pushSpaces(true)));

              \      yield* __yieldStar(this.pushCount(line.length - n));

              \      this.pushNewline();

              \      return \"stream\";

              \    }

              \    if (this.atLineEnd()) {

              \      const sp = yield* __yieldStar(this.pushSpaces(true));

              \      yield* __yieldStar(this.pushCount(line.length - sp));

              \      yield* __yieldStar(this.pushNewline());

              \      return \"stream\";

              \    }

              \    yield DOCUMENT;

              \    return yield* __yieldStar(this.parseLineStart());

              \  }

              \  *parseLineStart() {

              \    const ch = this.charAt(0);

              \    if (!ch && !this.atEnd)

              \    return this.setNext(\"line-start\");

              \    if (ch === \"-\" || ch === \".\") {

              \      if (!this.atEnd && !this.hasChars(4))

              \      return this.setNext(\"line-start\");

              \      const s = this.peek(3);

              \      if (s === \"---\" && isEmpty(this.charAt(3))) {

              \        yield* __yieldStar(this.pushCount(3));

              \        this.indentValue = 0;

              \        this.indentNext = 0;

              \        return \"doc\";

              \      } else if (s === \"...\" && isEmpty(this.charAt(3))) {

              \        yield* __yieldStar(this.pushCount(3));

              \        return \"stream\";

              \      }

              \    }

              \    this.indentValue = yield*
              __yieldStar(this.pushSpaces(false));

              \    if (this.indentNext > this.indentValue &&
              !isEmpty(this.charAt(1)))

              \    this.indentNext = this.indentValue;

              \    return yield* __yieldStar(this.parseBlockStart());

              \  }

              \  *parseBlockStart() {

              \    const [ch0, ch1] = this.peek(2);

              \    if (!ch1 && !this.atEnd)

              \    return this.setNext(\"block-start\");

              \    if ((ch0 === \"-\" || ch0 === \"?\" || ch0 === \":\") &&
              isEmpty(ch1)) {

              \      const n = (yield* __yieldStar(this.pushCount(1))) + (yield*
              __yieldStar(this.pushSpaces(true)));

              \      this.indentNext = this.indentValue + 1;

              \      this.indentValue += n;

              \      return yield* __yieldStar(this.parseBlockStart());

              \    }

              \    return \"doc\";

              \  }

              \  *parseDocument() {

              \    yield* __yieldStar(this.pushSpaces(true));

              \    const line = this.getLine();

              \    if (line === null)

              \    return this.setNext(\"doc\");

              \    let n = yield* __yieldStar(this.pushIndicators());

              \    switch (line[n]) {

              \      case \"#\":

              \        yield* __yieldStar(this.pushCount(line.length - n));

              \      case void 0:

              \        yield* __yieldStar(this.pushNewline());

              \        return yield* __yieldStar(this.parseLineStart());

              \      case \"{\":

              \      case \"[\":

              \        yield* __yieldStar(this.pushCount(1));

              \        this.flowKey = false;

              \        this.flowLevel = 1;

              \        return \"flow\";

              \      case \"}\":

              \      case \"]\":

              \        yield* __yieldStar(this.pushCount(1));

              \        return \"doc\";

              \      case \"*\":

              \        yield* __yieldStar(this.pushUntil(isNotAnchorChar));

              \        return \"doc\";

              \      case '\"':

              \      case \"'\":

              \        return yield* __yieldStar(this.parseQuotedScalar());

              \      case \"|\":

              \      case \">\":

              \        n += yield* __yieldStar(this.parseBlockScalarHeader());

              \        n += yield* __yieldStar(this.pushSpaces(true));

              \        yield* __yieldStar(this.pushCount(line.length - n));

              \        yield* __yieldStar(this.pushNewline());

              \        return yield* __yieldStar(this.parseBlockScalar());

              \      default:

              \        return yield* __yieldStar(this.parsePlainScalar());

              \    }

              \  }

              \  *parseFlowCollection() {

              \    let nl, sp;

              \    let indent = -1;

              \    do {

              \      nl = yield* __yieldStar(this.pushNewline());

              \      if (nl > 0) {

              \        sp = yield* __yieldStar(this.pushSpaces(false));

              \        this.indentValue = indent = sp;

              \      } else {

              \        sp = 0;

              \      }

              \      sp += yield* __yieldStar(this.pushSpaces(true));

              \    } while (nl + sp > 0);

              \    const line = this.getLine();

              \    if (line === null)

              \    return this.setNext(\"flow\");

              \    if (indent !== -1 && indent < this.indentNext && line[0] !==
              \"#\" || indent === 0 && (line.startsWith(\"---\") ||
              line.startsWith(\"...\")) && isEmpty(line[3])) {

              \      const atFlowEndMarker = indent === this.indentNext - 1 &&
              this.flowLevel === 1 && (line[0] === \"]\" || line[0] === \"}\");

              \      if (!atFlowEndMarker) {

              \        this.flowLevel = 0;

              \        yield FLOW_END;

              \        return yield* __yieldStar(this.parseLineStart());

              \      }

              \    }

              \    let n = 0;

              \    while (line[n] === \",\") {

              \      n += yield* __yieldStar(this.pushCount(1));

              \      n += yield* __yieldStar(this.pushSpaces(true));

              \      this.flowKey = false;

              \    }

              \    n += yield* __yieldStar(this.pushIndicators());

              \    switch (line[n]) {

              \      case void 0:

              \        return \"flow\";

              \      case \"#\":

              \        yield* __yieldStar(this.pushCount(line.length - n));

              \        return \"flow\";

              \      case \"{\":

              \      case \"[\":

              \        yield* __yieldStar(this.pushCount(1));

              \        this.flowKey = false;

              \        this.flowLevel += 1;

              \        return \"flow\";

              \      case \"}\":

              \      case \"]\":

              \        yield* __yieldStar(this.pushCount(1));

              \        this.flowKey = true;

              \        this.flowLevel -= 1;

              \        return this.flowLevel ? \"flow\" : \"doc\";

              \      case \"*\":

              \        yield* __yieldStar(this.pushUntil(isNotAnchorChar));

              \        return \"flow\";

              \      case '\"':

              \      case \"'\":

              \        this.flowKey = true;

              \        return yield* __yieldStar(this.parseQuotedScalar());

              \      case \":\":{

              \          const next = this.charAt(1);

              \          if (this.flowKey || isEmpty(next) || next === \",\") {

              \            this.flowKey = false;

              \            yield* __yieldStar(this.pushCount(1));

              \            yield* __yieldStar(this.pushSpaces(true));

              \            return \"flow\";

              \          }

              \        }

              \      default:

              \        this.flowKey = false;

              \        return yield* __yieldStar(this.parsePlainScalar());

              \    }

              \  }

              \  *parseQuotedScalar() {

              \    const quote = this.charAt(0);

              \    let end = this.buffer.indexOf(quote, this.pos + 1);

              \    if (quote === \"'\") {

              \      while (end !== -1 && this.buffer[end + 1] === \"'\")

              \      end = this.buffer.indexOf(\"'\", end + 2);

              \    } else {

              \      while (end !== -1) {

              \        let n = 0;

              \        while (this.buffer[end - 1 - n] === \"\\\\\")

              \        n += 1;

              \        if (n % 2 === 0)

              \        break;

              \        end = this.buffer.indexOf('\"', end + 1);

              \      }

              \    }

              \    const qb = this.buffer.substring(0, end);

              \    let nl = qb.indexOf(\"\\n\", this.pos);

              \    if (nl !== -1) {

              \      while (nl !== -1) {

              \        const cs = this.continueScalar(nl + 1);

              \        if (cs === -1)

              \        break;

              \        nl = qb.indexOf(\"\\n\", cs);

              \      }

              \      if (nl !== -1) {

              \        end = nl - (qb[nl - 1] === \"\\r\" ? 2 : 1);

              \      }

              \    }

              \    if (end === -1) {

              \      if (!this.atEnd)

              \      return this.setNext(\"quoted-scalar\");

              \      end = this.buffer.length;

              \    }

              \    yield* __yieldStar(this.pushToIndex(end + 1, false));

              \    return this.flowLevel ? \"flow\" : \"doc\";

              \  }

              \  *parseBlockScalarHeader() {

              \    this.blockScalarIndent = -1;

              \    this.blockScalarKeep = false;

              \    let i = this.pos;

              \    while (true) {

              \      const ch = this.buffer[++i];

              \      if (ch === \"+\")

              \      this.blockScalarKeep = true;else

              \      if (ch > \"0\" && ch <= \"9\")

              \      this.blockScalarIndent = Number(ch) - 1;else

              \      if (ch !== \"-\")

              \      break;

              \    }

              \    return yield* __yieldStar(this.pushUntil((ch) => isEmpty(ch)
              || ch === \"#\"));

              \  }

              \  *parseBlockScalar() {

              \    let nl = this.pos - 1;

              \    let indent = 0;

              \    let ch;

              \    loop: for (let i2 = this.pos; ch = this.buffer[i2]; ++i2) {

              \      switch (ch) {

              \        case \" \":

              \          indent += 1;

              \          break;

              \        case \"\\n\":

              \          nl = i2;

              \          indent = 0;

              \          break;

              \        case \"\\r\":{

              \            const next = this.buffer[i2 + 1];

              \            if (!next && !this.atEnd)

              \            return this.setNext(\"block-scalar\");

              \            if (next === \"\\n\")

              \            break;

              \          }

              \        default:

              \          break loop;

              \      }

              \    }

              \    if (!ch && !this.atEnd)

              \    return this.setNext(\"block-scalar\");

              \    if (indent >= this.indentNext) {

              \      if (this.blockScalarIndent === -1)

              \      this.indentNext = indent;else

              \      {

              \        this.indentNext = this.blockScalarIndent +
              (this.indentNext === 0 ? 1 : this.indentNext);

              \      }

              \      do {

              \        const cs = this.continueScalar(nl + 1);

              \        if (cs === -1)

              \        break;

              \        nl = this.buffer.indexOf(\"\\n\", cs);

              \      } while (nl !== -1);

              \      if (nl === -1) {

              \        if (!this.atEnd)

              \        return this.setNext(\"block-scalar\");

              \        nl = this.buffer.length;

              \      }

              \    }

              \    let i = nl + 1;

              \    ch = this.buffer[i];

              \    while (ch === \" \")

              \    ch = this.buffer[++i];

              \    if (ch === \"\t\") {

              \      while (ch === \"\t\" || ch === \" \" || ch === \"\\r\" ||
              ch === \"\\n\")

              \      ch = this.buffer[++i];

              \      nl = i - 1;

              \    } else if (!this.blockScalarKeep) {

              \      do {

              \        let i2 = nl - 1;

              \        let ch2 = this.buffer[i2];

              \        if (ch2 === \"\\r\")

              \        ch2 = this.buffer[--i2];

              \        const lastChar = i2;

              \        while (ch2 === \" \")

              \        ch2 = this.buffer[--i2];

              \        if (ch2 === \"\\n\" && i2 >= this.pos && i2 + 1 + indent
              > lastChar)

              \        nl = i2;else


              \        break;

              \      } while (true);

              \    }

              \    yield SCALAR2;

              \    yield* __yieldStar(this.pushToIndex(nl + 1, true));

              \    return yield* __yieldStar(this.parseLineStart());

              \  }

              \  *parsePlainScalar() {

              \    const inFlow = this.flowLevel > 0;

              \    let end = this.pos - 1;

              \    let i = this.pos - 1;

              \    let ch;

              \    while (ch = this.buffer[++i]) {

              \      if (ch === \":\") {

              \        const next = this.buffer[i + 1];

              \        if (isEmpty(next) || inFlow &&
              flowIndicatorChars.has(next))

              \        break;

              \        end = i;

              \      } else if (isEmpty(ch)) {

              \        let next = this.buffer[i + 1];

              \        if (ch === \"\\r\") {

              \          if (next === \"\\n\") {

              \            i += 1;

              \            ch = \"\\n\";

              \            next = this.buffer[i + 1];

              \          } else

              \          end = i;

              \        }

              \        if (next === \"#\" || inFlow &&
              flowIndicatorChars.has(next))

              \        break;

              \        if (ch === \"\\n\") {

              \          const cs = this.continueScalar(i + 1);

              \          if (cs === -1)

              \          break;

              \          i = Math.max(i, cs - 2);

              \        }

              \      } else {

              \        if (inFlow && flowIndicatorChars.has(ch))

              \        break;

              \        end = i;

              \      }

              \    }

              \    if (!ch && !this.atEnd)

              \    return this.setNext(\"plain-scalar\");

              \    yield SCALAR2;

              \    yield* __yieldStar(this.pushToIndex(end + 1, true));

              \    return inFlow ? \"flow\" : \"doc\";

              \  }

              \  *pushCount(n) {

              \    if (n > 0) {

              \      yield this.buffer.substr(this.pos, n);

              \      this.pos += n;

              \      return n;

              \    }

              \    return 0;

              \  }

              \  *pushToIndex(i, allowEmpty) {

              \    const s = this.buffer.slice(this.pos, i);

              \    if (s) {

              \      yield s;

              \      this.pos += s.length;

              \      return s.length;

              \    } else if (allowEmpty)

              \    yield \"\";

              \    return 0;

              \  }

              \  *pushIndicators() {

              \    switch (this.charAt(0)) {

              \      case \"!\":

              \        return (yield* __yieldStar(this.pushTag())) + (yield*
              __yieldStar(this.pushSpaces(true))) + (yield*
              __yieldStar(this.pushIndicators()));

              \      case \"&\":

              \        return (yield*
              __yieldStar(this.pushUntil(isNotAnchorChar))) + (yield*
              __yieldStar(this.pushSpaces(true))) + (yield*
              __yieldStar(this.pushIndicators()));

              \      case \"-\":

              \      case \"?\":

              \      case \":\":{

              \          const inFlow = this.flowLevel > 0;

              \          const ch1 = this.charAt(1);

              \          if (isEmpty(ch1) || inFlow &&
              flowIndicatorChars.has(ch1)) {

              \            if (!inFlow)

              \            this.indentNext = this.indentValue + 1;else

              \            if (this.flowKey)

              \            this.flowKey = false;

              \            return (yield* __yieldStar(this.pushCount(1))) +
              (yield* __yieldStar(this.pushSpaces(true))) + (yield*
              __yieldStar(this.pushIndicators()));

              \          }

              \        }

              \    }

              \    return 0;

              \  }

              \  *pushTag() {

              \    if (this.charAt(1) === \"<\") {

              \      let i = this.pos + 2;

              \      let ch = this.buffer[i];

              \      while (!isEmpty(ch) && ch !== \">\")

              \      ch = this.buffer[++i];

              \      return yield* __yieldStar(this.pushToIndex(ch === \">\" ? i
              + 1 : i, false));

              \    } else {

              \      let i = this.pos + 1;

              \      let ch = this.buffer[i];

              \      while (ch) {

              \        if (tagChars.has(ch))

              \        ch = this.buffer[++i];else

              \        if (ch === \"%\" && hexDigits.has(this.buffer[i + 1]) &&
              hexDigits.has(this.buffer[i + 2])) {

              \          ch = this.buffer[i += 3];

              \        } else

              \        break;

              \      }

              \      return yield* __yieldStar(this.pushToIndex(i, false));

              \    }

              \  }

              \  *pushNewline() {

              \    const ch = this.buffer[this.pos];

              \    if (ch === \"\\n\")

              \    return yield* __yieldStar(this.pushCount(1));else

              \    if (ch === \"\\r\" && this.charAt(1) === \"\\n\")

              \    return yield* __yieldStar(this.pushCount(2));else


              \    return 0;

              \  }

              \  *pushSpaces(allowTabs) {

              \    let i = this.pos - 1;

              \    let ch;

              \    do {

              \      ch = this.buffer[++i];

              \    } while (ch === \" \" || allowTabs && ch === \"\t\");

              \    const n = i - this.pos;

              \    if (n > 0) {

              \      yield this.buffer.substr(this.pos, n);

              \      this.pos = i;

              \    }

              \    return n;

              \  }

              \  *pushUntil(test) {

              \    let i = this.pos;

              \    let ch = this.buffer[i];

              \    while (!test(ch))

              \    ch = this.buffer[++i];

              \    return yield* __yieldStar(this.pushToIndex(i, false));

              \  }

              };


              // node_modules/yaml/browser/dist/parse/line-counter.js

              var LineCounter = class {

              \  constructor() {

              \    this.lineStarts = [];

              \    this.addNewLine = (offset) => this.lineStarts.push(offset);

              \    this.linePos = (offset) => {

              \      let low = 0;

              \      let high = this.lineStarts.length;

              \      while (low < high) {

              \        const mid = low + high >> 1;

              \        if (this.lineStarts[mid] < offset)

              \        low = mid + 1;else


              \        high = mid;

              \      }

              \      if (this.lineStarts[low] === offset)

              \      return { line: low + 1, col: 1 };

              \      if (low === 0)

              \      return { line: 0, col: offset };

              \      const start = this.lineStarts[low - 1];

              \      return { line: low, col: offset - start + 1 };

              \    };

              \  }

              };


              // node_modules/yaml/browser/dist/parse/parser.js

              function includesToken(list, type) {

              \  for (let i = 0; i < list.length; ++i)

              \  if (list[i].type === type)

              \  return true;

              \  return false;

              }

              function findNonEmptyIndex(list) {

              \  for (let i = 0; i < list.length; ++i) {

              \    switch (list[i].type) {

              \      case \"space\":

              \      case \"comment\":

              \      case \"newline\":

              \        break;

              \      default:

              \        return i;

              \    }

              \  }

              \  return -1;

              }

              function isFlowToken(token) {

              \  switch (token == null ? void 0 : token.type) {

              \    case \"alias\":

              \    case \"scalar\":

              \    case \"single-quoted-scalar\":

              \    case \"double-quoted-scalar\":

              \    case \"flow-collection\":

              \      return true;

              \    default:

              \      return false;

              \  }

              }

              function getPrevProps(parent) {

              \  var _a;

              \  switch (parent.type) {

              \    case \"document\":

              \      return parent.start;

              \    case \"block-map\":{

              \        const it = parent.items[parent.items.length - 1];

              \        return (_a = it.sep) != null ? _a : it.start;

              \      }

              \    case \"block-seq\":

              \      return parent.items[parent.items.length - 1].start;

              \    default:

              \      return [];

              \  }

              }

              function getFirstKeyStartProps(prev) {

              \  var _a;

              \  if (prev.length === 0)

              \  return [];

              \  let i = prev.length;

              \  loop: while (--i >= 0) {

              \    switch (prev[i].type) {

              \      case \"doc-start\":

              \      case \"explicit-key-ind\":

              \      case \"map-value-ind\":

              \      case \"seq-item-ind\":

              \      case \"newline\":

              \        break loop;

              \    }

              \  }

              \  while (((_a = prev[++i]) == null ? void 0 : _a.type) ===
              \"space\") {

              \  }

              \  return prev.splice(i, prev.length);

              }

              function fixFlowSeqItems(fc) {

              \  if (fc.start.type === \"flow-seq-start\") {

              \    for (const it of fc.items) {

              \      if (it.sep && !it.value && !includesToken(it.start,
              \"explicit-key-ind\") && !includesToken(it.sep,
              \"map-value-ind\")) {

              \        if (it.key)

              \        it.value = it.key;

              \        delete it.key;

              \        if (isFlowToken(it.value)) {

              \          if (it.value.end)

              \          Array.prototype.push.apply(it.value.end, it.sep);else


              \          it.value.end = it.sep;

              \        } else

              \        Array.prototype.push.apply(it.start, it.sep);

              \        delete it.sep;

              \      }

              \    }

              \  }

              }

              var Parser = class {

              \  /**

              \   * @param onNewLine - If defined, called separately with the
              start position of

              \   *   each new line (in `parse()`, including the start of
              input).

              \   */

              \  constructor(onNewLine) {

              \    this.atNewLine = true;

              \    this.atScalar = false;

              \    this.indent = 0;

              \    this.offset = 0;

              \    this.onKeyLine = false;

              \    this.stack = [];

              \    this.source = \"\";

              \    this.type = \"\";

              \    this.lexer = new Lexer();

              \    this.onNewLine = onNewLine;

              \  }

              \  /**

              \   * Parse `source` as a YAML stream.

              \   * If `incomplete`, a part of the last line may be left as a
              buffer for the next call.

              \   *

              \   * Errors are not thrown, but yielded as `{ type: 'error',
              message }` tokens.

              \   *

              \   * @returns A generator of tokens representing each directive,
              document, and other structure.

              \   */

              \  *parse(source, incomplete = false) {

              \    if (this.onNewLine && this.offset === 0)

              \    this.onNewLine(0);

              \    for (const lexeme of this.lexer.lex(source, incomplete))

              \    yield* __yieldStar(this.next(lexeme));

              \    if (!incomplete)

              \    yield* __yieldStar(this.end());

              \  }

              \  /**

              \   * Advance the parser by the `source` of one lexical token.

              \   */

              \  *next(source) {

              \    this.source = source;

              \    if (this.atScalar) {

              \      this.atScalar = false;

              \      yield* __yieldStar(this.step());

              \      this.offset += source.length;

              \      return;

              \    }

              \    const type = tokenType(source);

              \    if (!type) {

              \      const message = `Not a YAML token: ${source}`;

              \      yield* __yieldStar(this.pop({ type: \"error\", offset:
              this.offset, message, source }));

              \      this.offset += source.length;

              \    } else if (type === \"scalar\") {

              \      this.atNewLine = false;

              \      this.atScalar = true;

              \      this.type = \"scalar\";

              \    } else {

              \      this.type = type;

              \      yield* __yieldStar(this.step());

              \      switch (type) {

              \        case \"newline\":

              \          this.atNewLine = true;

              \          this.indent = 0;

              \          if (this.onNewLine)

              \          this.onNewLine(this.offset + source.length);

              \          break;

              \        case \"space\":

              \          if (this.atNewLine && source[0] === \" \")

              \          this.indent += source.length;

              \          break;

              \        case \"explicit-key-ind\":

              \        case \"map-value-ind\":

              \        case \"seq-item-ind\":

              \          if (this.atNewLine)

              \          this.indent += source.length;

              \          break;

              \        case \"doc-mode\":

              \        case \"flow-error-end\":

              \          return;

              \        default:

              \          this.atNewLine = false;

              \      }

              \      this.offset += source.length;

              \    }

              \  }

              \  /** Call at end of input to push out any remaining
              constructions */

              \  *end() {

              \    while (this.stack.length > 0)

              \    yield* __yieldStar(this.pop());

              \  }

              \  get sourceToken() {

              \    const st = {

              \      type: this.type,

              \      offset: this.offset,

              \      indent: this.indent,

              \      source: this.source

              \    };

              \    return st;

              \  }

              \  *step() {

              \    const top = this.peek(1);

              \    if (this.type === \"doc-end\" && (!top || top.type !==
              \"doc-end\")) {

              \      while (this.stack.length > 0)

              \      yield* __yieldStar(this.pop());

              \      this.stack.push({

              \        type: \"doc-end\",

              \        offset: this.offset,

              \        source: this.source

              \      });

              \      return;

              \    }

              \    if (!top)

              \    return yield* __yieldStar(this.stream());

              \    switch (top.type) {

              \      case \"document\":

              \        return yield* __yieldStar(this.document(top));

              \      case \"alias\":

              \      case \"scalar\":

              \      case \"single-quoted-scalar\":

              \      case \"double-quoted-scalar\":

              \        return yield* __yieldStar(this.scalar(top));

              \      case \"block-scalar\":

              \        return yield* __yieldStar(this.blockScalar(top));

              \      case \"block-map\":

              \        return yield* __yieldStar(this.blockMap(top));

              \      case \"block-seq\":

              \        return yield* __yieldStar(this.blockSequence(top));

              \      case \"flow-collection\":

              \        return yield* __yieldStar(this.flowCollection(top));

              \      case \"doc-end\":

              \        return yield* __yieldStar(this.documentEnd(top));

              \    }

              \    yield* __yieldStar(this.pop());

              \  }

              \  peek(n) {

              \    return this.stack[this.stack.length - n];

              \  }

              \  *pop(error) {

              \    const token = error != null ? error : this.stack.pop();

              \    if (!token) {

              \      const message = \"Tried to pop an empty stack\";

              \      yield { type: \"error\", offset: this.offset, source: \"\",
              message };

              \    } else if (this.stack.length === 0) {

              \      yield token;

              \    } else {

              \      const top = this.peek(1);

              \      if (token.type === \"block-scalar\") {

              \        token.indent = \"indent\" in top ? top.indent : 0;

              \      } else if (token.type === \"flow-collection\" && top.type
              === \"document\") {

              \        token.indent = 0;

              \      }

              \      if (token.type === \"flow-collection\")

              \      fixFlowSeqItems(token);

              \      switch (top.type) {

              \        case \"document\":

              \          top.value = token;

              \          break;

              \        case \"block-scalar\":

              \          top.props.push(token);

              \          break;

              \        case \"block-map\":{

              \            const it = top.items[top.items.length - 1];

              \            if (it.value) {

              \              top.items.push({ start: [], key: token, sep: [] });

              \              this.onKeyLine = true;

              \              return;

              \            } else if (it.sep) {

              \              it.value = token;

              \            } else {

              \              Object.assign(it, { key: token, sep: [] });

              \              this.onKeyLine = !it.explicitKey;

              \              return;

              \            }

              \            break;

              \          }

              \        case \"block-seq\":{

              \            const it = top.items[top.items.length - 1];

              \            if (it.value)

              \            top.items.push({ start: [], value: token });else


              \            it.value = token;

              \            break;

              \          }

              \        case \"flow-collection\":{

              \            const it = top.items[top.items.length - 1];

              \            if (!it || it.value)

              \            top.items.push({ start: [], key: token, sep: []
              });else

              \            if (it.sep)

              \            it.value = token;else


              \            Object.assign(it, { key: token, sep: [] });

              \            return;

              \          }

              \        default:

              \          yield* __yieldStar(this.pop());

              \          yield* __yieldStar(this.pop(token));

              \      }

              \      if ((top.type === \"document\" || top.type ===
              \"block-map\" || top.type === \"block-seq\") && (token.type ===
              \"block-map\" || token.type === \"block-seq\")) {

              \        const last = token.items[token.items.length - 1];

              \        if (last && !last.sep && !last.value && last.start.length
              > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0
              || last.start.every((st) => st.type !== \"comment\" || st.indent <
              token.indent))) {

              \          if (top.type === \"document\")

              \          top.end = last.start;else


              \          top.items.push({ start: last.start });

              \          token.items.splice(-1, 1);

              \        }

              \      }

              \    }

              \  }

              \  *stream() {

              \    switch (this.type) {

              \      case \"directive-line\":

              \        yield { type: \"directive\", offset: this.offset, source:
              this.source };

              \        return;

              \      case \"byte-order-mark\":

              \      case \"space\":

              \      case \"comment\":

              \      case \"newline\":

              \        yield this.sourceToken;

              \        return;

              \      case \"doc-mode\":

              \      case \"doc-start\":{

              \          const doc = {

              \            type: \"document\",

              \            offset: this.offset,

              \            start: []

              \          };

              \          if (this.type === \"doc-start\")

              \          doc.start.push(this.sourceToken);

              \          this.stack.push(doc);

              \          return;

              \        }

              \    }

              \    yield {

              \      type: \"error\",

              \      offset: this.offset,

              \      message: `Unexpected ${this.type} token in YAML stream`,

              \      source: this.source

              \    };

              \  }

              \  *document(doc) {

              \    if (doc.value)

              \    return yield* __yieldStar(this.lineEnd(doc));

              \    switch (this.type) {

              \      case \"doc-start\":{

              \          if (findNonEmptyIndex(doc.start) !== -1) {

              \            yield* __yieldStar(this.pop());

              \            yield* __yieldStar(this.step());

              \          } else

              \          doc.start.push(this.sourceToken);

              \          return;

              \        }

              \      case \"anchor\":

              \      case \"tag\":

              \      case \"space\":

              \      case \"comment\":

              \      case \"newline\":

              \        doc.start.push(this.sourceToken);

              \        return;

              \    }

              \    const bv = this.startBlockValue(doc);

              \    if (bv)

              \    this.stack.push(bv);else

              \    {

              \      yield {

              \        type: \"error\",

              \        offset: this.offset,

              \        message: `Unexpected ${this.type} token in YAML
              document`,

              \        source: this.source

              \      };

              \    }

              \  }

              \  *scalar(scalar) {

              \    if (this.type === \"map-value-ind\") {

              \      const prev = getPrevProps(this.peek(2));

              \      const start = getFirstKeyStartProps(prev);

              \      let sep;

              \      if (scalar.end) {

              \        sep = scalar.end;

              \        sep.push(this.sourceToken);

              \        delete scalar.end;

              \      } else

              \      sep = [this.sourceToken];

              \      const map2 = {

              \        type: \"block-map\",

              \        offset: scalar.offset,

              \        indent: scalar.indent,

              \        items: [{ start, key: scalar, sep }]

              \      };

              \      this.onKeyLine = true;

              \      this.stack[this.stack.length - 1] = map2;

              \    } else

              \    yield* __yieldStar(this.lineEnd(scalar));

              \  }

              \  *blockScalar(scalar) {

              \    switch (this.type) {

              \      case \"space\":

              \      case \"comment\":

              \      case \"newline\":

              \        scalar.props.push(this.sourceToken);

              \        return;

              \      case \"scalar\":

              \        scalar.source = this.source;

              \        this.atNewLine = true;

              \        this.indent = 0;

              \        if (this.onNewLine) {

              \          let nl = this.source.indexOf(\"\\n\") + 1;

              \          while (nl !== 0) {

              \            this.onNewLine(this.offset + nl);

              \            nl = this.source.indexOf(\"\\n\", nl) + 1;

              \          }

              \        }

              \        yield* __yieldStar(this.pop());

              \        break;

              \      default:

              \        yield* __yieldStar(this.pop());

              \        yield* __yieldStar(this.step());

              \    }

              \  }

              \  *blockMap(map2) {

              \    var _a;

              \    const it = map2.items[map2.items.length - 1];

              \    switch (this.type) {

              \      case \"newline\":

              \        this.onKeyLine = false;

              \        if (it.value) {

              \          const end = \"end\" in it.value ? it.value.end : void
              0;

              \          const last = Array.isArray(end) ? end[end.length - 1] :
              void 0;

              \          if ((last == null ? void 0 : last.type) ===
              \"comment\")

              \          end == null ? void 0 : end.push(this.sourceToken);else


              \          map2.items.push({ start: [this.sourceToken] });

              \        } else if (it.sep) {

              \          it.sep.push(this.sourceToken);

              \        } else {

              \          it.start.push(this.sourceToken);

              \        }

              \        return;

              \      case \"space\":

              \      case \"comment\":

              \        if (it.value) {

              \          map2.items.push({ start: [this.sourceToken] });

              \        } else if (it.sep) {

              \          it.sep.push(this.sourceToken);

              \        } else {

              \          if (this.atIndentedComment(it.start, map2.indent)) {

              \            const prev = map2.items[map2.items.length - 2];

              \            const end = (_a = prev == null ? void 0 : prev.value)
              == null ? void 0 : _a.end;

              \            if (Array.isArray(end)) {

              \              Array.prototype.push.apply(end, it.start);

              \              end.push(this.sourceToken);

              \              map2.items.pop();

              \              return;

              \            }

              \          }

              \          it.start.push(this.sourceToken);

              \        }

              \        return;

              \    }

              \    if (this.indent >= map2.indent) {

              \      const atMapIndent = !this.onKeyLine && this.indent ===
              map2.indent;

              \      const atNextItem = atMapIndent && (it.sep ||
              it.explicitKey) && this.type !== \"seq-item-ind\";

              \      let start = [];

              \      if (atNextItem && it.sep && !it.value) {

              \        const nl = [];

              \        for (let i = 0; i < it.sep.length; ++i) {

              \          const st = it.sep[i];

              \          switch (st.type) {

              \            case \"newline\":

              \              nl.push(i);

              \              break;

              \            case \"space\":

              \              break;

              \            case \"comment\":

              \              if (st.indent > map2.indent)

              \              nl.length = 0;

              \              break;

              \            default:

              \              nl.length = 0;

              \          }

              \        }

              \        if (nl.length >= 2)

              \        start = it.sep.splice(nl[1]);

              \      }

              \      switch (this.type) {

              \        case \"anchor\":

              \        case \"tag\":

              \          if (atNextItem || it.value) {

              \            start.push(this.sourceToken);

              \            map2.items.push({ start });

              \            this.onKeyLine = true;

              \          } else if (it.sep) {

              \            it.sep.push(this.sourceToken);

              \          } else {

              \            it.start.push(this.sourceToken);

              \          }

              \          return;

              \        case \"explicit-key-ind\":

              \          if (!it.sep && !it.explicitKey) {

              \            it.start.push(this.sourceToken);

              \            it.explicitKey = true;

              \          } else if (atNextItem || it.value) {

              \            start.push(this.sourceToken);

              \            map2.items.push({ start, explicitKey: true });

              \          } else {

              \            this.stack.push({

              \              type: \"block-map\",

              \              offset: this.offset,

              \              indent: this.indent,

              \              items: [{ start: [this.sourceToken], explicitKey:
              true }]

              \            });

              \          }

              \          this.onKeyLine = true;

              \          return;

              \        case \"map-value-ind\":

              \          if (it.explicitKey) {

              \            if (!it.sep) {

              \              if (includesToken(it.start, \"newline\")) {

              \                Object.assign(it, { key: null, sep:
              [this.sourceToken] });

              \              } else {

              \                const start2 = getFirstKeyStartProps(it.start);

              \                this.stack.push({

              \                  type: \"block-map\",

              \                  offset: this.offset,

              \                  indent: this.indent,

              \                  items: [{ start: start2, key: null, sep:
              [this.sourceToken] }]

              \                });

              \              }

              \            } else if (it.value) {

              \              map2.items.push({ start: [], key: null, sep:
              [this.sourceToken] });

              \            } else if (includesToken(it.sep, \"map-value-ind\"))
              {

              \              this.stack.push({

              \                type: \"block-map\",

              \                offset: this.offset,

              \                indent: this.indent,

              \                items: [{ start, key: null, sep:
              [this.sourceToken] }]

              \              });

              \            } else if (isFlowToken(it.key) &&
              !includesToken(it.sep, \"newline\")) {

              \              const start2 = getFirstKeyStartProps(it.start);

              \              const key = it.key;

              \              const sep = it.sep;

              \              sep.push(this.sourceToken);

              \              delete it.key, delete it.sep;

              \              this.stack.push({

              \                type: \"block-map\",

              \                offset: this.offset,

              \                indent: this.indent,

              \                items: [{ start: start2, key, sep }]

              \              });

              \            } else if (start.length > 0) {

              \              it.sep = it.sep.concat(start, this.sourceToken);

              \            } else {

              \              it.sep.push(this.sourceToken);

              \            }

              \          } else {

              \            if (!it.sep) {

              \              Object.assign(it, { key: null, sep:
              [this.sourceToken] });

              \            } else if (it.value || atNextItem) {

              \              map2.items.push({ start, key: null, sep:
              [this.sourceToken] });

              \            } else if (includesToken(it.sep, \"map-value-ind\"))
              {

              \              this.stack.push({

              \                type: \"block-map\",

              \                offset: this.offset,

              \                indent: this.indent,

              \                items: [{ start: [], key: null, sep:
              [this.sourceToken] }]

              \              });

              \            } else {

              \              it.sep.push(this.sourceToken);

              \            }

              \          }

              \          this.onKeyLine = true;

              \          return;

              \        case \"alias\":

              \        case \"scalar\":

              \        case \"single-quoted-scalar\":

              \        case \"double-quoted-scalar\":{

              \            const fs = this.flowScalar(this.type);

              \            if (atNextItem || it.value) {

              \              map2.items.push({ start, key: fs, sep: [] });

              \              this.onKeyLine = true;

              \            } else if (it.sep) {

              \              this.stack.push(fs);

              \            } else {

              \              Object.assign(it, { key: fs, sep: [] });

              \              this.onKeyLine = true;

              \            }

              \            return;

              \          }

              \        default:{

              \            const bv = this.startBlockValue(map2);

              \            if (bv) {

              \              if (atMapIndent && bv.type !== \"block-seq\") {

              \                map2.items.push({ start });

              \              }

              \              this.stack.push(bv);

              \              return;

              \            }

              \          }

              \      }

              \    }

              \    yield* __yieldStar(this.pop());

              \    yield* __yieldStar(this.step());

              \  }

              \  *blockSequence(seq2) {

              \    var _a;

              \    const it = seq2.items[seq2.items.length - 1];

              \    switch (this.type) {

              \      case \"newline\":

              \        if (it.value) {

              \          const end = \"end\" in it.value ? it.value.end : void
              0;

              \          const last = Array.isArray(end) ? end[end.length - 1] :
              void 0;

              \          if ((last == null ? void 0 : last.type) ===
              \"comment\")

              \          end == null ? void 0 : end.push(this.sourceToken);else


              \          seq2.items.push({ start: [this.sourceToken] });

              \        } else

              \        it.start.push(this.sourceToken);

              \        return;

              \      case \"space\":

              \      case \"comment\":

              \        if (it.value)

              \        seq2.items.push({ start: [this.sourceToken] });else

              \        {

              \          if (this.atIndentedComment(it.start, seq2.indent)) {

              \            const prev = seq2.items[seq2.items.length - 2];

              \            const end = (_a = prev == null ? void 0 : prev.value)
              == null ? void 0 : _a.end;

              \            if (Array.isArray(end)) {

              \              Array.prototype.push.apply(end, it.start);

              \              end.push(this.sourceToken);

              \              seq2.items.pop();

              \              return;

              \            }

              \          }

              \          it.start.push(this.sourceToken);

              \        }

              \        return;

              \      case \"anchor\":

              \      case \"tag\":

              \        if (it.value || this.indent <= seq2.indent)

              \        break;

              \        it.start.push(this.sourceToken);

              \        return;

              \      case \"seq-item-ind\":

              \        if (this.indent !== seq2.indent)

              \        break;

              \        if (it.value || includesToken(it.start,
              \"seq-item-ind\"))

              \        seq2.items.push({ start: [this.sourceToken] });else


              \        it.start.push(this.sourceToken);

              \        return;

              \    }

              \    if (this.indent > seq2.indent) {

              \      const bv = this.startBlockValue(seq2);

              \      if (bv) {

              \        this.stack.push(bv);

              \        return;

              \      }

              \    }

              \    yield* __yieldStar(this.pop());

              \    yield* __yieldStar(this.step());

              \  }

              \  *flowCollection(fc) {

              \    const it = fc.items[fc.items.length - 1];

              \    if (this.type === \"flow-error-end\") {

              \      let top;

              \      do {

              \        yield* __yieldStar(this.pop());

              \        top = this.peek(1);

              \      } while (top && top.type === \"flow-collection\");

              \    } else if (fc.end.length === 0) {

              \      switch (this.type) {

              \        case \"comma\":

              \        case \"explicit-key-ind\":

              \          if (!it || it.sep)

              \          fc.items.push({ start: [this.sourceToken] });else


              \          it.start.push(this.sourceToken);

              \          return;

              \        case \"map-value-ind\":

              \          if (!it || it.value)

              \          fc.items.push({ start: [], key: null, sep:
              [this.sourceToken] });else

              \          if (it.sep)

              \          it.sep.push(this.sourceToken);else


              \          Object.assign(it, { key: null, sep: [this.sourceToken]
              });

              \          return;

              \        case \"space\":

              \        case \"comment\":

              \        case \"newline\":

              \        case \"anchor\":

              \        case \"tag\":

              \          if (!it || it.value)

              \          fc.items.push({ start: [this.sourceToken] });else

              \          if (it.sep)

              \          it.sep.push(this.sourceToken);else


              \          it.start.push(this.sourceToken);

              \          return;

              \        case \"alias\":

              \        case \"scalar\":

              \        case \"single-quoted-scalar\":

              \        case \"double-quoted-scalar\":{

              \            const fs = this.flowScalar(this.type);

              \            if (!it || it.value)

              \            fc.items.push({ start: [], key: fs, sep: [] });else

              \            if (it.sep)

              \            this.stack.push(fs);else


              \            Object.assign(it, { key: fs, sep: [] });

              \            return;

              \          }

              \        case \"flow-map-end\":

              \        case \"flow-seq-end\":

              \          fc.end.push(this.sourceToken);

              \          return;

              \      }

              \      const bv = this.startBlockValue(fc);

              \      if (bv)

              \      this.stack.push(bv);else

              \      {

              \        yield* __yieldStar(this.pop());

              \        yield* __yieldStar(this.step());

              \      }

              \    } else {

              \      const parent = this.peek(2);

              \      if (parent.type === \"block-map\" && (this.type ===
              \"map-value-ind\" && parent.indent === fc.indent || this.type ===
              \"newline\" && !parent.items[parent.items.length - 1].sep)) {

              \        yield* __yieldStar(this.pop());

              \        yield* __yieldStar(this.step());

              \      } else if (this.type === \"map-value-ind\" && parent.type
              !== \"flow-collection\") {

              \        const prev = getPrevProps(parent);

              \        const start = getFirstKeyStartProps(prev);

              \        fixFlowSeqItems(fc);

              \        const sep = fc.end.splice(1, fc.end.length);

              \        sep.push(this.sourceToken);

              \        const map2 = {

              \          type: \"block-map\",

              \          offset: fc.offset,

              \          indent: fc.indent,

              \          items: [{ start, key: fc, sep }]

              \        };

              \        this.onKeyLine = true;

              \        this.stack[this.stack.length - 1] = map2;

              \      } else {

              \        yield* __yieldStar(this.lineEnd(fc));

              \      }

              \    }

              \  }

              \  flowScalar(type) {

              \    if (this.onNewLine) {

              \      let nl = this.source.indexOf(\"\\n\") + 1;

              \      while (nl !== 0) {

              \        this.onNewLine(this.offset + nl);

              \        nl = this.source.indexOf(\"\\n\", nl) + 1;

              \      }

              \    }

              \    return {

              \      type,

              \      offset: this.offset,

              \      indent: this.indent,

              \      source: this.source

              \    };

              \  }

              \  startBlockValue(parent) {

              \    switch (this.type) {

              \      case \"alias\":

              \      case \"scalar\":

              \      case \"single-quoted-scalar\":

              \      case \"double-quoted-scalar\":

              \        return this.flowScalar(this.type);

              \      case \"block-scalar-header\":

              \        return {

              \          type: \"block-scalar\",

              \          offset: this.offset,

              \          indent: this.indent,

              \          props: [this.sourceToken],

              \          source: \"\"

              \        };

              \      case \"flow-map-start\":

              \      case \"flow-seq-start\":

              \        return {

              \          type: \"flow-collection\",

              \          offset: this.offset,

              \          indent: this.indent,

              \          start: this.sourceToken,

              \          items: [],

              \          end: []

              \        };

              \      case \"seq-item-ind\":

              \        return {

              \          type: \"block-seq\",

              \          offset: this.offset,

              \          indent: this.indent,

              \          items: [{ start: [this.sourceToken] }]

              \        };

              \      case \"explicit-key-ind\":{

              \          this.onKeyLine = true;

              \          const prev = getPrevProps(parent);

              \          const start = getFirstKeyStartProps(prev);

              \          start.push(this.sourceToken);

              \          return {

              \            type: \"block-map\",

              \            offset: this.offset,

              \            indent: this.indent,

              \            items: [{ start, explicitKey: true }]

              \          };

              \        }

              \      case \"map-value-ind\":{

              \          this.onKeyLine = true;

              \          const prev = getPrevProps(parent);

              \          const start = getFirstKeyStartProps(prev);

              \          return {

              \            type: \"block-map\",

              \            offset: this.offset,

              \            indent: this.indent,

              \            items: [{ start, key: null, sep: [this.sourceToken]
              }]

              \          };

              \        }

              \    }

              \    return null;

              \  }

              \  atIndentedComment(start, indent) {

              \    if (this.type !== \"comment\")

              \    return false;

              \    if (this.indent <= indent)

              \    return false;

              \    return start.every((st) => st.type === \"newline\" || st.type
              === \"space\");

              \  }

              \  *documentEnd(docEnd) {

              \    if (this.type !== \"doc-mode\") {

              \      if (docEnd.end)

              \      docEnd.end.push(this.sourceToken);else


              \      docEnd.end = [this.sourceToken];

              \      if (this.type === \"newline\")

              \      yield* __yieldStar(this.pop());

              \    }

              \  }

              \  *lineEnd(token) {

              \    switch (this.type) {

              \      case \"comma\":

              \      case \"doc-start\":

              \      case \"doc-end\":

              \      case \"flow-seq-end\":

              \      case \"flow-map-end\":

              \      case \"map-value-ind\":

              \        yield* __yieldStar(this.pop());

              \        yield* __yieldStar(this.step());

              \        break;

              \      case \"newline\":

              \        this.onKeyLine = false;

              \      case \"space\":

              \      case \"comment\":

              \      default:

              \        if (token.end)

              \        token.end.push(this.sourceToken);else


              \        token.end = [this.sourceToken];

              \        if (this.type === \"newline\")

              \        yield* __yieldStar(this.pop());

              \    }

              \  }

              };


              // node_modules/yaml/browser/dist/public-api.js

              function parseOptions(options) {

              \  const prettyErrors = options.prettyErrors !== false;

              \  const lineCounter = options.lineCounter || prettyErrors && new
              LineCounter() || null;

              \  return { lineCounter, prettyErrors };

              }

              function parseAllDocuments(source, options = {}) {

              \  const { lineCounter, prettyErrors } = parseOptions(options);

              \  const parser = new Parser(lineCounter == null ? void 0 :
              lineCounter.addNewLine);

              \  const composer = new Composer(options);

              \  const docs =
              Array.from(composer.compose(parser.parse(source)));

              \  if (prettyErrors && lineCounter)

              \  for (const doc of docs) {

              \    doc.errors.forEach(prettifyError(source, lineCounter));

              \    doc.warnings.forEach(prettifyError(source, lineCounter));

              \  }

              \  if (docs.length > 0)

              \  return docs;

              \  return Object.assign([], { empty: true },
              composer.streamInfo());

              }

              function parseDocument(source, options = {}) {

              \  const { lineCounter, prettyErrors } = parseOptions(options);

              \  const parser = new Parser(lineCounter == null ? void 0 :
              lineCounter.addNewLine);

              \  const composer = new Composer(options);

              \  let doc = null;

              \  for (const _doc of composer.compose(parser.parse(source), true,
              source.length)) {

              \    if (!doc)

              \    doc = _doc;else

              \    if (doc.options.logLevel !== \"silent\") {

              \      doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2),
              \"MULTIPLE_DOCS\", \"Source contains multiple documents; please
              use YAML.parseAllDocuments()\"));

              \      break;

              \    }

              \  }

              \  if (prettyErrors && lineCounter) {

              \    doc.errors.forEach(prettifyError(source, lineCounter));

              \    doc.warnings.forEach(prettifyError(source, lineCounter));

              \  }

              \  return doc;

              }

              function parse(src, reviver, options) {

              \  let _reviver = void 0;

              \  if (typeof reviver === \"function\") {

              \    _reviver = reviver;

              \  } else if (options === void 0 && reviver && typeof reviver ===
              \"object\") {

              \    options = reviver;

              \  }

              \  const doc = parseDocument(src, options);

              \  if (!doc)

              \  return null;

              \  doc.warnings.forEach((warning) => warn(doc.options.logLevel,
              warning));

              \  if (doc.errors.length > 0) {

              \    if (doc.options.logLevel !== \"silent\")

              \    throw doc.errors[0];else


              \    doc.errors = [];

              \  }

              \  return doc.toJS(Object.assign({ reviver: _reviver }, options));

              }

              function stringify3(value, replacer, options) {

              \  var _a;

              \  let _replacer = null;

              \  if (typeof replacer === \"function\" ||
              Array.isArray(replacer)) {

              \    _replacer = replacer;

              \  } else if (options === void 0 && replacer) {

              \    options = replacer;

              \  }

              \  if (typeof options === \"string\")

              \  options = options.length;

              \  if (typeof options === \"number\") {

              \    const indent = Math.round(options);

              \    options = indent < 1 ? void 0 : indent > 8 ? { indent: 8 } :
              { indent };

              \  }

              \  if (value === void 0) {

              \    const { keepUndefined } = (_a = options != null ? options :
              replacer) != null ? _a : {};

              \    if (!keepUndefined)

              \    return void 0;

              \  }

              \  return new Document(value, _replacer,
              options).toString(options);

              }


              // node_modules/yaml/browser/index.js

              var browser_default = dist_exports;


              // src/index.js

              var src_default = (req, rsp) => {

              \  console.log(\"Running function\");

              \  [\"us-east-1\", \"us-east-2\"].forEach((region) => {

              \    var _a;

              \    rsp.setDesiredComposedResource(`bucket-${region}`, {

              \      apiVersion: \"example.org/v1alpha1\",

              \      kind: \"Bucket\",

              \      metadata: {

              \        annotations: __spreadValues({

              \          \"javascript.fn.crossplane.io/ready\": \"True\"

              \        }, req.input.metadata.annotations),

              \        labels: __spreadProps(__spreadValues({}, ((_a =
              req.observed.composite.resource.metadata) == null ? void 0 :
              _a.labels) || {}), {

              \          foo: \"bar\"

              \        }),

              \        spec: {

              \          name: `test-${region}`,

              \          region,

              \          compositeRegion:
              req.observed.composite.resource.spec.region,

              \          yamlTest: browser_default.stringify({ foo: \"bar\",
              bax: [12, 23] }),

              \          b64test: btoa(\"abcdefgh\")

              \        }

              \      }

              \    });

              \  });

              \  rsp.setConnectionDetails({ \"foo\": \"bar\" });

              \  rsp.updateCompositeStatus({

              \    something: \"in the way\",

              \    she: { moves: true }

              \  });

              \  rsp.updateCompositeStatus({ x: \"y\" });

              };exports.default = src_default;

              //#
              sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2Z\
              XJzaW9uIjozLCJuYW1lcyI6WyJkaXN0X2V4cG9ydHMiLCJfX2V4cG9ydCIsIkFsaW\
              FzIiwiQ1NUIiwiY3N0X2V4cG9ydHMiLCJDb21wb3NlciIsIkRvY3VtZW50IiwiTGV\
              4ZXIiLCJMaW5lQ291bnRlciIsIlBhaXIiLCJQYXJzZXIiLCJTY2FsYXIiLCJTY2hl\
              bWEiLCJZQU1MRXJyb3IiLCJZQU1MTWFwIiwiWUFNTFBhcnNlRXJyb3IiLCJZQU1MU\
              2VxIiwiWUFNTFdhcm5pbmciLCJpc0FsaWFzIiwiaXNDb2xsZWN0aW9uIiwiaXNEb2\
              N1bWVudCIsImlzTWFwIiwiaXNOb2RlIiwiaXNQYWlyIiwiaXNTY2FsYXIiLCJpc1N\
              lcSIsInBhcnNlIiwicGFyc2VBbGxEb2N1bWVudHMiLCJwYXJzZURvY3VtZW50Iiwi\
              c3RyaW5naWZ5Iiwic3RyaW5naWZ5MyIsInZpc2l0IiwidmlzaXRBc3luYyIsIkFMS\
              UFTIiwiU3ltYm9sIiwiZm9yIiwiRE9DIiwiTUFQIiwiUEFJUiIsIlNDQUxBUiIsIl\
              NFUSIsIk5PREVfVFlQRSIsIm5vZGUiLCJoYXNBbmNob3IiLCJhbmNob3IiLCJCUkV\
              BSyIsIlNLSVAiLCJSRU1PVkUiLCJ2aXNpdG9yIiwidmlzaXRvcl8iLCJpbml0Vmlz\
              aXRvciIsImNkIiwidmlzaXRfIiwiY29udGVudHMiLCJPYmplY3QiLCJmcmVlemUiL\
              CJrZXkiLCJwYXRoIiwiY3RybCIsImNhbGxWaXNpdG9yIiwicmVwbGFjZU5vZGUiLC\
              Jjb25jYXQiLCJpIiwiaXRlbXMiLCJsZW5ndGgiLCJjaSIsInNwbGljZSIsImNrIiw\
              iY3YiLCJ2YWx1ZSIsIl9fYXN5bmMiLCJ2aXNpdEFzeW5jXyIsIkNvbGxlY3Rpb24i\
              LCJOb2RlIiwiVmFsdWUiLCJhc3NpZ24iLCJNYXAiLCJTZXEiLCJfYSIsIl9iIiwiX\
              2MiLCJfZCIsIl9lIiwiY2FsbCIsInBhcmVudCIsInB0IiwiRXJyb3IiLCJlc2NhcG\
              VDaGFycyIsImVzY2FwZVRhZ05hbWUiLCJ0biIsInJlcGxhY2UiLCJjaCIsIkRpcmV\
              jdGl2ZXMiLCJfRGlyZWN0aXZlcyIsImNvbnN0cnVjdG9yIiwieWFtbCIsInRhZ3Mi\
              LCJkb2NTdGFydCIsImRvY0VuZCIsImRlZmF1bHRZYW1sIiwiZGVmYXVsdFRhZ3MiL\
              CJjbG9uZSIsImNvcHkiLCJhdERvY3VtZW50IiwicmVzIiwidmVyc2lvbiIsImF0Tm\
              V4dERvY3VtZW50IiwiZXhwbGljaXQiLCJhZGQiLCJsaW5lIiwib25FcnJvciIsInB\
              hcnRzIiwidHJpbSIsInNwbGl0IiwibmFtZSIsInNoaWZ0IiwiaGFuZGxlIiwicHJl\
              Zml4IiwiaXNWYWxpZCIsInRlc3QiLCJ0YWdOYW1lIiwic291cmNlIiwidmVyYmF0a\
              W0iLCJzbGljZSIsInN1ZmZpeCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ2\
              9tcG9uZW50IiwiZXJyb3IiLCJTdHJpbmciLCJ0YWdTdHJpbmciLCJ0YWciLCJlbnR\
              yaWVzIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsInRvU3RyaW5nIiwiZG9jIiwi\
              bGluZXMiLCJ0YWdFbnRyaWVzIiwidGFnTmFtZXMiLCJfa2V5Iiwia2V5cyIsInNvb\
              WUiLCJwdXNoIiwiam9pbiIsImFuY2hvcklzVmFsaWQiLCJzYSIsIkpTT04iLCJtc2\
              ciLCJhbmNob3JOYW1lcyIsInJvb3QiLCJhbmNob3JzIiwiU2V0IiwiZmluZE5ld0F\
              uY2hvciIsImV4Y2x1ZGUiLCJoYXMiLCJjcmVhdGVOb2RlQW5jaG9ycyIsImFsaWFz\
              T2JqZWN0cyIsInNvdXJjZU9iamVjdHMiLCJwcmV2QW5jaG9ycyIsIm9uQW5jaG9yI\
              iwic2V0QW5jaG9ycyIsInJlZiIsImdldCIsImFwcGx5UmV2aXZlciIsInJldml2ZX\
              IiLCJvYmoiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJsZW4iLCJ2MCIsInYxIiw\
              iayIsImZyb20iLCJkZWxldGUiLCJzZXQiLCJ0b0pTIiwiYXJnIiwiY3R4IiwibWFw\
              IiwidiIsInRvSlNPTiIsImRhdGEiLCJhbGlhc0NvdW50IiwiY291bnQiLCJvbkNyZ\
              WF0ZSIsInJlczIiLCJrZWVwIiwiTnVtYmVyIiwiTm9kZUJhc2UiLCJ0eXBlIiwiZG\
              VmaW5lUHJvcGVydHkiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImdldE93blB\
              yb3BlcnR5RGVzY3JpcHRvcnMiLCJyYW5nZSIsIm1hcEFzTWFwIiwibWF4QWxpYXND\
              b3VudCIsIlR5cGVFcnJvciIsIm1hcEtleVdhcm5lZCIsInZhbHVlcyIsInJlc29sd\
              mUiLCJmb3VuZCIsIl9hcmciLCJSZWZlcmVuY2VFcnJvciIsImdldEFsaWFzQ291bn\
              QiLCJfb25Db21tZW50IiwiX29uQ2hvbXBLZWVwIiwic3JjIiwib3B0aW9ucyIsInZ\
              lcmlmeUFsaWFzT3JkZXIiLCJpbXBsaWNpdEtleSIsIml0ZW0iLCJjIiwia2MiLCJ2\
              YyIsIk1hdGgiLCJtYXgiLCJpc1NjYWxhclZhbHVlIiwiQkxPQ0tfRk9MREVEIiwiQ\
              kxPQ0tfTElURVJBTCIsIlBMQUlOIiwiUVVPVEVfRE9VQkxFIiwiUVVPVEVfU0lOR0\
              xFIiwiZGVmYXVsdFRhZ1ByZWZpeCIsImZpbmRUYWdPYmplY3QiLCJmaWx0ZXIiLCJ\
              0IiwidGFnT2JqIiwiZmluZCIsImZvcm1hdCIsIl9hMiIsImlkZW50aWZ5IiwiY3Jl\
              YXRlTm9kZSIsIm1hcDIiLCJzY2hlbWEiLCJCb29sZWFuIiwiQmlnSW50IiwidmFsd\
              WVPZiIsImFsaWFzRHVwbGljYXRlT2JqZWN0cyIsIm9uVGFnT2JqIiwic2NoZW1hNC\
              IsIm5vZGUyIiwiaXRlcmF0b3IiLCJub2RlQ2xhc3MiLCJkZWZhdWx0IiwiY29sbGV\
              jdGlvbkZyb21QYXRoIiwiaXNJbnRlZ2VyIiwiYSIsImtlZXBVbmRlZmluZWQiLCJp\
              c0VtcHR5UGF0aCIsIm5leHQiLCJkb25lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyY\
              WJsZSIsIndyaXRhYmxlIiwiaXQiLCJhZGRJbiIsInJlc3QiLCJkZWxldGVJbiIsIm\
              dldEluIiwia2VlcFNjYWxhciIsImhhc0FsbE51bGxWYWx1ZXMiLCJhbGxvd1NjYWx\
              hciIsImV2ZXJ5IiwibiIsImNvbW1lbnRCZWZvcmUiLCJjb21tZW50IiwiaGFzSW4i\
              LCJzZXRJbiIsIm1heEZsb3dTdHJpbmdTaW5nbGVMaW5lTGVuZ3RoIiwic3RyaW5na\
              WZ5Q29tbWVudCIsInN0ciIsImluZGVudENvbW1lbnQiLCJpbmRlbnQiLCJsaW5lQ2\
              9tbWVudCIsImVuZHNXaXRoIiwiaW5jbHVkZXMiLCJGT0xEX0ZMT1ciLCJGT0xEX0J\
              MT0NLIiwiRk9MRF9RVU9URUQiLCJmb2xkRmxvd0xpbmVzIiwidGV4dCIsIm1vZGUi\
              LCJpbmRlbnRBdFN0YXJ0IiwibGluZVdpZHRoIiwibWluQ29udGVudFdpZHRoIiwib\
              25Gb2xkIiwib25PdmVyZmxvdyIsImVuZFN0ZXAiLCJmb2xkcyIsImVzY2FwZWRGb2\
              xkcyIsImVuZCIsInByZXYiLCJvdmVyZmxvdyIsImVzY1N0YXJ0IiwiZXNjRW5kIiw\
              iY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzIiwiaiIsImkyIiwiZm9sZCIsImVuZDIi\
              LCJzdGFydCIsImdldEZvbGRPcHRpb25zIiwiaXNCbG9jazIiLCJjb250YWluc0RvY\
              3VtZW50TWFya2VyIiwibGluZUxlbmd0aE92ZXJMaW1pdCIsImluZGVudExlbmd0aC\
              IsImxpbWl0Iiwic3RyTGVuIiwiZG91YmxlUXVvdGVkU3RyaW5nIiwianNvbiIsImR\
              vdWJsZVF1b3RlZEFzSlNPTiIsIm1pbk11bHRpTGluZUxlbmd0aCIsImRvdWJsZVF1\
              b3RlZE1pbk11bHRpTGluZUxlbmd0aCIsImNvZGUiLCJzdWJzdHIiLCJzaW5nbGVRd\
              W90ZWRTdHJpbmciLCJzaW5nbGVRdW90ZSIsInF1b3RlZFN0cmluZyIsInFzIiwiaG\
              FzRG91YmxlIiwiaGFzU2luZ2xlIiwiYmxvY2tFbmROZXdsaW5lcyIsImUiLCJibG9\
              ja1N0cmluZyIsIm9uQ29tbWVudCIsIm9uQ2hvbXBLZWVwIiwiYmxvY2tRdW90ZSIs\
              ImNvbW1lbnRTdHJpbmciLCJmb3JjZUJsb2NrSW5kZW50IiwibGl0ZXJhbCIsImNob\
              21wIiwiZW5kU3RhcnQiLCJlbmRObFBvcyIsImluZGV4T2YiLCJzdGFydFdpdGhTcG\
              FjZSIsInN0YXJ0RW5kIiwic3RhcnRObFBvcyIsImluZGVudFNpemUiLCJoZWFkZXI\
              iLCJib2R5IiwicGxhaW5TdHJpbmciLCJhY3R1YWxTdHJpbmciLCJpbmRlbnRTdGVw\
              IiwiaW5GbG93IiwiY29tcGF0Iiwic3RyaW5naWZ5U3RyaW5nIiwic3MiLCJfc3Rya\
              W5naWZ5IiwiX3R5cGUiLCJkZWZhdWx0S2V5VHlwZSIsImRlZmF1bHRTdHJpbmdUeX\
              BlIiwiY3JlYXRlU3RyaW5naWZ5Q29udGV4dCIsIm9wdCIsImRpcmVjdGl2ZXMiLCJ\
              mYWxzZVN0ciIsImZsb3dDb2xsZWN0aW9uUGFkZGluZyIsImluZGVudFNlcSIsIm51\
              bGxTdHIiLCJzaW1wbGVLZXlzIiwidHJ1ZVN0ciIsInRvU3RyaW5nT3B0aW9ucyIsI\
              mNvbGxlY3Rpb25TdHlsZSIsInJlcGVhdCIsImdldFRhZ09iamVjdCIsInN0cmluZ2\
              lmeVByb3BzIiwicHJvcHMiLCJyZXNvbHZlZEFsaWFzZXMiLCJvIiwic3RyaW5naWZ\
              5UGFpciIsImFsbE51bGxWYWx1ZXMiLCJrZXlDb21tZW50IiwiZXhwbGljaXRLZXki\
              LCJrZXlDb21tZW50RG9uZSIsImNob21wS2VlcCIsInZzYiIsInZjYiIsInZhbHVlQ\
              29tbWVudCIsInNwYWNlQmVmb3JlIiwiZmxvdyIsInZhbHVlQ29tbWVudERvbmUiLC\
              J2YWx1ZVN0ciIsIndzIiwiY3MiLCJ2czAiLCJubDAiLCJoYXNOZXdsaW5lIiwiaGF\
              zUHJvcHNMaW5lIiwic3AwIiwid2FybiIsImxvZ0xldmVsIiwid2FybmluZyIsInBy\
              b2Nlc3MiLCJlbWl0V2FybmluZyIsImNvbnNvbGUiLCJNRVJHRV9LRVkiLCJhZGRQY\
              WlyVG9KU01hcCIsIm1lcmdlIiwiaXNNZXJnZUtleSIsIm1lcmdlVG9KU01hcCIsIm\
              pzS2V5Iiwic3RyaW5nS2V5Iiwic3RyaW5naWZ5S2V5IiwianNWYWx1ZSIsInNyY01\
              hcCIsInZhbHVlMiIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwic3RyQ3R4\
              IiwiaW5TdHJpbmdpZnlLZXkiLCJzdHJLZXkiLCJqc29uU3RyIiwiY3JlYXRlUGFpc\
              iIsIl9QYWlyIiwiXyIsInBhaXIiLCJzdHJpbmdpZnlDb2xsZWN0aW9uIiwiY29sbG\
              VjdGlvbiIsInN0cmluZ2lmeTQiLCJzdHJpbmdpZnlGbG93Q29sbGVjdGlvbiIsInN\
              0cmluZ2lmeUJsb2NrQ29sbGVjdGlvbiIsImJsb2NrSXRlbVByZWZpeCIsImZsb3dD\
              aGFycyIsIml0ZW1JbmRlbnQiLCJpdGVtQ3R4IiwiY29tbWVudDIiLCJhZGRDb21tZ\
              W50QmVmb3JlIiwiaWsiLCJzdHIyIiwiZmNQYWRkaW5nIiwicmVxTmV3bGluZSIsIm\
              xpbmVzQXRWYWx1ZSIsIml2IiwicmVkdWNlIiwic3VtIiwiaWMiLCJ0cmltU3RhcnQ\
              iLCJmaW5kUGFpciIsInJlcGxhY2VyIiwic29ydE1hcEVudHJpZXMiLCJzb3J0Iiwi\
              b3ZlcndyaXRlIiwiX3BhaXIiLCJzb3J0RW50cmllcyIsImZpbmRJbmRleCIsImRlb\
              CIsIlR5cGUiLCJpZHgiLCJhc0l0ZW1JbmRleCIsInNlcTIiLCJzZXEiLCJzdHJpbm\
              ciLCJudWxsVGFnIiwiYm9vbFRhZyIsInN2Iiwic3RyaW5naWZ5TnVtYmVyIiwibWl\
              uRnJhY3Rpb25EaWdpdHMiLCJudW0iLCJpc0Zpbml0ZSIsImlzTmFOIiwiZCIsImZs\
              b2F0TmFOIiwidG9Mb3dlckNhc2UiLCJOYU4iLCJORUdBVElWRV9JTkZJTklUWSIsI\
              lBPU0lUSVZFX0lORklOSVRZIiwiZmxvYXRFeHAiLCJwYXJzZUZsb2F0IiwidG9FeH\
              BvbmVudGlhbCIsImZsb2F0IiwiZG90IiwiaW50SWRlbnRpZnkiLCJpbnRSZXNvbHZ\
              lIiwib2Zmc2V0IiwicmFkaXgiLCJpbnRBc0JpZ0ludCIsInBhcnNlSW50IiwiaW50\
              U3RyaW5naWZ5IiwiaW50T2N0IiwiX29uRXJyb3IiLCJpbnQiLCJpbnRIZXgiLCJpb\
              nRJZGVudGlmeTIiLCJzdHJpbmdpZnlKU09OIiwianNvblNjYWxhcnMiLCJqc29uRX\
              Jyb3IiLCJzY2hlbWEyIiwiYmluYXJ5IiwiVWludDhBcnJheSIsIkJ1ZmZlciIsImF\
              0b2IiLCJidWZmZXIiLCJjaGFyQ29kZUF0IiwiYnVmIiwiYnRvYSIsInMiLCJmcm9t\
              Q2hhckNvZGUiLCJjZWlsIiwicmVzb2x2ZVBhaXJzIiwiY24iLCJjcmVhdGVQYWlyc\
              yIsIml0ZXJhYmxlIiwicGFpcnMyIiwicGFpcnMiLCJZQU1MT01hcCIsIl9ZQU1MT0\
              1hcCIsImJpbmQiLCJvbWFwMiIsIm9tYXAiLCJzZWVuS2V5cyIsImJvb2xTdHJpbmd\
              pZnkiLCJib29sT2JqIiwidHJ1ZVRhZyIsImZhbHNlVGFnIiwiZmxvYXROYU4yIiwi\
              ZmxvYXRFeHAyIiwiZmxvYXQyIiwiZiIsImludElkZW50aWZ5MyIsImludFJlc29sd\
              mUyIiwic2lnbiIsIm4yIiwiaW50U3RyaW5naWZ5MiIsImludEJpbiIsImludE9jdD\
              IiLCJpbnQyIiwiaW50SGV4MiIsIllBTUxTZXQiLCJfWUFNTFNldCIsImtlZXBQYWl\
              yIiwic2V0MiIsInBhcnNlU2V4YWdlc2ltYWwiLCJhc0JpZ0ludCIsInAiLCJzdHJp\
              bmdpZnlTZXhhZ2VzaW1hbCIsIl82MCIsInVuc2hpZnQiLCJwYWRTdGFydCIsImlud\
              FRpbWUiLCJmbG9hdFRpbWUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwieWVhciIsIm1vbn\
              RoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2VjIiwiZGF\
              0ZSIsIlVUQyIsInR6IiwiYWJzIiwidG9JU09TdHJpbmciLCJzY2hlbWEzIiwic2No\
              ZW1hcyIsInRhZ3NCeU5hbWUiLCJib29sIiwibnVsbCIsImNvcmVLbm93blRhZ3MiL\
              CJnZXRUYWdzIiwiY3VzdG9tVGFncyIsInNjaGVtYU5hbWUiLCJzb3J0TWFwRW50cm\
              llc0J5S2V5IiwiYiIsIl9TY2hlbWEiLCJyZXNvbHZlS25vd25UYWdzIiwidG9TdHJ\
              pbmdEZWZhdWx0cyIsImtub3duVGFncyIsInN0cmluZ2lmeURvY3VtZW50IiwiaGFz\
              RGlyZWN0aXZlcyIsImRpciIsImNvbnRlbnRDb21tZW50IiwiZGMiLCJfRG9jdW1lb\
              nQiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIl9yZXBsYWNlciIsImtlZXBTb3VyY2VUb2\
              tlbnMiLCJwcmV0dHlFcnJvcnMiLCJzdHJpY3QiLCJ1bmlxdWVLZXlzIiwiX2RpcmV\
              jdGl2ZXMiLCJzZXRTY2hlbWEiLCJhc3NlcnRDb2xsZWN0aW9uIiwiY3JlYXRlQWxp\
              YXMiLCJrZXlUb1N0ciIsImFzU3RyIiwiYW5jaG9yUHJlZml4IiwianNvbkFyZyIsI\
              nBvcyIsIm1lc3NhZ2UiLCJwcmV0dGlmeUVycm9yIiwibGMiLCJsaW5lUG9zIiwiY2\
              9sIiwibGluZVN0ciIsImxpbmVTdGFydHMiLCJtaW4iLCJwb2ludGVyIiwicmVzb2x\
              2ZVByb3BzIiwidG9rZW5zIiwiaW5kaWNhdG9yIiwicGFyZW50SW5kZW50Iiwic3Rh\
              cnRPbk5ld2xpbmUiLCJhdE5ld2xpbmUiLCJoYXNTcGFjZSIsImNvbW1lbnRTZXAiL\
              CJoYXNOZXdsaW5lQWZ0ZXJQcm9wIiwicmVxU3BhY2UiLCJ0YWIiLCJjb21tYSIsIn\
              Rva2VuIiwiY2IiLCJsYXN0IiwiY29udGFpbnNOZXdsaW5lIiwic3QiLCJzZXAiLCJ\
              mbG93SW5kZW50Q2hlY2siLCJmYyIsIm1hcEluY2x1ZGVzIiwic2VhcmNoIiwiaXNF\
              cXVhbCIsInN0YXJ0Q29sTXNnIiwicmVzb2x2ZUJsb2NrTWFwIiwiY29tcG9zZU5vZ\
              GUiLCJjb21wb3NlTm9kZTIiLCJjb21wb3NlRW1wdHlOb2RlIiwiY29tcG9zZUVtcH\
              R5Tm9kZTIiLCJibSIsIk5vZGVDbGFzcyIsImF0Um9vdCIsImNvbW1lbnRFbmQiLCJ\
              jb2xsSXRlbSIsImtleVByb3BzIiwia2V5U3RhcnQiLCJrZXlOb2RlIiwidmFsdWVQ\
              cm9wcyIsInZhbHVlTm9kZSIsInNyY1Rva2VuIiwicmVzb2x2ZUJsb2NrU2VxIiwiY\
              nMiLCJyZXNvbHZlRW5kIiwiYmxvY2tNc2ciLCJpc0Jsb2NrIiwicmVzb2x2ZUZsb3\
              dDb2xsZWN0aW9uIiwiaXNNYXAyIiwiZmNOYW1lIiwiY29sbCIsInByZXZJdGVtQ29\
              tbWVudCIsImxvb3AiLCJleHBlY3RlZEVuZCIsImNlIiwiZWUiLCJjZVBvcyIsInRv\
              VXBwZXJDYXNlIiwicmVzb2x2ZUNvbGxlY3Rpb24iLCJDTjIiLCJDb2xsIiwiY29tc\
              G9zZUNvbGxlY3Rpb24iLCJ0YWdUb2tlbiIsImV4cFR5cGUiLCJrdCIsInJlc29sdm\
              VCbG9ja1NjYWxhciIsInNjYWxhciIsInBhcnNlQmxvY2tTY2FsYXJIZWFkZXIiLCJ\
              zcGxpdExpbmVzIiwiY2hvbXBTdGFydCIsImNvbnRlbnQiLCJ0cmltSW5kZW50Iiwi\
              Y29udGVudFN0YXJ0IiwicHJldk1vcmVJbmRlbnRlZCIsImNybGYiLCJ0cyIsImZpc\
              nN0IiwibSIsImxpbmUwIiwicmVzb2x2ZUZsb3dTY2FsYXIiLCJyZWwiLCJwbGFpbl\
              ZhbHVlIiwic2luZ2xlUXVvdGVkVmFsdWUiLCJkb3VibGVRdW90ZWRWYWx1ZSIsInZ\
              hbHVlRW5kIiwicmUiLCJiYWRDaGFyIiwiZm9sZExpbmVzIiwiZXhlYyIsImxhc3RJ\
              bmRleCIsImZvbGROZXdsaW5lIiwiY2MiLCJlc2NhcGVDb2RlcyIsIngiLCJ1IiwiV\
              SIsInBhcnNlQ2hhckNvZGUiLCJyYXciLCJ3c1N0YXJ0IiwiciIsIk4iLCJMIiwiUC\
              IsIm9rIiwiZnJvbUNvZGVQb2ludCIsImNvbXBvc2VTY2FsYXIiLCJmaW5kU2NhbGF\
              yVGFnQnlOYW1lIiwiZmluZFNjYWxhclRhZ0J5VGVzdCIsIm1hdGNoV2l0aFRlc3Qi\
              LCJ0YWcyIiwiZW1wdHlTY2FsYXJQb3NpdGlvbiIsImJlZm9yZSIsIkNOIiwiaXNTc\
              mNUb2tlbiIsImNvbXBvc2VBbGlhcyIsImFsaWFzIiwiY29tcG9zZURvYyIsIm9wdH\
              MiLCJjb250ZW50RW5kIiwiZ2V0RXJyb3JQb3MiLCJwYXJzZVByZWx1ZGUiLCJwcmV\
              sdWRlIiwiYXRDb21tZW50IiwiYWZ0ZXJFbXB0eUxpbmUiLCJhdERpcmVjdGl2ZXMi\
              LCJkZWNvcmF0ZSIsImFmdGVyRG9jIiwiYXBwbHkiLCJzdHJlYW1JbmZvIiwiY29tc\
              G9zZSIsImZvcmNlRG9jIiwiZW5kT2Zmc2V0IiwiX195aWVsZFN0YXIiLCJCT00iLC\
              JET0NVTUVOVCIsIkZMT1dfRU5EIiwiU0NBTEFSMiIsImNyZWF0ZVNjYWxhclRva2V\
              uIiwiaXNDb2xsZWN0aW9uMiIsImlzU2NhbGFyMiIsInByZXR0eVRva2VuIiwicmVz\
              b2x2ZUFzU2NhbGFyIiwic2V0U2NhbGFyVmFsdWUiLCJzdHJpbmdpZnkyIiwidG9rZ\
              W5UeXBlIiwidmlzaXQyIiwiY29udGV4dCIsImhlIiwiaGVhZCIsImFkZEVuZHRvQm\
              xvY2tQcm9wcyIsImFmdGVyS2V5Iiwic2V0QmxvY2tTY2FsYXJWYWx1ZSIsInNldEZ\
              sb3dTY2FsYXJWYWx1ZSIsIm9hIiwidG9rIiwibmwiLCJjc3QiLCJzdHJpbmdpZnlU\
              b2tlbiIsInN0cmluZ2lmeUl0ZW0iLCJCUkVBSzIiLCJTS0lQMiIsIlJFTU9WRTIiL\
              CJfdmlzaXQiLCJpdGVtQXRQYXRoIiwiZmllbGQiLCJpbmRleCIsInBhcmVudENvbG\
              xlY3Rpb24iLCJpc0VtcHR5IiwiaGV4RGlnaXRzIiwidGFnQ2hhcnMiLCJmbG93SW5\
              kaWNhdG9yQ2hhcnMiLCJpbnZhbGlkQW5jaG9yQ2hhcnMiLCJpc05vdEFuY2hvckNo\
              YXIiLCJhdEVuZCIsImJsb2NrU2NhbGFySW5kZW50IiwiYmxvY2tTY2FsYXJLZWVwI\
              iwiZmxvd0tleSIsImZsb3dMZXZlbCIsImluZGVudE5leHQiLCJpbmRlbnRWYWx1ZS\
              IsImxpbmVFbmRQb3MiLCJsZXgiLCJpbmNvbXBsZXRlIiwiaGFzQ2hhcnMiLCJwYXJ\
              zZU5leHQiLCJhdExpbmVFbmQiLCJjaGFyQXQiLCJjb250aW51ZVNjYWxhciIsImR0\
              IiwiZ2V0TGluZSIsInNldE5leHQiLCJzdGF0ZSIsInBlZWsiLCJwYXJzZVN0cmVhb\
              SIsInBhcnNlTGluZVN0YXJ0IiwicGFyc2VCbG9ja1N0YXJ0IiwicGFyc2VGbG93Q2\
              9sbGVjdGlvbiIsInBhcnNlUXVvdGVkU2NhbGFyIiwicGFyc2VCbG9ja1NjYWxhciI\
              sInBhcnNlUGxhaW5TY2FsYXIiLCJwdXNoQ291bnQiLCJkaXJFbmQiLCJwdXNoU3Bh\
              Y2VzIiwicHVzaE5ld2xpbmUiLCJzcCIsImNoMCIsImNoMSIsInB1c2hJbmRpY2F0b\
              3JzIiwicHVzaFVudGlsIiwiYXRGbG93RW5kTWFya2VyIiwicXVvdGUiLCJxYiIsIn\
              B1c2hUb0luZGV4IiwiY2gyIiwibGFzdENoYXIiLCJhbGxvd0VtcHR5IiwicHVzaFR\
              hZyIsImFsbG93VGFicyIsImFkZE5ld0xpbmUiLCJsb3ciLCJoaWdoIiwibWlkIiwi\
              aW5jbHVkZXNUb2tlbiIsImxpc3QiLCJmaW5kTm9uRW1wdHlJbmRleCIsImlzRmxvd\
              1Rva2VuIiwiZ2V0UHJldlByb3BzIiwiZ2V0Rmlyc3RLZXlTdGFydFByb3BzIiwiZm\
              l4Rmxvd1NlcUl0ZW1zIiwib25OZXdMaW5lIiwiYXROZXdMaW5lIiwiYXRTY2FsYXI\
              iLCJvbktleUxpbmUiLCJzdGFjayIsImxleGVyIiwibGV4ZW1lIiwic3RlcCIsInBv\
              cCIsInNvdXJjZVRva2VuIiwidG9wIiwic3RyZWFtIiwiZG9jdW1lbnQiLCJibG9ja\
              1NjYWxhciIsImJsb2NrTWFwIiwiYmxvY2tTZXF1ZW5jZSIsImZsb3dDb2xsZWN0aW\
              9uIiwiZG9jdW1lbnRFbmQiLCJsaW5lRW5kIiwiYnYiLCJzdGFydEJsb2NrVmFsdWU\
              iLCJhdEluZGVudGVkQ29tbWVudCIsImF0TWFwSW5kZW50IiwiYXROZXh0SXRlbSIs\
              InN0YXJ0MiIsImZzIiwiZmxvd1NjYWxhciIsInBhcnNlT3B0aW9ucyIsImxpbmVDb\
              3VudGVyIiwicGFyc2VyIiwiY29tcG9zZXIiLCJkb2NzIiwiZm9yRWFjaCIsImVtcH\
              R5IiwiX2RvYyIsIl9yZXZpdmVyIiwicm91bmQiLCJicm93c2VyX2RlZmF1bHQiLCJ\
              zcmNfZGVmYXVsdCIsInJlcSIsInJzcCIsImxvZyIsInJlZ2lvbiIsInNldERlc2ly\
              ZWRDb21wb3NlZFJlc291cmNlIiwiYXBpVmVyc2lvbiIsImtpbmQiLCJtZXRhZGF0Y\
              SIsImFubm90YXRpb25zIiwiX19zcHJlYWRWYWx1ZXMiLCJpbnB1dCIsImxhYmVscy\
              IsIl9fc3ByZWFkUHJvcHMiLCJvYnNlcnZlZCIsImNvbXBvc2l0ZSIsInJlc291cmN\
              lIiwiZm9vIiwic3BlYyIsImNvbXBvc2l0ZVJlZ2lvbiIsInlhbWxUZXN0IiwiYmF4\
              IiwiYjY0dGVzdCIsInNldENvbm5lY3Rpb25EZXRhaWxzIiwidXBkYXRlQ29tcG9za\
              XRlU3RhdHVzIiwic29tZXRoaW5nIiwic2hlIiwibW92ZXMiLCJleHBvcnRzIl0sIn\
              NvdXJjZXMiOlsiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1\
              sL2Jyb3dzZXIvZGlzdC9pbmRleC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9u\
              b2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvaWRlbnRpdHkuanMiL\
              CJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci\
              9kaXN0L3Zpc2l0LmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWx\
              lcy95YW1sL2Jyb3dzZXIvZGlzdC9kb2MvZGlyZWN0aXZlcy5qcyIsImV4YW1wbGVz\
              L2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL\
              2FuY2hvcnMuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3\
              lhbWwvYnJvd3Nlci9kaXN0L2RvYy9hcHBseVJldml2ZXIuanMiLCJleGFtcGxlcy9\
              kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVz\
              L3RvSlMuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhb\
              WwvYnJvd3Nlci9kaXN0L25vZGVzL05vZGUuanMiLCJleGFtcGxlcy9kZXBlbmRlbm\
              NpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL0FsaWFzLmp\
              zIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dz\
              ZXIvZGlzdC9ub2Rlcy9TY2FsYXIuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvb\
              m9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9jcmVhdGVOb2RlLmpzIi\
              wiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXI\
              vZGlzdC9ub2Rlcy9Db2xsZWN0aW9uLmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVz\
              L25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5na\
              WZ5Q29tbWVudC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZX\
              MveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L2ZvbGRGbG93TGluZXMuanMiLCJ\
              leGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9k\
              aXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlTdHJpbmcuanMiLCJleGFtcGxlcy9kZXBlb\
              mRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS\
              9zdHJpbmdpZnkuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGV\
              zL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlQYWlyLmpzIiwi\
              ZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZ\
              GlzdC9sb2cuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3\
              lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL2FkZFBhaXJUb0pTTWFwLmpzIiwiZXhhbXB\
              sZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9u\
              b2Rlcy9QYWlyLmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlc\
              y95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi\
              5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm9\
              3c2VyL2Rpc3Qvbm9kZXMvWUFNTE1hcC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2ll\
              cy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9tY\
              XAuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYn\
              Jvd3Nlci9kaXN0L25vZGVzL1lBTUxTZXEuanMiLCJleGFtcGxlcy9kZXBlbmRlbmN\
              pZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb21tb24v\
              c2VxLmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL\
              2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29tbW9uL3N0cmluZy5qcyIsImV4YW1wbGVzL2\
              RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1\
              hL2NvbW1vbi9udWxsLmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9k\
              dWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9ib29sLmpzIiwiZXhhb\
              XBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC\
              9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5\
              jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9m\
              bG9hdC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtb\
              C9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvcmUvaW50LmpzIiwiZXhhbXBsZXMvZGVwZW\
              5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29\
              yZS9zY2hlbWEuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVz\
              L3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9qc29uL3NjaGVtYS5qcyIsImV4YW1wb\
              GVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2\
              NoZW1hL3lhbWwtMS4xL2JpbmFyeS5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9\
              ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3Bh\
              aXJzLmpzIiwiZXhhbXBsZXMvZGVwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL\
              2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvb21hcC5qcyIsImV4YW1wbGVzL2\
              RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1\
              hL3lhbWwtMS4xL2Jvb2wuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9t\
              b2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9mbG9hdC5qc\
              yIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2\
              VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL2ludC5qcyIsImV4YW1wbGVzL2RlcGVuZGV\
              uY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwt\
              MS4xL3NldC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMve\
              WFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3RpbWVzdGFtcC5qcyIsIm\
              V4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2R\
              pc3Qvc2NoZW1hL3lhbWwtMS4xL3NjaGVtYS5qcyIsImV4YW1wbGVzL2RlcGVuZGVu\
              Y2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3RhZ3Mua\
              nMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3\
              Nlci9kaXN0L3NjaGVtYS9TY2hlbWEuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXM\
              vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdp\
              ZnlEb2N1bWVudC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZ\
              XMveWFtbC9icm93c2VyL2Rpc3QvZG9jL0RvY3VtZW50LmpzIiwiZXhhbXBsZXMvZG\
              VwZW5kZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9lcnJvcnM\
              uanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJv\
              d3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1wcm9wcy5qcyIsImV4YW1wbGVzL2Rlc\
              GVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS\
              91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXM\
              vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvdXRpbC1mbG93\
              LWluZGVudC1jaGVjay5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZ\
              HVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLW1hcC1pbmNsdWRlcy\
              5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm9\
              3c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWJsb2NrLW1hcC5qcyIsImV4YW1wbGVz\
              L2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tc\
              G9zZS9yZXNvbHZlLWJsb2NrLXNlcS5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy\
              9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWV\
              uZC5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9i\
              cm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyIsI\
              mV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2\
              Rpc3QvY29tcG9zZS9jb21wb3NlLWNvbGxlY3Rpb24uanMiLCJleGFtcGxlcy9kZXB\
              lbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2Uv\
              cmVzb2x2ZS1ibG9jay1zY2FsYXIuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvb\
              m9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1mbG\
              93LXNjYWxhci5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXM\
              veWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9jb21wb3NlLXNjYWxhci5qcyIsImV4\
              YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc\
              3QvY29tcG9zZS91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyIsImV4YW1wbG\
              VzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29\
              tcG9zZS9jb21wb3NlLW5vZGUuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9k\
              ZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1kb2Mua\
              nMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3\
              Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZXIuanMiLCJleGFtcGxlcy9kZXBlbmRlbmN\
              pZXMvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC5qcyIs\
              ImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL\
              2Rpc3QvcGFyc2UvY3N0LXNjYWxhci5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy\
              9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvY3N0LXN0cmluZ2l\
              meS5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9i\
              cm93c2VyL2Rpc3QvcGFyc2UvY3N0LXZpc2l0LmpzIiwiZXhhbXBsZXMvZGVwZW5kZ\
              W5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9sZXhlci\
              5qcyIsImV4YW1wbGVzL2RlcGVuZGVuY2llcy9ub2RlX21vZHVsZXMveWFtbC9icm9\
              3c2VyL2Rpc3QvcGFyc2UvbGluZS1jb3VudGVyLmpzIiwiZXhhbXBsZXMvZGVwZW5k\
              ZW5jaWVzL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9wYXJzZ\
              XIuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXMvbm9kZV9tb2R1bGVzL3lhbWwvYn\
              Jvd3Nlci9kaXN0L3B1YmxpYy1hcGkuanMiLCJleGFtcGxlcy9kZXBlbmRlbmNpZXM\
              vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9pbmRleC5qcyIsImV4YW1wbGVzL2Rl\
              cGVuZGVuY2llcy9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb\
              3J0IHsgQ29tcG9zZXIgfSBmcm9tICcuL2NvbXBvc2UvY29tcG9zZXIuanMnO1xuZX\
              hwb3J0IHsgRG9jdW1lbnQgfSBmcm9tICcuL2RvYy9Eb2N1bWVudC5qcyc7XG5leHB\
              vcnQgeyBTY2hlbWEgfSBmcm9tICcuL3NjaGVtYS9TY2hlbWEuanMnO1xuZXhwb3J0\
              IHsgWUFNTEVycm9yLCBZQU1MUGFyc2VFcnJvciwgWUFNTFdhcm5pbmcgfSBmcm9tI\
              CcuL2Vycm9ycy5qcyc7XG5leHBvcnQgeyBBbGlhcyB9IGZyb20gJy4vbm9kZXMvQW\
              xpYXMuanMnO1xuZXhwb3J0IHsgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc0RvY3V\
              tZW50LCBpc01hcCwgaXNOb2RlLCBpc1BhaXIsIGlzU2NhbGFyLCBpc1NlcSB9IGZy\
              b20gJy4vbm9kZXMvaWRlbnRpdHkuanMnO1xuZXhwb3J0IHsgUGFpciB9IGZyb20gJ\
              y4vbm9kZXMvUGFpci5qcyc7XG5leHBvcnQgeyBTY2FsYXIgfSBmcm9tICcuL25vZG\
              VzL1NjYWxhci5qcyc7XG5leHBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi9ub2Rlcy9\
              ZQU1MTWFwLmpzJztcbmV4cG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuL25vZGVzL1lB\
              TUxTZXEuanMnO1xuaW1wb3J0ICogYXMgY3N0IGZyb20gJy4vcGFyc2UvY3N0LmpzJ\
              ztcbmV4cG9ydCB7IGNzdCBhcyBDU1QgfTtcbmV4cG9ydCB7IExleGVyIH0gZnJvbS\
              AnLi9wYXJzZS9sZXhlci5qcyc7XG5leHBvcnQgeyBMaW5lQ291bnRlciB9IGZyb20\
              gJy4vcGFyc2UvbGluZS1jb3VudGVyLmpzJztcbmV4cG9ydCB7IFBhcnNlciB9IGZy\
              b20gJy4vcGFyc2UvcGFyc2VyLmpzJztcbmV4cG9ydCB7IHBhcnNlLCBwYXJzZUFsb\
              ERvY3VtZW50cywgcGFyc2VEb2N1bWVudCwgc3RyaW5naWZ5IH0gZnJvbSAnLi9wdW\
              JsaWMtYXBpLmpzJztcbmV4cG9ydCB7IHZpc2l0LCB2aXNpdEFzeW5jIH0gZnJvbSA\
              nLi92aXNpdC5qcyc7XG4iLCJjb25zdCBBTElBUyA9IFN5bWJvbC5mb3IoJ3lhbWwu\
              YWxpYXMnKTtcbmNvbnN0IERPQyA9IFN5bWJvbC5mb3IoJ3lhbWwuZG9jdW1lbnQnK\
              TtcbmNvbnN0IE1BUCA9IFN5bWJvbC5mb3IoJ3lhbWwubWFwJyk7XG5jb25zdCBQQU\
              lSID0gU3ltYm9sLmZvcigneWFtbC5wYWlyJyk7XG5jb25zdCBTQ0FMQVIgPSBTeW1\
              ib2wuZm9yKCd5YW1sLnNjYWxhcicpO1xuY29uc3QgU0VRID0gU3ltYm9sLmZvcign\
              eWFtbC5zZXEnKTtcbmNvbnN0IE5PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3lhbWwub\
              m9kZS50eXBlJyk7XG5jb25zdCBpc0FsaWFzID0gKG5vZGUpID0+ICEhbm9kZSAmJi\
              B0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSB\
              BTElBUztcbmNvbnN0IGlzRG9jdW1lbnQgPSAobm9kZSkgPT4gISFub2RlICYmIHR5\
              cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IERPQ\
              ztcbmNvbnN0IGlzTWFwID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZS\
              A9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBNQVA7XG5jb25zdCB\
              pc1BhaXIgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2Jq\
              ZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFBBSVI7XG5jb25zdCBpc1NjYWxhc\
              iA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnIC\
              YmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0NBTEFSO1xuY29uc3QgaXNTZXEgPSAobm9\
              kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2Rl\
              W05PREVfVFlQRV0gPT09IFNFUTtcbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihub2RlK\
              SB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuIC\
              AgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2F\
              zZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICBy\
              ZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1b\
              mN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZG\
              UgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSk\
              ge1xuICAgICAgICAgICAgY2FzZSBBTElBUzpcbiAgICAgICAgICAgIGNhc2UgTUFQ\
              OlxuICAgICAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICBjYXNlIFNFU\
              TpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH\
              JldHVybiBmYWxzZTtcbn1cbmNvbnN0IGhhc0FuY2hvciA9IChub2RlKSA9PiAoaXN\
              TY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiAhIW5vZGUuYW5j\
              aG9yO1xuXG5leHBvcnQgeyBBTElBUywgRE9DLCBNQVAsIE5PREVfVFlQRSwgUEFJU\
              iwgU0NBTEFSLCBTRVEsIGhhc0FuY2hvciwgaXNBbGlhcywgaXNDb2xsZWN0aW9uLC\
              Bpc0RvY3VtZW50LCBpc01hcCwgaXNOb2RlLCBpc1BhaXIsIGlzU2NhbGFyLCBpc1N\
              lcSB9O1xuIiwiaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNOb2RlLCBpc1BhaXIsIGlz\
              Q29sbGVjdGlvbiwgaXNNYXAsIGlzU2VxLCBpc1NjYWxhciwgaXNBbGlhcyB9IGZyb\
              20gJy4vbm9kZXMvaWRlbnRpdHkuanMnO1xuXG5jb25zdCBCUkVBSyA9IFN5bWJvbC\
              gnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGR\
              yZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIG5vZGUnKTtcbi8q\
              KlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGFuIEFTVCBub2RlIG9yIGRvY3VtZW50L\
              lxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdG\
              FydGluZyBmcm9tIGBub2RlYCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3R\
              pb24gd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYGtleWA6IEZvciBzZXF1\
              ZW5jZSB2YWx1ZXMgYW5kIG1hcCBgUGFpcmAsIHRoZSBub2RlJ3MgaW5kZXggaW4gd\
              GhlXG4gKiAgICAgY29sbGVjdGlvbi4gV2l0aGluIGEgYFBhaXJgLCBgJ2tleSdgIG\
              9yIGAndmFsdWUnYCwgY29ycmVzcG9uZGluZ2x5LlxuICogICAgIGBudWxsYCBmb3I\
              gdGhlIHJvb3Qgbm9kZS5cbiAqICAgLSBgbm9kZWA6IFRoZSBjdXJyZW50IG5vZGUu\
              XG4gKiAgIC0gYHBhdGhgOiBUaGUgYW5jZXN0cnkgb2YgdGhlIGN1cnJlbnQgbm9kZ\
              S5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZS\
              B1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgdW5kZWZpbmV\
              kYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZp\
              c2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZ\
              SwgY29udGludWUgd2l0aCBuZXh0XG4gKiAgICAgc2libGluZ1xuICogICAtIGB2aX\
              NpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICA\
              tIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBj\
              b250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBOb2RlYDogUmVwbGFjZ\
              SB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIGJ5IHZpc2l0aW5nIGl0XG\
              4gKiAgIC0gYG51bWJlcmA6IFdoaWxlIGl0ZXJhdGluZyB0aGUgaXRlbXMgb2YgYSB\
              zZXF1ZW5jZSBvciBtYXAsIHNldCB0aGUgaW5kZXhcbiAqICAgICBvZiB0aGUgbmV4\
              dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmIHRoZSBpbmRleCBvZ\
              iB0aGUgY3VycmVudFxuICogICAgIG5vZGUgaGFzIGNoYW5nZWQuXG4gKlxuICogSW\
              YgYHZpc2l0b3JgIGlzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGx\
              lZCB3aXRoIGFsbCB2YWx1ZXNcbiAqIGVuY291bnRlcmVkIGluIHRoZSB0cmVlLCBp\
              bmNsdWRpbmcgZS5nLiBgbnVsbGAgdmFsdWVzLiBBbHRlcm5hdGl2ZWx5LFxuICogc\
              2VwYXJhdGUgdmlzaXRvciBmdW5jdGlvbnMgbWF5IGJlIGRlZmluZWQgZm9yIGVhY2\
              ggYE1hcGAsIGBQYWlyYCwgYFNlcWAsXG4gKiBgQWxpYXNgIGFuZCBgU2NhbGFyYCB\
              ub2RlLiBUbyBkZWZpbmUgdGhlIHNhbWUgdmlzaXRvciBmdW5jdGlvbiBmb3IgbW9y\
              ZSB0aGFuXG4gKiBvbmUgbm9kZSB0eXBlLCB1c2UgdGhlIGBDb2xsZWN0aW9uYCAob\
              WFwIGFuZCBzZXEpLCBgVmFsdWVgIChtYXAsIHNlcSAmIHNjYWxhcilcbiAqIGFuZC\
              BgTm9kZWAgKGFsaWFzLCBtYXAsIHNlcSAmIHNjYWxhcikgdGFyZ2V0cy4gT2YgYWx\
              sIHRoZXNlLCBvbmx5IHRoZSBtb3N0XG4gKiBzcGVjaWZpYyBkZWZpbmVkIG9uZSB3\
              aWxsIGJlIHVzZWQgZm9yIGVhY2ggbm9kZS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQob\
              m9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3\
              IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICA\
              gY29uc3QgY2QgPSB2aXNpdF8obnVsbCwgbm9kZS5jb250ZW50cywgdmlzaXRvcl8s\
              IE9iamVjdC5mcmVlemUoW25vZGVdKSk7XG4gICAgICAgIGlmIChjZCA9PT0gUkVNT\
              1ZFKVxuICAgICAgICAgICAgbm9kZS5jb250ZW50cyA9IG51bGw7XG4gICAgfVxuIC\
              AgIGVsc2VcbiAgICAgICAgdmlzaXRfKG51bGwsIG5vZGUsIHZpc2l0b3JfLCBPYmp\
              lY3QuZnJlZXplKFtdKSk7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBj\
              YXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzc\
              GFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYm\
              VjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiB\
              UZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJS\
              RUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0a\
              GUgY3VycmVudCBub2RlICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdm\
              UgdGhlIGN1cnJlbnQgbm9kZSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuZnV\
              uY3Rpb24gdmlzaXRfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNv\
              bnN0IGN0cmwgPSBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO\
              1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgIC\
              AgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB\
              2aXNpdF8oa2V5LCBjdHJsLCB2aXNpdG9yLCBwYXRoKTtcbiAgICB9XG4gICAgaWYg\
              KHR5cGVvZiBjdHJsICE9PSAnc3ltYm9sJykge1xuICAgICAgICBpZiAoaXNDb2xsZ\
              WN0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXRoID0gT2JqZWN0LmZyZWV6ZS\
              hwYXRoLmNvbmNhdChub2RlKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDs\
              gaSA8IG5vZGUuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBj\
              b25zdCBjaSA9IHZpc2l0XyhpLCBub2RlLml0ZW1zW2ldLCB2aXNpdG9yLCBwYXRoK\
              TtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbi\
              AgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICB\
              lbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVy\
              biBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFK\
              SB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaXRlbXMuc3BsaWNlKGksIDEpO1\
              xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVx\
              uICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFp\
              cihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0a\
              C5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgY29uc3QgY2sgPSB2aXNpdF8oJ2\
              tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmICh\
              jayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAg\
              ICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgI\
              CBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IHZpc2l0Xy\
              gndmFsdWUnLCBub2RlLnZhbHVlLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICA\
              gIGlmIChjdiA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFL\
              O1xuICAgICAgICAgICAgZWxzZSBpZiAoY3YgPT09IFJFTU9WRSlcbiAgICAgICAgI\
              CAgICAgICBub2RlLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgIC\
              ByZXR1cm4gY3RybDtcbn1cbi8qKlxuICogQXBwbHkgYW4gYXN5bmMgdmlzaXRvciB\
              0byBhbiBBU1Qgbm9kZSBvciBkb2N1bWVudC5cbiAqXG4gKiBXYWxrcyB0aHJvdWdo\
              IHRoZSB0cmVlIChkZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSBgbm9kZWAsIGNhb\
              GxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdGhyZWUgYXJndW1lbn\
              RzOlxuICogICAtIGBrZXlgOiBGb3Igc2VxdWVuY2UgdmFsdWVzIGFuZCBtYXAgYFB\
              haXJgLCB0aGUgbm9kZSdzIGluZGV4IGluIHRoZVxuICogICAgIGNvbGxlY3Rpb24u\
              IFdpdGhpbiBhIGBQYWlyYCwgYCdrZXknYCBvciBgJ3ZhbHVlJ2AsIGNvcnJlc3Bvb\
              mRpbmdseS5cbiAqICAgICBgbnVsbGAgZm9yIHRoZSByb290IG5vZGUuXG4gKiAgIC\
              0gYG5vZGVgOiBUaGUgY3VycmVudCBub2RlLlxuICogICAtIGBwYXRoYDogVGhlIGF\
              uY2VzdHJ5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gKlxuICogVGhlIHJldHVybiB2\
              YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0c\
              mF2ZXJzYWw6XG4gKiAgIC0gYFByb21pc2VgOiBNdXN0IHJlc29sdmUgdG8gb25lIG\
              9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzXG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF\
              1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQ\
              YDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsIGNvbnRpb\
              nVlIHdpdGggbmV4dFxuICogICAgIHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQU\
              tgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQ\
              uUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUsIHRoZW4gY29udGludWUg\
              d2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgTm9kZWA6IFJlcGxhY2UgdGhlIGN1c\
              nJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSBieSB2aXNpdGluZyBpdFxuICogICAtIG\
              BudW1iZXJgOiBXaGlsZSBpdGVyYXRpbmcgdGhlIGl0ZW1zIG9mIGEgc2VxdWVuY2U\
              gb3IgbWFwLCBzZXQgdGhlIGluZGV4XG4gKiAgICAgb2YgdGhlIG5leHQgc3RlcC4g\
              VGhpcyBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZiB0aGUgaW5kZXggb2YgdGhlIGN1c\
              nJlbnRcbiAqICAgICBub2RlIGhhcyBjaGFuZ2VkLlxuICpcbiAqIElmIGB2aXNpdG\
              9yYCBpcyBhIHNpbmdsZSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB\
              hbGwgdmFsdWVzXG4gKiBlbmNvdW50ZXJlZCBpbiB0aGUgdHJlZSwgaW5jbHVkaW5n\
              IGUuZy4gYG51bGxgIHZhbHVlcy4gQWx0ZXJuYXRpdmVseSxcbiAqIHNlcGFyYXRlI\
              HZpc2l0b3IgZnVuY3Rpb25zIG1heSBiZSBkZWZpbmVkIGZvciBlYWNoIGBNYXBgLC\
              BgUGFpcmAsIGBTZXFgLFxuICogYEFsaWFzYCBhbmQgYFNjYWxhcmAgbm9kZS4gVG8\
              gZGVmaW5lIHRoZSBzYW1lIHZpc2l0b3IgZnVuY3Rpb24gZm9yIG1vcmUgdGhhblxu\
              ICogb25lIG5vZGUgdHlwZSwgdXNlIHRoZSBgQ29sbGVjdGlvbmAgKG1hcCBhbmQgc\
              2VxKSwgYFZhbHVlYCAobWFwLCBzZXEgJiBzY2FsYXIpXG4gKiBhbmQgYE5vZGVgIC\
              hhbGlhcywgbWFwLCBzZXEgJiBzY2FsYXIpIHRhcmdldHMuIE9mIGFsbCB0aGVzZSw\
              gb25seSB0aGUgbW9zdFxuICogc3BlY2lmaWMgZGVmaW5lZCBvbmUgd2lsbCBiZSB1\
              c2VkIGZvciBlYWNoIG5vZGUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5b\
              mMobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2\
              l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICA\
              gICAgY29uc3QgY2QgPSBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLmNvbnRl\
              bnRzLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbbm9kZV0pKTtcbiAgICAgICAga\
              WYgKGNkID09PSBSRU1PVkUpXG4gICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbn\
              VsbDtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBhd2FpdCB2aXNpdEFzeW5jXyh\
              udWxsLCBub2RlLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbXSkpO1xufVxuLy8g\
              V2l0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlI\
              GluIHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aG\
              VuIGNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9\
              sYCBtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNh\
              bCBjb21wbGV0ZWx5ICovXG52aXNpdEFzeW5jLkJSRUFLID0gQlJFQUs7XG4vKiogR\
              G8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG\
              52aXNpdEFzeW5jLlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCB\
              ub2RlICovXG52aXNpdEFzeW5jLlJFTU9WRSA9IFJFTU9WRTtcbmFzeW5jIGZ1bmN0\
              aW9uIHZpc2l0QXN5bmNfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgI\
              GNvbnN0IGN0cmwgPSBhd2FpdCBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3\
              IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB\
              7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAg\
              IHJldHVybiB2aXNpdEFzeW5jXyhrZXksIGN0cmwsIHZpc2l0b3IsIHBhdGgpO1xuI\
              CAgIH1cbiAgICBpZiAodHlwZW9mIGN0cmwgIT09ICdzeW1ib2wnKSB7XG4gICAgIC\
              AgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSB\
              PYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGZv\
              ciAobGV0IGkgPSAwOyBpIDwgbm9kZS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgI\
              CAgICAgICAgICAgIGNvbnN0IGNpID0gYXdhaXQgdmlzaXRBc3luY18oaSwgbm9kZS\
              5pdGVtc1tpXSwgdmlzaXRvciwgcGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHR\
              5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBj\
              aSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuI\
              CAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgIC\
              AgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICB\
              ub2RlLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAt\
              PSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgf\
              VxuICAgICAgICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgICAgIH\
              BhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICA\
              gICAgIGNvbnN0IGNrID0gYXdhaXQgdmlzaXRBc3luY18oJ2tleScsIG5vZGUua2V5\
              LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspX\
              G4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZS\
              BpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG5\
              1bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IGF3YWl0IHZpc2l0QXN5bmNfKCd2\
              YWx1ZScsIG5vZGUudmFsdWUsIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAga\
              WYgKGN2ID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG\
              4gICAgICAgICAgICBlbHNlIGlmIChjdiA9PT0gUkVNT1ZFKVxuICAgICAgICAgICA\
              gICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJl\
              dHVybiBjdHJsO1xufVxuZnVuY3Rpb24gaW5pdFZpc2l0b3IodmlzaXRvcikge1xuI\
              CAgIGlmICh0eXBlb2YgdmlzaXRvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgKH\
              Zpc2l0b3IuQ29sbGVjdGlvbiB8fCB2aXNpdG9yLk5vZGUgfHwgdmlzaXRvci5WYWx\
              1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAg\
              ICAgQWxpYXM6IHZpc2l0b3IuTm9kZSxcbiAgICAgICAgICAgIE1hcDogdmlzaXRvc\
              i5Ob2RlLFxuICAgICAgICAgICAgU2NhbGFyOiB2aXNpdG9yLk5vZGUsXG4gICAgIC\
              AgICAgICBTZXE6IHZpc2l0b3IuTm9kZVxuICAgICAgICB9LCB2aXNpdG9yLlZhbHV\
              lICYmIHtcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAg\
              ICAgIFNjYWxhcjogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNlcTogdmlza\
              XRvci5WYWx1ZVxuICAgICAgICB9LCB2aXNpdG9yLkNvbGxlY3Rpb24gJiYge1xuIC\
              AgICAgICAgICAgTWFwOiB2aXNpdG9yLkNvbGxlY3Rpb24sXG4gICAgICAgICAgICB\
              TZXE6IHZpc2l0b3IuQ29sbGVjdGlvblxuICAgICAgICB9LCB2aXNpdG9yKTtcbiAg\
              ICB9XG4gICAgcmV0dXJuIHZpc2l0b3I7XG59XG5mdW5jdGlvbiBjYWxsVmlzaXRvc\
              ihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHZpc2\
              l0b3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aXNpdG9yKGtleSw\
              gbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzTWFwKG5vZGUpKVxuICAgICAgICByZXR1\
              cm4gdmlzaXRvci5NYXA/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1Nlc\
              Shub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2VxPy4oa2V5LCBub2RlLC\
              BwYXRoKTtcbiAgICBpZiAoaXNQYWlyKG5vZGUpKVxuICAgICAgICByZXR1cm4gdml\
              zaXRvci5QYWlyPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNTY2FsYXIo\
              bm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLlNjYWxhcj8uKGtleSwgbm9kZ\
              SwgcGF0aCk7XG4gICAgaWYgKGlzQWxpYXMobm9kZSkpXG4gICAgICAgIHJldHVybi\
              B2aXNpdG9yLkFsaWFzPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICByZXR1cm4gdW5\
              kZWZpbmVkO1xufVxuZnVuY3Rpb24gcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBub2Rl\
              KSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuI\
              CAgIGlmIChpc0NvbGxlY3Rpb24ocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuaX\
              RlbXNba2V5XSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihwYXJ\
              lbnQpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdrZXknKVxuICAgICAgICAgICAg\
              cGFyZW50LmtleSA9IG5vZGU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhc\
              mVudC52YWx1ZSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbn\
              QocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuY29udGVudHMgPSBub2RlO1xuICA\
              gIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcHQgPSBpc0FsaWFzKHBhcmVu\
              dCkgPyAnYWxpYXMnIDogJ3NjYWxhcic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvc\
              ihgQ2Fubm90IHJlcGxhY2Ugbm9kZSB3aXRoICR7cHR9IHBhcmVudGApO1xuICAgIH\
              1cbn1cblxuZXhwb3J0IHsgdmlzaXQsIHZpc2l0QXN5bmMgfTtcbiIsImltcG9ydCB\
              7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7\
              IHZpc2l0IH0gZnJvbSAnLi4vdmlzaXQuanMnO1xuXG5jb25zdCBlc2NhcGVDaGFyc\
              yA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgICcsJzogJyUyQycsXG4gICAgJ1snOi\
              AnJTVCJyxcbiAgICAnXSc6ICclNUQnLFxuICAgICd7JzogJyU3QicsXG4gICAgJ30\
              nOiAnJTdEJ1xufTtcbmNvbnN0IGVzY2FwZVRhZ05hbWUgPSAodG4pID0+IHRuLnJl\
              cGxhY2UoL1shLFtcXF17fV0vZywgY2ggPT4gZXNjYXBlQ2hhcnNbY2hdKTtcbmNsY\
              XNzIERpcmVjdGl2ZXMge1xuICAgIGNvbnN0cnVjdG9yKHlhbWwsIHRhZ3MpIHtcbi\
              AgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkaXJlY3RpdmVzLWVuZC9kb2Mtc3R\
              hcnQgbWFya2VyIGAtLS1gLiBJZiBgbnVsbGAsIGEgbWFya2VyIG1heSBzdGlsbCBi\
              ZVxuICAgICAgICAgKiBpbmNsdWRlZCBpbiB0aGUgZG9jdW1lbnQncyBzdHJpbmdpZ\
              mllZCByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZG\
              9jU3RhcnQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIGRvYy1lbmQgbWFya2VyIGA\
              uLi5gLiAgKi9cbiAgICAgICAgdGhpcy5kb2NFbmQgPSBmYWxzZTtcbiAgICAgICAg\
              dGhpcy55YW1sID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0W\
              WFtbCwgeWFtbCk7XG4gICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe3\
              0sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MsIHRhZ3MpO1xuICAgIH1cbiAgICBjbG9\
              uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBEaXJlY3RpdmVzKHRoaXMu\
              eWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgY29weS5kb2NTdGFydCA9IHRoaXMuZ\
              G9jU3RhcnQ7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbi\
              AgICAgKiBEdXJpbmcgcGFyc2luZywgZ2V0IGEgRGlyZWN0aXZlcyBpbnN0YW5jZSB\
              mb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kXG4gICAgICogdXBkYXRlIHRoZSBz\
              dHJlYW0gc3RhdGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHZlcnNpb24ncyBzc\
              GVjLlxuICAgICAqL1xuICAgIGF0RG9jdW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IH\
              JlcyA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICA\
              gICAgc3dpdGNoICh0aGlzLnlhbWwudmVyc2lvbikge1xuICAgICAgICAgICAgY2Fz\
              ZSAnMS4xJzpcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gd\
              HJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJz\
              EuMic6XG4gICAgICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHN\
              lO1xuICAgICAgICAgICAgICAgIHRoaXMueWFtbCA9IHtcbiAgICAgICAgICAgICAg\
              ICAgICAgZXhwbGljaXQ6IERpcmVjdGl2ZXMuZGVmYXVsdFlhbWwuZXhwbGljaXQsX\
              G4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgICAgIC\
              AgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3MgPSBPYmplY3QuYXNzaWd\
              uKHt9LCBEaXJlY3RpdmVzLmRlZmF1bHRUYWdzKTtcbiAgICAgICAgICAgICAgICBi\
              cmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgI\
              CAvKipcbiAgICAgKiBAcGFyYW0gb25FcnJvciAtIE1heSBiZSBjYWxsZWQgZXZlbi\
              BpZiB0aGUgYWN0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybnMgYHR\
              ydWVgIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBhZGQobGluZSwgb25FcnJvcikg\
              e1xuICAgICAgICBpZiAodGhpcy5hdE5leHREb2N1bWVudCkge1xuICAgICAgICAgI\
              CAgdGhpcy55YW1sID0geyBleHBsaWNpdDogRGlyZWN0aXZlcy5kZWZhdWx0WWFtbC\
              5leHBsaWNpdCwgdmVyc2lvbjogJzEuMScgfTtcbiAgICAgICAgICAgIHRoaXMudGF\
              ncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MpO1xu\
              ICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgI\
              CB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gbGluZS50cmltKCkuc3BsaXQoL1sgXF\
              x0XSsvKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICA\
              gICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnJVRBRyc6IHtc\
              biAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgI\
              CAgICAgICAgICAgICAgIG9uRXJyb3IoMCwgJyVUQUcgZGlyZWN0aXZlIHNob3VsZC\
              Bjb250YWluIGV4YWN0bHkgdHdvIHBhcnRzJyk7XG4gICAgICAgICAgICAgICAgICA\
              gIGlmIChwYXJ0cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgICAgICAgICAg\
              cmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgI\
              CBjb25zdCBbaGFuZGxlLCBwcmVmaXhdID0gcGFydHM7XG4gICAgICAgICAgICAgIC\
              AgdGhpcy50YWdzW2hhbmRsZV0gPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgcmV\
              0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICclWUFN\
              TCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnlhbWwuZXhwbGljaXQgPSB0cnVlO\
              1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDEpIHtcbiAgIC\
              AgICAgICAgICAgICAgICAgb25FcnJvcigwLCAnJVlBTUwgZGlyZWN0aXZlIHNob3V\
              sZCBjb250YWluIGV4YWN0bHkgb25lIHBhcnQnKTtcbiAgICAgICAgICAgICAgICAg\
              ICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgI\
              CAgICBjb25zdCBbdmVyc2lvbl0gPSBwYXJ0cztcbiAgICAgICAgICAgICAgICBpZi\
              AodmVyc2lvbiA9PT0gJzEuMScgfHwgdmVyc2lvbiA9PT0gJzEuMicpIHtcbiAgICA\
              gICAgICAgICAgICAgICAgdGhpcy55YW1sLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAg\
              ICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9X\
              G4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbn\
              N0IGlzVmFsaWQgPSAvXlxcZCtcXC5cXGQrJC8udGVzdCh2ZXJzaW9uKTtcbiAgICA\
              gICAgICAgICAgICAgICAgb25FcnJvcig2LCBgVW5zdXBwb3J0ZWQgWUFNTCB2ZXJz\
              aW9uICR7dmVyc2lvbn1gLCBpc1ZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgc\
              mV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi\
              AgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb25FcnJvcigwLCB\
              gVW5rbm93biBkaXJlY3RpdmUgJHtuYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAg\
              ICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgI\
              CAgKiBSZXNvbHZlcyBhIHRhZywgbWF0Y2hpbmcgaGFuZGxlcyB0byB0aG9zZSBkZW\
              ZpbmVkIGluICVUQUcgZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5\
              zIFJlc29sdmVkIHRhZywgd2hpY2ggbWF5IGFsc28gYmUgdGhlIG5vbi1zcGVjaWZp\
              YyB0YWcgYCchJ2Agb3IgYVxuICAgICAqICAgYCchbG9jYWwnYCB0YWcsIG9yIGBud\
              WxsYCBpZiB1bnJlc29sdmFibGUuXG4gICAgICovXG4gICAgdGFnTmFtZShzb3VyY2\
              UsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJyEnKVxuICAgICA\
              gICAgICAgcmV0dXJuICchJzsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgICAgICBp\
              ZiAoc291cmNlWzBdICE9PSAnIScpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoYE5vd\
              CBhIHZhbGlkIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gbn\
              VsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlWzFdID09PSAnPCcpIHt\
              cbiAgICAgICAgICAgIGNvbnN0IHZlcmJhdGltID0gc291cmNlLnNsaWNlKDIsIC0x\
              KTtcbiAgICAgICAgICAgIGlmICh2ZXJiYXRpbSA9PT0gJyEnIHx8IHZlcmJhdGltI\
              D09PSAnISEnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihgVmVyYmF0aW0gdG\
              FncyBhcmVuJ3QgcmVzb2x2ZWQsIHNvICR7c291cmNlfSBpcyBpbnZhbGlkLmApO1x\
              uICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAg\
              ICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICc+Jylcb\
              iAgICAgICAgICAgICAgICBvbkVycm9yKCdWZXJiYXRpbSB0YWdzIG11c3QgZW5kIH\
              dpdGggYSA+Jyk7XG4gICAgICAgICAgICByZXR1cm4gdmVyYmF0aW07XG4gICAgICA\
              gIH1cbiAgICAgICAgY29uc3QgWywgaGFuZGxlLCBzdWZmaXhdID0gc291cmNlLm1h\
              dGNoKC9eKC4qISkoW14hXSopJC9zKTtcbiAgICAgICAgaWYgKCFzdWZmaXgpXG4gI\
              CAgICAgICAgICBvbkVycm9yKGBUaGUgJHtzb3VyY2V9IHRhZyBoYXMgbm8gc3VmZm\
              l4YCk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMudGFnc1toYW5kbGVdO1x\
              uICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAg\
              ICAgICAgICAgIHJldHVybiBwcmVmaXggKyBkZWNvZGVVUklDb21wb25lbnQoc3VmZ\
              ml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1\
              xuICAgICAgICAgICAgICAgIG9uRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICA\
              gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1c\
              biAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuI\
              HNvdXJjZTsgLy8gbG9jYWwgdGFnXG4gICAgICAgIG9uRXJyb3IoYENvdWxkIG5vdC\
              ByZXNvbHZlIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgIHJldHVybiBudWxsO1x\
              uICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGZ1bGx5IHJlc29sdmVkIHRh\
              ZywgcmV0dXJucyBpdHMgcHJpbnRhYmxlIHN0cmluZyBmb3JtLFxuICAgICAqIHRha\
              2luZyBpbnRvIGFjY291bnQgY3VycmVudCB0YWcgcHJlZml4ZXMgYW5kIGRlZmF1bH\
              RzLlxuICAgICAqL1xuICAgIHRhZ1N0cmluZyh0YWcpIHtcbiAgICAgICAgZm9yICh\
              jb25zdCBbaGFuZGxlLCBwcmVmaXhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMudGFn\
              cykpIHtcbiAgICAgICAgICAgIGlmICh0YWcuc3RhcnRzV2l0aChwcmVmaXgpKVxuI\
              CAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUgKyBlc2NhcGVUYWdOYW1lKHRhZy\
              5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJ\
              ldHVybiB0YWdbMF0gPT09ICchJyA/IHRhZyA6IGAhPCR7dGFnfT5gO1xuICAgIH1c\
              biAgICB0b1N0cmluZyhkb2MpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzL\
              nlhbWwuZXhwbGljaXRcbiAgICAgICAgICAgID8gW2AlWUFNTCAke3RoaXMueWFtbC\
              52ZXJzaW9uIHx8ICcxLjInfWBdXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICB\
              jb25zdCB0YWdFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy50YWdzKTtcbiAg\
              ICAgICAgbGV0IHRhZ05hbWVzO1xuICAgICAgICBpZiAoZG9jICYmIHRhZ0VudHJpZ\
              XMubGVuZ3RoID4gMCAmJiBpc05vZGUoZG9jLmNvbnRlbnRzKSkge1xuICAgICAgIC\
              AgICAgY29uc3QgdGFncyA9IHt9O1xuICAgICAgICAgICAgdmlzaXQoZG9jLmNvbnR\
              lbnRzLCAoX2tleSwgbm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05v\
              ZGUobm9kZSkgJiYgbm9kZS50YWcpXG4gICAgICAgICAgICAgICAgICAgIHRhZ3Nbb\
              m9kZS50YWddID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG\
              FnTmFtZXMgPSBPYmplY3Qua2V5cyh0YWdzKTtcbiAgICAgICAgfVxuICAgICAgICB\
              lbHNlXG4gICAgICAgICAgICB0YWdOYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGNv\
              bnN0IFtoYW5kbGUsIHByZWZpeF0gb2YgdGFnRW50cmllcykge1xuICAgICAgICAgI\
              CAgaWYgKGhhbmRsZSA9PT0gJyEhJyAmJiBwcmVmaXggPT09ICd0YWc6eWFtbC5vcm\
              csMjAwMjonKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICA\
              gaWYgKCFkb2MgfHwgdGFnTmFtZXMuc29tZSh0biA9PiB0bi5zdGFydHNXaXRoKHBy\
              ZWZpeCkpKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYCVUQUcgJHtoYW5kb\
              GV9ICR7cHJlZml4fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcy\
              5qb2luKCdcXG4nKTtcbiAgICB9XG59XG5EaXJlY3RpdmVzLmRlZmF1bHRZYW1sID0\
              geyBleHBsaWNpdDogZmFsc2UsIHZlcnNpb246ICcxLjInIH07XG5EaXJlY3RpdmVz\
              LmRlZmF1bHRUYWdzID0geyAnISEnOiAndGFnOnlhbWwub3JnLDIwMDI6JyB9O1xuX\
              G5leHBvcnQgeyBEaXJlY3RpdmVzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaX\
              NDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J\
              0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5cbi8qKlxuICogVmVyaWZ5\
              IHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkIGFuY2hvci5cbiAqXG4gK\
              iBXaWxsIHRocm93IG9uIGVycm9ycy5cbiAqL1xuZnVuY3Rpb24gYW5jaG9ySXNWYW\
              xpZChhbmNob3IpIHtcbiAgICBpZiAoL1tcXHgwMC1cXHgxOVxccyxbXFxde31dLy5\
              0ZXN0KGFuY2hvcikpIHtcbiAgICAgICAgY29uc3Qgc2EgPSBKU09OLnN0cmluZ2lm\
              eShhbmNob3IpO1xuICAgICAgICBjb25zdCBtc2cgPSBgQW5jaG9yIG11c3Qgbm90I\
              GNvbnRhaW4gd2hpdGVzcGFjZSBvciBjb250cm9sIGNoYXJhY3RlcnM6ICR7c2F9YD\
              tcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHV\
              ybiB0cnVlO1xufVxuZnVuY3Rpb24gYW5jaG9yTmFtZXMocm9vdCkge1xuICAgIGNv\
              bnN0IGFuY2hvcnMgPSBuZXcgU2V0KCk7XG4gICAgdmlzaXQocm9vdCwge1xuICAgI\
              CAgICBWYWx1ZShfa2V5LCBub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5hbm\
              Nob3IpXG4gICAgICAgICAgICAgICAgYW5jaG9ycy5hZGQobm9kZS5hbmNob3IpO1x\
              uICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuY2hvcnM7XG59XG4vKiog\
              RmluZCBhIG5ldyBhbmNob3IgbmFtZSB3aXRoIHRoZSBnaXZlbiBgcHJlZml4YCBhb\
              mQgYSBvbmUtaW5kZXhlZCBzdWZmaXguICovXG5mdW5jdGlvbiBmaW5kTmV3QW5jaG\
              9yKHByZWZpeCwgZXhjbHVkZSkge1xuICAgIGZvciAobGV0IGkgPSAxOyB0cnVlOyA\
              rK2kpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke3ByZWZpeH0ke2l9YDtcbiAg\
              ICAgICAgaWYgKCFleGNsdWRlLmhhcyhuYW1lKSlcbiAgICAgICAgICAgIHJldHVyb\
              iBuYW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVBbmNob3JzKGRvYy\
              wgcHJlZml4KSB7XG4gICAgY29uc3QgYWxpYXNPYmplY3RzID0gW107XG4gICAgY29\
              uc3Qgc291cmNlT2JqZWN0cyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcHJldkFuY2hv\
              cnMgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uQW5jaG9yOiAoc291c\
              mNlKSA9PiB7XG4gICAgICAgICAgICBhbGlhc09iamVjdHMucHVzaChzb3VyY2UpO1\
              xuICAgICAgICAgICAgaWYgKCFwcmV2QW5jaG9ycylcbiAgICAgICAgICAgICAgICB\
              wcmV2QW5jaG9ycyA9IGFuY2hvck5hbWVzKGRvYyk7XG4gICAgICAgICAgICBjb25z\
              dCBhbmNob3IgPSBmaW5kTmV3QW5jaG9yKHByZWZpeCwgcHJldkFuY2hvcnMpO1xuI\
              CAgICAgICAgICAgcHJldkFuY2hvcnMuYWRkKGFuY2hvcik7XG4gICAgICAgICAgIC\
              ByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICA\
              gICogV2l0aCBjaXJjdWxhciByZWZlcmVuY2VzLCB0aGUgc291cmNlIG5vZGUgaXMg\
              b25seSByZXNvbHZlZCBhZnRlciBhbGxcbiAgICAgICAgICogb2YgaXRzIGNoaWxkI\
              G5vZGVzIGFyZS4gVGhpcyBpcyB3aHkgYW5jaG9ycyBhcmUgc2V0IG9ubHkgYWZ0ZX\
              IgYWxsIG9mXG4gICAgICAgICAqIHRoZSBub2RlcyBoYXZlIGJlZW4gY3JlYXRlZC5\
              cbiAgICAgICAgICovXG4gICAgICAgIHNldEFuY2hvcnM6ICgpID0+IHtcbiAgICAg\
              ICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIGFsaWFzT2JqZWN0cykge1xuICAgI\
              CAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNvdXJjZU9iamVjdHMuZ2V0KHNvdXJjZS\
              k7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdvYmplY3QnICY\
              mXG4gICAgICAgICAgICAgICAgICAgIHJlZi5hbmNob3IgJiZcbiAgICAgICAgICAg\
              ICAgICAgICAgKGlzU2NhbGFyKHJlZi5ub2RlKSB8fCBpc0NvbGxlY3Rpb24ocmVmL\
              m5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZWYubm9kZS5hbmNob3IgPS\
              ByZWYuYW5jaG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB\
              lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJy\
              b3IoJ0ZhaWxlZCB0byByZXNvbHZlIHJlcGVhdGVkIG9iamVjdCAodGhpcyBzaG91b\
              GQgbm90IGhhcHBlbiknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc291cm\
              NlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiA\
              gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAg\
              ICAgIHNvdXJjZU9iamVjdHNcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmNob3JJc\
              1ZhbGlkLCBhbmNob3JOYW1lcywgY3JlYXRlTm9kZUFuY2hvcnMsIGZpbmROZXdBbm\
              Nob3IgfTtcbiIsIi8qKlxuICogQXBwbGllcyB0aGUgSlNPTi5wYXJzZSByZXZpdmV\
              yIGFsZ29yaXRobSBhcyBkZWZpbmVkIGluIHRoZSBFQ01BLTI2MiBzcGVjLFxuICog\
              aW4gc2VjdGlvbiAyNC41LjEuMSBcIlJ1bnRpbWUgU2VtYW50aWNzOiBJbnRlcm5hb\
              Gl6ZUpTT05Qcm9wZXJ0eVwiIG9mIHRoZVxuICogMjAyMSBlZGl0aW9uOiBodHRwcz\
              ovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24ucGFyc2VcbiAqXG4gKiBJbmNsdWR\
              lcyBleHRlbnNpb25zIGZvciBoYW5kbGluZyBNYXAgYW5kIFNldCBvYmplY3RzLlxu\
              ICovXG5mdW5jdGlvbiBhcHBseVJldml2ZXIocmV2aXZlciwgb2JqLCBrZXksIHZhb\
              Ckge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbi\
              AgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZm9\
              yIChsZXQgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xu\
              ICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsW2ldO1xuICAgICAgICAgICAgI\
              CAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgU3RyaW5nKG\
              kpLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4\
              gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWxbaV07XG4gICAgICAgICAgICAg\
              ICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWxba\
              V0gPSB2MTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIG\
              lmICh2YWwgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Q\
              gayBvZiBBcnJheS5mcm9tKHZhbC5rZXlzKCkpKSB7XG4gICAgICAgICAgICAgICAg\
              Y29uc3QgdjAgPSB2YWwuZ2V0KGspO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYxI\
              D0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgaywgdjApO1xuICAgICAgICAgIC\
              AgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB\
              2YWwuZGVsZXRlKGspO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYxICE9PSB2\
              MClcbiAgICAgICAgICAgICAgICAgICAgdmFsLnNldChrLCB2MSk7XG4gICAgICAgI\
              CAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsIGluc3RhbmNlb2\
              YgU2V0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYwIG9mIEFycmF5LmZyb20\
              odmFsKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVy\
              KHJldml2ZXIsIHZhbCwgdjAsIHYwKTtcbiAgICAgICAgICAgICAgICBpZiAodjEgP\
              T09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZSh2MC\
              k7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKSB7XG4gICAgICA\
              gICAgICAgICAgICAgIHZhbC5kZWxldGUodjApO1xuICAgICAgICAgICAgICAgICAg\
              ICB2YWwuYWRkKHYxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9X\
              G4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbn\
              N0IFtrLCB2MF0gb2YgT2JqZWN0LmVudHJpZXModmFsKSkge1xuICAgICAgICAgICA\
              gICAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgaywgdjAp\
              O1xuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgI\
              CAgICAgICAgICAgICBkZWxldGUgdmFsW2tdO1xuICAgICAgICAgICAgICAgIGVsc2\
              UgaWYgKHYxICE9PSB2MClcbiAgICAgICAgICAgICAgICAgICAgdmFsW2tdID0gdjE\
              7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJl\
              dml2ZXIuY2FsbChvYmosIGtleSwgdmFsKTtcbn1cblxuZXhwb3J0IHsgYXBwbHlSZ\
              XZpdmVyIH07XG4iLCJpbXBvcnQgeyBoYXNBbmNob3IgfSBmcm9tICcuL2lkZW50aX\
              R5LmpzJztcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBjb252ZXJ0IGFueSBub2RlIG9\
              yIGl0cyBjb250ZW50cyB0byBuYXRpdmUgSmF2YVNjcmlwdFxuICpcbiAqIEBwYXJh\
              bSB2YWx1ZSAtIFRoZSBpbnB1dCB2YWx1ZVxuICogQHBhcmFtIGFyZyAtIElmIGB2Y\
              Wx1ZWAgZGVmaW5lcyBhIGB0b0pTT04oKWAgbWV0aG9kLCB1c2UgdGhpc1xuICogIC\
              BhcyBpdHMgZmlyc3QgYXJndW1lbnRcbiAqIEBwYXJhbSBjdHggLSBDb252ZXJzaW9\
              uIGNvbnRleHQsIG9yaWdpbmFsbHkgc2V0IGluIERvY3VtZW50I3RvSlMoKS4gSWZc\
              biAqICAgYHsga2VlcDogdHJ1ZSB9YCBpcyBub3Qgc2V0LCBvdXRwdXQgc2hvdWxkI\
              GJlIHN1aXRhYmxlIGZvciBKU09OXG4gKiAgIHN0cmluZ2lmaWNhdGlvbi5cbiAqL1\
              xuZnVuY3Rpb24gdG9KUyh2YWx1ZSwgYXJnLCBjdHgpIHtcbiAgICAvLyBlc2xpbnQ\
              tZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1y\
              ZXR1cm5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgIHJld\
              HVybiB2YWx1ZS5tYXAoKHYsIGkpID0+IHRvSlModiwgU3RyaW5nKGkpLCBjdHgpKT\
              tcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN\
              0aW9uJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5\
              cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsXG4gICAgICAgIGlmICghY3R4I\
              Hx8ICFoYXNBbmNob3IodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLn\
              RvSlNPTihhcmcsIGN0eCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7IGFsaWFzQ29\
              1bnQ6IDAsIGNvdW50OiAxLCByZXM6IHVuZGVmaW5lZCB9O1xuICAgICAgICBjdHgu\
              YW5jaG9ycy5zZXQodmFsdWUsIGRhdGEpO1xuICAgICAgICBjdHgub25DcmVhdGUgP\
              SByZXMgPT4ge1xuICAgICAgICAgICAgZGF0YS5yZXMgPSByZXM7XG4gICAgICAgIC\
              AgICBkZWxldGUgY3R4Lm9uQ3JlYXRlO1xuICAgICAgICB9O1xuICAgICAgICBjb25\
              zdCByZXMgPSB2YWx1ZS50b0pTT04oYXJnLCBjdHgpO1xuICAgICAgICBpZiAoY3R4\
              Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKHJlcyk7XG4gICAgI\
              CAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IC\
              diaWdpbnQnICYmICFjdHg/LmtlZXApXG4gICAgICAgIHJldHVybiBOdW1iZXIodmF\
              sdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IHsgdG9KUyB9O1xu\
              IiwiaW1wb3J0IHsgYXBwbHlSZXZpdmVyIH0gZnJvbSAnLi4vZG9jL2FwcGx5UmV2a\
              XZlci5qcyc7XG5pbXBvcnQgeyBOT0RFX1RZUEUsIGlzRG9jdW1lbnQgfSBmcm9tIC\
              cuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanM\
              nO1xuXG5jbGFzcyBOb2RlQmFzZSB7XG4gICAgY29uc3RydWN0b3IodHlwZSkge1xu\
              ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTk9ERV9UWVBFLCB7I\
              HZhbHVlOiB0eXBlIH0pO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlIGEgY29weSBvZi\
              B0aGlzIG5vZGUuICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B\
              5ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIE9i\
              amVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMpKTtcbiAgICAgICAga\
              WYgKHRoaXMucmFuZ2UpXG4gICAgICAgICAgICBjb3B5LnJhbmdlID0gdGhpcy5yYW\
              5nZS5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgLyo\
              qIEEgcGxhaW4gSmF2YVNjcmlwdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG5vZGUu\
              ICovXG4gICAgdG9KUyhkb2MsIHsgbWFwQXNNYXAsIG1heEFsaWFzQ291bnQsIG9uQ\
              W5jaG9yLCByZXZpdmVyIH0gPSB7fSkge1xuICAgICAgICBpZiAoIWlzRG9jdW1lbn\
              QoZG9jKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgZG9jdW1\
              lbnQgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgY29uc3QgY3R4ID0g\
              e1xuICAgICAgICAgICAgYW5jaG9yczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgZ\
              G9jLFxuICAgICAgICAgICAga2VlcDogdHJ1ZSxcbiAgICAgICAgICAgIG1hcEFzTW\
              FwOiBtYXBBc01hcCA9PT0gdHJ1ZSxcbiAgICAgICAgICAgIG1hcEtleVdhcm5lZDo\
              gZmFsc2UsXG4gICAgICAgICAgICBtYXhBbGlhc0NvdW50OiB0eXBlb2YgbWF4QWxp\
              YXNDb3VudCA9PT0gJ251bWJlcicgPyBtYXhBbGlhc0NvdW50IDogMTAwXG4gICAgI\
              CAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHRvSlModGhpcywgJycsIGN0eCk7XG\
              4gICAgICAgIGlmICh0eXBlb2Ygb25BbmNob3IgPT09ICdmdW5jdGlvbicpXG4gICA\
              gICAgICAgICBmb3IgKGNvbnN0IHsgY291bnQsIHJlcyB9IG9mIGN0eC5hbmNob3Jz\
              LnZhbHVlcygpKVxuICAgICAgICAgICAgICAgIG9uQW5jaG9yKHJlcywgY291bnQpO\
              1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbidcbi\
              AgICAgICAgICAgID8gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHsgJyc6IHJlcyB9LCA\
              nJywgcmVzKVxuICAgICAgICAgICAgOiByZXM7XG4gICAgfVxufVxuXG5leHBvcnQg\
              eyBOb2RlQmFzZSB9O1xuIiwiaW1wb3J0IHsgYW5jaG9ySXNWYWxpZCB9IGZyb20gJ\
              y4uL2RvYy9hbmNob3JzLmpzJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAnLi4vdm\
              lzaXQuanMnO1xuaW1wb3J0IHsgQUxJQVMsIGlzQWxpYXMsIGlzQ29sbGVjdGlvbiw\
              gaXNQYWlyIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBOb2RlQmFz\
              ZSB9IGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b\
              0pTLmpzJztcblxuY2xhc3MgQWxpYXMgZXh0ZW5kcyBOb2RlQmFzZSB7XG4gICAgY2\
              9uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHN1cGVyKEFMSUFTKTtcbiAgICA\
              gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQ\
              cm9wZXJ0eSh0aGlzLCAndGFnJywge1xuICAgICAgICAgICAgc2V0KCkge1xuICAgI\
              CAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQWxpYXMgbm9kZXMgY2Fubm90IG\
              hhdmUgdGFncycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4\
              gICAgLyoqXG4gICAgICogUmVzb2x2ZSB0aGUgdmFsdWUgb2YgdGhpcyBhbGlhcyB3\
              aXRoaW4gYGRvY2AsIGZpbmRpbmcgdGhlIGxhc3RcbiAgICAgKiBpbnN0YW5jZSBvZ\
              iB0aGUgYHNvdXJjZWAgYW5jaG9yIGJlZm9yZSB0aGlzIG5vZGUuXG4gICAgICovXG\
              4gICAgcmVzb2x2ZShkb2MpIHtcbiAgICAgICAgbGV0IGZvdW5kID0gdW5kZWZpbmV\
              kO1xuICAgICAgICB2aXNpdChkb2MsIHtcbiAgICAgICAgICAgIE5vZGU6IChfa2V5\
              LCBub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMpX\
              G4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdC5CUkVBSztcbiAgICAgIC\
              AgICAgICAgICBpZiAobm9kZS5hbmNob3IgPT09IHRoaXMuc291cmNlKVxuICAgICA\
              gICAgICAgICAgICAgICBmb3VuZCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAg\
              ICAgIH0pO1xuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuICAgIHRvSlNPT\
              ihfYXJnLCBjdHgpIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZX\
              R1cm4geyBzb3VyY2U6IHRoaXMuc291cmNlIH07XG4gICAgICAgIGNvbnN0IHsgYW5\
              jaG9ycywgZG9jLCBtYXhBbGlhc0NvdW50IH0gPSBjdHg7XG4gICAgICAgIGNvbnN0\
              IHNvdXJjZSA9IHRoaXMucmVzb2x2ZShkb2MpO1xuICAgICAgICBpZiAoIXNvdXJjZ\
              Skge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFVucmVzb2x2ZWQgYWxpYXMgKH\
              RoZSBhbmNob3IgbXVzdCBiZSBzZXQgYmVmb3JlIHRoZSBhbGlhcyk6ICR7dGhpcy5\
              zb3VyY2V9YDtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvciht\
              c2cpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkYXRhID0gYW5jaG9ycy5nZXQoc\
              291cmNlKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAvLyBSZX\
              NvbHZlIGFuY2hvcnMgZm9yIE5vZGUucHJvdG90eXBlLnRvSlMoKVxuICAgICAgICA\
              gICAgdG9KUyhzb3VyY2UsIG51bGwsIGN0eCk7XG4gICAgICAgICAgICBkYXRhID0g\
              YW5jaG9ycy5nZXQoc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3Rhb\
              mJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFkYXRhIHx8IGRhdGEucmVzID\
              09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdUaGlzIHN\
              ob3VsZCBub3QgaGFwcGVuOiBBbGlhcyBhbmNob3Igd2FzIG5vdCByZXNvbHZlZD8n\
              O1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gI\
              CAgICAgIH1cbiAgICAgICAgaWYgKG1heEFsaWFzQ291bnQgPj0gMCkge1xuICAgIC\
              AgICAgICAgZGF0YS5jb3VudCArPSAxO1xuICAgICAgICAgICAgaWYgKGRhdGEuYWx\
              pYXNDb3VudCA9PT0gMClcbiAgICAgICAgICAgICAgICBkYXRhLmFsaWFzQ291bnQg\
              PSBnZXRBbGlhc0NvdW50KGRvYywgc291cmNlLCBhbmNob3JzKTtcbiAgICAgICAgI\
              CAgIGlmIChkYXRhLmNvdW50ICogZGF0YS5hbGlhc0NvdW50ID4gbWF4QWxpYXNDb3\
              VudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdFeGNlc3NpdmUgYWx\
              pYXMgY291bnQgaW5kaWNhdGVzIGEgcmVzb3VyY2UgZXhoYXVzdGlvbiBhdHRhY2sn\
              O1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihtc2cpO\
              1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLn\
              JlcztcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBfb25Db21tZW50LCBfb25DaG9\
              tcEtlZXApIHtcbiAgICAgICAgY29uc3Qgc3JjID0gYCoke3RoaXMuc291cmNlfWA7\
              XG4gICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgIGFuY2hvcklzVmFsaWQod\
              Ghpcy5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLnZlcmlmeU\
              FsaWFzT3JkZXIgJiYgIWN0eC5hbmNob3JzLmhhcyh0aGlzLnNvdXJjZSkpIHtcbiA\
              gICAgICAgICAgICAgICBjb25zdCBtc2cgPSBgVW5yZXNvbHZlZCBhbGlhcyAodGhl\
              IGFuY2hvciBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIGFsaWFzKTogJHt0aGlzLnNvd\
              XJjZX1gO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuIC\
              AgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN0eC5pbXBsaWNpdEtleSlcbiA\
              gICAgICAgICAgICAgICByZXR1cm4gYCR7c3JjfSBgO1xuICAgICAgICB9XG4gICAg\
              ICAgIHJldHVybiBzcmM7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0QWxpYXNDb3Vud\
              Chkb2MsIG5vZGUsIGFuY2hvcnMpIHtcbiAgICBpZiAoaXNBbGlhcyhub2RlKSkge1\
              xuICAgICAgICBjb25zdCBzb3VyY2UgPSBub2RlLnJlc29sdmUoZG9jKTtcbiAgICA\
              gICAgY29uc3QgYW5jaG9yID0gYW5jaG9ycyAmJiBzb3VyY2UgJiYgYW5jaG9ycy5n\
              ZXQoc291cmNlKTtcbiAgICAgICAgcmV0dXJuIGFuY2hvciA/IGFuY2hvci5jb3Vud\
              CAqIGFuY2hvci5hbGlhc0NvdW50IDogMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaX\
              NDb2xsZWN0aW9uKG5vZGUpKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICA\
              gICAgIGZvciAoY29uc3QgaXRlbSBvZiBub2RlLml0ZW1zKSB7XG4gICAgICAgICAg\
              ICBjb25zdCBjID0gZ2V0QWxpYXNDb3VudChkb2MsIGl0ZW0sIGFuY2hvcnMpO1xuI\
              CAgICAgICAgICAgaWYgKGMgPiBjb3VudClcbiAgICAgICAgICAgICAgICBjb3VudC\
              A9IGM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiA\
              gICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgY29uc3Qga2MgPSBn\
              ZXRBbGlhc0NvdW50KGRvYywgbm9kZS5rZXksIGFuY2hvcnMpO1xuICAgICAgICBjb\
              25zdCB2YyA9IGdldEFsaWFzQ291bnQoZG9jLCBub2RlLnZhbHVlLCBhbmNob3JzKT\
              tcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGtjLCB2Yyk7XG4gICAgfVxuICAgIHJ\
              ldHVybiAxO1xufVxuXG5leHBvcnQgeyBBbGlhcyB9O1xuIiwiaW1wb3J0IHsgU0NB\
              TEFSIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBOb2RlQmFzZSB9I\
              GZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLm\
              pzJztcblxuY29uc3QgaXNTY2FsYXJWYWx1ZSA9ICh2YWx1ZSkgPT4gIXZhbHVlIHx\
              8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9\
              PSAnb2JqZWN0Jyk7XG5jbGFzcyBTY2FsYXIgZXh0ZW5kcyBOb2RlQmFzZSB7XG4gI\
              CAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoU0NBTEFSKTtcbi\
              AgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICB0b0pTT04oYXJ\
              nLCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGN0eD8ua2VlcCA/IHRoaXMudmFsdWUg\
              OiB0b0pTKHRoaXMudmFsdWUsIGFyZywgY3R4KTtcbiAgICB9XG4gICAgdG9TdHJpb\
              mcoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZSk7XG4gICAgfV\
              xufVxuU2NhbGFyLkJMT0NLX0ZPTERFRCA9ICdCTE9DS19GT0xERUQnO1xuU2NhbGF\
              yLkJMT0NLX0xJVEVSQUwgPSAnQkxPQ0tfTElURVJBTCc7XG5TY2FsYXIuUExBSU4g\
              PSAnUExBSU4nO1xuU2NhbGFyLlFVT1RFX0RPVUJMRSA9ICdRVU9URV9ET1VCTEUnO\
              1xuU2NhbGFyLlFVT1RFX1NJTkdMRSA9ICdRVU9URV9TSU5HTEUnO1xuXG5leHBvcn\
              QgeyBTY2FsYXIsIGlzU2NhbGFyVmFsdWUgfTtcbiIsImltcG9ydCB7IEFsaWFzIH0\
              gZnJvbSAnLi4vbm9kZXMvQWxpYXMuanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1Bh\
              aXIsIE1BUCwgU0VRLCBpc0RvY3VtZW50IH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpd\
              HkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLm\
              pzJztcblxuY29uc3QgZGVmYXVsdFRhZ1ByZWZpeCA9ICd0YWc6eWFtbC5vcmcsMjA\
              wMjonO1xuZnVuY3Rpb24gZmluZFRhZ09iamVjdCh2YWx1ZSwgdGFnTmFtZSwgdGFn\
              cykge1xuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gd\
              GFncy5maWx0ZXIodCA9PiB0LnRhZyA9PT0gdGFnTmFtZSk7XG4gICAgICAgIGNvbn\
              N0IHRhZ09iaiA9IG1hdGNoLmZpbmQodCA9PiAhdC5mb3JtYXQpID8/IG1hdGNoWzB\
              dO1xuICAgICAgICBpZiAoIXRhZ09iailcbiAgICAgICAgICAgIHRocm93IG5ldyBF\
              cnJvcihgVGFnICR7dGFnTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIHJldHVyb\
              iB0YWdPYmo7XG4gICAgfVxuICAgIHJldHVybiB0YWdzLmZpbmQodCA9PiB0LmlkZW\
              50aWZ5Py4odmFsdWUpICYmICF0LmZvcm1hdCk7XG59XG5mdW5jdGlvbiBjcmVhdGV\
              Ob2RlKHZhbHVlLCB0YWdOYW1lLCBjdHgpIHtcbiAgICBpZiAoaXNEb2N1bWVudCh2\
              YWx1ZSkpXG4gICAgICAgIHZhbHVlID0gdmFsdWUuY29udGVudHM7XG4gICAgaWYgK\
              GlzTm9kZSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBpZiAoaX\
              NQYWlyKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBtYXAgPSBjdHguc2NoZW1hW01\
              BUF0uY3JlYXRlTm9kZT8uKGN0eC5zY2hlbWEsIG51bGwsIGN0eCk7XG4gICAgICAg\
              IG1hcC5pdGVtcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgI\
              CB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nIHx8XG4gICAgICAgIH\
              ZhbHVlIGluc3RhbmNlb2YgTnVtYmVyIHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmN\
              lb2YgQm9vbGVhbiB8fFxuICAgICAgICAodHlwZW9mIEJpZ0ludCAhPT0gJ3VuZGVm\
              aW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBCaWdJbnQpIC8vIG5vdCBzdXBwb3J0Z\
              WQgZXZlcnl3aGVyZVxuICAgICkge1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZX\
              MvZWNtYTI2Mi8jc2VjLXNlcmlhbGl6ZWpzb25wcm9wZXJ0eVxuICAgICAgICB2YWx\
              1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICB9XG4gICAgY29uc3QgeyBhbGlhc0R1\
              cGxpY2F0ZU9iamVjdHMsIG9uQW5jaG9yLCBvblRhZ09iaiwgc2NoZW1hLCBzb3VyY\
              2VPYmplY3RzIH0gPSBjdHg7XG4gICAgLy8gRGV0ZWN0IGR1cGxpY2F0ZSByZWZlcm\
              VuY2VzIHRvIHRoZSBzYW1lIG9iamVjdCAmIHVzZSBBbGlhcyBub2RlcyBmb3IgYWx\
              sXG4gICAgLy8gYWZ0ZXIgZmlyc3QuIFRoZSBgcmVmYCB3cmFwcGVyIGFsbG93cyBm\
              b3IgY2lyY3VsYXIgcmVmZXJlbmNlcyB0byByZXNvbHZlLlxuICAgIGxldCByZWYgP\
              SB1bmRlZmluZWQ7XG4gICAgaWYgKGFsaWFzRHVwbGljYXRlT2JqZWN0cyAmJiB2YW\
              x1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJlZiA\
              9IHNvdXJjZU9iamVjdHMuZ2V0KHZhbHVlKTtcbiAgICAgICAgaWYgKHJlZikge1xu\
              ICAgICAgICAgICAgaWYgKCFyZWYuYW5jaG9yKVxuICAgICAgICAgICAgICAgIHJlZ\
              i5hbmNob3IgPSBvbkFuY2hvcih2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbm\
              V3IEFsaWFzKHJlZi5hbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1x\
              uICAgICAgICAgICAgcmVmID0geyBhbmNob3I6IG51bGwsIG5vZGU6IG51bGwgfTtc\
              biAgICAgICAgICAgIHNvdXJjZU9iamVjdHMuc2V0KHZhbHVlLCByZWYpO1xuICAgI\
              CAgICB9XG4gICAgfVxuICAgIGlmICh0YWdOYW1lPy5zdGFydHNXaXRoKCchIScpKV\
              xuICAgICAgICB0YWdOYW1lID0gZGVmYXVsdFRhZ1ByZWZpeCArIHRhZ05hbWUuc2x\
              pY2UoMik7XG4gICAgbGV0IHRhZ09iaiA9IGZpbmRUYWdPYmplY3QodmFsdWUsIHRh\
              Z05hbWUsIHNjaGVtYS50YWdzKTtcbiAgICBpZiAoIXRhZ09iaikge1xuICAgICAgI\
              CBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJy\
              kge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXB\
              lc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbFxuICAgICAgICAgICAgdmFsdWUg\
              PSB2YWx1ZS50b0pTT04oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbHVlI\
              Hx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbn\
              N0IG5vZGUgPSBuZXcgU2NhbGFyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChyZWY\
              pXG4gICAgICAgICAgICAgICAgcmVmLm5vZGUgPSBub2RlO1xuICAgICAgICAgICAg\
              cmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGFnT2JqID1cbiAgICAgI\
              CAgICAgIHZhbHVlIGluc3RhbmNlb2YgTWFwXG4gICAgICAgICAgICAgICAgPyBzY2\
              hlbWFbTUFQXVxuICAgICAgICAgICAgICAgIDogU3ltYm9sLml0ZXJhdG9yIGluIE9\
              iamVjdCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyBzY2hlbWFbU0VRXVxu\
              ICAgICAgICAgICAgICAgICAgICA6IHNjaGVtYVtNQVBdO1xuICAgIH1cbiAgICBpZ\
              iAob25UYWdPYmopIHtcbiAgICAgICAgb25UYWdPYmoodGFnT2JqKTtcbiAgICAgIC\
              AgZGVsZXRlIGN0eC5vblRhZ09iajtcbiAgICB9XG4gICAgY29uc3Qgbm9kZSA9IHR\
              hZ09iaj8uY3JlYXRlTm9kZVxuICAgICAgICA/IHRhZ09iai5jcmVhdGVOb2RlKGN0\
              eC5zY2hlbWEsIHZhbHVlLCBjdHgpXG4gICAgICAgIDogdHlwZW9mIHRhZ09iaj8ub\
              m9kZUNsYXNzPy5mcm9tID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRhZ0\
              9iai5ub2RlQ2xhc3MuZnJvbShjdHguc2NoZW1hLCB2YWx1ZSwgY3R4KVxuICAgICA\
              gICAgICAgOiBuZXcgU2NhbGFyKHZhbHVlKTtcbiAgICBpZiAodGFnTmFtZSlcbiAg\
              ICAgICAgbm9kZS50YWcgPSB0YWdOYW1lO1xuICAgIGVsc2UgaWYgKCF0YWdPYmouZ\
              GVmYXVsdClcbiAgICAgICAgbm9kZS50YWcgPSB0YWdPYmoudGFnO1xuICAgIGlmIC\
              hyZWYpXG4gICAgICAgIHJlZi5ub2RlID0gbm9kZTtcbiAgICByZXR1cm4gbm9kZTt\
              cbn1cblxuZXhwb3J0IHsgY3JlYXRlTm9kZSB9O1xuIiwiaW1wb3J0IHsgY3JlYXRl\
              Tm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IGlzT\
              m9kZSwgaXNQYWlyLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyIH0gZnJvbSAnLi9pZG\
              VudGl0eS5qcyc7XG5pbXBvcnQgeyBOb2RlQmFzZSB9IGZyb20gJy4vTm9kZS5qcyc\
              7XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb25Gcm9tUGF0aChzY2hlbWEsIHBhdGgsIHZh\
              bHVlKSB7XG4gICAgbGV0IHYgPSB2YWx1ZTtcbiAgICBmb3IgKGxldCBpID0gcGF0a\
              C5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBjb25zdCBrID0gcG\
              F0aFtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBrID09PSAnbnVtYmVyJyAmJiBOdW1\
              iZXIuaXNJbnRlZ2VyKGspICYmIGsgPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qg\
              YSA9IFtdO1xuICAgICAgICAgICAgYVtrXSA9IHY7XG4gICAgICAgICAgICB2ID0gY\
              TtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHYgPSBuZX\
              cgTWFwKFtbaywgdl1dKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3J\
              lYXRlTm9kZSh2LCB1bmRlZmluZWQsIHtcbiAgICAgICAgYWxpYXNEdXBsaWNhdGVP\
              YmplY3RzOiBmYWxzZSxcbiAgICAgICAga2VlcFVuZGVmaW5lZDogZmFsc2UsXG4gI\
              CAgICAgIG9uQW5jaG9yOiAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRX\
              Jyb3IoJ1RoaXMgc2hvdWxkIG5vdCBoYXBwZW4sIHBsZWFzZSByZXBvcnQgYSBidWc\
              uJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgc291cmNl\
              T2JqZWN0czogbmV3IE1hcCgpXG4gICAgfSk7XG59XG4vLyBUeXBlIGd1YXJkIGlzI\
              GludGVudGlvbmFsbHkgYSBsaXR0bGUgd3Jvbmcgc28gYXMgdG8gYmUgbW9yZSB1c2\
              VmdWwsXG4vLyBhcyBpdCBkb2VzIG5vdCBjb3ZlciB1bnR5cGFibGUgZW1wdHkgbm9\
              uLXN0cmluZyBpdGVyYWJsZXMgKGUuZy4gW10pLlxuY29uc3QgaXNFbXB0eVBhdGgg\
              PSAocGF0aCkgPT4gcGF0aCA9PSBudWxsIHx8XG4gICAgKHR5cGVvZiBwYXRoID09P\
              SAnb2JqZWN0JyAmJiAhIXBhdGhbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS5kb2\
              5lKTtcbmNsYXNzIENvbGxlY3Rpb24gZXh0ZW5kcyBOb2RlQmFzZSB7XG4gICAgY29\
              uc3RydWN0b3IodHlwZSwgc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKHR5cGUpO1xu\
              ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3NjaGVtYScsIHtcb\
              iAgICAgICAgICAgIHZhbHVlOiBzY2hlbWEsXG4gICAgICAgICAgICBjb25maWd1cm\
              FibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICA\
              gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAv\
              KipcbiAgICAgKiBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgY29sbGVjdGlvbi5cbiAgI\
              CAgKlxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBJZiBkZWZpbmVkLCBvdmVyd3JpdG\
              VzIHRoZSBvcmlnaW5hbCdzIHNjaGVtYVxuICAgICAqL1xuICAgIGNsb25lKHNjaGV\
              tYSkge1xuICAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShPYmplY3Qu\
              Z2V0UHJvdG90eXBlT2YodGhpcyksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2Nya\
              XB0b3JzKHRoaXMpKTtcbiAgICAgICAgaWYgKHNjaGVtYSlcbiAgICAgICAgICAgIG\
              NvcHkuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICBjb3B5Lml0ZW1zID0gY29weS5\
              pdGVtcy5tYXAoaXQgPT4gaXNOb2RlKGl0KSB8fCBpc1BhaXIoaXQpID8gaXQuY2xv\
              bmUoc2NoZW1hKSA6IGl0KTtcbiAgICAgICAgaWYgKHRoaXMucmFuZ2UpXG4gICAgI\
              CAgICAgICBjb3B5LnJhbmdlID0gdGhpcy5yYW5nZS5zbGljZSgpO1xuICAgICAgIC\
              ByZXR1cm4gY29weTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHZhbHV\
              lIHRvIHRoZSBjb2xsZWN0aW9uLiBGb3IgYCEhbWFwYCBhbmQgYCEhb21hcGAgdGhl\
              IHZhbHVlIG11c3RcbiAgICAgKiBiZSBhIFBhaXIgaW5zdGFuY2Ugb3IgYSBgeyBrZ\
              XksIHZhbHVlIH1gIG9iamVjdCwgd2hpY2ggbWF5IG5vdCBoYXZlIGEga2V5XG4gIC\
              AgICogdGhhdCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgbWFwLlxuICAgICAqL1xuICA\
              gIGFkZEluKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChw\
              YXRoKSlcbiAgICAgICAgICAgIHRoaXMuYWRkKHZhbHVlKTtcbiAgICAgICAgZWxzZ\
              SB7XG4gICAgICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gIC\
              AgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICA\
              gICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICAgICAg\
              bm9kZS5hZGRJbihyZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChub\
              2RlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zY2hlbWEpXG4gICAgICAgICAgICAgIC\
              AgdGhpcy5zZXQoa2V5LCBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIHJ\
              lc3QsIHZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAg\
              dGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBZQU1MIGNvbGxlY3Rpb24gYXQgJHtrZ\
              Xl9LiBSZW1haW5pbmcgcGF0aDogJHtyZXN0fWApO1xuICAgICAgICB9XG4gICAgfV\
              xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoZSBjb2xsZWN\
              0aW9uLlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91\
              bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlSW4ocGF0aCkge1xuI\
              CAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIC\
              hyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlbGV\
              0ZShrZXkpO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVl\
              KTtcbiAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgI\
              HJldHVybiBub2RlLmRlbGV0ZUluKHJlc3QpO1xuICAgICAgICBlbHNlXG4gICAgIC\
              AgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFlBTUwgY29sbGVjdGlvbiB\
              hdCAke2tleX0uIFJlbWFpbmluZyBwYXRoOiAke3Jlc3R9YCk7XG4gICAgfVxuICAg\
              IC8qKlxuICAgICAqIFJldHVybnMgaXRlbSBhdCBga2V5YCwgb3IgYHVuZGVmaW5lZ\
              GAgaWYgbm90IGZvdW5kLiBCeSBkZWZhdWx0IHVud3JhcHNcbiAgICAgKiBzY2FsYX\
              IgdmFsdWVzIGZyb20gdGhlaXIgc3Vycm91bmRpbmcgbm9kZTsgdG8gZGlzYWJsZSB\
              zZXQgYGtlZXBTY2FsYXJgIHRvXG4gICAgICogYHRydWVgIChjb2xsZWN0aW9ucyBh\
              cmUgYWx3YXlzIHJldHVybmVkIGludGFjdCkuXG4gICAgICovXG4gICAgZ2V0SW4oc\
              GF0aCwga2VlcFNjYWxhcikge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XS\
              A9IHBhdGg7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWU\
              pO1xuICAgICAgICBpZiAocmVzdC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICBy\
              ZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIobm9kZSkgPyBub2RlLnZhbHVlI\
              Dogbm9kZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGlzQ29sbG\
              VjdGlvbihub2RlKSA/IG5vZGUuZ2V0SW4ocmVzdCwga2VlcFNjYWxhcikgOiB1bmR\
              lZmluZWQ7XG4gICAgfVxuICAgIGhhc0FsbE51bGxWYWx1ZXMoYWxsb3dTY2FsYXIp\
              IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZXZlcnkobm9kZSA9PiB7XG4gI\
              CAgICAgICAgICBpZiAoIWlzUGFpcihub2RlKSlcbiAgICAgICAgICAgICAgICByZX\
              R1cm4gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBuID0gbm9kZS52YWx1ZTtcbiA\
              gICAgICAgICAgIHJldHVybiAobiA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAg\
              KGFsbG93U2NhbGFyICYmXG4gICAgICAgICAgICAgICAgICAgIGlzU2NhbGFyKG4pI\
              CYmXG4gICAgICAgICAgICAgICAgICAgIG4udmFsdWUgPT0gbnVsbCAmJlxuICAgIC\
              AgICAgICAgICAgICAgICAhbi5jb21tZW50QmVmb3JlICYmXG4gICAgICAgICAgICA\
              gICAgICAgICFuLmNvbW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgIW4udGFn\
              KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3Mga\
              WYgdGhlIGNvbGxlY3Rpb24gaW5jbHVkZXMgYSB2YWx1ZSB3aXRoIHRoZSBrZXkgYG\
              tleWAuXG4gICAgICovXG4gICAgaGFzSW4ocGF0aCkge1xuICAgICAgICBjb25zdCB\
              ba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9\
              PT0gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhcyhrZXkpO1xuICAgICAgI\
              CBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgcmV0dX\
              JuIGlzQ29sbGVjdGlvbihub2RlKSA/IG5vZGUuaGFzSW4ocmVzdCkgOiBmYWxzZTt\
              cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgY29s\
              bGVjdGlvbi4gRm9yIGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgI\
              CAqIGJvb2xlYW4gdG8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG\
              4gICAgICovXG4gICAgc2V0SW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3Q\
              gW2tleSwgLi4ucmVzdF0gPSBwYXRoO1xuICAgICAgICBpZiAocmVzdC5sZW5ndGgg\
              PT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgI\
              CAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IH\
              RoaXMuZ2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoaXNDb2xsZWN0aW9\
              uKG5vZGUpKVxuICAgICAgICAgICAgICAgIG5vZGUuc2V0SW4ocmVzdCwgdmFsdWUp\
              O1xuICAgICAgICAgICAgZWxzZSBpZiAobm9kZSA9PT0gdW5kZWZpbmVkICYmIHRoa\
              XMuc2NoZW1hKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgY29sbGVjdG\
              lvbkZyb21QYXRoKHRoaXMuc2NoZW1hLCByZXN0LCB2YWx1ZSkpO1xuICAgICAgICA\
              gICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0\
              ZWQgWUFNTCBjb2xsZWN0aW9uIGF0ICR7a2V5fS4gUmVtYWluaW5nIHBhdGg6ICR7c\
              mVzdH1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbkNvbGxlY3Rpb24ubWF4Rmxvd1\
              N0cmluZ1NpbmdsZUxpbmVMZW5ndGggPSA2MDtcblxuZXhwb3J0IHsgQ29sbGVjdGl\
              vbiwgY29sbGVjdGlvbkZyb21QYXRoLCBpc0VtcHR5UGF0aCB9O1xuIiwiLyoqXG4g\
              KiBTdHJpbmdpZmllcyBhIGNvbW1lbnQuXG4gKlxuICogRW1wdHkgY29tbWVudCBsa\
              W5lcyBhcmUgbGVmdCBlbXB0eSxcbiAqIGxpbmVzIGNvbnNpc3Rpbmcgb2YgYSBzaW\
              5nbGUgc3BhY2UgYXJlIHJlcGxhY2VkIGJ5IGAjYCxcbiAqIGFuZCBhbGwgb3RoZXI\
              gbGluZXMgYXJlIHByZWZpeGVkIHdpdGggYSBgI2AuXG4gKi9cbmNvbnN0IHN0cmlu\
              Z2lmeUNvbW1lbnQgPSAoc3RyKSA9PiBzdHIucmVwbGFjZSgvXig/ISQpKD86ICQpP\
              y9nbSwgJyMnKTtcbmZ1bmN0aW9uIGluZGVudENvbW1lbnQoY29tbWVudCwgaW5kZW\
              50KSB7XG4gICAgaWYgKC9eXFxuKyQvLnRlc3QoY29tbWVudCkpXG4gICAgICAgIHJ\
              ldHVybiBjb21tZW50LnN1YnN0cmluZygxKTtcbiAgICByZXR1cm4gaW5kZW50ID8g\
              Y29tbWVudC5yZXBsYWNlKC9eKD8hICokKS9nbSwgaW5kZW50KSA6IGNvbW1lbnQ7X\
              G59XG5jb25zdCBsaW5lQ29tbWVudCA9IChzdHIsIGluZGVudCwgY29tbWVudCkgPT\
              4gc3RyLmVuZHNXaXRoKCdcXG4nKVxuICAgID8gaW5kZW50Q29tbWVudChjb21tZW5\
              0LCBpbmRlbnQpXG4gICAgOiBjb21tZW50LmluY2x1ZGVzKCdcXG4nKVxuICAgICAg\
              ICA/ICdcXG4nICsgaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpXG4gICAgI\
              CAgIDogKHN0ci5lbmRzV2l0aCgnICcpID8gJycgOiAnICcpICsgY29tbWVudDtcbl\
              xuZXhwb3J0IHsgaW5kZW50Q29tbWVudCwgbGluZUNvbW1lbnQsIHN0cmluZ2lmeUN\
              vbW1lbnQgfTtcbiIsImNvbnN0IEZPTERfRkxPVyA9ICdmbG93JztcbmNvbnN0IEZP\
              TERfQkxPQ0sgPSAnYmxvY2snO1xuY29uc3QgRk9MRF9RVU9URUQgPSAncXVvdGVkJ\
              ztcbi8qKlxuICogVHJpZXMgdG8ga2VlcCBpbnB1dCBhdCB1cCB0byBgbGluZVdpZH\
              RoYCBjaGFyYWN0ZXJzLCBzcGxpdHRpbmcgb25seSBvbiBzcGFjZXNcbiAqIG5vdCB\
              mb2xsb3dlZCBieSBuZXdsaW5lcyBvciBzcGFjZXMgdW5sZXNzIGBtb2RlYCBpcyBg\
              J3F1b3RlZCdgLiBMaW5lcyBhcmVcbiAqIHRlcm1pbmF0ZWQgd2l0aCBgXFxuYCBhb\
              mQgc3RhcnRlZCB3aXRoIGBpbmRlbnRgLlxuICovXG5mdW5jdGlvbiBmb2xkRmxvd0\
              xpbmVzKHRleHQsIGluZGVudCwgbW9kZSA9ICdmbG93JywgeyBpbmRlbnRBdFN0YXJ\
              0LCBsaW5lV2lkdGggPSA4MCwgbWluQ29udGVudFdpZHRoID0gMjAsIG9uRm9sZCwg\
              b25PdmVyZmxvdyB9ID0ge30pIHtcbiAgICBpZiAoIWxpbmVXaWR0aCB8fCBsaW5lV\
              2lkdGggPCAwKVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICBjb25zdCBlbmRTdG\
              VwID0gTWF0aC5tYXgoMSArIG1pbkNvbnRlbnRXaWR0aCwgMSArIGxpbmVXaWR0aCA\
              tIGluZGVudC5sZW5ndGgpO1xuICAgIGlmICh0ZXh0Lmxlbmd0aCA8PSBlbmRTdGVw\
              KVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICBjb25zdCBmb2xkcyA9IFtdO1xuI\
              CAgIGNvbnN0IGVzY2FwZWRGb2xkcyA9IHt9O1xuICAgIGxldCBlbmQgPSBsaW5lV2\
              lkdGggLSBpbmRlbnQubGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgaW5kZW50QXRTdGF\
              ydCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGluZGVudEF0U3RhcnQgPiBs\
              aW5lV2lkdGggLSBNYXRoLm1heCgyLCBtaW5Db250ZW50V2lkdGgpKVxuICAgICAgI\
              CAgICAgZm9sZHMucHVzaCgwKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZW\
              5kID0gbGluZVdpZHRoIC0gaW5kZW50QXRTdGFydDtcbiAgICB9XG4gICAgbGV0IHN\
              wbGl0ID0gdW5kZWZpbmVkO1xuICAgIGxldCBwcmV2ID0gdW5kZWZpbmVkO1xuICAg\
              IGxldCBvdmVyZmxvdyA9IGZhbHNlO1xuICAgIGxldCBpID0gLTE7XG4gICAgbGV0I\
              GVzY1N0YXJ0ID0gLTE7XG4gICAgbGV0IGVzY0VuZCA9IC0xO1xuICAgIGlmIChtb2\
              RlID09PSBGT0xEX0JMT0NLKSB7XG4gICAgICAgIGkgPSBjb25zdW1lTW9yZUluZGV\
              udGVkTGluZXModGV4dCwgaSwgaW5kZW50Lmxlbmd0aCk7XG4gICAgICAgIGlmIChp\
              ICE9PSAtMSlcbiAgICAgICAgICAgIGVuZCA9IGkgKyBlbmRTdGVwO1xuICAgIH1cb\
              iAgICBmb3IgKGxldCBjaDsgKGNoID0gdGV4dFsoaSArPSAxKV0pOykge1xuICAgIC\
              AgICBpZiAobW9kZSA9PT0gRk9MRF9RVU9URUQgJiYgY2ggPT09ICdcXFxcJykge1x\
              uICAgICAgICAgICAgZXNjU3RhcnQgPSBpO1xuICAgICAgICAgICAgc3dpdGNoICh0\
              ZXh0W2kgKyAxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgI\
              CAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1\
              xuICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICB\
              pICs9IDU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAg\
              ICAgIGNhc2UgJ1UnOlxuICAgICAgICAgICAgICAgICAgICBpICs9IDk7XG4gICAgI\
              CAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG\
              4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICA\
              gICAgICAgIGVzY0VuZCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09\
              PSAnXFxuJykge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfQkxPQ0spX\
              G4gICAgICAgICAgICAgICAgaSA9IGNvbnN1bWVNb3JlSW5kZW50ZWRMaW5lcyh0ZX\
              h0LCBpLCBpbmRlbnQubGVuZ3RoKTtcbiAgICAgICAgICAgIGVuZCA9IGkgKyBpbmR\
              lbnQubGVuZ3RoICsgZW5kU3RlcDtcbiAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZp\
              bmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgK\
              GNoID09PSAnICcgJiZcbiAgICAgICAgICAgICAgICBwcmV2ICYmXG4gICAgICAgIC\
              AgICAgICAgcHJldiAhPT0gJyAnICYmXG4gICAgICAgICAgICAgICAgcHJldiAhPT0\
              gJ1xcbicgJiZcbiAgICAgICAgICAgICAgICBwcmV2ICE9PSAnXFx0Jykge1xuICAg\
              ICAgICAgICAgICAgIC8vIHNwYWNlIHN1cnJvdW5kZWQgYnkgbm9uLXNwYWNlIGNhb\
              iBiZSByZXBsYWNlZCB3aXRoIG5ld2xpbmUgKyBpbmRlbnRcbiAgICAgICAgICAgIC\
              AgICBjb25zdCBuZXh0ID0gdGV4dFtpICsgMV07XG4gICAgICAgICAgICAgICAgaWY\
              gKG5leHQgJiYgbmV4dCAhPT0gJyAnICYmIG5leHQgIT09ICdcXG4nICYmIG5leHQg\
              IT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBzcGxpdCA9IGk7XG4gICAgI\
              CAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA+PSBlbmQpIHtcbiAgICAgICAgIC\
              AgICAgICBpZiAoc3BsaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9sZHMucHV\
              zaChzcGxpdCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHNwbGl0ICsgZW5k\
              U3RlcDtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSB1bmRlZmluZWQ7XG4gI\
              CAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vZGUgPT\
              09IEZPTERfUVVPVEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaXRlLXN\
              wYWNlIGNvbGxlY3RlZCBhdCBlbmQgbWF5IHN0cmV0Y2ggcGFzdCBsaW5lV2lkdGhc\
              biAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHByZXYgPT09ICcgJyB8fCBwcmV2I\
              D09PSAnXFx0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IGNoO1\
              xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSB0ZXh0WyhpICs9IDEpXTtcbiA\
              gICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAg\
              ICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBY2NvdW50IGZvc\
              iBuZXdsaW5lIGVzY2FwZSwgYnV0IGRvbid0IGJyZWFrIHByZWNlZGluZyBlc2NhcG\
              VcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaiA9IGkgPiBlc2NFbmQgKyAxID8\
              gaSAtIDIgOiBlc2NTdGFydCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJh\
              aWwgb3V0IGlmIGxpbmVXaWR0aCAmIG1pbkNvbnRlbnRXaWR0aCBhcmUgc2hvcnRlc\
              iB0aGFuIGFuIGVzY2FwZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKG\
              VzY2FwZWRGb2xkc1tqXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB\
              0ZXh0O1xuICAgICAgICAgICAgICAgICAgICBmb2xkcy5wdXNoKGopO1xuICAgICAg\
              ICAgICAgICAgICAgICBlc2NhcGVkRm9sZHNbal0gPSB0cnVlO1xuICAgICAgICAgI\
              CAgICAgICAgICBlbmQgPSBqICsgZW5kU3RlcDtcbiAgICAgICAgICAgICAgICAgIC\
              Agc3BsaXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICA\
              gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHRy\
              dWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9X\
              G4gICAgICAgIHByZXYgPSBjaDtcbiAgICB9XG4gICAgaWYgKG92ZXJmbG93ICYmIG\
              9uT3ZlcmZsb3cpXG4gICAgICAgIG9uT3ZlcmZsb3coKTtcbiAgICBpZiAoZm9sZHM\
              ubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICBpZiAob25G\
              b2xkKVxuICAgICAgICBvbkZvbGQoKTtcbiAgICBsZXQgcmVzID0gdGV4dC5zbGljZ\
              SgwLCBmb2xkc1swXSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb2xkcy5sZW\
              5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBmb2xkID0gZm9sZHNbaV07XG4gICA\
              gICAgIGNvbnN0IGVuZCA9IGZvbGRzW2kgKyAxXSB8fCB0ZXh0Lmxlbmd0aDtcbiAg\
              ICAgICAgaWYgKGZvbGQgPT09IDApXG4gICAgICAgICAgICByZXMgPSBgXFxuJHtpb\
              mRlbnR9JHt0ZXh0LnNsaWNlKDAsIGVuZCl9YDtcbiAgICAgICAgZWxzZSB7XG4gIC\
              AgICAgICAgICBpZiAobW9kZSA9PT0gRk9MRF9RVU9URUQgJiYgZXNjYXBlZEZvbGR\
              zW2ZvbGRdKVxuICAgICAgICAgICAgICAgIHJlcyArPSBgJHt0ZXh0W2ZvbGRdfVxc\
              XFxgO1xuICAgICAgICAgICAgcmVzICs9IGBcXG4ke2luZGVudH0ke3RleHQuc2xpY\
              2UoZm9sZCArIDEsIGVuZCl9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm\
              4gcmVzO1xufVxuLyoqXG4gKiBQcmVzdW1lcyBgaSArIDFgIGlzIGF0IHRoZSBzdGF\
              ydCBvZiBhIGxpbmVcbiAqIEByZXR1cm5zIGluZGV4IG9mIGxhc3QgbmV3bGluZSBp\
              biBtb3JlLWluZGVudGVkIGJsb2NrXG4gKi9cbmZ1bmN0aW9uIGNvbnN1bWVNb3JlS\
              W5kZW50ZWRMaW5lcyh0ZXh0LCBpLCBpbmRlbnQpIHtcbiAgICBsZXQgZW5kID0gaT\
              tcbiAgICBsZXQgc3RhcnQgPSBpICsgMTtcbiAgICBsZXQgY2ggPSB0ZXh0W3N0YXJ\
              0XTtcbiAgICB3aGlsZSAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpIHtcbiAg\
              ICAgICAgaWYgKGkgPCBzdGFydCArIGluZGVudCkge1xuICAgICAgICAgICAgY2ggP\
              SB0ZXh0WysraV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgIC\
              AgICBkbyB7XG4gICAgICAgICAgICAgICAgY2ggPSB0ZXh0WysraV07XG4gICAgICA\
              gICAgICB9IHdoaWxlIChjaCAmJiBjaCAhPT0gJ1xcbicpO1xuICAgICAgICAgICAg\
              ZW5kID0gaTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgI\
              CBjaCA9IHRleHRbc3RhcnRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybi\
              BlbmQ7XG59XG5cbmV4cG9ydCB7IEZPTERfQkxPQ0ssIEZPTERfRkxPVywgRk9MRF9\
              RVU9URUQsIGZvbGRGbG93TGluZXMgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZy\
              b20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBmb2xkRmxvd0xpbmVzL\
              CBGT0xEX1FVT1RFRCwgRk9MRF9GTE9XLCBGT0xEX0JMT0NLIH0gZnJvbSAnLi9mb2\
              xkRmxvd0xpbmVzLmpzJztcblxuY29uc3QgZ2V0Rm9sZE9wdGlvbnMgPSAoY3R4LCB\
              pc0Jsb2NrKSA9PiAoe1xuICAgIGluZGVudEF0U3RhcnQ6IGlzQmxvY2sgPyBjdHgu\
              aW5kZW50Lmxlbmd0aCA6IGN0eC5pbmRlbnRBdFN0YXJ0LFxuICAgIGxpbmVXaWR0a\
              DogY3R4Lm9wdGlvbnMubGluZVdpZHRoLFxuICAgIG1pbkNvbnRlbnRXaWR0aDogY3\
              R4Lm9wdGlvbnMubWluQ29udGVudFdpZHRoXG59KTtcbi8vIEFsc28gY2hlY2tzIGZ\
              vciBsaW5lcyBzdGFydGluZyB3aXRoICUsIGFzIHBhcnNpbmcgdGhlIG91dHB1dCBh\
              cyBZQU1MIDEuMSB3aWxsXG4vLyBwcmVzdW1lIHRoYXQncyBzdGFydGluZyBhIG5ld\
              yBkb2N1bWVudC5cbmNvbnN0IGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIgPSAoc3RyKS\
              A9PiAvXiglfC0tLXxcXC5cXC5cXC4pL20udGVzdChzdHIpO1xuZnVuY3Rpb24gbGl\
              uZUxlbmd0aE92ZXJMaW1pdChzdHIsIGxpbmVXaWR0aCwgaW5kZW50TGVuZ3RoKSB7\
              XG4gICAgaWYgKCFsaW5lV2lkdGggfHwgbGluZVdpZHRoIDwgMClcbiAgICAgICAgc\
              mV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGxpbWl0ID0gbGluZVdpZHRoIC0gaW5kZW\
              50TGVuZ3RoO1xuICAgIGNvbnN0IHN0ckxlbiA9IHN0ci5sZW5ndGg7XG4gICAgaWY\
              gKHN0ckxlbiA8PSBsaW1pdClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZv\
              ciAobGV0IGkgPSAwLCBzdGFydCA9IDA7IGkgPCBzdHJMZW47ICsraSkge1xuICAgI\
              CAgICBpZiAoc3RyW2ldID09PSAnXFxuJykge1xuICAgICAgICAgICAgaWYgKGkgLS\
              BzdGFydCA+IGxpbWl0KVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICA\
              gICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGlmIChzdHJMZW4g\
              LSBzdGFydCA8PSBsaW1pdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7X\
              G4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbi\
              Bkb3VibGVRdW90ZWRTdHJpbmcodmFsdWUsIGN0eCkge1xuICAgIGNvbnN0IGpzb24\
              gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgaWYgKGN0eC5vcHRpb25zLmRv\
              dWJsZVF1b3RlZEFzSlNPTilcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgY29uc\
              3QgeyBpbXBsaWNpdEtleSB9ID0gY3R4O1xuICAgIGNvbnN0IG1pbk11bHRpTGluZU\
              xlbmd0aCA9IGN0eC5vcHRpb25zLmRvdWJsZVF1b3RlZE1pbk11bHRpTGluZUxlbmd\
              0aDtcbiAgICBjb25zdCBpbmRlbnQgPSBjdHguaW5kZW50IHx8IChjb250YWluc0Rv\
              Y3VtZW50TWFya2VyKHZhbHVlKSA/ICcgICcgOiAnJyk7XG4gICAgbGV0IHN0ciA9I\
              CcnO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGNoID\
              0ganNvbltpXTsgY2g7IGNoID0ganNvblsrK2ldKSB7XG4gICAgICAgIGlmIChjaCA\
              9PT0gJyAnICYmIGpzb25baSArIDFdID09PSAnXFxcXCcgJiYganNvbltpICsgMl0g\
              PT09ICduJykge1xuICAgICAgICAgICAgLy8gc3BhY2UgYmVmb3JlIG5ld2xpbmUgb\
              mVlZHMgdG8gYmUgZXNjYXBlZCB0byBub3QgYmUgZm9sZGVkXG4gICAgICAgICAgIC\
              BzdHIgKz0ganNvbi5zbGljZShzdGFydCwgaSkgKyAnXFxcXCAnO1xuICAgICAgICA\
              gICAgaSArPSAxO1xuICAgICAgICAgICAgc3RhcnQgPSBpO1xuICAgICAgICAgICAg\
              Y2ggPSAnXFxcXCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09PSAnXFxcX\
              CcpXG4gICAgICAgICAgICBzd2l0Y2ggKGpzb25baSArIDFdKSB7XG4gICAgICAgIC\
              AgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICA\
              gICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnNsaWNlKHN0YXJ0LCBpKTtcbiAg\
              ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBqc29uLnN1YnN0cihpI\
              CsgMiwgNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvZGUpIH\
              tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDAwJzpcbiAgICA\
              gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcMCc7XG4gICAg\
              ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgI\
              CAgICAgICAgICAgICAgIGNhc2UgJzAwMDcnOlxuICAgICAgICAgICAgICAgICAgIC\
              AgICAgICAgICAgICBzdHIgKz0gJ1xcXFxhJztcbiAgICAgICAgICAgICAgICAgICA\
              gICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg\
              Y2FzZSAnMDAwYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0c\
              iArPSAnXFxcXHYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm\
              VhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDFiJzpcbiA\
              gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcZSc7XG4g\
              ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgI\
              CAgICAgICAgICAgICAgICAgIGNhc2UgJzAwODUnOlxuICAgICAgICAgICAgICAgIC\
              AgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxOJztcbiAgICAgICAgICAgICAgICA\
              gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAg\
              ICAgY2FzZSAnMDBhMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI\
              HN0ciArPSAnXFxcXF8nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC\
              BicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyMDI4Jzp\
              cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcTCc7\
              XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgI\
              CAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzIwMjknOlxuICAgICAgICAgICAgIC\
              AgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxQJztcbiAgICAgICAgICAgICA\
              gICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAg\
              ICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga\
              WYgKGNvZGUuc3Vic3RyKDAsIDIpID09PSAnMDAnKVxuICAgICAgICAgICAgICAgIC\
              AgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxceCcgKyBjb2RlLnN1YnN0cig\
              yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAg\
              ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGpzb24uc3Vic3RyK\
              GksIDYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC\
              AgICAgICAgICAgaSArPSA1O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ\
              gPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAg\
              ICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduJzpcbiAgICAgICAgI\
              CAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5IHx8XG4gICAgICAgICAgICAgICAgIC\
              AgICAgICBqc29uW2kgKyAyXSA9PT0gJ1wiJyB8fFxuICAgICAgICAgICAgICAgICA\
              gICAgICAganNvbi5sZW5ndGggPCBtaW5NdWx0aUxpbmVMZW5ndGgpIHtcbiAgICAg\
              ICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgf\
              VxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC\
              AgICAgIC8vIGZvbGRpbmcgd2lsbCBlYXQgZmlyc3QgbmV3bGluZVxuICAgICAgICA\
              gICAgICAgICAgICAgICAgc3RyICs9IGpzb24uc2xpY2Uoc3RhcnQsIGkpICsgJ1xc\
              blxcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoanNvbltpICsgM\
              l0gPT09ICdcXFxcJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb2\
              5baSArIDNdID09PSAnbicgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB\
              qc29uW2kgKyA0XSAhPT0gJ1wiJykge1xuICAgICAgICAgICAgICAgICAgICAgICAg\
              ICAgIHN0ciArPSAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpI\
              Cs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC\
              AgICAgICAgICBzdHIgKz0gaW5kZW50O1xuICAgICAgICAgICAgICAgICAgICAgICA\
              gLy8gc3BhY2UgYWZ0ZXIgbmV3bGluZSBuZWVkcyB0byBiZSBlc2NhcGVkIHRvIG5v\
              dCBiZSBmb2xkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uW2kgK\
              yAyXSA9PT0gJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPS\
              AnXFxcXCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICA\
              gICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAg\
              ICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgI\
              CAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgIC\
              AgICAgIH1cbiAgICB9XG4gICAgc3RyID0gc3RhcnQgPyBzdHIgKyBqc29uLnNsaWN\
              lKHN0YXJ0KSA6IGpzb247XG4gICAgcmV0dXJuIGltcGxpY2l0S2V5XG4gICAgICAg\
              ID8gc3RyXG4gICAgICAgIDogZm9sZEZsb3dMaW5lcyhzdHIsIGluZGVudCwgRk9MR\
              F9RVU9URUQsIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW\
              9uIHNpbmdsZVF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KSB7XG4gICAgaWYgKGN0eC5\
              vcHRpb25zLnNpbmdsZVF1b3RlID09PSBmYWxzZSB8fFxuICAgICAgICAoY3R4Lmlt\
              cGxpY2l0S2V5ICYmIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkgfHxcbiAgICAgICAgL\
              1sgXFx0XVxcbnxcXG5bIFxcdF0vLnRlc3QodmFsdWUpIC8vIHNpbmdsZSBxdW90ZW\
              Qgc3RyaW5nIGNhbid0IGhhdmUgbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWN\
              lIGFyb3VuZCBuZXdsaW5lXG4gICAgKVxuICAgICAgICByZXR1cm4gZG91YmxlUXVv\
              dGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgIGNvbnN0IGluZGVudCA9IGN0eC5pb\
              mRlbnQgfHwgKGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpID8gJyAgJyA6IC\
              cnKTtcbiAgICBjb25zdCByZXMgPSBcIidcIiArIHZhbHVlLnJlcGxhY2UoLycvZyw\
              gXCInJ1wiKS5yZXBsYWNlKC9cXG4rL2csIGAkJlxcbiR7aW5kZW50fWApICsgXCIn\
              XCI7XG4gICAgcmV0dXJuIGN0eC5pbXBsaWNpdEtleVxuICAgICAgICA/IHJlc1xuI\
              CAgICAgICA6IGZvbGRGbG93TGluZXMocmVzLCBpbmRlbnQsIEZPTERfRkxPVywgZ2\
              V0Rm9sZE9wdGlvbnMoY3R4LCBmYWxzZSkpO1xufVxuZnVuY3Rpb24gcXVvdGVkU3R\
              yaW5nKHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCB7IHNpbmdsZVF1b3RlIH0gPSBj\
              dHgub3B0aW9ucztcbiAgICBsZXQgcXM7XG4gICAgaWYgKHNpbmdsZVF1b3RlID09P\
              SBmYWxzZSlcbiAgICAgICAgcXMgPSBkb3VibGVRdW90ZWRTdHJpbmc7XG4gICAgZW\
              xzZSB7XG4gICAgICAgIGNvbnN0IGhhc0RvdWJsZSA9IHZhbHVlLmluY2x1ZGVzKCd\
              cIicpO1xuICAgICAgICBjb25zdCBoYXNTaW5nbGUgPSB2YWx1ZS5pbmNsdWRlcyhc\
              IidcIik7XG4gICAgICAgIGlmIChoYXNEb3VibGUgJiYgIWhhc1NpbmdsZSlcbiAgI\
              CAgICAgICAgIHFzID0gc2luZ2xlUXVvdGVkU3RyaW5nO1xuICAgICAgICBlbHNlIG\
              lmIChoYXNTaW5nbGUgJiYgIWhhc0RvdWJsZSlcbiAgICAgICAgICAgIHFzID0gZG9\
              1YmxlUXVvdGVkU3RyaW5nO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBxcyA9\
              IHNpbmdsZVF1b3RlID8gc2luZ2xlUXVvdGVkU3RyaW5nIDogZG91YmxlUXVvdGVkU\
              3RyaW5nO1xuICAgIH1cbiAgICByZXR1cm4gcXModmFsdWUsIGN0eCk7XG59XG4vLy\
              BUaGUgbmVnYXRpdmUgbG9va2JlaGluZCBhdm9pZHMgYSBwb2x5bm9taWFsIHNlYXJ\
              jaCxcbi8vIGJ1dCBpc24ndCBzdXBwb3J0ZWQgeWV0IG9uIFNhZmFyaTogaHR0cHM6\
              Ly9jYW5pdXNlLmNvbS9qcy1yZWdleHAtbG9va2JlaGluZFxubGV0IGJsb2NrRW5kT\
              mV3bGluZXM7XG50cnkge1xuICAgIGJsb2NrRW5kTmV3bGluZXMgPSBuZXcgUmVnRX\
              hwKCcoXnwoPzwhXFxuKSlcXG4rKD8hXFxufCQpJywgJ2cnKTtcbn1cbmNhdGNoIHt\
              cbiAgICBibG9ja0VuZE5ld2xpbmVzID0gL1xcbisoPyFcXG58JCkvZztcbn1cbmZ1\
              bmN0aW9uIGJsb2NrU3RyaW5nKHsgY29tbWVudCwgdHlwZSwgdmFsdWUgfSwgY3R4L\
              CBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyBibG9ja1F1b3\
              RlLCBjb21tZW50U3RyaW5nLCBsaW5lV2lkdGggfSA9IGN0eC5vcHRpb25zO1xuICA\
              gIC8vIDEuIEJsb2NrIGNhbid0IGVuZCBpbiB3aGl0ZXNwYWNlIHVubGVzcyB0aGUg\
              bGFzdCBsaW5lIGlzIG5vbi1lbXB0eS5cbiAgICAvLyAyLiBTdHJpbmdzIGNvbnNpc\
              3Rpbmcgb2Ygb25seSB3aGl0ZXNwYWNlIGFyZSBiZXN0IHJlbmRlcmVkIGV4cGxpY2\
              l0bHkuXG4gICAgaWYgKCFibG9ja1F1b3RlIHx8IC9cXG5bXFx0IF0rJC8udGVzdCh\
              2YWx1ZSkgfHwgL15cXHMqJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJu\
              IHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgY29uc3QgaW5kZ\
              W50ID0gY3R4LmluZGVudCB8fFxuICAgICAgICAoY3R4LmZvcmNlQmxvY2tJbmRlbn\
              QgfHwgY29udGFpbnNEb2N1bWVudE1hcmtlcih2YWx1ZSkgPyAnICAnIDogJycpO1x\
              uICAgIGNvbnN0IGxpdGVyYWwgPSBibG9ja1F1b3RlID09PSAnbGl0ZXJhbCdcbiAg\
              ICAgICAgPyB0cnVlXG4gICAgICAgIDogYmxvY2tRdW90ZSA9PT0gJ2ZvbGRlZCcgf\
              HwgdHlwZSA9PT0gU2NhbGFyLkJMT0NLX0ZPTERFRFxuICAgICAgICAgICAgPyBmYW\
              xzZVxuICAgICAgICAgICAgOiB0eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTFx\
              uICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgIDogIWxpbmVM\
              ZW5ndGhPdmVyTGltaXQodmFsdWUsIGxpbmVXaWR0aCwgaW5kZW50Lmxlbmd0aCk7X\
              G4gICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgcmV0dXJuIGxpdGVyYWwgPyAnfFxcbi\
              cgOiAnPlxcbic7XG4gICAgLy8gZGV0ZXJtaW5lIGNob21waW5nIGZyb20gd2hpdGV\
              zcGFjZSBhdCB2YWx1ZSBlbmRcbiAgICBsZXQgY2hvbXA7XG4gICAgbGV0IGVuZFN0\
              YXJ0O1xuICAgIGZvciAoZW5kU3RhcnQgPSB2YWx1ZS5sZW5ndGg7IGVuZFN0YXJ0I\
              D4gMDsgLS1lbmRTdGFydCkge1xuICAgICAgICBjb25zdCBjaCA9IHZhbHVlW2VuZF\
              N0YXJ0IC0gMV07XG4gICAgICAgIGlmIChjaCAhPT0gJ1xcbicgJiYgY2ggIT09ICd\
              cXHQnICYmIGNoICE9PSAnICcpXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4g\
              ICAgbGV0IGVuZCA9IHZhbHVlLnN1YnN0cmluZyhlbmRTdGFydCk7XG4gICAgY29uc\
              3QgZW5kTmxQb3MgPSBlbmQuaW5kZXhPZignXFxuJyk7XG4gICAgaWYgKGVuZE5sUG\
              9zID09PSAtMSkge1xuICAgICAgICBjaG9tcCA9ICctJzsgLy8gc3RyaXBcbiAgICB\
              9XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IGVuZCB8fCBlbmRObFBvcyAhPT0gZW5k\
              Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY2hvbXAgPSAnKyc7IC8vIGtlZXBcbiAgI\
              CAgICAgaWYgKG9uQ2hvbXBLZWVwKVxuICAgICAgICAgICAgb25DaG9tcEtlZXAoKT\
              tcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNob21wID0gJyc7IC8vIGNsaXB\
              cbiAgICB9XG4gICAgaWYgKGVuZCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNs\
              aWNlKDAsIC1lbmQubGVuZ3RoKTtcbiAgICAgICAgaWYgKGVuZFtlbmQubGVuZ3RoI\
              C0gMV0gPT09ICdcXG4nKVxuICAgICAgICAgICAgZW5kID0gZW5kLnNsaWNlKDAsIC\
              0xKTtcbiAgICAgICAgZW5kID0gZW5kLnJlcGxhY2UoYmxvY2tFbmROZXdsaW5lcyw\
              gYCQmJHtpbmRlbnR9YCk7XG4gICAgfVxuICAgIC8vIGRldGVybWluZSBpbmRlbnQg\
              aW5kaWNhdG9yIGZyb20gd2hpdGVzcGFjZSBhdCB2YWx1ZSBzdGFydFxuICAgIGxld\
              CBzdGFydFdpdGhTcGFjZSA9IGZhbHNlO1xuICAgIGxldCBzdGFydEVuZDtcbiAgIC\
              BsZXQgc3RhcnRObFBvcyA9IC0xO1xuICAgIGZvciAoc3RhcnRFbmQgPSAwOyBzdGF\
              ydEVuZCA8IHZhbHVlLmxlbmd0aDsgKytzdGFydEVuZCkge1xuICAgICAgICBjb25z\
              dCBjaCA9IHZhbHVlW3N0YXJ0RW5kXTtcbiAgICAgICAgaWYgKGNoID09PSAnICcpX\
              G4gICAgICAgICAgICBzdGFydFdpdGhTcGFjZSA9IHRydWU7XG4gICAgICAgIGVsc2\
              UgaWYgKGNoID09PSAnXFxuJylcbiAgICAgICAgICAgIHN0YXJ0TmxQb3MgPSBzdGF\
              ydEVuZDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxu\
              ICAgIGxldCBzdGFydCA9IHZhbHVlLnN1YnN0cmluZygwLCBzdGFydE5sUG9zIDwgc\
              3RhcnRFbmQgPyBzdGFydE5sUG9zICsgMSA6IHN0YXJ0RW5kKTtcbiAgICBpZiAoc3\
              RhcnQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoc3RhcnQubGV\
              uZ3RoKTtcbiAgICAgICAgc3RhcnQgPSBzdGFydC5yZXBsYWNlKC9cXG4rL2csIGAk\
              JiR7aW5kZW50fWApO1xuICAgIH1cbiAgICBjb25zdCBpbmRlbnRTaXplID0gaW5kZ\
              W50ID8gJzInIDogJzEnOyAvLyByb290IGlzIGF0IC0xXG4gICAgbGV0IGhlYWRlci\
              A9IChsaXRlcmFsID8gJ3wnIDogJz4nKSArIChzdGFydFdpdGhTcGFjZSA/IGluZGV\
              udFNpemUgOiAnJykgKyBjaG9tcDtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAg\
              ICBoZWFkZXIgKz0gJyAnICsgY29tbWVudFN0cmluZyhjb21tZW50LnJlcGxhY2UoL\
              yA/W1xcclxcbl0rL2csICcgJykpO1xuICAgICAgICBpZiAob25Db21tZW50KVxuIC\
              AgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgfVxuICAgIGlmIChsaXRlcmFsKSB\
              7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxuKy9nLCBgJCYke2lu\
              ZGVudH1gKTtcbiAgICAgICAgcmV0dXJuIGAke2hlYWRlcn1cXG4ke2luZGVudH0ke\
              3N0YXJ0fSR7dmFsdWV9JHtlbmR9YDtcbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZV\
              xuICAgICAgICAucmVwbGFjZSgvXFxuKy9nLCAnXFxuJCYnKVxuICAgICAgICAucmV\
              wbGFjZSgvKD86XnxcXG4pKFtcXHQgXS4qKSg/OihbXFxuXFx0IF0qKVxcbig/IVtc\
              XG5cXHQgXSkpPy9nLCAnJDEkMicpIC8vIG1vcmUtaW5kZW50ZWQgbGluZXMgYXJlb\
              id0IGZvbGRlZFxuICAgICAgICAvLyAgICAgICAgICAgICAgICBeIG1vcmUtaW5kLi\
              BeIGVtcHR5ICAgICBeIGNhcHR1cmUgbmV4dCBlbXB0eSBsaW5lcyBvbmx5IGF0IGV\
              uZCBvZiBpbmRlbnRcbiAgICAgICAgLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRl\
              bnR9YCk7XG4gICAgY29uc3QgYm9keSA9IGZvbGRGbG93TGluZXMoYCR7c3RhcnR9J\
              Ht2YWx1ZX0ke2VuZH1gLCBpbmRlbnQsIEZPTERfQkxPQ0ssIGdldEZvbGRPcHRpb2\
              5zKGN0eCwgdHJ1ZSkpO1xuICAgIHJldHVybiBgJHtoZWFkZXJ9XFxuJHtpbmRlbnR\
              9JHtib2R5fWA7XG59XG5mdW5jdGlvbiBwbGFpblN0cmluZyhpdGVtLCBjdHgsIG9u\
              Q29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhbHVlI\
              H0gPSBpdGVtO1xuICAgIGNvbnN0IHsgYWN0dWFsU3RyaW5nLCBpbXBsaWNpdEtleS\
              wgaW5kZW50LCBpbmRlbnRTdGVwLCBpbkZsb3cgfSA9IGN0eDtcbiAgICBpZiAoKGl\
              tcGxpY2l0S2V5ICYmIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkgfHxcbiAgICAgICAg\
              KGluRmxvdyAmJiAvW1tcXF17fSxdLy50ZXN0KHZhbHVlKSkpIHtcbiAgICAgICAgc\
              mV0dXJuIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgaWYgKC\
              F2YWx1ZSB8fFxuICAgICAgICAvXltcXG5cXHQgLFtcXF17fSMmKiF8PidcIiVAYF1\
              8Xls/LV0kfF5bPy1dWyBcXHRdfFtcXG46XVsgXFx0XXxbIFxcdF1cXG58W1xcblxc\
              dCBdI3xbXFxuXFx0IDpdJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gbm90I\
              GFsbG93ZWQ6XG4gICAgICAgIC8vIC0gZW1wdHkgc3RyaW5nLCAnLScgb3IgJz8nXG\
              4gICAgICAgIC8vIC0gc3RhcnQgd2l0aCBhbiBpbmRpY2F0b3IgY2hhcmFjdGVyICh\
              leGNlcHQgWz86LV0pIG9yIC9bPy1dIC9cbiAgICAgICAgLy8gLSAnXFxuICcsICc6\
              ICcgb3IgJyBcXG4nIGFueXdoZXJlXG4gICAgICAgIC8vIC0gJyMnIG5vdCBwcmVjZ\
              WRlZCBieSBhIG5vbi1zcGFjZSBjaGFyXG4gICAgICAgIC8vIC0gZW5kIHdpdGggJy\
              AnIG9yICc6J1xuICAgICAgICByZXR1cm4gaW1wbGljaXRLZXkgfHwgaW5GbG93IHx\
              8ICF2YWx1ZS5pbmNsdWRlcygnXFxuJylcbiAgICAgICAgICAgID8gcXVvdGVkU3Ry\
              aW5nKHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IGJsb2NrU3RyaW5nKGl0ZW0sI\
              GN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxuICAgIGlmICghaW\
              1wbGljaXRLZXkgJiZcbiAgICAgICAgIWluRmxvdyAmJlxuICAgICAgICB0eXBlICE\
              9PSBTY2FsYXIuUExBSU4gJiZcbiAgICAgICAgdmFsdWUuaW5jbHVkZXMoJ1xcbicp\
              KSB7XG4gICAgICAgIC8vIFdoZXJlIGFsbG93ZWQgJiB0eXBlIG5vdCBzZXQgZXhwb\
              GljaXRseSwgcHJlZmVyIGJsb2NrIHN0eWxlIGZvciBtdWx0aWxpbmUgc3RyaW5nc1\
              xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQ\
              sIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zRG9jdW1lbnRN\
              YXJrZXIodmFsdWUpKSB7XG4gICAgICAgIGlmIChpbmRlbnQgPT09ICcnKSB7XG4gI\
              CAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9IHRydWU7XG4gICAgICAgIC\
              AgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2h\
              vbXBLZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbXBsaWNpdEtl\
              eSAmJiBpbmRlbnQgPT09IGluZGVudFN0ZXApIHtcbiAgICAgICAgICAgIHJldHVyb\
              iBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gIC\
              AgY29uc3Qgc3RyID0gdmFsdWUucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGV\
              udH1gKTtcbiAgICAvLyBWZXJpZnkgdGhhdCBvdXRwdXQgd2lsbCBiZSBwYXJzZWQg\
              YXMgYSBzdHJpbmcsIGFzIGUuZy4gcGxhaW4gbnVtYmVycyBhbmRcbiAgICAvLyBib\
              29sZWFucyBnZXQgcGFyc2VkIHdpdGggdGhvc2UgdHlwZXMgaW4gdjEuMiAoZS5nLi\
              AnNDInLCAndHJ1ZScgJiAnMC45ZS0zJyksXG4gICAgLy8gYW5kIG90aGVycyBpbiB\
              2MS4xLlxuICAgIGlmIChhY3R1YWxTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgdGVz\
              dCA9ICh0YWcpID0+IHRhZy5kZWZhdWx0ICYmIHRhZy50YWcgIT09ICd0YWc6eWFtb\
              C5vcmcsMjAwMjpzdHInICYmIHRhZy50ZXN0Py50ZXN0KHN0cik7XG4gICAgICAgIG\
              NvbnN0IHsgY29tcGF0LCB0YWdzIH0gPSBjdHguZG9jLnNjaGVtYTtcbiAgICAgICA\
              gaWYgKHRhZ3Muc29tZSh0ZXN0KSB8fCBjb21wYXQ/LnNvbWUodGVzdCkpXG4gICAg\
              ICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgIH1cb\
              iAgICByZXR1cm4gaW1wbGljaXRLZXlcbiAgICAgICAgPyBzdHJcbiAgICAgICAgOi\
              Bmb2xkRmxvd0xpbmVzKHN0ciwgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHR\
              pb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0cmluZyhp\
              dGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7I\
              GltcGxpY2l0S2V5LCBpbkZsb3cgfSA9IGN0eDtcbiAgICBjb25zdCBzcyA9IHR5cG\
              VvZiBpdGVtLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGl0ZW1cbiAgICA\
              gICAgOiBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7IHZhbHVlOiBTdHJpbmcoaXRl\
              bS52YWx1ZSkgfSk7XG4gICAgbGV0IHsgdHlwZSB9ID0gaXRlbTtcbiAgICBpZiAod\
              HlwZSAhPT0gU2NhbGFyLlFVT1RFX0RPVUJMRSkge1xuICAgICAgICAvLyBmb3JjZS\
              Bkb3VibGUgcXVvdGVzIG9uIGNvbnRyb2wgY2hhcmFjdGVycyAmIHVucGFpcmVkIHN\
              1cnJvZ2F0ZXNcbiAgICAgICAgaWYgKC9bXFx4MDAtXFx4MDhcXHgwYi1cXHgxZlxc\
              eDdmLVxceDlmXFx1e0Q4MDB9LVxcdXtERkZGfV0vdS50ZXN0KHNzLnZhbHVlKSlcb\
              iAgICAgICAgICAgIHR5cGUgPSBTY2FsYXIuUVVPVEVfRE9VQkxFO1xuICAgIH1cbi\
              AgICBjb25zdCBfc3RyaW5naWZ5ID0gKF90eXBlKSA9PiB7XG4gICAgICAgIHN3aXR\
              jaCAoX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0ZPTERF\
              RDpcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0xJVEVSQUw6XG4gICAgI\
              CAgICAgICAgICAgcmV0dXJuIGltcGxpY2l0S2V5IHx8IGluRmxvd1xuICAgICAgIC\
              AgICAgICAgICAgICA/IHF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KSAvLyBibG9\
              ja3MgYXJlIG5vdCB2YWxpZCBpbnNpZGUgZmxvdyBjb250YWluZXJzXG4gICAgICAg\
              ICAgICAgICAgICAgIDogYmxvY2tTdHJpbmcoc3MsIGN0eCwgb25Db21tZW50LCBvb\
              kNob21wS2VlcCk7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5RVU9URV9ET1VCTE\
              U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyhzcy5\
              2YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLlFVT1RFX1NJTkdM\
              RTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2luZ2xlUXVvdGVkU3RyaW5nKHNzL\
              nZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXIuUExBSU46XG4gIC\
              AgICAgICAgICAgICAgcmV0dXJuIHBsYWluU3RyaW5nKHNzLCBjdHgsIG9uQ29tbWV\
              udCwgb25DaG9tcEtlZXApO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAg\
              ICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0I\
              HJlcyA9IF9zdHJpbmdpZnkodHlwZSk7XG4gICAgaWYgKHJlcyA9PT0gbnVsbCkge1\
              xuICAgICAgICBjb25zdCB7IGRlZmF1bHRLZXlUeXBlLCBkZWZhdWx0U3RyaW5nVHl\
              wZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHQgPSAoaW1wbGljaXRL\
              ZXkgJiYgZGVmYXVsdEtleVR5cGUpIHx8IGRlZmF1bHRTdHJpbmdUeXBlO1xuICAgI\
              CAgICByZXMgPSBfc3RyaW5naWZ5KHQpO1xuICAgICAgICBpZiAocmVzID09PSBudW\
              xsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWZ\
              hdWx0IHN0cmluZyB0eXBlICR7dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztc\
              bn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH07XG4iLCJpbXBvcnQgeyBhb\
              mNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IH\
              sgaXNQYWlyLCBpc0FsaWFzLCBpc05vZGUsIGlzU2NhbGFyLCBpc0NvbGxlY3Rpb24\
              gfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdp\
              ZnlDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcbmltcG9yd\
              CB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4vc3RyaW5naWZ5U3RyaW5nLmpzJz\
              tcblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5naWZ5Q29udGV4dChkb2MsIG9wdGlvbnM\
              pIHtcbiAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYmxv\
              Y2tRdW90ZTogdHJ1ZSxcbiAgICAgICAgY29tbWVudFN0cmluZzogc3RyaW5naWZ5Q\
              29tbWVudCxcbiAgICAgICAgZGVmYXVsdEtleVR5cGU6IG51bGwsXG4gICAgICAgIG\
              RlZmF1bHRTdHJpbmdUeXBlOiAnUExBSU4nLFxuICAgICAgICBkaXJlY3RpdmVzOiB\
              udWxsLFxuICAgICAgICBkb3VibGVRdW90ZWRBc0pTT046IGZhbHNlLFxuICAgICAg\
              ICBkb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg6IDQwLFxuICAgICAgICBmY\
              WxzZVN0cjogJ2ZhbHNlJyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOi\
              B0cnVlLFxuICAgICAgICBpbmRlbnRTZXE6IHRydWUsXG4gICAgICAgIGxpbmVXaWR\
              0aDogODAsXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aDogMjAsXG4gICAgICAgIG51\
              bGxTdHI6ICdudWxsJyxcbiAgICAgICAgc2ltcGxlS2V5czogZmFsc2UsXG4gICAgI\
              CAgIHNpbmdsZVF1b3RlOiBudWxsLFxuICAgICAgICB0cnVlU3RyOiAndHJ1ZScsXG\
              4gICAgICAgIHZlcmlmeUFsaWFzT3JkZXI6IHRydWVcbiAgICB9LCBkb2Muc2NoZW1\
              hLnRvU3RyaW5nT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgbGV0IGluRmxvdztcbiAg\
              ICBzd2l0Y2ggKG9wdC5jb2xsZWN0aW9uU3R5bGUpIHtcbiAgICAgICAgY2FzZSAnY\
              mxvY2snOlxuICAgICAgICAgICAgaW5GbG93ID0gZmFsc2U7XG4gICAgICAgICAgIC\
              BicmVhaztcbiAgICAgICAgY2FzZSAnZmxvdyc6XG4gICAgICAgICAgICBpbkZsb3c\
              gPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4g\
              ICAgICAgICAgICBpbkZsb3cgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuI\
              CAgICAgICBhbmNob3JzOiBuZXcgU2V0KCksXG4gICAgICAgIGRvYyxcbiAgICAgIC\
              AgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiBvcHQuZmxvd0NvbGxlY3Rpb25QYWRkaW5\
              nID8gJyAnIDogJycsXG4gICAgICAgIGluZGVudDogJycsXG4gICAgICAgIGluZGVu\
              dFN0ZXA6IHR5cGVvZiBvcHQuaW5kZW50ID09PSAnbnVtYmVyJyA/ICcgJy5yZXBlY\
              XQob3B0LmluZGVudCkgOiAnICAnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG\
              9wdGlvbnM6IG9wdFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRUYWdPYmplY3QodGF\
              ncywgaXRlbSkge1xuICAgIGlmIChpdGVtLnRhZykge1xuICAgICAgICBjb25zdCBt\
              YXRjaCA9IHRhZ3MuZmlsdGVyKHQgPT4gdC50YWcgPT09IGl0ZW0udGFnKTtcbiAgI\
              CAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gbW\
              F0Y2guZmluZCh0ID0+IHQuZm9ybWF0ID09PSBpdGVtLmZvcm1hdCkgPz8gbWF0Y2h\
              bMF07XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgbGV0\
              IG9iajtcbiAgICBpZiAoaXNTY2FsYXIoaXRlbSkpIHtcbiAgICAgICAgb2JqID0ga\
              XRlbS52YWx1ZTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID\
              0+IHQuaWRlbnRpZnk/LihvYmopKTtcbiAgICAgICAgdGFnT2JqID1cbiAgICAgICA\
              gICAgIG1hdGNoLmZpbmQodCA9PiB0LmZvcm1hdCA9PT0gaXRlbS5mb3JtYXQpID8/\
              IG1hdGNoLmZpbmQodCA9PiAhdC5mb3JtYXQpO1xuICAgIH1cbiAgICBlbHNlIHtcb\
              iAgICAgICAgb2JqID0gaXRlbTtcbiAgICAgICAgdGFnT2JqID0gdGFncy5maW5kKH\
              QgPT4gdC5ub2RlQ2xhc3MgJiYgb2JqIGluc3RhbmNlb2YgdC5ub2RlQ2xhc3MpO1x\
              uICAgIH1cbiAgICBpZiAoIXRhZ09iaikge1xuICAgICAgICBjb25zdCBuYW1lID0g\
              b2JqPy5jb25zdHJ1Y3Rvcj8ubmFtZSA/PyB0eXBlb2Ygb2JqO1xuICAgICAgICB0a\
              HJvdyBuZXcgRXJyb3IoYFRhZyBub3QgcmVzb2x2ZWQgZm9yICR7bmFtZX0gdmFsdW\
              VgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ09iajtcbn1cbi8vIG5lZWRzIHRvIGJ\
              lIGNhbGxlZCBiZWZvcmUgdmFsdWUgc3RyaW5naWZpZXIgdG8gYWxsb3cgZm9yIGNp\
              cmN1bGFyIGFuY2hvciByZWZzXG5mdW5jdGlvbiBzdHJpbmdpZnlQcm9wcyhub2RlL\
              CB0YWdPYmosIHsgYW5jaG9ycywgZG9jIH0pIHtcbiAgICBpZiAoIWRvYy5kaXJlY3\
              RpdmVzKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3QgcHJvcHMgPSBbXTt\
              cbiAgICBjb25zdCBhbmNob3IgPSAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0\
              aW9uKG5vZGUpKSAmJiBub2RlLmFuY2hvcjtcbiAgICBpZiAoYW5jaG9yICYmIGFuY\
              2hvcklzVmFsaWQoYW5jaG9yKSkge1xuICAgICAgICBhbmNob3JzLmFkZChhbmNob3\
              IpO1xuICAgICAgICBwcm9wcy5wdXNoKGAmJHthbmNob3J9YCk7XG4gICAgfVxuICA\
              gIGNvbnN0IHRhZyA9IG5vZGUudGFnID8gbm9kZS50YWcgOiB0YWdPYmouZGVmYXVs\
              dCA/IG51bGwgOiB0YWdPYmoudGFnO1xuICAgIGlmICh0YWcpXG4gICAgICAgIHByb\
              3BzLnB1c2goZG9jLmRpcmVjdGl2ZXMudGFnU3RyaW5nKHRhZykpO1xuICAgIHJldH\
              VybiBwcm9wcy5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoaXRlbSw\
              gY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgaWYgKGlzUGFpcihp\
              dGVtKSlcbiAgICAgICAgcmV0dXJuIGl0ZW0udG9TdHJpbmcoY3R4LCBvbkNvbW1lb\
              nQsIG9uQ2hvbXBLZWVwKTtcbiAgICBpZiAoaXNBbGlhcyhpdGVtKSkge1xuICAgIC\
              AgICBpZiAoY3R4LmRvYy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgcmV0dXJuIGl\
              0ZW0udG9TdHJpbmcoY3R4KTtcbiAgICAgICAgaWYgKGN0eC5yZXNvbHZlZEFsaWFz\
              ZXM/LmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvc\
              ihgQ2Fubm90IHN0cmluZ2lmeSBjaXJjdWxhciBzdHJ1Y3R1cmUgd2l0aG91dCBhbG\
              lhcyBub2Rlc2ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICA\
              gICAgaWYgKGN0eC5yZXNvbHZlZEFsaWFzZXMpXG4gICAgICAgICAgICAgICAgY3R4\
              LnJlc29sdmVkQWxpYXNlcy5hZGQoaXRlbSk7XG4gICAgICAgICAgICBlbHNlXG4gI\
              CAgICAgICAgICAgICAgY3R4LnJlc29sdmVkQWxpYXNlcyA9IG5ldyBTZXQoW2l0ZW\
              1dKTtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtLnJlc29sdmUoY3R4LmRvYyk7XG4\
              gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHRhZ09iaiA9IHVuZGVmaW5lZDtcbiAg\
              ICBjb25zdCBub2RlID0gaXNOb2RlKGl0ZW0pXG4gICAgICAgID8gaXRlbVxuICAgI\
              CAgICA6IGN0eC5kb2MuY3JlYXRlTm9kZShpdGVtLCB7IG9uVGFnT2JqOiBvID0+IC\
              h0YWdPYmogPSBvKSB9KTtcbiAgICBpZiAoIXRhZ09iailcbiAgICAgICAgdGFnT2J\
              qID0gZ2V0VGFnT2JqZWN0KGN0eC5kb2Muc2NoZW1hLnRhZ3MsIG5vZGUpO1xuICAg\
              IGNvbnN0IHByb3BzID0gc3RyaW5naWZ5UHJvcHMobm9kZSwgdGFnT2JqLCBjdHgpO\
              1xuICAgIGlmIChwcm9wcy5sZW5ndGggPiAwKVxuICAgICAgICBjdHguaW5kZW50QX\
              RTdGFydCA9IChjdHguaW5kZW50QXRTdGFydCA/PyAwKSArIHByb3BzLmxlbmd0aCA\
              rIDE7XG4gICAgY29uc3Qgc3RyID0gdHlwZW9mIHRhZ09iai5zdHJpbmdpZnkgPT09\
              ICdmdW5jdGlvbidcbiAgICAgICAgPyB0YWdPYmouc3RyaW5naWZ5KG5vZGUsIGN0e\
              Cwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgOiBpc1NjYWxhcihub2\
              RlKVxuICAgICAgICAgICAgPyBzdHJpbmdpZnlTdHJpbmcobm9kZSwgY3R4LCBvbkN\
              vbW1lbnQsIG9uQ2hvbXBLZWVwKVxuICAgICAgICAgICAgOiBub2RlLnRvU3RyaW5n\
              KGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgaWYgKCFwcm9wcylcb\
              iAgICAgICAgcmV0dXJuIHN0cjtcbiAgICByZXR1cm4gaXNTY2FsYXIobm9kZSkgfH\
              wgc3RyWzBdID09PSAneycgfHwgc3RyWzBdID09PSAnWydcbiAgICAgICAgPyBgJHt\
              wcm9wc30gJHtzdHJ9YFxuICAgICAgICA6IGAke3Byb3BzfVxcbiR7Y3R4LmluZGVu\
              dH0ke3N0cn1gO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdHJpbmdpZnlDb250ZXh0L\
              CBzdHJpbmdpZnkgfTtcbiIsImltcG9ydCB7IGlzQ29sbGVjdGlvbiwgaXNOb2RlLC\
              Bpc1NjYWxhciwgaXNTZXEgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5\
              pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1w\
              b3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0I\
              HsgbGluZUNvbW1lbnQsIGluZGVudENvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeU\
              NvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlQYWlyKHsga2V5LCB2YWx\
              1ZSB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7\
              IGFsbE51bGxWYWx1ZXMsIGRvYywgaW5kZW50LCBpbmRlbnRTdGVwLCBvcHRpb25zO\
              iB7IGNvbW1lbnRTdHJpbmcsIGluZGVudFNlcSwgc2ltcGxlS2V5cyB9IH0gPSBjdH\
              g7XG4gICAgbGV0IGtleUNvbW1lbnQgPSAoaXNOb2RlKGtleSkgJiYga2V5LmNvbW1\
              lbnQpIHx8IG51bGw7XG4gICAgaWYgKHNpbXBsZUtleXMpIHtcbiAgICAgICAgaWYg\
              KGtleUNvbW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2l0a\
              CBzaW1wbGUga2V5cywga2V5IG5vZGVzIGNhbm5vdCBoYXZlIGNvbW1lbnRzJyk7XG\
              4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihrZXkpIHx8ICghaXN\
              Ob2RlKGtleSkgJiYgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAg\
              ICAgICBjb25zdCBtc2cgPSAnV2l0aCBzaW1wbGUga2V5cywgY29sbGVjdGlvbiBjY\
              W5ub3QgYmUgdXNlZCBhcyBhIGtleSB2YWx1ZSc7XG4gICAgICAgICAgICB0aHJvdy\
              BuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgZXhwbGl\
              jaXRLZXkgPSAhc2ltcGxlS2V5cyAmJlxuICAgICAgICAoIWtleSB8fFxuICAgICAg\
              ICAgICAgKGtleUNvbW1lbnQgJiYgdmFsdWUgPT0gbnVsbCAmJiAhY3R4LmluRmxvd\
              ykgfHxcbiAgICAgICAgICAgIGlzQ29sbGVjdGlvbihrZXkpIHx8XG4gICAgICAgIC\
              AgICAoaXNTY2FsYXIoa2V5KVxuICAgICAgICAgICAgICAgID8ga2V5LnR5cGUgPT0\
              9IFNjYWxhci5CTE9DS19GT0xERUQgfHwga2V5LnR5cGUgPT09IFNjYWxhci5CTE9D\
              S19MSVRFUkFMXG4gICAgICAgICAgICAgICAgOiB0eXBlb2Yga2V5ID09PSAnb2JqZ\
              WN0JykpO1xuICAgIGN0eCA9IE9iamVjdC5hc3NpZ24oe30sIGN0eCwge1xuICAgIC\
              AgICBhbGxOdWxsVmFsdWVzOiBmYWxzZSxcbiAgICAgICAgaW1wbGljaXRLZXk6ICF\
              leHBsaWNpdEtleSAmJiAoc2ltcGxlS2V5cyB8fCAhYWxsTnVsbFZhbHVlcyksXG4g\
              ICAgICAgIGluZGVudDogaW5kZW50ICsgaW5kZW50U3RlcFxuICAgIH0pO1xuICAgI\
              GxldCBrZXlDb21tZW50RG9uZSA9IGZhbHNlO1xuICAgIGxldCBjaG9tcEtlZXAgPS\
              BmYWxzZTtcbiAgICBsZXQgc3RyID0gc3RyaW5naWZ5KGtleSwgY3R4LCAoKSA9PiA\
              oa2V5Q29tbWVudERvbmUgPSB0cnVlKSwgKCkgPT4gKGNob21wS2VlcCA9IHRydWUp\
              KTtcbiAgICBpZiAoIWV4cGxpY2l0S2V5ICYmICFjdHguaW5GbG93ICYmIHN0ci5sZ\
              W5ndGggPiAxMDI0KSB7XG4gICAgICAgIGlmIChzaW1wbGVLZXlzKVxuICAgICAgIC\
              AgICAgdGhyb3cgbmV3IEVycm9yKCdXaXRoIHNpbXBsZSBrZXlzLCBzaW5nbGUgbGl\
              uZSBzY2FsYXIgbXVzdCBub3Qgc3BhbiBtb3JlIHRoYW4gMTAyNCBjaGFyYWN0ZXJz\
              Jyk7XG4gICAgICAgIGV4cGxpY2l0S2V5ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgK\
              GN0eC5pbkZsb3cpIHtcbiAgICAgICAgaWYgKGFsbE51bGxWYWx1ZXMgfHwgdmFsdW\
              UgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGtleUNvbW1lbnREb25lICYmIG9\
              uQ29tbWVudClcbiAgICAgICAgICAgICAgICBvbkNvbW1lbnQoKTtcbiAgICAgICAg\
              ICAgIHJldHVybiBzdHIgPT09ICcnID8gJz8nIDogZXhwbGljaXRLZXkgPyBgPyAke\
              3N0cn1gIDogc3RyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChhbG\
              xOdWxsVmFsdWVzICYmICFzaW1wbGVLZXlzKSB8fCAodmFsdWUgPT0gbnVsbCAmJiB\
              leHBsaWNpdEtleSkpIHtcbiAgICAgICAgc3RyID0gYD8gJHtzdHJ9YDtcbiAgICAg\
              ICAgaWYgKGtleUNvbW1lbnQgJiYgIWtleUNvbW1lbnREb25lKSB7XG4gICAgICAgI\
              CAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBjdHguaW5kZW50LCBjb21tZW50U3\
              RyaW5nKGtleUNvbW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh\
              jaG9tcEtlZXAgJiYgb25DaG9tcEtlZXApXG4gICAgICAgICAgICBvbkNob21wS2Vl\
              cCgpO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBpZiAoa2V5Q29tb\
              WVudERvbmUpXG4gICAgICAgIGtleUNvbW1lbnQgPSBudWxsO1xuICAgIGlmIChleH\
              BsaWNpdEtleSkge1xuICAgICAgICBpZiAoa2V5Q29tbWVudClcbiAgICAgICAgICA\
              gIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJp\
              bmcoa2V5Q29tbWVudCkpO1xuICAgICAgICBzdHIgPSBgPyAke3N0cn1cXG4ke2luZ\
              GVudH06YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0ciA9IGAke3N0cn\
              06YDtcbiAgICAgICAgaWYgKGtleUNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0\
              gbGluZUNvbW1lbnQoc3RyLCBjdHguaW5kZW50LCBjb21tZW50U3RyaW5nKGtleUNv\
              bW1lbnQpKTtcbiAgICB9XG4gICAgbGV0IHZzYiwgdmNiLCB2YWx1ZUNvbW1lbnQ7X\
              G4gICAgaWYgKGlzTm9kZSh2YWx1ZSkpIHtcbiAgICAgICAgdnNiID0gISF2YWx1ZS\
              5zcGFjZUJlZm9yZTtcbiAgICAgICAgdmNiID0gdmFsdWUuY29tbWVudEJlZm9yZTt\
              cbiAgICAgICAgdmFsdWVDb21tZW50ID0gdmFsdWUuY29tbWVudDtcbiAgICB9XG4g\
              ICAgZWxzZSB7XG4gICAgICAgIHZzYiA9IGZhbHNlO1xuICAgICAgICB2Y2IgPSBud\
              WxsO1xuICAgICAgICB2YWx1ZUNvbW1lbnQgPSBudWxsO1xuICAgICAgICBpZiAodm\
              FsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHZ\
              hbHVlID0gZG9jLmNyZWF0ZU5vZGUodmFsdWUpO1xuICAgIH1cbiAgICBjdHguaW1w\
              bGljaXRLZXkgPSBmYWxzZTtcbiAgICBpZiAoIWV4cGxpY2l0S2V5ICYmICFrZXlDb\
              21tZW50ICYmIGlzU2NhbGFyKHZhbHVlKSlcbiAgICAgICAgY3R4LmluZGVudEF0U3\
              RhcnQgPSBzdHIubGVuZ3RoICsgMTtcbiAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiA\
              gICBpZiAoIWluZGVudFNlcSAmJlxuICAgICAgICBpbmRlbnRTdGVwLmxlbmd0aCA+\
              PSAyICYmXG4gICAgICAgICFjdHguaW5GbG93ICYmXG4gICAgICAgICFleHBsaWNpd\
              EtleSAmJlxuICAgICAgICBpc1NlcSh2YWx1ZSkgJiZcbiAgICAgICAgIXZhbHVlLm\
              Zsb3cgJiZcbiAgICAgICAgIXZhbHVlLnRhZyAmJlxuICAgICAgICAhdmFsdWUuYW5\
              jaG9yKSB7XG4gICAgICAgIC8vIElmIGluZGVudFNlcSA9PT0gZmFsc2UsIGNvbnNp\
              ZGVyICctICcgYXMgcGFydCBvZiBpbmRlbnRhdGlvbiB3aGVyZSBwb3NzaWJsZVxuI\
              CAgICAgICBjdHguaW5kZW50ID0gY3R4LmluZGVudC5zdWJzdHJpbmcoMik7XG4gIC\
              AgfVxuICAgIGxldCB2YWx1ZUNvbW1lbnREb25lID0gZmFsc2U7XG4gICAgY29uc3Q\
              gdmFsdWVTdHIgPSBzdHJpbmdpZnkodmFsdWUsIGN0eCwgKCkgPT4gKHZhbHVlQ29t\
              bWVudERvbmUgPSB0cnVlKSwgKCkgPT4gKGNob21wS2VlcCA9IHRydWUpKTtcbiAgI\
              CBsZXQgd3MgPSAnICc7XG4gICAgaWYgKGtleUNvbW1lbnQgfHwgdnNiIHx8IHZjYi\
              kge1xuICAgICAgICB3cyA9IHZzYiA/ICdcXG4nIDogJyc7XG4gICAgICAgIGlmICh\
              2Y2IpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gY29tbWVudFN0cmluZyh2Y2Ip\
              O1xuICAgICAgICAgICAgd3MgKz0gYFxcbiR7aW5kZW50Q29tbWVudChjcywgY3R4L\
              mluZGVudCl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVTdHIgPT09IC\
              cnICYmICFjdHguaW5GbG93KSB7XG4gICAgICAgICAgICBpZiAod3MgPT09ICdcXG4\
              nKVxuICAgICAgICAgICAgICAgIHdzID0gJ1xcblxcbic7XG4gICAgICAgIH1cbiAg\
              ICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3cyArPSBgXFxuJHtjdHguaW5kZW50f\
              WA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoIWV4cGxpY2l0S2V5IC\
              YmIGlzQ29sbGVjdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgdnMwID0gdmF\
              sdWVTdHJbMF07XG4gICAgICAgIGNvbnN0IG5sMCA9IHZhbHVlU3RyLmluZGV4T2Yo\
              J1xcbicpO1xuICAgICAgICBjb25zdCBoYXNOZXdsaW5lID0gbmwwICE9PSAtMTtcb\
              iAgICAgICAgY29uc3QgZmxvdyA9IGN0eC5pbkZsb3cgPz8gdmFsdWUuZmxvdyA/Py\
              B2YWx1ZS5pdGVtcy5sZW5ndGggPT09IDA7XG4gICAgICAgIGlmIChoYXNOZXdsaW5\
              lIHx8ICFmbG93KSB7XG4gICAgICAgICAgICBsZXQgaGFzUHJvcHNMaW5lID0gZmFs\
              c2U7XG4gICAgICAgICAgICBpZiAoaGFzTmV3bGluZSAmJiAodnMwID09PSAnJicgf\
              HwgdnMwID09PSAnIScpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNwMCA9IHZhbH\
              VlU3RyLmluZGV4T2YoJyAnKTtcbiAgICAgICAgICAgICAgICBpZiAodnMwID09PSA\
              nJicgJiZcbiAgICAgICAgICAgICAgICAgICAgc3AwICE9PSAtMSAmJlxuICAgICAg\
              ICAgICAgICAgICAgICBzcDAgPCBubDAgJiZcbiAgICAgICAgICAgICAgICAgICAgd\
              mFsdWVTdHJbc3AwICsgMV0gPT09ICchJykge1xuICAgICAgICAgICAgICAgICAgIC\
              BzcDAgPSB2YWx1ZVN0ci5pbmRleE9mKCcgJywgc3AwICsgMSk7XG4gICAgICAgICA\
              gICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzcDAgPT09IC0xIHx8IG5sMCA8\
              IHNwMClcbiAgICAgICAgICAgICAgICAgICAgaGFzUHJvcHNMaW5lID0gdHJ1ZTtcb\
              iAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaGFzUHJvcHNMaW5lKVxuIC\
              AgICAgICAgICAgICAgIHdzID0gYFxcbiR7Y3R4LmluZGVudH1gO1xuICAgICAgICB\
              9XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlU3RyID09PSAnJyB8fCB2YWx1ZVN0\
              clswXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgd3MgPSAnJztcbiAgICB9XG4gICAgc\
              3RyICs9IHdzICsgdmFsdWVTdHI7XG4gICAgaWYgKGN0eC5pbkZsb3cpIHtcbiAgIC\
              AgICAgaWYgKHZhbHVlQ29tbWVudERvbmUgJiYgb25Db21tZW50KVxuICAgICAgICA\
              gICAgb25Db21tZW50KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlQ29tbWVu\
              dCAmJiAhdmFsdWVDb21tZW50RG9uZSkge1xuICAgICAgICBzdHIgKz0gbGluZUNvb\
              W1lbnQoc3RyLCBjdHguaW5kZW50LCBjb21tZW50U3RyaW5nKHZhbHVlQ29tbWVudC\
              kpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaG9tcEtlZXAgJiYgb25DaG9tcEtlZXA\
              pIHtcbiAgICAgICAgb25DaG9tcEtlZXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0\
              cjtcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5UGFpciB9O1xuIiwiZnVuY3Rpb24gZ\
              GVidWcobG9nTGV2ZWwsIC4uLm1lc3NhZ2VzKSB7XG4gICAgaWYgKGxvZ0xldmVsID\
              09PSAnZGVidWcnKVxuICAgICAgICBjb25zb2xlLmxvZyguLi5tZXNzYWdlcyk7XG5\
              9XG5mdW5jdGlvbiB3YXJuKGxvZ0xldmVsLCB3YXJuaW5nKSB7XG4gICAgaWYgKGxv\
              Z0xldmVsID09PSAnZGVidWcnIHx8IGxvZ0xldmVsID09PSAnd2FybicpIHtcbiAgI\
              CAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R5cGVzY3JpcHQtZXNsaW50L3R5cG\
              VzY3JpcHQtZXNsaW50L2lzc3Vlcy83NDc4XG4gICAgICAgIC8vIGVzbGludC1kaXN\
              hYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW9wdGlvbmFs\
              LWNoYWluXG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZ\
              CcgJiYgcHJvY2Vzcy5lbWl0V2FybmluZylcbiAgICAgICAgICAgIHByb2Nlc3MuZW\
              1pdFdhcm5pbmcod2FybmluZyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGN\
              vbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGRlYnVn\
              LCB3YXJuIH07XG4iLCJpbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vbG9nLmpzJztcb\
              mltcG9ydCB7IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQgfSBmcm9tICcuLi9zdHJpbm\
              dpZnkvc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGlzQWxpYXMsIGlzU2VxLCBpc1N\
              jYWxhciwgaXNNYXAsIGlzTm9kZSB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1w\
              b3J0IHsgU2NhbGFyIH0gZnJvbSAnLi9TY2FsYXIuanMnO1xuaW1wb3J0IHsgdG9KU\
              yB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNvbnN0IE1FUkdFX0tFWSA9ICc8PCc7XG\
              5mdW5jdGlvbiBhZGRQYWlyVG9KU01hcChjdHgsIG1hcCwgeyBrZXksIHZhbHVlIH0\
              pIHtcbiAgICBpZiAoY3R4Py5kb2Muc2NoZW1hLm1lcmdlICYmIGlzTWVyZ2VLZXko\
              a2V5KSkge1xuICAgICAgICB2YWx1ZSA9IGlzQWxpYXModmFsdWUpID8gdmFsdWUuc\
              mVzb2x2ZShjdHguZG9jKSA6IHZhbHVlO1xuICAgICAgICBpZiAoaXNTZXEodmFsdW\
              UpKVxuICAgICAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZS5pdGVtcylcbiA\
              gICAgICAgICAgICAgICBtZXJnZVRvSlNNYXAoY3R4LCBtYXAsIGl0KTtcbiAgICAg\
              ICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgICAgICBmb\
              3IgKGNvbnN0IGl0IG9mIHZhbHVlKVxuICAgICAgICAgICAgICAgIG1lcmdlVG9KU0\
              1hcChjdHgsIG1hcCwgaXQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBtZXJ\
              nZVRvSlNNYXAoY3R4LCBtYXAsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4g\
              ICAgICAgIGNvbnN0IGpzS2V5ID0gdG9KUyhrZXksICcnLCBjdHgpO1xuICAgICAgI\
              CBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBtYXAuc2V0KG\
              pzS2V5LCB0b0pTKHZhbHVlLCBqc0tleSwgY3R4KSk7XG4gICAgICAgIH1cbiAgICA\
              gICAgZWxzZSBpZiAobWFwIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICBt\
              YXAuYWRkKGpzS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgI\
              CAgICAgIGNvbnN0IHN0cmluZ0tleSA9IHN0cmluZ2lmeUtleShrZXksIGpzS2V5LC\
              BjdHgpO1xuICAgICAgICAgICAgY29uc3QganNWYWx1ZSA9IHRvSlModmFsdWUsIHN\
              0cmluZ0tleSwgY3R4KTtcbiAgICAgICAgICAgIGlmIChzdHJpbmdLZXkgaW4gbWFw\
              KVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtYXAsIHN0c\
              mluZ0tleSwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZToganNWYWx1ZSxcbi\
              AgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICA\
              gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNv\
              bmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgI\
              CAgZWxzZVxuICAgICAgICAgICAgICAgIG1hcFtzdHJpbmdLZXldID0ganNWYWx1ZT\
              tcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuY29uc3QgaXN\
              NZXJnZUtleSA9IChrZXkpID0+IGtleSA9PT0gTUVSR0VfS0VZIHx8XG4gICAgKGlz\
              U2NhbGFyKGtleSkgJiZcbiAgICAgICAga2V5LnZhbHVlID09PSBNRVJHRV9LRVkgJ\
              iZcbiAgICAgICAgKCFrZXkudHlwZSB8fCBrZXkudHlwZSA9PT0gU2NhbGFyLlBMQU\
              lOKSk7XG4vLyBJZiB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGEgbWVyZ2Uga2V\
              5IGlzIGEgc2luZ2xlIG1hcHBpbmcgbm9kZSwgZWFjaCBvZlxuLy8gaXRzIGtleS92\
              YWx1ZSBwYWlycyBpcyBpbnNlcnRlZCBpbnRvIHRoZSBjdXJyZW50IG1hcHBpbmcsI\
              HVubGVzcyB0aGUga2V5XG4vLyBhbHJlYWR5IGV4aXN0cyBpbiBpdC4gSWYgdGhlIH\
              ZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWVyZ2Uga2V5IGlzIGFcbi8vIHNlcXV\
              lbmNlLCB0aGVuIHRoaXMgc2VxdWVuY2UgaXMgZXhwZWN0ZWQgdG8gY29udGFpbiBt\
              YXBwaW5nIG5vZGVzIGFuZCBlYWNoXG4vLyBvZiB0aGVzZSBub2RlcyBpcyBtZXJnZ\
              WQgaW4gdHVybiBhY2NvcmRpbmcgdG8gaXRzIG9yZGVyIGluIHRoZSBzZXF1ZW5jZS\
              5cbi8vIEtleXMgaW4gbWFwcGluZyBub2RlcyBlYXJsaWVyIGluIHRoZSBzZXF1ZW5\
              jZSBvdmVycmlkZSBrZXlzIHNwZWNpZmllZCBpblxuLy8gbGF0ZXIgbWFwcGluZyBu\
              b2Rlcy4gLS0gaHR0cDovL3lhbWwub3JnL3R5cGUvbWVyZ2UuaHRtbFxuZnVuY3Rpb\
              24gbWVyZ2VUb0pTTWFwKGN0eCwgbWFwLCB2YWx1ZSkge1xuICAgIGNvbnN0IHNvdX\
              JjZSA9IGN0eCAmJiBpc0FsaWFzKHZhbHVlKSA/IHZhbHVlLnJlc29sdmUoY3R4LmR\
              vYykgOiB2YWx1ZTtcbiAgICBpZiAoIWlzTWFwKHNvdXJjZSkpXG4gICAgICAgIHRo\
              cm93IG5ldyBFcnJvcignTWVyZ2Ugc291cmNlcyBtdXN0IGJlIG1hcHMgb3IgbWFwI\
              GFsaWFzZXMnKTtcbiAgICBjb25zdCBzcmNNYXAgPSBzb3VyY2UudG9KU09OKG51bG\
              wsIGN0eCwgTWFwKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzcmN\
              NYXApIHtcbiAgICAgICAgaWYgKG1hcCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAg\
              ICAgICAgaWYgKCFtYXAuaGFzKGtleSkpXG4gICAgICAgICAgICAgICAgbWFwLnNld\
              ChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtYXAgaW\
              5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgIG1hcC5hZGQoa2V5KTtcbiAgICA\
              gICAgfVxuICAgICAgICBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Q\
              cm9wZXJ0eS5jYWxsKG1hcCwga2V5KSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZ\
              mluZVByb3BlcnR5KG1hcCwga2V5LCB7XG4gICAgICAgICAgICAgICAgdmFsdWUsXG\
              4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICA\
              gZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6\
              IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJld\
              HVybiBtYXA7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlLZXkoa2V5LCBqc0tleSwgY3\
              R4KSB7XG4gICAgaWYgKGpzS2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gJyc\
              7XG4gICAgaWYgKHR5cGVvZiBqc0tleSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJl\
              dHVybiBTdHJpbmcoanNLZXkpO1xuICAgIGlmIChpc05vZGUoa2V5KSAmJiBjdHg/L\
              mRvYykge1xuICAgICAgICBjb25zdCBzdHJDdHggPSBjcmVhdGVTdHJpbmdpZnlDb2\
              50ZXh0KGN0eC5kb2MsIHt9KTtcbiAgICAgICAgc3RyQ3R4LmFuY2hvcnMgPSBuZXc\
              gU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjdHguYW5jaG9ycy5r\
              ZXlzKCkpXG4gICAgICAgICAgICBzdHJDdHguYW5jaG9ycy5hZGQobm9kZS5hbmNob\
              3IpO1xuICAgICAgICBzdHJDdHguaW5GbG93ID0gdHJ1ZTtcbiAgICAgICAgc3RyQ3\
              R4LmluU3RyaW5naWZ5S2V5ID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc3RyS2V5ID0\
              ga2V5LnRvU3RyaW5nKHN0ckN0eCk7XG4gICAgICAgIGlmICghY3R4Lm1hcEtleVdh\
              cm5lZCkge1xuICAgICAgICAgICAgbGV0IGpzb25TdHIgPSBKU09OLnN0cmluZ2lme\
              ShzdHJLZXkpO1xuICAgICAgICAgICAgaWYgKGpzb25TdHIubGVuZ3RoID4gNDApXG\
              4gICAgICAgICAgICAgICAganNvblN0ciA9IGpzb25TdHIuc3Vic3RyaW5nKDAsIDM\
              2KSArICcuLi5cIic7XG4gICAgICAgICAgICB3YXJuKGN0eC5kb2Mub3B0aW9ucy5s\
              b2dMZXZlbCwgYEtleXMgd2l0aCBjb2xsZWN0aW9uIHZhbHVlcyB3aWxsIGJlIHN0c\
              mluZ2lmaWVkIGR1ZSB0byBKUyBPYmplY3QgcmVzdHJpY3Rpb25zOiAke2pzb25TdH\
              J9LiBTZXQgbWFwQXNNYXA6IHRydWUgdG8gdXNlIG9iamVjdCBrZXlzLmApO1xuICA\
              gICAgICAgICAgY3R4Lm1hcEtleVdhcm5lZCA9IHRydWU7XG4gICAgICAgIH1cbiAg\
              ICAgICAgcmV0dXJuIHN0cktleTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3Rya\
              W5naWZ5KGpzS2V5KTtcbn1cblxuZXhwb3J0IHsgYWRkUGFpclRvSlNNYXAgfTtcbi\
              IsImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuLi9kb2MvY3JlYXRlTm9kZS5\
              qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlQYWlyIH0gZnJvbSAnLi4vc3RyaW5naWZ5\
              L3N0cmluZ2lmeVBhaXIuanMnO1xuaW1wb3J0IHsgYWRkUGFpclRvSlNNYXAgfSBmc\
              m9tICcuL2FkZFBhaXJUb0pTTWFwLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgUE\
              FJUiwgaXNOb2RlIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5cbmZ1bmN0aW9uIGN\
              yZWF0ZVBhaXIoa2V5LCB2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QgayA9IGNyZWF0\
              ZU5vZGUoa2V5LCB1bmRlZmluZWQsIGN0eCk7XG4gICAgY29uc3QgdiA9IGNyZWF0Z\
              U5vZGUodmFsdWUsIHVuZGVmaW5lZCwgY3R4KTtcbiAgICByZXR1cm4gbmV3IFBhaX\
              Ioaywgdik7XG59XG5jbGFzcyBQYWlyIHtcbiAgICBjb25zdHJ1Y3RvcihrZXksIHZ\
              hbHVlID0gbnVsbCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhp\
              cywgTk9ERV9UWVBFLCB7IHZhbHVlOiBQQUlSIH0pO1xuICAgICAgICB0aGlzLmtle\
              SA9IGtleTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgIC\
              BjbG9uZShzY2hlbWEpIHtcbiAgICAgICAgbGV0IHsga2V5LCB2YWx1ZSB9ID0gdGh\
              pcztcbiAgICAgICAgaWYgKGlzTm9kZShrZXkpKVxuICAgICAgICAgICAga2V5ID0g\
              a2V5LmNsb25lKHNjaGVtYSk7XG4gICAgICAgIGlmIChpc05vZGUodmFsdWUpKVxuI\
              CAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5jbG9uZShzY2hlbWEpO1xuICAgICAgIC\
              ByZXR1cm4gbmV3IFBhaXIoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHRvSlNPTih\
              fLCBjdHgpIHtcbiAgICAgICAgY29uc3QgcGFpciA9IGN0eD8ubWFwQXNNYXAgPyBu\
              ZXcgTWFwKCkgOiB7fTtcbiAgICAgICAgcmV0dXJuIGFkZFBhaXJUb0pTTWFwKGN0e\
              CwgcGFpciwgdGhpcyk7XG4gICAgfVxuICAgIHRvU3RyaW5nKGN0eCwgb25Db21tZW\
              50LCBvbkNob21wS2VlcCkge1xuICAgICAgICByZXR1cm4gY3R4Py5kb2NcbiAgICA\
              gICAgICAgID8gc3RyaW5naWZ5UGFpcih0aGlzLCBjdHgsIG9uQ29tbWVudCwgb25D\
              aG9tcEtlZXApXG4gICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuI\
              CAgIH1cbn1cblxuZXhwb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9O1xuIiwiaW1wb3\
              J0IHsgaXNOb2RlLCBpc1BhaXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc\
              7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5p\
              bXBvcnQgeyBsaW5lQ29tbWVudCwgaW5kZW50Q29tbWVudCB9IGZyb20gJy4vc3Rya\
              W5naWZ5Q29tbWVudC5qcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNvbGxlY3Rpb2\
              4oY29sbGVjdGlvbiwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgZmxvdyA9IGN\
              0eC5pbkZsb3cgPz8gY29sbGVjdGlvbi5mbG93O1xuICAgIGNvbnN0IHN0cmluZ2lm\
              eSA9IGZsb3cgPyBzdHJpbmdpZnlGbG93Q29sbGVjdGlvbiA6IHN0cmluZ2lmeUJsb\
              2NrQ29sbGVjdGlvbjtcbiAgICByZXR1cm4gc3RyaW5naWZ5KGNvbGxlY3Rpb24sIG\
              N0eCwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlCbG9ja0NvbGxlY3R\
              pb24oeyBjb21tZW50LCBpdGVtcyB9LCBjdHgsIHsgYmxvY2tJdGVtUHJlZml4LCBm\
              bG93Q2hhcnMsIGl0ZW1JbmRlbnQsIG9uQ2hvbXBLZWVwLCBvbkNvbW1lbnQgfSkge\
              1xuICAgIGNvbnN0IHsgaW5kZW50LCBvcHRpb25zOiB7IGNvbW1lbnRTdHJpbmcgfS\
              B9ID0gY3R4O1xuICAgIGNvbnN0IGl0ZW1DdHggPSBPYmplY3QuYXNzaWduKHt9LCB\
              jdHgsIHsgaW5kZW50OiBpdGVtSW5kZW50LCB0eXBlOiBudWxsIH0pO1xuICAgIGxl\
              dCBjaG9tcEtlZXAgPSBmYWxzZTsgLy8gZmxhZyBmb3IgdGhlIHByZWNlZGluZyBub\
              2RlJ3Mgc3RhdHVzXG4gICAgY29uc3QgbGluZXMgPSBbXTtcbiAgICBmb3IgKGxldC\
              BpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl\
              0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgbGV0IGNvbW1lbnQgPSBudWxsO1xuICAg\
              ICAgICBpZiAoaXNOb2RlKGl0ZW0pKSB7XG4gICAgICAgICAgICBpZiAoIWNob21wS\
              2VlcCAmJiBpdGVtLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgIGxpbmVzLn\
              B1c2goJycpO1xuICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmV\
              zLCBpdGVtLmNvbW1lbnRCZWZvcmUsIGNob21wS2VlcCk7XG4gICAgICAgICAgICBp\
              ZiAoaXRlbS5jb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBpdGVtL\
              mNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQYWlyKGl0ZW\
              0pKSB7XG4gICAgICAgICAgICBjb25zdCBpayA9IGlzTm9kZShpdGVtLmtleSkgPyB\
              pdGVtLmtleSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoaWspIHtcbiAgICAgICAg\
              ICAgICAgICBpZiAoIWNob21wS2VlcCAmJiBpay5zcGFjZUJlZm9yZSlcbiAgICAgI\
              CAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICAgICAgYW\
              RkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpay5jb21tZW50QmVmb3JlLCBjaG9\
              tcEtlZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNob21w\
              S2VlcCA9IGZhbHNlO1xuICAgICAgICBsZXQgc3RyID0gc3RyaW5naWZ5KGl0ZW0sI\
              Gl0ZW1DdHgsICgpID0+IChjb21tZW50ID0gbnVsbCksICgpID0+IChjaG9tcEtlZX\
              AgPSB0cnVlKSk7XG4gICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgc3R\
              yICs9IGxpbmVDb21tZW50KHN0ciwgaXRlbUluZGVudCwgY29tbWVudFN0cmluZyhj\
              b21tZW50KSk7XG4gICAgICAgIGlmIChjaG9tcEtlZXAgJiYgY29tbWVudClcbiAgI\
              CAgICAgICAgIGNob21wS2VlcCA9IGZhbHNlO1xuICAgICAgICBsaW5lcy5wdXNoKG\
              Jsb2NrSXRlbVByZWZpeCArIHN0cik7XG4gICAgfVxuICAgIGxldCBzdHI7XG4gICA\
              gaWYgKGxpbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzdHIgPSBmbG93Q2hh\
              cnMuc3RhcnQgKyBmbG93Q2hhcnMuZW5kO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgI\
              CAgICAgc3RyID0gbGluZXNbMF07XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpID\
              wgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB\
              saW5lc1tpXTtcbiAgICAgICAgICAgIHN0ciArPSBsaW5lID8gYFxcbiR7aW5kZW50\
              fSR7bGluZX1gIDogJ1xcbic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvb\
              W1lbnQpIHtcbiAgICAgICAgc3RyICs9ICdcXG4nICsgaW5kZW50Q29tbWVudChjb2\
              1tZW50U3RyaW5nKGNvbW1lbnQpLCBpbmRlbnQpO1xuICAgICAgICBpZiAob25Db21\
              tZW50KVxuICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgfVxuICAgIGVsc2Ug\
              aWYgKGNob21wS2VlcCAmJiBvbkNob21wS2VlcClcbiAgICAgICAgb25DaG9tcEtlZ\
              XAoKTtcbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5Rmxvd0\
              NvbGxlY3Rpb24oeyBpdGVtcyB9LCBjdHgsIHsgZmxvd0NoYXJzLCBpdGVtSW5kZW5\
              0IH0pIHtcbiAgICBjb25zdCB7IGluZGVudCwgaW5kZW50U3RlcCwgZmxvd0NvbGxl\
              Y3Rpb25QYWRkaW5nOiBmY1BhZGRpbmcsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZ\
              yB9IH0gPSBjdHg7XG4gICAgaXRlbUluZGVudCArPSBpbmRlbnRTdGVwO1xuICAgIG\
              NvbnN0IGl0ZW1DdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHtcbiAgICAgICA\
              gaW5kZW50OiBpdGVtSW5kZW50LFxuICAgICAgICBpbkZsb3c6IHRydWUsXG4gICAg\
              ICAgIHR5cGU6IG51bGxcbiAgICB9KTtcbiAgICBsZXQgcmVxTmV3bGluZSA9IGZhb\
              HNlO1xuICAgIGxldCBsaW5lc0F0VmFsdWUgPSAwO1xuICAgIGNvbnN0IGxpbmVzID\
              0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSk\
              ge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGxldCBj\
              b21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKGlzTm9kZShpdGVtKSkge1xuICAgI\
              CAgICAgICAgaWYgKGl0ZW0uc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgbG\
              luZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBhZGRDb21tZW50QmVmb3JlKGN0eCw\
              gbGluZXMsIGl0ZW0uY29tbWVudEJlZm9yZSwgZmFsc2UpO1xuICAgICAgICAgICAg\
              aWYgKGl0ZW0uY29tbWVudClcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaXRlb\
              S5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihpdG\
              VtKSkge1xuICAgICAgICAgICAgY29uc3QgaWsgPSBpc05vZGUoaXRlbS5rZXkpID8\
              gaXRlbS5rZXkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGlrKSB7XG4gICAgICAg\
              ICAgICAgICAgaWYgKGlrLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgICAgI\
              CBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgICAgICBhZGRDb21tZW50QmVmb3\
              JlKGN0eCwgbGluZXMsIGlrLmNvbW1lbnRCZWZvcmUsIGZhbHNlKTtcbiAgICAgICA\
              gICAgICAgICBpZiAoaWsuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgcmVx\
              TmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zd\
              CBpdiA9IGlzTm9kZShpdGVtLnZhbHVlKSA/IGl0ZW0udmFsdWUgOiBudWxsO1xuIC\
              AgICAgICAgICAgaWYgKGl2KSB7XG4gICAgICAgICAgICAgICAgaWYgKGl2LmNvbW1\
              lbnQpXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBpdi5jb21tZW50O1xu\
              ICAgICAgICAgICAgICAgIGlmIChpdi5jb21tZW50QmVmb3JlKVxuICAgICAgICAgI\
              CAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgIC\
              AgICAgICAgIGVsc2UgaWYgKGl0ZW0udmFsdWUgPT0gbnVsbCAmJiBpaz8uY29tbWV\
              udCkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBpay5jb21tZW50O1xuICAg\
              ICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb21tZW50KVxuICAgI\
              CAgICAgICAgcmVxTmV3bGluZSA9IHRydWU7XG4gICAgICAgIGxldCBzdHIgPSBzdH\
              JpbmdpZnkoaXRlbSwgaXRlbUN0eCwgKCkgPT4gKGNvbW1lbnQgPSBudWxsKSk7XG4\
              gICAgICAgIGlmIChpIDwgaXRlbXMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIHN0\
              ciArPSAnLCc7XG4gICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgc3RyI\
              Cs9IGxpbmVDb21tZW50KHN0ciwgaXRlbUluZGVudCwgY29tbWVudFN0cmluZyhjb2\
              1tZW50KSk7XG4gICAgICAgIGlmICghcmVxTmV3bGluZSAmJiAobGluZXMubGVuZ3R\
              oID4gbGluZXNBdFZhbHVlIHx8IHN0ci5pbmNsdWRlcygnXFxuJykpKVxuICAgICAg\
              ICAgICAgcmVxTmV3bGluZSA9IHRydWU7XG4gICAgICAgIGxpbmVzLnB1c2goc3RyK\
              TtcbiAgICAgICAgbGluZXNBdFZhbHVlID0gbGluZXMubGVuZ3RoO1xuICAgIH1cbi\
              AgICBjb25zdCB7IHN0YXJ0LCBlbmQgfSA9IGZsb3dDaGFycztcbiAgICBpZiAobGl\
              uZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdGFydCArIGVuZDtc\
              biAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghcmVxTmV3bGluZSkge1xuI\
              CAgICAgICAgICAgY29uc3QgbGVuID0gbGluZXMucmVkdWNlKChzdW0sIGxpbmUpID\
              0+IHN1bSArIGxpbmUubGVuZ3RoICsgMiwgMik7XG4gICAgICAgICAgICByZXFOZXd\
              saW5lID0gY3R4Lm9wdGlvbnMubGluZVdpZHRoID4gMCAmJiBsZW4gPiBjdHgub3B0\
              aW9ucy5saW5lV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcU5ld2xpb\
              mUpIHtcbiAgICAgICAgICAgIGxldCBzdHIgPSBzdGFydDtcbiAgICAgICAgICAgIG\
              ZvciAoY29uc3QgbGluZSBvZiBsaW5lcylcbiAgICAgICAgICAgICAgICBzdHIgKz0\
              gbGluZSA/IGBcXG4ke2luZGVudFN0ZXB9JHtpbmRlbnR9JHtsaW5lfWAgOiAnXFxu\
              JztcbiAgICAgICAgICAgIHJldHVybiBgJHtzdHJ9XFxuJHtpbmRlbnR9JHtlbmR9Y\
              DtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybi\
              BgJHtzdGFydH0ke2ZjUGFkZGluZ30ke2xpbmVzLmpvaW4oJyAnKX0ke2ZjUGFkZGl\
              uZ30ke2VuZH1gO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkQ29t\
              bWVudEJlZm9yZSh7IGluZGVudCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nIH0gf\
              SwgbGluZXMsIGNvbW1lbnQsIGNob21wS2VlcCkge1xuICAgIGlmIChjb21tZW50IC\
              YmIGNob21wS2VlcClcbiAgICAgICAgY29tbWVudCA9IGNvbW1lbnQucmVwbGFjZSg\
              vXlxcbisvLCAnJyk7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgY29uc3Qg\
              aWMgPSBpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoY29tbWVudCksIGluZGVud\
              Ck7XG4gICAgICAgIGxpbmVzLnB1c2goaWMudHJpbVN0YXJ0KCkpOyAvLyBBdm9pZC\
              Bkb3VibGUgaW5kZW50IG9uIGZpcnN0IGxpbmVcbiAgICB9XG59XG5cbmV4cG9ydCB\
              7IHN0cmluZ2lmeUNvbGxlY3Rpb24gfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeUNv\
              bGxlY3Rpb24gfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvb\
              i5qcyc7XG5pbXBvcnQgeyBhZGRQYWlyVG9KU01hcCB9IGZyb20gJy4vYWRkUGFpcl\
              RvSlNNYXAuanMnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4vQ29sbGV\
              jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc1BhaXIsIGlzU2NhbGFyLCBNQVAgfSBmcm9t\
              ICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIsIGNyZWF0ZVBhaXIgfSBmc\
              m9tICcuL1BhaXIuanMnO1xuaW1wb3J0IHsgaXNTY2FsYXJWYWx1ZSB9IGZyb20gJy\
              4vU2NhbGFyLmpzJztcblxuZnVuY3Rpb24gZmluZFBhaXIoaXRlbXMsIGtleSkge1x\
              uICAgIGNvbnN0IGsgPSBpc1NjYWxhcihrZXkpID8ga2V5LnZhbHVlIDoga2V5O1xu\
              ICAgIGZvciAoY29uc3QgaXQgb2YgaXRlbXMpIHtcbiAgICAgICAgaWYgKGlzUGFpc\
              ihpdCkpIHtcbiAgICAgICAgICAgIGlmIChpdC5rZXkgPT09IGtleSB8fCBpdC5rZX\
              kgPT09IGspXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0O1xuICAgICAgICAgICA\
              gaWYgKGlzU2NhbGFyKGl0LmtleSkgJiYgaXQua2V5LnZhbHVlID09PSBrKVxuICAg\
              ICAgICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZ\
              XR1cm4gdW5kZWZpbmVkO1xufVxuY2xhc3MgWUFNTE1hcCBleHRlbmRzIENvbGxlY3\
              Rpb24ge1xuICAgIHN0YXRpYyBnZXQgdGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJ\
              uICd0YWc6eWFtbC5vcmcsMjAwMjptYXAnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rv\
              cihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoTUFQLCBzY2hlbWEpO1xuICAgICAgI\
              CB0aGlzLml0ZW1zID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgZ2VuZX\
              JpYyBjb2xsZWN0aW9uIHBhcnNpbmcgbWV0aG9kIHRoYXQgY2FuIGJlIGV4dGVuZGV\
              kXG4gICAgICogdG8gb3RoZXIgbm9kZSBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9t\
              IFlBTUxNYXBcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIG9iaiwgY\
              3R4KSB7XG4gICAgICAgIGNvbnN0IHsga2VlcFVuZGVmaW5lZCwgcmVwbGFjZXIgfS\
              A9IGN0eDtcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IHRoaXMoc2NoZW1hKTtcbiA\
              gICAgICAgY29uc3QgYWRkID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAg\
              IGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgI\
              CAgICAgdmFsdWUgPSByZXBsYWNlci5jYWxsKG9iaiwga2V5LCB2YWx1ZSk7XG4gIC\
              AgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VyKSAmJiAhcmV\
              wbGFjZXIuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4g\
              ICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCB8fCBrZWVwVW5kZWZpb\
              mVkKVxuICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKGNyZWF0ZVBhaXIoa2\
              V5LCB2YWx1ZSwgY3R4KSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChvYmogaW5\
              zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFs\
              dWVdIG9mIG9iailcbiAgICAgICAgICAgICAgICBhZGQoa2V5LCB2YWx1ZSk7XG4gI\
              CAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09IC\
              dvYmplY3QnKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Q\
              ua2V5cyhvYmopKVxuICAgICAgICAgICAgICAgIGFkZChrZXksIG9ialtrZXldKTtc\
              biAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5zb3J0TWFwRW50c\
              mllcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbWFwLml0ZW1zLnNvcn\
              Qoc2NoZW1hLnNvcnRNYXBFbnRyaWVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR\
              1cm4gbWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdmFsdWUgdG8g\
              dGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3ZlcndyaXRlI\
              C0gSWYgbm90IHNldCBgdHJ1ZWAsIHVzaW5nIGEga2V5IHRoYXQgaXMgYWxyZWFkeS\
              BpbiB0aGVcbiAgICAgKiAgIGNvbGxlY3Rpb24gd2lsbCB0aHJvdy4gT3RoZXJ3aXN\
              lLCBvdmVyd3JpdGVzIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICAgKi9cbiAgICBh\
              ZGQocGFpciwgb3ZlcndyaXRlKSB7XG4gICAgICAgIGxldCBfcGFpcjtcbiAgICAgI\
              CAgaWYgKGlzUGFpcihwYWlyKSlcbiAgICAgICAgICAgIF9wYWlyID0gcGFpcjtcbi\
              AgICAgICAgZWxzZSBpZiAoIXBhaXIgfHwgdHlwZW9mIHBhaXIgIT09ICdvYmplY3Q\
              nIHx8ICEoJ2tleScgaW4gcGFpcikpIHtcbiAgICAgICAgICAgIC8vIEluIFR5cGVT\
              Y3JpcHQsIHRoaXMgbmV2ZXIgaGFwcGVucy5cbiAgICAgICAgICAgIF9wYWlyID0gb\
              mV3IFBhaXIocGFpciwgcGFpcj8udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIG\
              Vsc2VcbiAgICAgICAgICAgIF9wYWlyID0gbmV3IFBhaXIocGFpci5rZXksIHBhaXI\
              udmFsdWUpO1xuICAgICAgICBjb25zdCBwcmV2ID0gZmluZFBhaXIodGhpcy5pdGVt\
              cywgX3BhaXIua2V5KTtcbiAgICAgICAgY29uc3Qgc29ydEVudHJpZXMgPSB0aGlzL\
              nNjaGVtYT8uc29ydE1hcEVudHJpZXM7XG4gICAgICAgIGlmIChwcmV2KSB7XG4gIC\
              AgICAgICAgICBpZiAoIW92ZXJ3cml0ZSlcbiAgICAgICAgICAgICAgICB0aHJvdyB\
              uZXcgRXJyb3IoYEtleSAke19wYWlyLmtleX0gYWxyZWFkeSBzZXRgKTtcbiAgICAg\
              ICAgICAgIC8vIEZvciBzY2FsYXJzLCBrZWVwIHRoZSBvbGQgbm9kZSAmIGl0cyBjb\
              21tZW50cyBhbmQgYW5jaG9yc1xuICAgICAgICAgICAgaWYgKGlzU2NhbGFyKHByZX\
              YudmFsdWUpICYmIGlzU2NhbGFyVmFsdWUoX3BhaXIudmFsdWUpKVxuICAgICAgICA\
              gICAgICAgIHByZXYudmFsdWUudmFsdWUgPSBfcGFpci52YWx1ZTtcbiAgICAgICAg\
              ICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwcmV2LnZhbHVlID0gX3BhaXIudmFsd\
              WU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc29ydEVudHJpZXMpIHtcbi\
              AgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLml0ZW1zLmZpbmRJbmRleChpdGVtID0\
              +IHNvcnRFbnRyaWVzKF9wYWlyLCBpdGVtKSA8IDApO1xuICAgICAgICAgICAgaWYg\
              KGkgPT09IC0xKVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChfcGFpc\
              ik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy\
              5zcGxpY2UoaSwgMCwgX3BhaXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1x\
              uICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKF9wYWlyKTtcbiAgICAgICAgfVxu\
              ICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIGNvbnN0IGl0ID0gZmluZ\
              FBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgaWYgKCFpdClcbiAgICAgIC\
              AgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZGVsID0gdGhpcy5pdGV\
              tcy5zcGxpY2UodGhpcy5pdGVtcy5pbmRleE9mKGl0KSwgMSk7XG4gICAgICAgIHJl\
              dHVybiBkZWwubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgZ2V0KGtleSwga2VlcFNjY\
              Wxhcikge1xuICAgICAgICBjb25zdCBpdCA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIG\
              tleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBpdD8udmFsdWU7XG4gICAgICAgIHJ\
              ldHVybiAoIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIobm9kZSkgPyBub2RlLnZhbHVl\
              IDogbm9kZSkgPz8gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gI\
              CAgICAgIHJldHVybiAhIWZpbmRQYWlyKHRoaXMuaXRlbXMsIGtleSk7XG4gICAgfV\
              xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYWRkKG5ldyBQYWl\
              yKGtleSwgdmFsdWUpLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBh\
              cmFtIGN0eCAtIENvbnZlcnNpb24gY29udGV4dCwgb3JpZ2luYWxseSBzZXQgaW4gR\
              G9jdW1lbnQjdG9KUygpXG4gICAgICogQHBhcmFtIHtDbGFzc30gVHlwZSAtIElmIH\
              NldCwgZm9yY2VzIHRoZSByZXR1cm5lZCBjb2xsZWN0aW9uIHR5cGVcbiAgICAgKiB\
              AcmV0dXJucyBJbnN0YW5jZSBvZiBUeXBlLCBNYXAsIG9yIE9iamVjdFxuICAgICAq\
              L1xuICAgIHRvSlNPTihfLCBjdHgsIFR5cGUpIHtcbiAgICAgICAgY29uc3QgbWFwI\
              D0gVHlwZSA/IG5ldyBUeXBlKCkgOiBjdHg/Lm1hcEFzTWFwID8gbmV3IE1hcCgpID\
              oge307XG4gICAgICAgIGlmIChjdHg/Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R\
              4Lm9uQ3JlYXRlKG1hcCk7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlz\
              Lml0ZW1zKVxuICAgICAgICAgICAgYWRkUGFpclRvSlNNYXAoY3R4LCBtYXAsIGl0Z\
              W0pO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdH\
              gsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCFjdHgpXG4\
              gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgICAg\
              IGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBpZ\
              iAoIWlzUGFpcihpdGVtKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3\
              IoYE1hcCBpdGVtcyBtdXN0IGFsbCBiZSBwYWlyczsgZm91bmQgJHtKU09OLnN0cml\
              uZ2lmeShpdGVtKX0gaW5zdGVhZGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgh\
              Y3R4LmFsbE51bGxWYWx1ZXMgJiYgdGhpcy5oYXNBbGxOdWxsVmFsdWVzKGZhbHNlK\
              SlcbiAgICAgICAgICAgIGN0eCA9IE9iamVjdC5hc3NpZ24oe30sIGN0eCwgeyBhbG\
              xOdWxsVmFsdWVzOiB0cnVlIH0pO1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5Q29\
              sbGVjdGlvbih0aGlzLCBjdHgsIHtcbiAgICAgICAgICAgIGJsb2NrSXRlbVByZWZp\
              eDogJycsXG4gICAgICAgICAgICBmbG93Q2hhcnM6IHsgc3RhcnQ6ICd7JywgZW5kO\
              iAnfScgfSxcbiAgICAgICAgICAgIGl0ZW1JbmRlbnQ6IGN0eC5pbmRlbnQgfHwgJy\
              csXG4gICAgICAgICAgICBvbkNob21wS2VlcCxcbiAgICAgICAgICAgIG9uQ29tbWV\
              udFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFlBTUxNYXAsIGZp\
              bmRQYWlyIH07XG4iLCJpbXBvcnQgeyBpc01hcCB9IGZyb20gJy4uLy4uL25vZGVzL\
              2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi8uLi9ub2\
              Rlcy9ZQU1MTWFwLmpzJztcblxuY29uc3QgbWFwID0ge1xuICAgIGNvbGxlY3Rpb24\
              6ICdtYXAnLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgbm9kZUNsYXNzOiBZQU1M\
              TWFwLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOm1hcCcsXG4gICAgcmVzb\
              2x2ZShtYXAsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKCFpc01hcChtYXApKVxuIC\
              AgICAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBtYXBwaW5nIGZvciB0aGlzIHR\
              hZycpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH0sXG4gICAgY3JlYXRlTm9k\
              ZTogKHNjaGVtYSwgb2JqLCBjdHgpID0+IFlBTUxNYXAuZnJvbShzY2hlbWEsIG9ia\
              iwgY3R4KVxufTtcblxuZXhwb3J0IHsgbWFwIH07XG4iLCJpbXBvcnQgeyBjcmVhdG\
              VOb2RlIH0gZnJvbSAnLi4vZG9jL2NyZWF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgc3R\
              yaW5naWZ5Q29sbGVjdGlvbiB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlD\
              b2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuL0Nvb\
              GxlY3Rpb24uanMnO1xuaW1wb3J0IHsgU0VRLCBpc1NjYWxhciB9IGZyb20gJy4vaW\
              RlbnRpdHkuanMnO1xuaW1wb3J0IHsgaXNTY2FsYXJWYWx1ZSB9IGZyb20gJy4vU2N\
              hbGFyLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5j\
              bGFzcyBZQU1MU2VxIGV4dGVuZHMgQ29sbGVjdGlvbiB7XG4gICAgc3RhdGljIGdld\
              CB0YWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3RhZzp5YW1sLm9yZywyMDAyOn\
              NlcSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICB\
              zdXBlcihTRVEsIHNjaGVtYSk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAg\
              ICB9XG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaXRlbXMucHVzaCh2Y\
              Wx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm\
              9tIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogYGtleWAgbXVzdCBjb25\
              0YWluIGEgcmVwcmVzZW50YXRpb24gb2YgYW4gaW50ZWdlciBmb3IgdGhpcyB0byBz\
              dWNjZWVkLlxuICAgICAqIEl0IG1heSBiZSB3cmFwcGVkIGluIGEgYFNjYWxhcmAuX\
              G4gICAgICpcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGl0ZW0gd2FzIG\
              ZvdW5kIGFuZCByZW1vdmVkLlxuICAgICAqL1xuICAgIGRlbGV0ZShrZXkpIHtcbiA\
              gICAgICAgY29uc3QgaWR4ID0gYXNJdGVtSW5kZXgoa2V5KTtcbiAgICAgICAgaWYg\
              KHR5cGVvZiBpZHggIT09ICdudW1iZXInKVxuICAgICAgICAgICAgcmV0dXJuIGZhb\
              HNlO1xuICAgICAgICBjb25zdCBkZWwgPSB0aGlzLml0ZW1zLnNwbGljZShpZHgsID\
              EpO1xuICAgICAgICByZXR1cm4gZGVsLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIGd\
              ldChrZXksIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gYXNJdGVt\
              SW5kZXgoa2V5KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpZHggIT09ICdudW1iZXInK\
              VxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgaX\
              QgPSB0aGlzLml0ZW1zW2lkeF07XG4gICAgICAgIHJldHVybiAha2VlcFNjYWxhciA\
              mJiBpc1NjYWxhcihpdCkgPyBpdC52YWx1ZSA6IGl0O1xuICAgIH1cbiAgICAvKipc\
              biAgICAgKiBDaGVja3MgaWYgdGhlIGNvbGxlY3Rpb24gaW5jbHVkZXMgYSB2YWx1Z\
              SB3aXRoIHRoZSBrZXkgYGtleWAuXG4gICAgICpcbiAgICAgKiBga2V5YCBtdXN0IG\
              NvbnRhaW4gYSByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnRlZ2VyIGZvciB0aGlzIHR\
              vIHN1Y2NlZWQuXG4gICAgICogSXQgbWF5IGJlIHdyYXBwZWQgaW4gYSBgU2NhbGFy\
              YC5cbiAgICAgKi9cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9I\
              GFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaWR4ID09PS\
              AnbnVtYmVyJyAmJiBpZHggPCB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgICB9XG4gICA\
              gLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgY29sbGVjdGlvbi4gRm9y\
              IGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgICAqIGJvb2xlYW4gd\
              G8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG4gICAgICpcbiAgIC\
              AgKiBJZiBga2V5YCBkb2VzIG5vdCBjb250YWluIGEgcmVwcmVzZW50YXRpb24gb2Y\
              gYW4gaW50ZWdlciwgdGhpcyB3aWxsIHRocm93LlxuICAgICAqIEl0IG1heSBiZSB3\
              cmFwcGVkIGluIGEgYFNjYWxhcmAuXG4gICAgICovXG4gICAgc2V0KGtleSwgdmFsd\
              WUpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gYXNJdGVtSW5kZXgoa2V5KTtcbiAgIC\
              AgICAgaWYgKHR5cGVvZiBpZHggIT09ICdudW1iZXInKVxuICAgICAgICAgICAgdGh\
              yb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhIHZhbGlkIGluZGV4LCBub3QgJHtrZXl9\
              LmApO1xuICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5pdGVtc1tpZHhdO1xuICAgI\
              CAgICBpZiAoaXNTY2FsYXIocHJldikgJiYgaXNTY2FsYXJWYWx1ZSh2YWx1ZSkpXG\
              4gICAgICAgICAgICBwcmV2LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGVsc2VcbiA\
              gICAgICAgICAgIHRoaXMuaXRlbXNbaWR4XSA9IHZhbHVlO1xuICAgIH1cbiAgICB0\
              b0pTT04oXywgY3R4KSB7XG4gICAgICAgIGNvbnN0IHNlcSA9IFtdO1xuICAgICAgI\
              CBpZiAoY3R4Py5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShzZX\
              EpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSB\
              vZiB0aGlzLml0ZW1zKVxuICAgICAgICAgICAgc2VxLnB1c2godG9KUyhpdGVtLCBT\
              dHJpbmcoaSsrKSwgY3R4KSk7XG4gICAgICAgIHJldHVybiBzZXE7XG4gICAgfVxuI\
              CAgIHRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIC\
              AgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh\
              0aGlzKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUNvbGxlY3Rpb24odGhpcywg\
              Y3R4LCB7XG4gICAgICAgICAgICBibG9ja0l0ZW1QcmVmaXg6ICctICcsXG4gICAgI\
              CAgICAgICBmbG93Q2hhcnM6IHsgc3RhcnQ6ICdbJywgZW5kOiAnXScgfSxcbiAgIC\
              AgICAgICAgIGl0ZW1JbmRlbnQ6IChjdHguaW5kZW50IHx8ICcnKSArICcgICcsXG4\
              gICAgICAgICAgICBvbkNob21wS2VlcCxcbiAgICAgICAgICAgIG9uQ29tbWVudFxu\
              ICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBvYmosI\
              GN0eCkge1xuICAgICAgICBjb25zdCB7IHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgIC\
              AgIGNvbnN0IHNlcSA9IG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgICAgIGlmIChvYmo\
              gJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChvYmopKSB7XG4gICAgICAgICAg\
              ICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpdCBvZiBvYmopIHtcb\
              iAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb2\
              4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IG9iaiBpbnN0YW5\
              jZW9mIFNldCA/IGl0IDogU3RyaW5nKGkrKyk7XG4gICAgICAgICAgICAgICAgICAg\
              IGl0ID0gcmVwbGFjZXIuY2FsbChvYmosIGtleSwgaXQpO1xuICAgICAgICAgICAgI\
              CAgIH1cbiAgICAgICAgICAgICAgICBzZXEuaXRlbXMucHVzaChjcmVhdGVOb2RlKG\
              l0LCB1bmRlZmluZWQsIGN0eCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4\
              gICAgICAgIHJldHVybiBzZXE7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNJdGVtSW5k\
              ZXgoa2V5KSB7XG4gICAgbGV0IGlkeCA9IGlzU2NhbGFyKGtleSkgPyBrZXkudmFsd\
              WUgOiBrZXk7XG4gICAgaWYgKGlkeCAmJiB0eXBlb2YgaWR4ID09PSAnc3RyaW5nJy\
              lcbiAgICAgICAgaWR4ID0gTnVtYmVyKGlkeCk7XG4gICAgcmV0dXJuIHR5cGVvZiB\
              pZHggPT09ICdudW1iZXInICYmIE51bWJlci5pc0ludGVnZXIoaWR4KSAmJiBpZHgg\
              Pj0gMFxuICAgICAgICA/IGlkeFxuICAgICAgICA6IG51bGw7XG59XG5cbmV4cG9yd\
              CB7IFlBTUxTZXEgfTtcbiIsImltcG9ydCB7IGlzU2VxIH0gZnJvbSAnLi4vLi4vbm\
              9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uLy4\
              uL25vZGVzL1lBTUxTZXEuanMnO1xuXG5jb25zdCBzZXEgPSB7XG4gICAgY29sbGVj\
              dGlvbjogJ3NlcScsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBub2RlQ2xhc3M6I\
              FlBTUxTZXEsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c2VxJyxcbiAgIC\
              ByZXNvbHZlKHNlcSwgb25FcnJvcikge1xuICAgICAgICBpZiAoIWlzU2VxKHNlcSk\
              pXG4gICAgICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIHNlcXVlbmNlIGZvciB0\
              aGlzIHRhZycpO1xuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH0sXG4gICAgY3JlY\
              XRlTm9kZTogKHNjaGVtYSwgb2JqLCBjdHgpID0+IFlBTUxTZXEuZnJvbShzY2hlbW\
              EsIG9iaiwgY3R4KVxufTtcblxuZXhwb3J0IHsgc2VxIH07XG4iLCJpbXBvcnQgeyB\
              zdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5\
              U3RyaW5nLmpzJztcblxuY29uc3Qgc3RyaW5nID0ge1xuICAgIGlkZW50aWZ5OiB2Y\
              Wx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLFxuICAgIGRlZmF1bHQ6IH\
              RydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyxcbiAgICByZXN\
              vbHZlOiBzdHIgPT4gc3RyLFxuICAgIHN0cmluZ2lmeShpdGVtLCBjdHgsIG9uQ29t\
              bWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgY3R4ID0gT2JqZWN0LmFzc2lnb\
              ih7IGFjdHVhbFN0cmluZzogdHJ1ZSB9LCBjdHgpO1xuICAgICAgICByZXR1cm4gc3\
              RyaW5naWZ5U3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk\
              7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgc3RyaW5nIH07XG4iLCJpbXBvcnQgeyBT\
              Y2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBud\
              WxsVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PSBudWxsLF\
              xuICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBTY2FsYXIobnVsbCksXG4gICAgZGV\
              mYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJyxc\
              biAgICB0ZXN0OiAvXig/On58W05uXXVsbHxOVUxMKT8kLyxcbiAgICByZXNvbHZlO\
              iAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgIHN0cmluZ2lmeTogKHsgc291cm\
              NlIH0sIGN0eCkgPT4gdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgJiYgbnVsbFR\
              hZy50ZXN0LnRlc3Qoc291cmNlKVxuICAgICAgICA/IHNvdXJjZVxuICAgICAgICA6\
              IGN0eC5vcHRpb25zLm51bGxTdHJcbn07XG5cbmV4cG9ydCB7IG51bGxUYWcgfTtcb\
              iIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcy\
              c7XG5cbmNvbnN0IGJvb2xUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR\
              5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4g\
              ICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgdGVzdDogL14oP\
              zpbVHRdcnVlfFRSVUV8W0ZmXWFsc2V8RkFMU0UpJC8sXG4gICAgcmVzb2x2ZTogc3\
              RyID0+IG5ldyBTY2FsYXIoc3RyWzBdID09PSAndCcgfHwgc3RyWzBdID09PSAnVCc\
              pLFxuICAgIHN0cmluZ2lmeSh7IHNvdXJjZSwgdmFsdWUgfSwgY3R4KSB7XG4gICAg\
              ICAgIGlmIChzb3VyY2UgJiYgYm9vbFRhZy50ZXN0LnRlc3Qoc291cmNlKSkge1xuI\
              CAgICAgICAgICAgY29uc3Qgc3YgPSBzb3VyY2VbMF0gPT09ICd0JyB8fCBzb3VyY2\
              VbMF0gPT09ICdUJztcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gc3YpXG4gICA\
              gICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBy\
              ZXR1cm4gdmFsdWUgPyBjdHgub3B0aW9ucy50cnVlU3RyIDogY3R4Lm9wdGlvbnMuZ\
              mFsc2VTdHI7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgYm9vbFRhZyB9O1xuIiwiZn\
              VuY3Rpb24gc3RyaW5naWZ5TnVtYmVyKHsgZm9ybWF0LCBtaW5GcmFjdGlvbkRpZ2l\
              0cywgdGFnLCB2YWx1ZSB9KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jp\
              Z2ludCcpXG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgIGNvbnN0I\
              G51bSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyB2YWx1ZSA6IE51bWJlci\
              h2YWx1ZSk7XG4gICAgaWYgKCFpc0Zpbml0ZShudW0pKVxuICAgICAgICByZXR1cm4\
              gaXNOYU4obnVtKSA/ICcubmFuJyA6IG51bSA8IDAgPyAnLS5pbmYnIDogJy5pbmYn\
              O1xuICAgIGxldCBuID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGlmICghZ\
              m9ybWF0ICYmXG4gICAgICAgIG1pbkZyYWN0aW9uRGlnaXRzICYmXG4gICAgICAgIC\
              ghdGFnIHx8IHRhZyA9PT0gJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JykgJiZcbiA\
              gICAgICAgL15cXGQvLnRlc3QobikpIHtcbiAgICAgICAgbGV0IGkgPSBuLmluZGV4\
              T2YoJy4nKTtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICBpID0gb\
              i5sZW5ndGg7XG4gICAgICAgICAgICBuICs9ICcuJztcbiAgICAgICAgfVxuICAgIC\
              AgICBsZXQgZCA9IG1pbkZyYWN0aW9uRGlnaXRzIC0gKG4ubGVuZ3RoIC0gaSAtIDE\
              pO1xuICAgICAgICB3aGlsZSAoZC0tID4gMClcbiAgICAgICAgICAgIG4gKz0gJzAn\
              O1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5T\
              nVtYmVyIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy\
              9TY2FsYXIuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4\
              vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbmNvbnN0IGZsb2F0\
              TmFOID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09I\
              CdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbW\
              wub3JnLDIwMDI6ZmxvYXQnLFxuICAgIHRlc3Q6IC9eKD86Wy0rXT9cXC4oPzppbmZ\
              8SW5mfElORil8XFwubmFufFxcLk5hTnxcXC5OQU4pJC8sXG4gICAgcmVzb2x2ZTog\
              c3RyID0+IHN0ci5zbGljZSgtMykudG9Mb3dlckNhc2UoKSA9PT0gJ25hbidcbiAgI\
              CAgICAgPyBOYU5cbiAgICAgICAgOiBzdHJbMF0gPT09ICctJ1xuICAgICAgICAgIC\
              AgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgIDogTnVtYmV\
              yLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVt\
              YmVyXG59O1xuY29uc3QgZmxvYXRFeHAgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlI\
              D0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZS\
              xcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgZm9ybWF\
              0OiAnRVhQJyxcbiAgICB0ZXN0OiAvXlstK10/KD86XFwuWzAtOV0rfFswLTldKyg/\
              OlxcLlswLTldKik/KVtlRV1bLStdP1swLTldKyQvLFxuICAgIHJlc29sdmU6IHN0c\
              iA9PiBwYXJzZUZsb2F0KHN0ciksXG4gICAgc3RyaW5naWZ5KG5vZGUpIHtcbiAgIC\
              AgICAgY29uc3QgbnVtID0gTnVtYmVyKG5vZGUudmFsdWUpO1xuICAgICAgICByZXR\
              1cm4gaXNGaW5pdGUobnVtKSA/IG51bS50b0V4cG9uZW50aWFsKCkgOiBzdHJpbmdp\
              ZnlOdW1iZXIobm9kZSk7XG4gICAgfVxufTtcbmNvbnN0IGZsb2F0ID0ge1xuICAgI\
              GlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuIC\
              AgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Zmx\
              vYXQnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpcXC5bMC05XSt8WzAtOV0rXFwuWzAt\
              OV0qKSQvLFxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgP\
              SBuZXcgU2NhbGFyKHBhcnNlRmxvYXQoc3RyKSk7XG4gICAgICAgIGNvbnN0IGRvdC\
              A9IHN0ci5pbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChkb3QgIT09IC0xICYmIHN\
              0cltzdHIubGVuZ3RoIC0gMV0gPT09ICcwJylcbiAgICAgICAgICAgIG5vZGUubWlu\
              RnJhY3Rpb25EaWdpdHMgPSBzdHIubGVuZ3RoIC0gZG90IC0gMTtcbiAgICAgICAgc\
              mV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bW\
              JlclxufTtcblxuZXhwb3J0IHsgZmxvYXQsIGZsb2F0RXhwLCBmbG9hdE5hTiB9O1x\
              uIiwiaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5n\
              aWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbmNvbnN0IGludElkZW50aWZ5ID0gK\
              HZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0\
              ludGVnZXIodmFsdWUpO1xuY29uc3QgaW50UmVzb2x2ZSA9IChzdHIsIG9mZnNldCw\
              gcmFkaXgsIHsgaW50QXNCaWdJbnQgfSkgPT4gKGludEFzQmlnSW50ID8gQmlnSW50\
              KHN0cikgOiBwYXJzZUludChzdHIuc3Vic3RyaW5nKG9mZnNldCksIHJhZGl4KSk7X\
              G5mdW5jdGlvbiBpbnRTdHJpbmdpZnkobm9kZSwgcmFkaXgsIHByZWZpeCkge1xuIC\
              AgIGNvbnN0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgaWYgKGludElkZW50aWZ5KHZ\
              hbHVlKSAmJiB2YWx1ZSA+PSAwKVxuICAgICAgICByZXR1cm4gcHJlZml4ICsgdmFs\
              dWUudG9TdHJpbmcocmFkaXgpO1xuICAgIHJldHVybiBzdHJpbmdpZnlOdW1iZXIob\
              m9kZSk7XG59XG5jb25zdCBpbnRPY3QgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID\
              0+IGludElkZW50aWZ5KHZhbHVlKSAmJiB2YWx1ZSA+PSAwLFxuICAgIGRlZmF1bHQ\
              6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBm\
              b3JtYXQ6ICdPQ1QnLFxuICAgIHRlc3Q6IC9eMG9bMC03XSskLyxcbiAgICByZXNvb\
              HZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgOC\
              wgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGU\
              sIDgsICcwbycpXG59O1xuY29uc3QgaW50ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJ\
              ZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sL\
              m9yZywyMDAyOmludCcsXG4gICAgdGVzdDogL15bLStdP1swLTldKyQvLFxuICAgIH\
              Jlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCA\
              wLCAxMCwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtc\
              bmNvbnN0IGludEhleCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gaW50SWRlb\
              nRpZnkodmFsdWUpICYmIHZhbHVlID49IDAsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbi\
              AgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ0h\
              FWCcsXG4gICAgdGVzdDogL14weFswLTlhLWZBLUZdKyQvLFxuICAgIHJlc29sdmU6\
              IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAyLCAxNiwgb\
              3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsID\
              E2LCAnMHgnKVxufTtcblxuZXhwb3J0IHsgaW50LCBpbnRIZXgsIGludE9jdCB9O1x\
              uIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vY29tbW9uL21hcC5qcyc7XG5pbXBv\
              cnQgeyBudWxsVGFnIH0gZnJvbSAnLi4vY29tbW9uL251bGwuanMnO1xuaW1wb3J0I\
              Hsgc2VxIH0gZnJvbSAnLi4vY29tbW9uL3NlcS5qcyc7XG5pbXBvcnQgeyBzdHJpbm\
              cgfSBmcm9tICcuLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGJvb2xUYWc\
              gfSBmcm9tICcuL2Jvb2wuanMnO1xuaW1wb3J0IHsgZmxvYXROYU4sIGZsb2F0RXhw\
              LCBmbG9hdCB9IGZyb20gJy4vZmxvYXQuanMnO1xuaW1wb3J0IHsgaW50T2N0LCBpb\
              nQsIGludEhleCB9IGZyb20gJy4vaW50LmpzJztcblxuY29uc3Qgc2NoZW1hID0gW1\
              xuICAgIG1hcCxcbiAgICBzZXEsXG4gICAgc3RyaW5nLFxuICAgIG51bGxUYWcsXG4\
              gICAgYm9vbFRhZyxcbiAgICBpbnRPY3QsXG4gICAgaW50LFxuICAgIGludEhleCxc\
              biAgICBmbG9hdE5hTixcbiAgICBmbG9hdEV4cCxcbiAgICBmbG9hdFxuXTtcblxuZ\
              Xhwb3J0IHsgc2NoZW1hIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi\
              8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vY29\
              tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuLi9jb21tb24vc2Vx\
              LmpzJztcblxuZnVuY3Rpb24gaW50SWRlbnRpZnkodmFsdWUpIHtcbiAgICByZXR1c\
              m4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKH\
              ZhbHVlKTtcbn1cbmNvbnN0IHN0cmluZ2lmeUpTT04gPSAoeyB2YWx1ZSB9KSA9PiB\
              KU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5jb25zdCBqc29uU2NhbGFycyA9IFtcbiAg\
              ICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09I\
              CdzdHJpbmcnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6IC\
              d0YWc6eWFtbC5vcmcsMjAwMjpzdHInLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4\
              gc3RyLFxuICAgICAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeUpTT05cbiAgICB9LFxu\
              ICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09IG51bGwsX\
              G4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBTY2FsYXIobnVsbCksXG4gIC\
              AgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZyw\
              yMDAyOm51bGwnLFxuICAgICAgICB0ZXN0OiAvXm51bGwkLyxcbiAgICAgICAgcmVz\
              b2x2ZTogKCkgPT4gbnVsbCxcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU\
              09OXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eX\
              Blb2YgdmFsdWUgPT09ICdib29sZWFuJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSx\
              cbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgICAg\
              IHRlc3Q6IC9edHJ1ZXxmYWxzZSQvLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4gc\
              3RyID09PSAndHJ1ZScsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTl\
              xuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4\
              gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9y\
              ZywyMDAyOmludCcsXG4gICAgICAgIHRlc3Q6IC9eLT8oPzowfFsxLTldWzAtOV0qK\
              SQvLFxuICAgICAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0\
              ludCB9KSA9PiBpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3R\
              yLCAxMCksXG4gICAgICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gaW50SWRl\
              bnRpZnkodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5K\
              HZhbHVlKVxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT\
              4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogdHJ\
              1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAg\
              ICAgICB0ZXN0OiAvXi0/KD86MHxbMS05XVswLTldKikoPzpcXC5bMC05XSopPyg/O\
              ltlRV1bLStdP1swLTldKyk/JC8sXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBwYX\
              JzZUZsb2F0KHN0ciksXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlx\
              uICAgIH1cbl07XG5jb25zdCBqc29uRXJyb3IgPSB7XG4gICAgZGVmYXVsdDogdHJ1\
              ZSxcbiAgICB0YWc6ICcnLFxuICAgIHRlc3Q6IC9eLyxcbiAgICByZXNvbHZlKHN0c\
              iwgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGBVbnJlc29sdmVkIHBsYWluIH\
              NjYWxhciAke0pTT04uc3RyaW5naWZ5KHN0cil9YCk7XG4gICAgICAgIHJldHVybiB\
              zdHI7XG4gICAgfVxufTtcbmNvbnN0IHNjaGVtYSA9IFttYXAsIHNlcV0uY29uY2F0\
              KGpzb25TY2FsYXJzLCBqc29uRXJyb3IpO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcb\
              iIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcy\
              c7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi8uLi9zdHJpbmd\
              pZnkvc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuY29uc3QgYmluYXJ5ID0ge1xuICAg\
              IGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksI\
              C8vIEJ1ZmZlciBpbmhlcml0cyBmcm9tIFVpbnQ4QXJyYXlcbiAgICBkZWZhdWx0Oi\
              BmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLFxuICA\
              gIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgaW4gbm9kZSBhbmQgYW4gVWlu\
              dDhBcnJheSBpbiBicm93c2Vyc1xuICAgICAqXG4gICAgICogVG8gdXNlIHRoZSByZ\
              XN1bHRpbmcgYnVmZmVyIGFzIGFuIGltYWdlLCB5b3UnbGwgd2FudCB0byBkbyBzb2\
              1ldGhpbmcgbGlrZTpcbiAgICAgKlxuICAgICAqICAgY29uc3QgYmxvYiA9IG5ldyB\
              CbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KVxuICAgICAqICAg\
              ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Bob3RvJykuc3JjID0gVVJMLmNyZWF0Z\
              U9iamVjdFVSTChibG9iKVxuICAgICAqL1xuICAgIHJlc29sdmUoc3JjLCBvbkVycm\
              9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nKSB\
              7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3JjLCAnYmFzZTY0Jyk7\
              XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGF0b2IgPT09ICdmd\
              W5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIE9uIElFIDExLCBhdG9iKCkgY2FuJ3\
              QgaGFuZGxlIG5ld2xpbmVzXG4gICAgICAgICAgICBjb25zdCBzdHIgPSBhdG9iKHN\
              yYy5yZXBsYWNlKC9bXFxuXFxyXS9nLCAnJykpO1xuICAgICAgICAgICAgY29uc3Qg\
              YnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCk7XG4gICAgICAgICAgI\
              CBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSlcbiAgICAgICAgIC\
              AgICAgICBidWZmZXJbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICA\
              gIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAg\
              ICAgICAgICBvbkVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvc\
              nQgcmVhZGluZyBiaW5hcnkgdGFnczsgZWl0aGVyIEJ1ZmZlciBvciBhdG9iIGlzIH\
              JlcXVpcmVkJyk7XG4gICAgICAgICAgICByZXR1cm4gc3JjO1xuICAgICAgICB9XG4\
              gICAgfSxcbiAgICBzdHJpbmdpZnkoeyBjb21tZW50LCB0eXBlLCB2YWx1ZSB9LCBj\
              dHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgY29uc3QgYnVmI\
              D0gdmFsdWU7IC8vIGNoZWNrZWQgZWFybGllciBieSBiaW5hcnkuaWRlbnRpZnkoKV\
              xuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciA9PT0\
              gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RyID1cbiAgICAgICAgICAgICAg\
              ICBidWYgaW5zdGFuY2VvZiBCdWZmZXJcbiAgICAgICAgICAgICAgICAgICAgPyBid\
              WYudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgICAgICAgICAgICAgIDogQnVmZm\
              VyLmZyb20oYnVmLmJ1ZmZlcikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICB\
              9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7\
              XG4gICAgICAgICAgICBsZXQgcyA9ICcnO1xuICAgICAgICAgICAgZm9yIChsZXQga\
              SA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgcyArPS\
              BTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gICAgICAgICAgICBzdHIgPSB\
              idG9hKHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAg\
              dGhyb3cgbmV3IEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvc\
              nQgd3JpdGluZyBiaW5hcnkgdGFnczsgZWl0aGVyIEJ1ZmZlciBvciBidG9hIGlzIH\
              JlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0eXBlKVxuICAgICA\
              gICAgICAgdHlwZSA9IFNjYWxhci5CTE9DS19MSVRFUkFMO1xuICAgICAgICBpZiAo\
              dHlwZSAhPT0gU2NhbGFyLlFVT1RFX0RPVUJMRSkge1xuICAgICAgICAgICAgY29uc\
              3QgbGluZVdpZHRoID0gTWF0aC5tYXgoY3R4Lm9wdGlvbnMubGluZVdpZHRoIC0gY3\
              R4LmluZGVudC5sZW5ndGgsIGN0eC5vcHRpb25zLm1pbkNvbnRlbnRXaWR0aCk7XG4\
              gICAgICAgICAgICBjb25zdCBuID0gTWF0aC5jZWlsKHN0ci5sZW5ndGggLyBsaW5l\
              V2lkdGgpO1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBuZXcgQXJyYXkobik7X\
              G4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbyA9IDA7IGkgPCBuOyArK2ksIG\
              8gKz0gbGluZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgbGluZXNbaV0gPSBzdHI\
              uc3Vic3RyKG8sIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAg\
              ICBzdHIgPSBsaW5lcy5qb2luKHR5cGUgPT09IFNjYWxhci5CTE9DS19MSVRFUkFMI\
              D8gJ1xcbicgOiAnICcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbm\
              dpZnlTdHJpbmcoeyBjb21tZW50LCB0eXBlLCB2YWx1ZTogc3RyIH0sIGN0eCwgb25\
              Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgYmlu\
              YXJ5IH07XG4iLCJpbXBvcnQgeyBpc1NlcSwgaXNQYWlyLCBpc01hcCB9IGZyb20gJ\
              y4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIsIGNyZWF0ZV\
              BhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFNjYWx\
              hciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBZQU1M\
              U2VxIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5cbmZ1bmN0aW9uI\
              HJlc29sdmVQYWlycyhzZXEsIG9uRXJyb3IpIHtcbiAgICBpZiAoaXNTZXEoc2VxKS\
              kge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcS5pdGVtcy5sZW5ndGg\
              7ICsraSkge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBzZXEuaXRlbXNbaV07XG4g\
              ICAgICAgICAgICBpZiAoaXNQYWlyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIGNvb\
              nRpbnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNNYXAoaXRlbSkpIHtcbiAgIC\
              AgICAgICAgICAgICBpZiAoaXRlbS5pdGVtcy5sZW5ndGggPiAxKVxuICAgICAgICA\
              gICAgICAgICAgICBvbkVycm9yKCdFYWNoIHBhaXIgbXVzdCBoYXZlIGl0cyBvd24g\
              c2VxdWVuY2UgaW5kaWNhdG9yJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFpc\
              iA9IGl0ZW0uaXRlbXNbMF0gfHwgbmV3IFBhaXIobmV3IFNjYWxhcihudWxsKSk7XG\
              4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudEJlZm9yZSlcbiAgICAgICA\
              gICAgICAgICAgICAgcGFpci5rZXkuY29tbWVudEJlZm9yZSA9IHBhaXIua2V5LmNv\
              bW1lbnRCZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYCR7aXRlbS5jb\
              21tZW50QmVmb3JlfVxcbiR7cGFpci5rZXkuY29tbWVudEJlZm9yZX1gXG4gICAgIC\
              AgICAgICAgICAgICAgICAgICA6IGl0ZW0uY29tbWVudEJlZm9yZTtcbiAgICAgICA\
              gICAgICAgICBpZiAoaXRlbS5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAg\
              IGNvbnN0IGNuID0gcGFpci52YWx1ZSA/PyBwYWlyLmtleTtcbiAgICAgICAgICAgI\
              CAgICAgICAgY24uY29tbWVudCA9IGNuLmNvbW1lbnRcbiAgICAgICAgICAgICAgIC\
              AgICAgICAgID8gYCR7aXRlbS5jb21tZW50fVxcbiR7Y24uY29tbWVudH1gXG4gICA\
              gICAgICAgICAgICAgICAgICAgICA6IGl0ZW0uY29tbWVudDtcbiAgICAgICAgICAg\
              ICAgICB9XG4gICAgICAgICAgICAgICAgaXRlbSA9IHBhaXI7XG4gICAgICAgICAgI\
              CB9XG4gICAgICAgICAgICBzZXEuaXRlbXNbaV0gPSBpc1BhaXIoaXRlbSkgPyBpdG\
              VtIDogbmV3IFBhaXIoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVx\
              uICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIHNlcXVlbmNlIGZvciB0aGlzIHRh\
              ZycpO1xuICAgIHJldHVybiBzZXE7XG59XG5mdW5jdGlvbiBjcmVhdGVQYWlycyhzY\
              2hlbWEsIGl0ZXJhYmxlLCBjdHgpIHtcbiAgICBjb25zdCB7IHJlcGxhY2VyIH0gPS\
              BjdHg7XG4gICAgY29uc3QgcGFpcnMgPSBuZXcgWUFNTFNlcShzY2hlbWEpO1xuICA\
              gIHBhaXJzLnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjpwYWlycyc7XG4gICAgbGV0\
              IGkgPSAwO1xuICAgIGlmIChpdGVyYWJsZSAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT\
              2JqZWN0KGl0ZXJhYmxlKSlcbiAgICAgICAgZm9yIChsZXQgaXQgb2YgaXRlcmFibG\
              UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGl\
              vbicpXG4gICAgICAgICAgICAgICAgaXQgPSByZXBsYWNlci5jYWxsKGl0ZXJhYmxl\
              LCBTdHJpbmcoaSsrKSwgaXQpO1xuICAgICAgICAgICAgbGV0IGtleSwgdmFsdWU7X\
              G4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdCkpIHtcbiAgICAgICAgIC\
              AgICAgICBpZiAoaXQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICA\
              gIGtleSA9IGl0WzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0WzFd\
              O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgI\
              CAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFtrZX\
              ksIHZhbHVlXSB0dXBsZTogJHtpdH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICA\
              gICAgIGVsc2UgaWYgKGl0ICYmIGl0IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAg\
              ICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGl0KTtcbiAgICAgI\
              CAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC\
              AgICAgICAga2V5ID0ga2V5c1swXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU\
              gPSBpdFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBl\
              bHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgR\
              XhwZWN0ZWQgdHVwbGUgd2l0aCBvbmUga2V5LCBub3QgJHtrZXlzLmxlbmd0aH0ga2\
              V5c2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICA\
              gICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleSA9IGl0O1xuICAgICAgICAg\
              ICAgfVxuICAgICAgICAgICAgcGFpcnMuaXRlbXMucHVzaChjcmVhdGVQYWlyKGtle\
              SwgdmFsdWUsIGN0eCkpO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHBhaXJzO1xufV\
              xuY29uc3QgcGFpcnMgPSB7XG4gICAgY29sbGVjdGlvbjogJ3NlcScsXG4gICAgZGV\
              mYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMn\
              LFxuICAgIHJlc29sdmU6IHJlc29sdmVQYWlycyxcbiAgICBjcmVhdGVOb2RlOiBjc\
              mVhdGVQYWlyc1xufTtcblxuZXhwb3J0IHsgY3JlYXRlUGFpcnMsIHBhaXJzLCByZX\
              NvbHZlUGFpcnMgfTtcbiIsImltcG9ydCB7IGlzU2NhbGFyLCBpc1BhaXIgfSBmcm9\
              tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJv\
              bSAnLi4vLi4vbm9kZXMvdG9KUy5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvb\
              SAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZn\
              JvbSAnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUGF\
              pcnMsIGNyZWF0ZVBhaXJzIH0gZnJvbSAnLi9wYWlycy5qcyc7XG5cbmNsYXNzIFlB\
              TUxPTWFwIGV4dGVuZHMgWUFNTFNlcSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gI\
              CAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWRkID0gWUFNTE1hcC5wcm90b3\
              R5cGUuYWRkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVsZXRlID0gWUFNTE1\
              hcC5wcm90b3R5cGUuZGVsZXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZ2V0\
              ID0gWUFNTE1hcC5wcm90b3R5cGUuZ2V0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoa\
              XMuaGFzID0gWUFNTE1hcC5wcm90b3R5cGUuaGFzLmJpbmQodGhpcyk7XG4gICAgIC\
              AgIHRoaXMuc2V0ID0gWUFNTE1hcC5wcm90b3R5cGUuc2V0LmJpbmQodGhpcyk7XG4\
              gICAgICAgIHRoaXMudGFnID0gWUFNTE9NYXAudGFnO1xuICAgIH1cbiAgICAvKipc\
              biAgICAgKiBJZiBgY3R4YCBpcyBnaXZlbiwgdGhlIHJldHVybiB0eXBlIGlzIGFjd\
              HVhbGx5IGBNYXA8dW5rbm93biwgdW5rbm93bj5gLFxuICAgICAqIGJ1dCBUeXBlU2\
              NyaXB0IHdvbid0IGFsbG93IHdpZGVuaW5nIHRoZSBzaWduYXR1cmUgb2YgYSBjaGl\
              sZCBtZXRob2QuXG4gICAgICovXG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAg\
              ICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiBzdXBlci50b0pTT04oXyk7X\
              G4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKGN0eD\
              8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUobWFwKTtcbiAgICA\
              gICAgZm9yIChjb25zdCBwYWlyIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAg\
              IGxldCBrZXksIHZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzUGFpcihwYWlyKSkge\
              1xuICAgICAgICAgICAgICAgIGtleSA9IHRvSlMocGFpci5rZXksICcnLCBjdHgpO1\
              xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9KUyhwYWlyLnZhbHVlLCBrZXksIGN\
              0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAg\
              ICAgICAgICBrZXkgPSB0b0pTKHBhaXIsICcnLCBjdHgpO1xuICAgICAgICAgICAgf\
              VxuICAgICAgICAgICAgaWYgKG1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgIC\
              B0aHJvdyBuZXcgRXJyb3IoJ09yZGVyZWQgbWFwcyBtdXN0IG5vdCBpbmNsdWRlIGR\
              1cGxpY2F0ZSBrZXlzJyk7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUp\
              O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIHN0Y\
              XRpYyBmcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgICAgICBjb25zdC\
              BwYWlycyA9IGNyZWF0ZVBhaXJzKHNjaGVtYSwgaXRlcmFibGUsIGN0eCk7XG4gICA\
              gICAgIGNvbnN0IG9tYXAgPSBuZXcgdGhpcygpO1xuICAgICAgICBvbWFwLml0ZW1z\
              ID0gcGFpcnMuaXRlbXM7XG4gICAgICAgIHJldHVybiBvbWFwO1xuICAgIH1cbn1cb\
              llBTUxPTWFwLnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJztcbmNvbnN0IG\
              9tYXAgPSB7XG4gICAgY29sbGVjdGlvbjogJ3NlcScsXG4gICAgaWRlbnRpZnk6IHZ\
              hbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgTWFwLFxuICAgIG5vZGVDbGFzczogWUFN\
              TE9NYXAsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub\
              3JnLDIwMDI6b21hcCcsXG4gICAgcmVzb2x2ZShzZXEsIG9uRXJyb3IpIHtcbiAgIC\
              AgICAgY29uc3QgcGFpcnMgPSByZXNvbHZlUGFpcnMoc2VxLCBvbkVycm9yKTtcbiA\
              gICAgICAgY29uc3Qgc2VlbktleXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7\
              IGtleSB9IG9mIHBhaXJzLml0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoaXNTY2FsY\
              XIoa2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWVuS2V5cy5pbmNsdWRlcy\
              hrZXkudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoYE9yZGV\
              yZWQgbWFwcyBtdXN0IG5vdCBpbmNsdWRlIGR1cGxpY2F0ZSBrZXlzOiAke2tleS52\
              YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZ\
              SB7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5LZXlzLnB1c2goa2V5LnZhbHVlKT\
              tcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiA\
              gICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFlBTUxPTWFwKCksIHBhaXJz\
              KTtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIGl0ZXJhYmxlLCBjd\
              HgpID0+IFlBTUxPTWFwLmZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KVxufTtcbl\
              xuZXhwb3J0IHsgWUFNTE9NYXAsIG9tYXAgfTtcbiIsImltcG9ydCB7IFNjYWxhciB\
              9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGJvb2xT\
              dHJpbmdpZnkoeyB2YWx1ZSwgc291cmNlIH0sIGN0eCkge1xuICAgIGNvbnN0IGJvb\
              2xPYmogPSB2YWx1ZSA/IHRydWVUYWcgOiBmYWxzZVRhZztcbiAgICBpZiAoc291cm\
              NlICYmIGJvb2xPYmoudGVzdC50ZXN0KHNvdXJjZSkpXG4gICAgICAgIHJldHVybiB\
              zb3VyY2U7XG4gICAgcmV0dXJuIHZhbHVlID8gY3R4Lm9wdGlvbnMudHJ1ZVN0ciA6\
              IGN0eC5vcHRpb25zLmZhbHNlU3RyO1xufVxuY29uc3QgdHJ1ZVRhZyA9IHtcbiAgI\
              CBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT09IHRydWUsXG4gICAgZGVmYXVsdD\
              ogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICB\
              0ZXN0OiAvXig/Oll8eXxbWXldZXN8WUVTfFtUdF1ydWV8VFJVRXxbT29dbnxPTikk\
              LyxcbiAgICByZXNvbHZlOiAoKSA9PiBuZXcgU2NhbGFyKHRydWUpLFxuICAgIHN0c\
              mluZ2lmeTogYm9vbFN0cmluZ2lmeVxufTtcbmNvbnN0IGZhbHNlVGFnID0ge1xuIC\
              AgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PT0gZmFsc2UsXG4gICAgZGVmYXV\
              sdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAg\
              ICB0ZXN0OiAvXig/Ok58bnxbTm5db3xOT3xbRmZdYWxzZXxGQUxTRXxbT29dZmZ8T\
              0ZGKSQvLFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBTY2FsYXIoZmFsc2UpLFxuIC\
              AgIHN0cmluZ2lmeTogYm9vbFN0cmluZ2lmeVxufTtcblxuZXhwb3J0IHsgZmFsc2V\
              UYWcsIHRydWVUYWcgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4u\
              L25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmc\
              m9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3\
              QgZmxvYXROYU4gPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx\
              1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0\
              YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL14oPzpbLStdP1xcL\
              ig/OmluZnxJbmZ8SU5GKXxcXC5uYW58XFwuTmFOfFxcLk5BTikkLyxcbiAgICByZX\
              NvbHZlOiAoc3RyKSA9PiBzdHIuc2xpY2UoLTMpLnRvTG93ZXJDYXNlKCkgPT09ICd\
              uYW4nXG4gICAgICAgID8gTmFOXG4gICAgICAgIDogc3RyWzBdID09PSAnLSdcbiAg\
              ICAgICAgICAgID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgICAgI\
              CA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBzdHJpbmdpZnk6IHN0cm\
              luZ2lmeU51bWJlclxufTtcbmNvbnN0IGZsb2F0RXhwID0ge1xuICAgIGlkZW50aWZ\
              5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1\
              bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuI\
              CAgIGZvcm1hdDogJ0VYUCcsXG4gICAgdGVzdDogL15bLStdPyg/OlswLTldWzAtOV\
              9dKik/KD86XFwuWzAtOV9dKik/W2VFXVstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x\
              2ZTogKHN0cikgPT4gcGFyc2VGbG9hdChzdHIucmVwbGFjZSgvXy9nLCAnJykpLFxu\
              ICAgIHN0cmluZ2lmeShub2RlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlc\
              ihub2RlLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBudW\
              0udG9FeHBvbmVudGlhbCgpIDogc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIH1\
              cbn07XG5jb25zdCBmbG9hdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlw\
              ZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgI\
              HRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXlstK1\
              0/KD86WzAtOV1bMC05X10qKT9cXC5bMC05X10qJC8sXG4gICAgcmVzb2x2ZShzdHI\
              pIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIocGFyc2VGbG9hdChz\
              dHIucmVwbGFjZSgvXy9nLCAnJykpKTtcbiAgICAgICAgY29uc3QgZG90ID0gc3RyL\
              mluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGRvdCAhPT0gLTEpIHtcbiAgICAgIC\
              AgICAgIGNvbnN0IGYgPSBzdHIuc3Vic3RyaW5nKGRvdCArIDEpLnJlcGxhY2UoL18\
              vZywgJycpO1xuICAgICAgICAgICAgaWYgKGZbZi5sZW5ndGggLSAxXSA9PT0gJzAn\
              KVxuICAgICAgICAgICAgICAgIG5vZGUubWluRnJhY3Rpb25EaWdpdHMgPSBmLmxlb\
              md0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9LFxuIC\
              AgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuXG5leHBvcnQgeyBmbG9\
              hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlO\
              dW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJ\
              ztcblxuY29uc3QgaW50SWRlbnRpZnkgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZS\
              A9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG5mdW5jdGl\
              vbiBpbnRSZXNvbHZlKHN0ciwgb2Zmc2V0LCByYWRpeCwgeyBpbnRBc0JpZ0ludCB9\
              KSB7XG4gICAgY29uc3Qgc2lnbiA9IHN0clswXTtcbiAgICBpZiAoc2lnbiA9PT0gJ\
              y0nIHx8IHNpZ24gPT09ICcrJylcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgc3\
              RyID0gc3RyLnN1YnN0cmluZyhvZmZzZXQpLnJlcGxhY2UoL18vZywgJycpO1xuICA\
              gIGlmIChpbnRBc0JpZ0ludCkge1xuICAgICAgICBzd2l0Y2ggKHJhZGl4KSB7XG4g\
              ICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgc3RyID0gYDBiJHtzd\
              HJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOD\
              pcbiAgICAgICAgICAgICAgICBzdHIgPSBgMG8ke3N0cn1gO1xuICAgICAgICAgICA\
              gICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAg\
              ICBzdHIgPSBgMHgke3N0cn1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgI\
              CAgICB9XG4gICAgICAgIGNvbnN0IG4gPSBCaWdJbnQoc3RyKTtcbiAgICAgICAgcm\
              V0dXJuIHNpZ24gPT09ICctJyA/IEJpZ0ludCgtMSkgKiBuIDogbjtcbiAgICB9XG4\
              gICAgY29uc3QgbiA9IHBhcnNlSW50KHN0ciwgcmFkaXgpO1xuICAgIHJldHVybiBz\
              aWduID09PSAnLScgPyAtMSAqIG4gOiBuO1xufVxuZnVuY3Rpb24gaW50U3RyaW5na\
              WZ5KG5vZGUsIHJhZGl4LCBwcmVmaXgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPS\
              Bub2RlO1xuICAgIGlmIChpbnRJZGVudGlmeSh2YWx1ZSkpIHtcbiAgICAgICAgY29\
              uc3Qgc3RyID0gdmFsdWUudG9TdHJpbmcocmFkaXgpO1xuICAgICAgICByZXR1cm4g\
              dmFsdWUgPCAwID8gJy0nICsgcHJlZml4ICsgc3RyLnN1YnN0cigxKSA6IHByZWZpe\
              CArIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlcihub2RlKT\
              tcbn1cbmNvbnN0IGludEJpbiA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnk\
              sXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAw\
              MjppbnQnLFxuICAgIGZvcm1hdDogJ0JJTicsXG4gICAgdGVzdDogL15bLStdPzBiW\
              zAtMV9dKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IG\
              ludFJlc29sdmUoc3RyLCAyLCAyLCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA\
              9PiBpbnRTdHJpbmdpZnkobm9kZSwgMiwgJzBiJylcbn07XG5jb25zdCBpbnRPY3Qg\
              PSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRyd\
              WUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYX\
              Q6ICdPQ1QnLFxuICAgIHRlc3Q6IC9eWy0rXT8wWzAtN19dKyQvLFxuICAgIHJlc29\
              sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAxLCA4\
              LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZ\
              SwgOCwgJzAnKVxufTtcbmNvbnN0IGludCA9IHtcbiAgICBpZGVudGlmeTogaW50SW\
              RlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5\
              vcmcsMjAwMjppbnQnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XVswLTlfXSokLyxc\
              biAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlK\
              HN0ciwgMCwgMTAsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZX\
              Jcbn07XG5jb25zdCBpbnRIZXggPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ\
              5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIw\
              MDI6aW50JyxcbiAgICBmb3JtYXQ6ICdIRVgnLFxuICAgIHRlc3Q6IC9eWy0rXT8we\
              FswLTlhLWZBLUZfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3\
              B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMTYsIG9wdCksXG4gICAgc3RyaW5naWZ\
              5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAxNiwgJzB4Jylcbn07XG5cbmV4\
              cG9ydCB7IGludCwgaW50QmluLCBpbnRIZXgsIGludE9jdCB9O1xuIiwiaW1wb3J0I\
              HsgaXNNYXAsIGlzUGFpciwgaXNTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZG\
              VudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi4\
              vLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwLCBmaW5kUGFpciB9\
              IGZyb20gJy4uLy4uL25vZGVzL1lBTUxNYXAuanMnO1xuXG5jbGFzcyBZQU1MU2V0I\
              GV4dGVuZHMgWUFNTE1hcCB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gIC\
              AgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIHRoaXMudGFnID0gWUFNTFNldC5\
              0YWc7XG4gICAgfVxuICAgIGFkZChrZXkpIHtcbiAgICAgICAgbGV0IHBhaXI7XG4g\
              ICAgICAgIGlmIChpc1BhaXIoa2V5KSlcbiAgICAgICAgICAgIHBhaXIgPSBrZXk7X\
              G4gICAgICAgIGVsc2UgaWYgKGtleSAmJlxuICAgICAgICAgICAgdHlwZW9mIGtleS\
              A9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICdrZXknIGluIGtleSAmJlxuICA\
              gICAgICAgICAgJ3ZhbHVlJyBpbiBrZXkgJiZcbiAgICAgICAgICAgIGtleS52YWx1\
              ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHBhaXIgPSBuZXcgUGFpcihrZXkua2V5L\
              CBudWxsKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcGFpciA9IG5ldyBQYW\
              lyKGtleSwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBmaW5kUGFpcih0aGl\
              zLml0ZW1zLCBwYWlyLmtleSk7XG4gICAgICAgIGlmICghcHJldilcbiAgICAgICAg\
              ICAgIHRoaXMuaXRlbXMucHVzaChwYWlyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgI\
              CogSWYgYGtlZXBQYWlyYCBpcyBgdHJ1ZWAsIHJldHVybnMgdGhlIFBhaXIgbWF0Y2\
              hpbmcgYGtleWAuXG4gICAgICogT3RoZXJ3aXNlLCByZXR1cm5zIHRoZSB2YWx1ZSB\
              vZiB0aGF0IFBhaXIncyBrZXkuXG4gICAgICovXG4gICAgZ2V0KGtleSwga2VlcFBh\
              aXIpIHtcbiAgICAgICAgY29uc3QgcGFpciA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsI\
              GtleSk7XG4gICAgICAgIHJldHVybiAha2VlcFBhaXIgJiYgaXNQYWlyKHBhaXIpXG\
              4gICAgICAgICAgICA/IGlzU2NhbGFyKHBhaXIua2V5KVxuICAgICAgICAgICAgICA\
              gID8gcGFpci5rZXkudmFsdWVcbiAgICAgICAgICAgICAgICA6IHBhaXIua2V5XG4g\
              ICAgICAgICAgICA6IHBhaXI7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7X\
              G4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJylcbiAgICAgIC\
              AgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYm9vbGVhbiB2YWx1ZSBmb3I\
              gc2V0KGtleSwgdmFsdWUpIGluIGEgWUFNTCBzZXQsIG5vdCAke3R5cGVvZiB2YWx1\
              ZX1gKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsI\
              GtleSk7XG4gICAgICAgIGlmIChwcmV2ICYmICF2YWx1ZSkge1xuICAgICAgICAgIC\
              AgdGhpcy5pdGVtcy5zcGxpY2UodGhpcy5pdGVtcy5pbmRleE9mKHByZXYpLCAxKTt\
              cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcHJldiAmJiB2YWx1ZSkge1xu\
              ICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKG5ldyBQYWlyKGtleSkpO1xuICAgI\
              CAgICB9XG4gICAgfVxuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgcmV0dX\
              JuIHN1cGVyLnRvSlNPTihfLCBjdHgsIFNldCk7XG4gICAgfVxuICAgIHRvU3RyaW5\
              nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBpZiAoIWN0\
              eClcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgI\
              CAgICAgaWYgKHRoaXMuaGFzQWxsTnVsbFZhbHVlcyh0cnVlKSlcbiAgICAgICAgIC\
              AgIHJldHVybiBzdXBlci50b1N0cmluZyhPYmplY3QuYXNzaWduKHt9LCBjdHgsIHs\
              gYWxsTnVsbFZhbHVlczogdHJ1ZSB9KSwgb25Db21tZW50LCBvbkNob21wS2VlcCk7\
              XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2V0I\
              Gl0ZW1zIG11c3QgYWxsIGhhdmUgbnVsbCB2YWx1ZXMnKTtcbiAgICB9XG4gICAgc3\
              RhdGljIGZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSB7XG4gICAgICAgIGNvbnN\
              0IHsgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc2V0ID0gbmV3IHRo\
              aXMoc2NoZW1hKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICYmIFN5bWJvbC5pdGVyY\
              XRvciBpbiBPYmplY3QoaXRlcmFibGUpKVxuICAgICAgICAgICAgZm9yIChsZXQgdm\
              FsdWUgb2YgaXRlcmFibGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ\
              lcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICB2YWx1\
              ZSA9IHJlcGxhY2VyLmNhbGwoaXRlcmFibGUsIHZhbHVlLCB2YWx1ZSk7XG4gICAgI\
              CAgICAgICAgICAgc2V0Lml0ZW1zLnB1c2goY3JlYXRlUGFpcih2YWx1ZSwgbnVsbC\
              wgY3R4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICA\
              gfVxufVxuWUFNTFNldC50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6c2V0JztcbmNv\
              bnN0IHNldCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnbWFwJyxcbiAgICBpZGVudGlme\
              TogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBTZXQsXG4gICAgbm9kZUNsYXNzOi\
              BZQU1MU2V0LFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1\
              sLm9yZywyMDAyOnNldCcsXG4gICAgY3JlYXRlTm9kZTogKHNjaGVtYSwgaXRlcmFi\
              bGUsIGN0eCkgPT4gWUFNTFNldC5mcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eCksX\
              G4gICAgcmVzb2x2ZShtYXAsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKGlzTWFwKG\
              1hcCkpIHtcbiAgICAgICAgICAgIGlmIChtYXAuaGFzQWxsTnVsbFZhbHVlcyh0cnV\
              lKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgWUFN\
              TFNldCgpLCBtYXApO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgI\
              G9uRXJyb3IoJ1NldCBpdGVtcyBtdXN0IGFsbCBoYXZlIG51bGwgdmFsdWVzJyk7XG\
              4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgb25FcnJvcignRXh\
              wZWN0ZWQgYSBtYXBwaW5nIGZvciB0aGlzIHRhZycpO1xuICAgICAgICByZXR1cm4g\
              bWFwO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFlBTUxTZXQsIHNldCB9O1xuIiwia\
              W1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3\
              N0cmluZ2lmeU51bWJlci5qcyc7XG5cbi8qKiBJbnRlcm5hbCB0eXBlcyBoYW5kbGU\
              gYmlnaW50IGFzIG51bWJlciwgYmVjYXVzZSBUUyBjYW4ndCBmaWd1cmUgaXQgb3V0\
              LiAqL1xuZnVuY3Rpb24gcGFyc2VTZXhhZ2VzaW1hbChzdHIsIGFzQmlnSW50KSB7X\
              G4gICAgY29uc3Qgc2lnbiA9IHN0clswXTtcbiAgICBjb25zdCBwYXJ0cyA9IHNpZ2\
              4gPT09ICctJyB8fCBzaWduID09PSAnKycgPyBzdHIuc3Vic3RyaW5nKDEpIDogc3R\
              yO1xuICAgIGNvbnN0IG51bSA9IChuKSA9PiBhc0JpZ0ludCA/IEJpZ0ludChuKSA6\
              IE51bWJlcihuKTtcbiAgICBjb25zdCByZXMgPSBwYXJ0c1xuICAgICAgICAucmVwb\
              GFjZSgvXy9nLCAnJylcbiAgICAgICAgLnNwbGl0KCc6JylcbiAgICAgICAgLnJlZH\
              VjZSgocmVzLCBwKSA9PiByZXMgKiBudW0oNjApICsgbnVtKHApLCBudW0oMCkpO1x\
              uICAgIHJldHVybiAoc2lnbiA9PT0gJy0nID8gbnVtKC0xKSAqIHJlcyA6IHJlcyk7\
              XG59XG4vKipcbiAqIGhoaGg6bW06c3Muc3NzXG4gKlxuICogSW50ZXJuYWwgdHlwZ\
              XMgaGFuZGxlIGJpZ2ludCBhcyBudW1iZXIsIGJlY2F1c2UgVFMgY2FuJ3QgZmlndX\
              JlIGl0IG91dC5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2V4YWdlc2ltYWwobm9\
              kZSkge1xuICAgIGxldCB7IHZhbHVlIH0gPSBub2RlO1xuICAgIGxldCBudW0gPSAo\
              bikgPT4gbjtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JylcbiAgI\
              CAgICAgbnVtID0gbiA9PiBCaWdJbnQobik7XG4gICAgZWxzZSBpZiAoaXNOYU4odm\
              FsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiBzdHJpbmd\
              pZnlOdW1iZXIobm9kZSk7XG4gICAgbGV0IHNpZ24gPSAnJztcbiAgICBpZiAodmFs\
              dWUgPCAwKSB7XG4gICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIHZhbHVlICo9I\
              G51bSgtMSk7XG4gICAgfVxuICAgIGNvbnN0IF82MCA9IG51bSg2MCk7XG4gICAgY2\
              9uc3QgcGFydHMgPSBbdmFsdWUgJSBfNjBdOyAvLyBzZWNvbmRzLCBpbmNsdWRpbmc\
              gbXNcbiAgICBpZiAodmFsdWUgPCA2MCkge1xuICAgICAgICBwYXJ0cy51bnNoaWZ0\
              KDApOyAvLyBhdCBsZWFzdCBvbmUgOiBpcyByZXF1aXJlZFxuICAgIH1cbiAgICBlb\
              HNlIHtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgLSBwYXJ0c1swXSkgLyBfNjA7XG\
              4gICAgICAgIHBhcnRzLnVuc2hpZnQodmFsdWUgJSBfNjApOyAvLyBtaW51dGVzXG4\
              gICAgICAgIGlmICh2YWx1ZSA+PSA2MCkge1xuICAgICAgICAgICAgdmFsdWUgPSAo\
              dmFsdWUgLSBwYXJ0c1swXSkgLyBfNjA7XG4gICAgICAgICAgICBwYXJ0cy51bnNoa\
              WZ0KHZhbHVlKTsgLy8gaG91cnNcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm\
              4gKHNpZ24gK1xuICAgICAgICBwYXJ0c1xuICAgICAgICAgICAgLm1hcChuID0+IFN\
              0cmluZyhuKS5wYWRTdGFydCgyLCAnMCcpKVxuICAgICAgICAgICAgLmpvaW4oJzon\
              KVxuICAgICAgICAgICAgLnJlcGxhY2UoLzAwMDAwMFxcZCokLywgJycpIC8vICUgN\
              jAgbWF5IGludHJvZHVjZSBlcnJvclxuICAgICk7XG59XG5jb25zdCBpbnRUaW1lID\
              0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWd\
              pbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpLFxuICAgIGRlZmF1bHQ6IHRy\
              dWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtY\
              XQ6ICdUSU1FJyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qKD86OlswLT\
              VdP1swLTldKSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnR\
              Bc0JpZ0ludCB9KSA9PiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgaW50QXNCaWdJbnQp\
              LFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5U2V4YWdlc2ltYWxcbn07XG5jb25zd\
              CBmbG9hdFRpbWUgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YW\
              x1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd\
              0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgZm9ybWF0OiAnVElNRScsXG4g\
              ICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKig/OjpbMC01XT9bMC05XSkrXFwuW\
              zAtOV9dKiQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZVNleGFnZXNpbWFsKH\
              N0ciwgZmFsc2UpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5U2V4YWdlc2ltYWx\
              cbn07XG5jb25zdCB0aW1lc3RhbXAgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+\
              IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgI\
              HRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcCcsXG4gICAgLy8gSWYgdG\
              hlIHRpbWUgem9uZSBpcyBvbWl0dGVkLCB0aGUgdGltZXN0YW1wIGlzIGFzc3VtZWQ\
              gdG8gYmUgc3BlY2lmaWVkIGluIFVUQy4gVGhlIHRpbWUgcGFydFxuICAgIC8vIG1h\
              eSBiZSBvbWl0dGVkIGFsdG9nZXRoZXIsIHJlc3VsdGluZyBpbiBhIGRhdGUgZm9yb\
              WF0LiBJbiBzdWNoIGEgY2FzZSwgdGhlIHRpbWUgcGFydCBpc1xuICAgIC8vIGFzc3\
              VtZWQgdG8gYmUgMDA6MDA6MDBaIChzdGFydCBvZiBkYXksIFVUQykuXG4gICAgdGV\
              zdDogUmVnRXhwKCdeKFswLTldezR9KS0oWzAtOV17MSwyfSktKFswLTldezEsMn0p\
              JyArIC8vIFlZWVktTW0tRGRcbiAgICAgICAgJyg/OicgKyAvLyB0aW1lIGlzIG9wd\
              GlvbmFsXG4gICAgICAgICcoPzp0fFR8WyBcXFxcdF0rKScgKyAvLyB0IHwgVCB8IH\
              doaXRlc3BhY2VcbiAgICAgICAgJyhbMC05XXsxLDJ9KTooWzAtOV17MSwyfSk6KFs\
              wLTldezEsMn0oXFxcXC5bMC05XSspPyknICsgLy8gSGg6TW06U3MoLnNzKT9cbiAg\
              ICAgICAgJyg/OlsgXFxcXHRdKihafFstK11bMDEyXT9bMC05XSg/OjpbMC05XXsyf\
              Sk/KSk/JyArIC8vIFogfCArNSB8IC0wMzozMFxuICAgICAgICAnKT8kJyksXG4gIC\
              AgcmVzb2x2ZShzdHIpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2g\
              odGltZXN0YW1wLnRlc3QpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAg\
              ICAgdGhyb3cgbmV3IEVycm9yKCchIXRpbWVzdGFtcCBleHBlY3RzIGEgZGF0ZSwgc\
              3RhcnRpbmcgd2l0aCB5eXl5LW1tLWRkJyk7XG4gICAgICAgIGNvbnN0IFssIHllYX\
              IsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IG1hdGNoLm1hcCh\
              OdW1iZXIpO1xuICAgICAgICBjb25zdCBtaWxsaXNlYyA9IG1hdGNoWzddID8gTnVt\
              YmVyKChtYXRjaFs3XSArICcwMCcpLnN1YnN0cigxLCAzKSkgOiAwO1xuICAgICAgI\
              CBsZXQgZGF0ZSA9IERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5LCBob3VyIH\
              x8IDAsIG1pbnV0ZSB8fCAwLCBzZWNvbmQgfHwgMCwgbWlsbGlzZWMpO1xuICAgICA\
              gICBjb25zdCB0eiA9IG1hdGNoWzhdO1xuICAgICAgICBpZiAodHogJiYgdHogIT09\
              ICdaJykge1xuICAgICAgICAgICAgbGV0IGQgPSBwYXJzZVNleGFnZXNpbWFsKHR6L\
              CBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZCkgPCAzMClcbiAgIC\
              AgICAgICAgICAgICBkICo9IDYwO1xuICAgICAgICAgICAgZGF0ZSAtPSA2MDAwMCA\
              qIGQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xu\
              ICAgIH0sXG4gICAgc3RyaW5naWZ5OiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZS50b0lTT\
              1N0cmluZygpLnJlcGxhY2UoLygoVDAwOjAwKT86MDApP1xcLjAwMFokLywgJycpXG\
              59O1xuXG5leHBvcnQgeyBmbG9hdFRpbWUsIGludFRpbWUsIHRpbWVzdGFtcCB9O1x\
              uIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vY29tbW9uL21hcC5qcyc7XG5pbXBv\
              cnQgeyBudWxsVGFnIH0gZnJvbSAnLi4vY29tbW9uL251bGwuanMnO1xuaW1wb3J0I\
              Hsgc2VxIH0gZnJvbSAnLi4vY29tbW9uL3NlcS5qcyc7XG5pbXBvcnQgeyBzdHJpbm\
              cgfSBmcm9tICcuLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGJpbmFyeSB\
              9IGZyb20gJy4vYmluYXJ5LmpzJztcbmltcG9ydCB7IHRydWVUYWcsIGZhbHNlVGFn\
              IH0gZnJvbSAnLi9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0TmFOLCBmbG9hdEV4c\
              CwgZmxvYXQgfSBmcm9tICcuL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludEJpbiwgaW\
              50T2N0LCBpbnQsIGludEhleCB9IGZyb20gJy4vaW50LmpzJztcbmltcG9ydCB7IG9\
              tYXAgfSBmcm9tICcuL29tYXAuanMnO1xuaW1wb3J0IHsgcGFpcnMgfSBmcm9tICcu\
              L3BhaXJzLmpzJztcbmltcG9ydCB7IHNldCB9IGZyb20gJy4vc2V0LmpzJztcbmltc\
              G9ydCB7IGludFRpbWUsIGZsb2F0VGltZSwgdGltZXN0YW1wIH0gZnJvbSAnLi90aW\
              1lc3RhbXAuanMnO1xuXG5jb25zdCBzY2hlbWEgPSBbXG4gICAgbWFwLFxuICAgIHN\
              lcSxcbiAgICBzdHJpbmcsXG4gICAgbnVsbFRhZyxcbiAgICB0cnVlVGFnLFxuICAg\
              IGZhbHNlVGFnLFxuICAgIGludEJpbixcbiAgICBpbnRPY3QsXG4gICAgaW50LFxuI\
              CAgIGludEhleCxcbiAgICBmbG9hdE5hTixcbiAgICBmbG9hdEV4cCxcbiAgICBmbG\
              9hdCxcbiAgICBiaW5hcnksXG4gICAgb21hcCxcbiAgICBwYWlycyxcbiAgICBzZXQ\
              sXG4gICAgaW50VGltZSxcbiAgICBmbG9hdFRpbWUsXG4gICAgdGltZXN0YW1wXG5d\
              O1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJ\
              y4vY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBudWxsVGFnIH0gZnJvbSAnLi9jb2\
              1tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuL2NvbW1vbi9zZXE\
              uanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi9jb21tb24vc3RyaW5nLmpz\
              JztcbmltcG9ydCB7IGJvb2xUYWcgfSBmcm9tICcuL2NvcmUvYm9vbC5qcyc7XG5pb\
              XBvcnQgeyBmbG9hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH0gZnJvbSAnLi9jb3JlL2\
              Zsb2F0LmpzJztcbmltcG9ydCB7IGludCwgaW50SGV4LCBpbnRPY3QgfSBmcm9tICc\
              uL2NvcmUvaW50LmpzJztcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vY29yZS9z\
              Y2hlbWEuanMnO1xuaW1wb3J0IHsgc2NoZW1hIGFzIHNjaGVtYSQxIH0gZnJvbSAnL\
              i9qc29uL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBiaW5hcnkgfSBmcm9tICcuL3lhbW\
              wtMS4xL2JpbmFyeS5qcyc7XG5pbXBvcnQgeyBvbWFwIH0gZnJvbSAnLi95YW1sLTE\
              uMS9vbWFwLmpzJztcbmltcG9ydCB7IHBhaXJzIH0gZnJvbSAnLi95YW1sLTEuMS9w\
              YWlycy5qcyc7XG5pbXBvcnQgeyBzY2hlbWEgYXMgc2NoZW1hJDIgfSBmcm9tICcuL\
              3lhbWwtMS4xL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzZXQgfSBmcm9tICcuL3lhbW\
              wtMS4xL3NldC5qcyc7XG5pbXBvcnQgeyB0aW1lc3RhbXAsIGZsb2F0VGltZSwgaW5\
              0VGltZSB9IGZyb20gJy4veWFtbC0xLjEvdGltZXN0YW1wLmpzJztcblxuY29uc3Qg\
              c2NoZW1hcyA9IG5ldyBNYXAoW1xuICAgIFsnY29yZScsIHNjaGVtYV0sXG4gICAgW\
              ydmYWlsc2FmZScsIFttYXAsIHNlcSwgc3RyaW5nXV0sXG4gICAgWydqc29uJywgc2\
              NoZW1hJDFdLFxuICAgIFsneWFtbDExJywgc2NoZW1hJDJdLFxuICAgIFsneWFtbC0\
              xLjEnLCBzY2hlbWEkMl1cbl0pO1xuY29uc3QgdGFnc0J5TmFtZSA9IHtcbiAgICBi\
              aW5hcnksXG4gICAgYm9vbDogYm9vbFRhZyxcbiAgICBmbG9hdCxcbiAgICBmbG9hd\
              EV4cCxcbiAgICBmbG9hdE5hTixcbiAgICBmbG9hdFRpbWUsXG4gICAgaW50LFxuIC\
              AgIGludEhleCxcbiAgICBpbnRPY3QsXG4gICAgaW50VGltZSxcbiAgICBtYXAsXG4\
              gICAgbnVsbDogbnVsbFRhZyxcbiAgICBvbWFwLFxuICAgIHBhaXJzLFxuICAgIHNl\
              cSxcbiAgICBzZXQsXG4gICAgdGltZXN0YW1wXG59O1xuY29uc3QgY29yZUtub3duV\
              GFncyA9IHtcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5JzogYmluYXJ5LF\
              xuICAgICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJzogb21hcCxcbiAgICAndGFnOnl\
              hbWwub3JnLDIwMDI6cGFpcnMnOiBwYWlycyxcbiAgICAndGFnOnlhbWwub3JnLDIw\
              MDI6c2V0Jzogc2V0LFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnO\
              iB0aW1lc3RhbXBcbn07XG5mdW5jdGlvbiBnZXRUYWdzKGN1c3RvbVRhZ3MsIHNjaG\
              VtYU5hbWUpIHtcbiAgICBsZXQgdGFncyA9IHNjaGVtYXMuZ2V0KHNjaGVtYU5hbWU\
              pO1xuICAgIGlmICghdGFncykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShj\
              dXN0b21UYWdzKSlcbiAgICAgICAgICAgIHRhZ3MgPSBbXTtcbiAgICAgICAgZWxzZ\
              SB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbShzY2hlbWFzLm\
              tleXMoKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09ICd\
              5YW1sMTEnKVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IEpTT04uc3RyaW5n\
              aWZ5KGtleSkpXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgI\
              CAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2NoZW1hIFwiJHtzY2hlbWFOYW\
              1lfVwiOyB1c2Ugb25lIG9mICR7a2V5c30gb3IgZGVmaW5lIGN1c3RvbVRhZ3MgYXJ\
              yYXlgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShj\
              dXN0b21UYWdzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiBjdXN0b21UY\
              WdzKVxuICAgICAgICAgICAgdGFncyA9IHRhZ3MuY29uY2F0KHRhZyk7XG4gICAgfV\
              xuICAgIGVsc2UgaWYgKHR5cGVvZiBjdXN0b21UYWdzID09PSAnZnVuY3Rpb24nKSB\
              7XG4gICAgICAgIHRhZ3MgPSBjdXN0b21UYWdzKHRhZ3Muc2xpY2UoKSk7XG4gICAg\
              fVxuICAgIHJldHVybiB0YWdzLm1hcCh0YWcgPT4ge1xuICAgICAgICBpZiAodHlwZ\
              W9mIHRhZyAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuIC\
              AgICAgICBjb25zdCB0YWdPYmogPSB0YWdzQnlOYW1lW3RhZ107XG4gICAgICAgIGl\
              mICh0YWdPYmopXG4gICAgICAgICAgICByZXR1cm4gdGFnT2JqO1xuICAgICAgICBj\
              b25zdCBrZXlzID0gT2JqZWN0LmtleXModGFnc0J5TmFtZSlcbiAgICAgICAgICAgI\
              C5tYXAoa2V5ID0+IEpTT04uc3RyaW5naWZ5KGtleSkpXG4gICAgICAgICAgICAuam\
              9pbignLCAnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGN1c3R\
              vbSB0YWcgXCIke3RhZ31cIjsgdXNlIG9uZSBvZiAke2tleXN9YCk7XG4gICAgfSk7\
              XG59XG5cbmV4cG9ydCB7IGNvcmVLbm93blRhZ3MsIGdldFRhZ3MgfTtcbiIsImltc\
              G9ydCB7IE1BUCwgU0NBTEFSLCBTRVEgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS\
              5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL2NvbW1vbi9tYXAuanMnO1xuaW1\
              wb3J0IHsgc2VxIH0gZnJvbSAnLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0\
              cmluZyB9IGZyb20gJy4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBnZXRUY\
              WdzLCBjb3JlS25vd25UYWdzIH0gZnJvbSAnLi90YWdzLmpzJztcblxuY29uc3Qgc2\
              9ydE1hcEVudHJpZXNCeUtleSA9IChhLCBiKSA9PiBhLmtleSA8IGIua2V5ID8gLTE\
              gOiBhLmtleSA+IGIua2V5ID8gMSA6IDA7XG5jbGFzcyBTY2hlbWEge1xuICAgIGNv\
              bnN0cnVjdG9yKHsgY29tcGF0LCBjdXN0b21UYWdzLCBtZXJnZSwgcmVzb2x2ZUtub\
              3duVGFncywgc2NoZW1hLCBzb3J0TWFwRW50cmllcywgdG9TdHJpbmdEZWZhdWx0cy\
              B9KSB7XG4gICAgICAgIHRoaXMuY29tcGF0ID0gQXJyYXkuaXNBcnJheShjb21wYXQ\
              pXG4gICAgICAgICAgICA/IGdldFRhZ3MoY29tcGF0LCAnY29tcGF0JylcbiAgICAg\
              ICAgICAgIDogY29tcGF0XG4gICAgICAgICAgICAgICAgPyBnZXRUYWdzKG51bGwsI\
              GNvbXBhdClcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHRoaXMubW\
              VyZ2UgPSAhIW1lcmdlO1xuICAgICAgICB0aGlzLm5hbWUgPSAodHlwZW9mIHNjaGV\
              tYSA9PT0gJ3N0cmluZycgJiYgc2NoZW1hKSB8fCAnY29yZSc7XG4gICAgICAgIHRo\
              aXMua25vd25UYWdzID0gcmVzb2x2ZUtub3duVGFncyA/IGNvcmVLbm93blRhZ3MgO\
              iB7fTtcbiAgICAgICAgdGhpcy50YWdzID0gZ2V0VGFncyhjdXN0b21UYWdzLCB0aG\
              lzLm5hbWUpO1xuICAgICAgICB0aGlzLnRvU3RyaW5nT3B0aW9ucyA9IHRvU3RyaW5\
              nRGVmYXVsdHMgPz8gbnVsbDtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5\
              KHRoaXMsIE1BUCwgeyB2YWx1ZTogbWFwIH0pO1xuICAgICAgICBPYmplY3QuZGVma\
              W5lUHJvcGVydHkodGhpcywgU0NBTEFSLCB7IHZhbHVlOiBzdHJpbmcgfSk7XG4gIC\
              AgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBTRVEsIHsgdmFsdWU6IHN\
              lcSB9KTtcbiAgICAgICAgLy8gVXNlZCBieSBjcmVhdGVNYXAoKVxuICAgICAgICB0\
              aGlzLnNvcnRNYXBFbnRyaWVzID1cbiAgICAgICAgICAgIHR5cGVvZiBzb3J0TWFwR\
              W50cmllcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gc29ydE1hcE\
              VudHJpZXNcbiAgICAgICAgICAgICAgICA6IHNvcnRNYXBFbnRyaWVzID09PSB0cnV\
              lXG4gICAgICAgICAgICAgICAgICAgID8gc29ydE1hcEVudHJpZXNCeUtleVxuICAg\
              ICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuICAgIGNsb25lKCkge1xuI\
              CAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShTY2hlbWEucHJvdG90eX\
              BlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0aGlzKSk7XG4gICA\
              gICAgIGNvcHkudGFncyA9IHRoaXMudGFncy5zbGljZSgpO1xuICAgICAgICByZXR1\
              cm4gY29weTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNjaGVtYSB9O1xuIiwiaW1wb\
              3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3\
              J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH0gZnJvbSAnLi9\
              zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaW5kZW50Q29tbWVudCwgbGluZUNvbW1l\
              bnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzd\
              HJpbmdpZnlEb2N1bWVudChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsaW5lcy\
              A9IFtdO1xuICAgIGxldCBoYXNEaXJlY3RpdmVzID0gb3B0aW9ucy5kaXJlY3RpdmV\
              zID09PSB0cnVlO1xuICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMgIT09IGZhbHNl\
              ICYmIGRvYy5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvbnN0IGRpciA9IGRvYy5ka\
              XJlY3RpdmVzLnRvU3RyaW5nKGRvYyk7XG4gICAgICAgIGlmIChkaXIpIHtcbiAgIC\
              AgICAgICAgIGxpbmVzLnB1c2goZGlyKTtcbiAgICAgICAgICAgIGhhc0RpcmVjdGl\
              2ZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvYy5kaXJl\
              Y3RpdmVzLmRvY1N0YXJ0KVxuICAgICAgICAgICAgaGFzRGlyZWN0aXZlcyA9IHRyd\
              WU7XG4gICAgfVxuICAgIGlmIChoYXNEaXJlY3RpdmVzKVxuICAgICAgICBsaW5lcy\
              5wdXNoKCctLS0nKTtcbiAgICBjb25zdCBjdHggPSBjcmVhdGVTdHJpbmdpZnlDb25\
              0ZXh0KGRvYywgb3B0aW9ucyk7XG4gICAgY29uc3QgeyBjb21tZW50U3RyaW5nIH0g\
              PSBjdHgub3B0aW9ucztcbiAgICBpZiAoZG9jLmNvbW1lbnRCZWZvcmUpIHtcbiAgI\
              CAgICAgaWYgKGxpbmVzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIGxpbmVzLn\
              Vuc2hpZnQoJycpO1xuICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9\
              jLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICBsaW5lcy51bnNoaWZ0KGluZGVudENv\
              bW1lbnQoY3MsICcnKSk7XG4gICAgfVxuICAgIGxldCBjaG9tcEtlZXAgPSBmYWxzZ\
              TtcbiAgICBsZXQgY29udGVudENvbW1lbnQgPSBudWxsO1xuICAgIGlmIChkb2MuY2\
              9udGVudHMpIHtcbiAgICAgICAgaWYgKGlzTm9kZShkb2MuY29udGVudHMpKSB7XG4\
              gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLnNwYWNlQmVmb3JlICYmIGhhc0Rp\
              cmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgI\
              CAgICAgICBpZiAoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgIC\
              AgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbnRlbnRzLmN\
              vbW1lbnRCZWZvcmUpO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50\
              Q29tbWVudChjcywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vI\
              HRvcC1sZXZlbCBibG9jayBzY2FsYXJzIG5lZWQgdG8gYmUgaW5kZW50ZWQgaWYgZm\
              9sbG93ZWQgYnkgYSBjb21tZW50XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0l\
              uZGVudCA9ICEhZG9jLmNvbW1lbnQ7XG4gICAgICAgICAgICBjb250ZW50Q29tbWVu\
              dCA9IGRvYy5jb250ZW50cy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvb\
              nN0IG9uQ2hvbXBLZWVwID0gY29udGVudENvbW1lbnQgPyB1bmRlZmluZWQgOiAoKS\
              A9PiAoY2hvbXBLZWVwID0gdHJ1ZSk7XG4gICAgICAgIGxldCBib2R5ID0gc3RyaW5\
              naWZ5KGRvYy5jb250ZW50cywgY3R4LCAoKSA9PiAoY29udGVudENvbW1lbnQgPSBu\
              dWxsKSwgb25DaG9tcEtlZXApO1xuICAgICAgICBpZiAoY29udGVudENvbW1lbnQpX\
              G4gICAgICAgICAgICBib2R5ICs9IGxpbmVDb21tZW50KGJvZHksICcnLCBjb21tZW\
              50U3RyaW5nKGNvbnRlbnRDb21tZW50KSk7XG4gICAgICAgIGlmICgoYm9keVswXSA\
              9PT0gJ3wnIHx8IGJvZHlbMF0gPT09ICc+JykgJiZcbiAgICAgICAgICAgIGxpbmVz\
              W2xpbmVzLmxlbmd0aCAtIDFdID09PSAnLS0tJykge1xuICAgICAgICAgICAgLy8gV\
              G9wLWxldmVsIGJsb2NrIHNjYWxhcnMgd2l0aCBhIHByZWNlZGluZyBkb2MgbWFya2\
              VyIG91Z2h0IHRvIHVzZSB0aGVcbiAgICAgICAgICAgIC8vIHNhbWUgbGluZSBmb3I\
              gdGhlaXIgaGVhZGVyLlxuICAgICAgICAgICAgbGluZXNbbGluZXMubGVuZ3RoIC0g\
              MV0gPSBgLS0tICR7Ym9keX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgI\
              CAgICAgICAgIGxpbmVzLnB1c2goYm9keSk7XG4gICAgfVxuICAgIGVsc2Uge1xuIC\
              AgICAgICBsaW5lcy5wdXNoKHN0cmluZ2lmeShkb2MuY29udGVudHMsIGN0eCkpO1x\
              uICAgIH1cbiAgICBpZiAoZG9jLmRpcmVjdGl2ZXM/LmRvY0VuZCkge1xuICAgICAg\
              ICBpZiAoZG9jLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gY29tb\
              WVudFN0cmluZyhkb2MuY29tbWVudCk7XG4gICAgICAgICAgICBpZiAoY3MuaW5jbH\
              VkZXMoJ1xcbicpKSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnLi4uJyk\
              7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNzLCAn\
              JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgI\
              CAgICAgICAgbGluZXMucHVzaChgLi4uICR7Y3N9YCk7XG4gICAgICAgICAgICB9XG\
              4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXN\
              oKCcuLi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAg\
              bGV0IGRjID0gZG9jLmNvbW1lbnQ7XG4gICAgICAgIGlmIChkYyAmJiBjaG9tcEtlZ\
              XApXG4gICAgICAgICAgICBkYyA9IGRjLnJlcGxhY2UoL15cXG4rLywgJycpO1xuIC\
              AgICAgICBpZiAoZGMpIHtcbiAgICAgICAgICAgIGlmICgoIWNob21wS2VlcCB8fCB\
              jb250ZW50Q29tbWVudCkgJiYgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gIT09ICcn\
              KVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgb\
              GluZXMucHVzaChpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoZGMpLCAnJykpO1\
              xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKSA\
              rICdcXG4nO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9O1xuIiwi\
              aW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvc\
              nQgeyBpc0VtcHR5UGF0aCwgY29sbGVjdGlvbkZyb21QYXRoIH0gZnJvbSAnLi4vbm\
              9kZXMvQ29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBOT0RFX1RZUEUsIERPQywgaXN\
              Ob2RlLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvaWRl\
              bnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciB9IGZyb20gJy4uL25vZGVzL1BhaXIua\
              nMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4uL25vZGVzL3RvSlMuanMnO1xuaW\
              1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vc2NoZW1hL1NjaGVtYS5qcyc7XG5pbXB\
              vcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJp\
              bmdpZnlEb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBhbmNob3JOYW1lcywgZmluZE5ld\
              0FuY2hvciwgY3JlYXRlTm9kZUFuY2hvcnMgfSBmcm9tICcuL2FuY2hvcnMuanMnO1\
              xuaW1wb3J0IHsgYXBwbHlSZXZpdmVyIH0gZnJvbSAnLi9hcHBseVJldml2ZXIuanM\
              nO1xuaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4vY3JlYXRlTm9kZS5qcyc7\
              XG5pbXBvcnQgeyBEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcb\
              lxuY2xhc3MgRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCByZXBsYW\
              Nlciwgb3B0aW9ucykge1xuICAgICAgICAvKiogQSBjb21tZW50IGJlZm9yZSB0aGl\
              zIERvY3VtZW50ICovXG4gICAgICAgIHRoaXMuY29tbWVudEJlZm9yZSA9IG51bGw7\
              XG4gICAgICAgIC8qKiBBIGNvbW1lbnQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhpcyBEb\
              2N1bWVudCAqL1xuICAgICAgICB0aGlzLmNvbW1lbnQgPSBudWxsO1xuICAgICAgIC\
              AvKiogRXJyb3JzIGVuY291bnRlcmVkIGR1cmluZyBwYXJzaW5nLiAqL1xuICAgICA\
              gICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICAvKiogV2FybmluZ3MgZW5jb3Vu\
              dGVyZWQgZHVyaW5nIHBhcnNpbmcuICovXG4gICAgICAgIHRoaXMud2FybmluZ3MgP\
              SBbXTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE5PREVfVF\
              lQRSwgeyB2YWx1ZTogRE9DIH0pO1xuICAgICAgICBsZXQgX3JlcGxhY2VyID0gbnV\
              sbDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJyB8\
              fCBBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICAgICAgX3JlcGxhY\
              2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW\
              9ucyA9PT0gdW5kZWZpbmVkICYmIHJlcGxhY2VyKSB7XG4gICAgICAgICAgICBvcHR\
              pb25zID0gcmVwbGFjZXI7XG4gICAgICAgICAgICByZXBsYWNlciA9IHVuZGVmaW5l\
              ZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduK\
              HtcbiAgICAgICAgICAgIGludEFzQmlnSW50OiBmYWxzZSxcbiAgICAgICAgICAgIG\
              tlZXBTb3VyY2VUb2tlbnM6IGZhbHNlLFxuICAgICAgICAgICAgbG9nTGV2ZWw6ICd\
              3YXJuJyxcbiAgICAgICAgICAgIHByZXR0eUVycm9yczogdHJ1ZSxcbiAgICAgICAg\
              ICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHVuaXF1ZUtleXM6IHRydWUsX\
              G4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4yJ1xuICAgICAgICB9LCBvcHRpb25zKT\
              tcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0O1xuICAgICAgICBsZXQgeyB2ZXJ\
              zaW9uIH0gPSBvcHQ7XG4gICAgICAgIGlmIChvcHRpb25zPy5fZGlyZWN0aXZlcykg\
              e1xuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gb3B0aW9ucy5fZGlyZWN0a\
              XZlcy5hdERvY3VtZW50KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXJlY3Rpdm\
              VzLnlhbWwuZXhwbGljaXQpXG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IHRoaXM\
              uZGlyZWN0aXZlcy55YW1sLnZlcnNpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxz\
              ZVxuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoe\
              yB2ZXJzaW9uIH0pO1xuICAgICAgICB0aGlzLnNldFNjaGVtYSh2ZXJzaW9uLCBvcH\
              Rpb25zKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWF\
              sbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgdGhp\
              cy5jb250ZW50cyA9XG4gICAgICAgICAgICB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gb\
              nVsbCA6IHRoaXMuY3JlYXRlTm9kZSh2YWx1ZSwgX3JlcGxhY2VyLCBvcHRpb25zKT\
              tcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGVlcCBjb3B5IG9mIHR\
              oaXMgRG9jdW1lbnQgYW5kIGl0cyBjb250ZW50cy5cbiAgICAgKlxuICAgICAqIEN1\
              c3RvbSBOb2RlIHZhbHVlcyB0aGF0IGluaGVyaXQgZnJvbSBgT2JqZWN0YCBzdGlsb\
              CByZWZlciB0byB0aGVpciBvcmlnaW5hbCBpbnN0YW5jZXMuXG4gICAgICovXG4gIC\
              AgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKER\
              vY3VtZW50LnByb3RvdHlwZSwge1xuICAgICAgICAgICAgW05PREVfVFlQRV06IHsg\
              dmFsdWU6IERPQyB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb3B5LmNvbW1lbnRCZ\
              WZvcmUgPSB0aGlzLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgIGNvcHkuY29tbWVudC\
              A9IHRoaXMuY29tbWVudDtcbiAgICAgICAgY29weS5lcnJvcnMgPSB0aGlzLmVycm9\
              ycy5zbGljZSgpO1xuICAgICAgICBjb3B5Lndhcm5pbmdzID0gdGhpcy53YXJuaW5n\
              cy5zbGljZSgpO1xuICAgICAgICBjb3B5Lm9wdGlvbnMgPSBPYmplY3QuYXNzaWduK\
              Ht9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKV\
              xuICAgICAgICAgICAgY29weS5kaXJlY3RpdmVzID0gdGhpcy5kaXJlY3RpdmVzLmN\
              sb25lKCk7XG4gICAgICAgIGNvcHkuc2NoZW1hID0gdGhpcy5zY2hlbWEuY2xvbmUo\
              KTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga\
              25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgY29weS5jb2\
              50ZW50cyA9IGlzTm9kZSh0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGl\
              zLmNvbnRlbnRzLmNsb25lKGNvcHkuc2NoZW1hKVxuICAgICAgICAgICAgOiB0aGlz\
              LmNvbnRlbnRzO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgI\
              GNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybi\
              Bjb3B5O1xuICAgIH1cbiAgICAvKiogQWRkcyBhIHZhbHVlIHRvIHRoZSBkb2N1bWV\
              udC4gKi9cbiAgICBhZGQodmFsdWUpIHtcbiAgICAgICAgaWYgKGFzc2VydENvbGxl\
              Y3Rpb24odGhpcy5jb250ZW50cykpXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzL\
              mFkZCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKiBBZGRzIGEgdmFsdWUgdG8gdGhlIG\
              RvY3VtZW50LiAqL1xuICAgIGFkZEluKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIGl\
              mIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKVxuICAgICAgICAgICAg\
              dGhpcy5jb250ZW50cy5hZGRJbihwYXRoLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qK\
              lxuICAgICAqIENyZWF0ZSBhIG5ldyBgQWxpYXNgIG5vZGUsIGVuc3VyaW5nIHRoYX\
              QgdGhlIHRhcmdldCBgbm9kZWAgaGFzIHRoZSByZXF1aXJlZCBhbmNob3IuXG4gICA\
              gICpcbiAgICAgKiBJZiBgbm9kZWAgYWxyZWFkeSBoYXMgYW4gYW5jaG9yLCBgbmFt\
              ZWAgaXMgaWdub3JlZC5cbiAgICAgKiBPdGhlcndpc2UsIHRoZSBgbm9kZS5hbmNob\
              3JgIHZhbHVlIHdpbGwgYmUgc2V0IHRvIGBuYW1lYCxcbiAgICAgKiBvciBpZiBhbi\
              BhbmNob3Igd2l0aCB0aGF0IG5hbWUgaXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSB\
              kb2N1bWVudCxcbiAgICAgKiBgbmFtZWAgd2lsbCBiZSB1c2VkIGFzIGEgcHJlZml4\
              IGZvciBhIG5ldyB1bmlxdWUgYW5jaG9yLlxuICAgICAqIElmIGBuYW1lYCBpcyB1b\
              mRlZmluZWQsIHRoZSBnZW5lcmF0ZWQgYW5jaG9yIHdpbGwgdXNlICdhJyBhcyBhIH\
              ByZWZpeC5cbiAgICAgKi9cbiAgICBjcmVhdGVBbGlhcyhub2RlLCBuYW1lKSB7XG4\
              gICAgICAgIGlmICghbm9kZS5hbmNob3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHBy\
              ZXYgPSBhbmNob3JOYW1lcyh0aGlzKTtcbiAgICAgICAgICAgIG5vZGUuYW5jaG9yI\
              D1cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQH\
              R5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICA\
              gICAgICAgICAgICAhbmFtZSB8fCBwcmV2LmhhcyhuYW1lKSA/IGZpbmROZXdBbmNo\
              b3IobmFtZSB8fCAnYScsIHByZXYpIDogbmFtZTtcbiAgICAgICAgfVxuICAgICAgI\
              CByZXR1cm4gbmV3IEFsaWFzKG5vZGUuYW5jaG9yKTtcbiAgICB9XG4gICAgY3JlYX\
              RlTm9kZSh2YWx1ZSwgcmVwbGFjZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IF9\
              yZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNl\
              ciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsdWUgPSByZXBsYWNlc\
              i5jYWxsKHsgJyc6IHZhbHVlIH0sICcnLCB2YWx1ZSk7XG4gICAgICAgICAgICBfcm\
              VwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh\
              BcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICAgICAgY29uc3Qga2V5\
              VG9TdHIgPSAodikgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHYgaW5zdGFuY\
              2VvZiBTdHJpbmcgfHwgdiBpbnN0YW5jZW9mIE51bWJlcjtcbiAgICAgICAgICAgIG\
              NvbnN0IGFzU3RyID0gcmVwbGFjZXIuZmlsdGVyKGtleVRvU3RyKS5tYXAoU3RyaW5\
              nKTtcbiAgICAgICAgICAgIGlmIChhc1N0ci5sZW5ndGggPiAwKVxuICAgICAgICAg\
              ICAgICAgIHJlcGxhY2VyID0gcmVwbGFjZXIuY29uY2F0KGFzU3RyKTtcbiAgICAgI\
              CAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgICB9XG4gICAgICAgIG\
              Vsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXBsYWNlcikge1xuICA\
              gICAgICAgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuICAgICAgICAgICAgcmVwbGFj\
              ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBhbGlhc\
              0R1cGxpY2F0ZU9iamVjdHMsIGFuY2hvclByZWZpeCwgZmxvdywga2VlcFVuZGVmaW\
              5lZCwgb25UYWdPYmosIHRhZyB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgY29\
              uc3QgeyBvbkFuY2hvciwgc2V0QW5jaG9ycywgc291cmNlT2JqZWN0cyB9ID0gY3Jl\
              YXRlTm9kZUFuY2hvcnModGhpcywgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlL\
              W5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbG\
              VzY2luZ1xuICAgICAgICBhbmNob3JQcmVmaXggfHwgJ2EnKTtcbiAgICAgICAgY29\
              uc3QgY3R4ID0ge1xuICAgICAgICAgICAgYWxpYXNEdXBsaWNhdGVPYmplY3RzOiBh\
              bGlhc0R1cGxpY2F0ZU9iamVjdHMgPz8gdHJ1ZSxcbiAgICAgICAgICAgIGtlZXBVb\
              mRlZmluZWQ6IGtlZXBVbmRlZmluZWQgPz8gZmFsc2UsXG4gICAgICAgICAgICBvbk\
              FuY2hvcixcbiAgICAgICAgICAgIG9uVGFnT2JqLFxuICAgICAgICAgICAgcmVwbGF\
              jZXI6IF9yZXBsYWNlcixcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEs\
              XG4gICAgICAgICAgICBzb3VyY2VPYmplY3RzXG4gICAgICAgIH07XG4gICAgICAgI\
              GNvbnN0IG5vZGUgPSBjcmVhdGVOb2RlKHZhbHVlLCB0YWcsIGN0eCk7XG4gICAgIC\
              AgIGlmIChmbG93ICYmIGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgIG5\
              vZGUuZmxvdyA9IHRydWU7XG4gICAgICAgIHNldEFuY2hvcnMoKTtcbiAgICAgICAg\
              cmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBrZ\
              XkgYW5kIGEgdmFsdWUgaW50byBhIGBQYWlyYCB1c2luZyB0aGUgY3VycmVudCBzY2\
              hlbWEsXG4gICAgICogcmVjdXJzaXZlbHkgd3JhcHBpbmcgYWxsIHZhbHVlcyBhcyB\
              gU2NhbGFyYCBvciBgQ29sbGVjdGlvbmAgbm9kZXMuXG4gICAgICovXG4gICAgY3Jl\
              YXRlUGFpcihrZXksIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc\
              3QgayA9IHRoaXMuY3JlYXRlTm9kZShrZXksIG51bGwsIG9wdGlvbnMpO1xuICAgIC\
              AgICBjb25zdCB2ID0gdGhpcy5jcmVhdGVOb2RlKHZhbHVlLCBudWxsLCBvcHRpb25\
              zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWlyKGssIHYpO1xuICAgIH1cbiAgICAv\
              KipcbiAgICAgKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgZG9jdW1lbnQuXG4gI\
              CAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcm\
              Vtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHJldHV\
              ybiBhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpID8gdGhpcy5jb250ZW50\
              cy5kZWxldGUoa2V5KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZ\
              W1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgZG9jdW1lbnQuXG4gICAgICogQHJldHVybn\
              MgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICA\
              gKi9cbiAgICBkZWxldGVJbihwYXRoKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0\
              aChwYXRoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudHMgPT0gbnVsb\
              ClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLy\
              BAdHMtZXhwZWN0LWVycm9yIFByZXN1bWVkIGltcG9zc2libGUgaWYgU3RyaWN0IGV\
              4dGVuZHMgZmFsc2VcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSBudWxsO1xu\
              ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0d\
              XJuIGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID\
              8gdGhpcy5jb250ZW50cy5kZWxldGVJbihwYXRoKVxuICAgICAgICAgICAgOiBmYWx\
              zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBrZXlg\
              LCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc\
              1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2\
              RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWA\
              gKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAg\
              Ki9cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIHJldHVybiBpc\
              0NvbGxlY3Rpb24odGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb2\
              50ZW50cy5nZXQoa2V5LCBrZWVwU2NhbGFyKVxuICAgICAgICAgICAgOiB1bmRlZml\
              uZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaXRlbSBhdCBgcGF0\
              aGAsIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZC4gQnkgZGVmYXVsdCB1bndyY\
              XBzXG4gICAgICogc2NhbGFyIHZhbHVlcyBmcm9tIHRoZWlyIHN1cnJvdW5kaW5nIG\
              5vZGU7IHRvIGRpc2FibGUgc2V0IGBrZWVwU2NhbGFyYCB0b1xuICAgICAqIGB0cnV\
              lYCAoY29sbGVjdGlvbnMgYXJlIGFsd2F5cyByZXR1cm5lZCBpbnRhY3QpLlxuICAg\
              ICAqL1xuICAgIGdldEluKHBhdGgsIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgaWYgK\
              GlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgcmV0dXJuICFrZWVwU2NhbG\
              FyICYmIGlzU2NhbGFyKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICAgICAgPyB\
              0aGlzLmNvbnRlbnRzLnZhbHVlXG4gICAgICAgICAgICAgICAgOiB0aGlzLmNvbnRl\
              bnRzO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpX\
              G4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuZ2V0SW4ocGF0aCwga2VlcFNjYW\
              xhcilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiA\
              gICAgKiBDaGVja3MgaWYgdGhlIGRvY3VtZW50IGluY2x1ZGVzIGEgdmFsdWUgd2l0\
              aCB0aGUga2V5IGBrZXlgLlxuICAgICAqL1xuICAgIGhhcyhrZXkpIHtcbiAgICAgI\
              CAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSA/IHRoaXMuY29udG\
              VudHMuaGFzKGtleSkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2h\
              lY2tzIGlmIHRoZSBkb2N1bWVudCBpbmNsdWRlcyBhIHZhbHVlIGF0IGBwYXRoYC5c\
              biAgICAgKi9cbiAgICBoYXNJbihwYXRoKSB7XG4gICAgICAgIGlmIChpc0VtcHR5U\
              GF0aChwYXRoKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzICE9PS\
              B1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb25\
              0ZW50cykgPyB0aGlzLmNvbnRlbnRzLmhhc0luKHBhdGgpIDogZmFsc2U7XG4gICAg\
              fVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGRvY3VtZW50L\
              iBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbG\
              VhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9\
              cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50\
              cyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlI\
              GNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuIC\
              AgICAgICAgICAgdGhpcy5jb250ZW50cyA9IGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGl\
              zLnNjaGVtYSwgW2tleV0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNl\
              IGlmIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKSB7XG4gICAgICAgI\
              CAgICB0aGlzLmNvbnRlbnRzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuIC\
              AgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBkb2N1bWV\
              udC4gRm9yIGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgICAqIGJv\
              b2xlYW4gdG8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG4gICAgI\
              CovXG4gICAgc2V0SW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRW1wdH\
              lQYXRoKHBhdGgpKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFd\
              lIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxu\
              ICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IHZhbHVlO1xuICAgICAgICB9XG4gI\
              CAgICAgIGVsc2UgaWYgKHRoaXMuY29udGVudHMgPT0gbnVsbCkge1xuICAgICAgIC\
              AgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF\
              0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgICAgIHRoaXMuY29udGVu\
              dHMgPSBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIEFycmF5LmZyb20oc\
              GF0aCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhc3Nlcn\
              RDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmN\
              vbnRlbnRzLnNldEluKHBhdGgsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAg\
              ICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIFlBTUwgdmVyc2lvbiBhbmQgc2NoZW1hI\
              HVzZWQgYnkgdGhlIGRvY3VtZW50LlxuICAgICAqIEEgYG51bGxgIHZlcnNpb24gZG\
              lzYWJsZXMgc3VwcG9ydCBmb3IgZGlyZWN0aXZlcywgZXhwbGljaXQgdGFncywgYW5\
              jaG9ycywgYW5kIGFsaWFzZXMuXG4gICAgICogSXQgYWxzbyByZXF1aXJlcyB0aGUg\
              YHNjaGVtYWAgb3B0aW9uIHRvIGJlIGdpdmVuIGFzIGEgYFNjaGVtYWAgaW5zdGFuY\
              2UgdmFsdWUuXG4gICAgICpcbiAgICAgKiBPdmVycmlkZXMgYWxsIHByZXZpb3VzbH\
              kgc2V0IHNjaGVtYSBvcHRpb25zLlxuICAgICAqL1xuICAgIHNldFNjaGVtYSh2ZXJ\
              zaW9uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ZXJzaW9u\
              ID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHZlcnNpb24gPSBTdHJpbmcodmVyc\
              2lvbik7XG4gICAgICAgIGxldCBvcHQ7XG4gICAgICAgIHN3aXRjaCAodmVyc2lvbi\
              kge1xuICAgICAgICAgICAgY2FzZSAnMS4xJzpcbiAgICAgICAgICAgICAgICBpZiA\
              odGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVj\
              dGl2ZXMueWFtbC52ZXJzaW9uID0gJzEuMSc7XG4gICAgICAgICAgICAgICAgZWxzZ\
              VxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZW\
              N0aXZlcyh7IHZlcnNpb246ICcxLjEnIH0pO1xuICAgICAgICAgICAgICAgIG9wdCA\
              9IHsgbWVyZ2U6IHRydWUsIHJlc29sdmVLbm93blRhZ3M6IGZhbHNlLCBzY2hlbWE6\
              ICd5YW1sLTEuMScgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgI\
              CAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgIC\
              AgICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgICA\
              gICB0aGlzLmRpcmVjdGl2ZXMueWFtbC52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAg\
              ICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0a\
              XZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbiB9KTtcbiAgICAgICAgICAgIC\
              AgICBvcHQgPSB7IG1lcmdlOiBmYWxzZSwgcmVzb2x2ZUtub3duVGFnczogdHJ1ZSw\
              gc2NoZW1hOiAnY29yZScgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAg\
              ICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY\
              3RpdmVzKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kaXJlY3Rpdm\
              VzO1xuICAgICAgICAgICAgICAgIG9wdCA9IG51bGw7XG4gICAgICAgICAgICAgICA\
              gYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAg\
              Y29uc3Qgc3YgPSBKU09OLnN0cmluZ2lmeSh2ZXJzaW9uKTtcbiAgICAgICAgICAgI\
              CAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICcxLjEnLCAnMS4yJyBvciBudW\
              xsIGFzIGZpcnN0IGFyZ3VtZW50LCBidXQgZm91bmQ6ICR7c3Z9YCk7XG4gICAgICA\
              gICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90IHVzaW5nIGBpbnN0YW5j\
              ZW9mIFNjaGVtYWAgdG8gYWxsb3cgZm9yIGR1Y2sgdHlwaW5nXG4gICAgICAgIGlmI\
              ChvcHRpb25zLnNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdClcbiAgICAgICAgICAgIH\
              RoaXMuc2NoZW1hID0gb3B0aW9ucy5zY2hlbWE7XG4gICAgICAgIGVsc2UgaWYgKG9\
              wdClcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gbmV3IFNjaGVtYShPYmplY3Qu\
              YXNzaWduKG9wdCwgb3B0aW9ucykpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgI\
              CB0aHJvdyBuZXcgRXJyb3IoYFdpdGggYSBudWxsIFlBTUwgdmVyc2lvbiwgdGhlIH\
              sgc2NoZW1hOiBTY2hlbWEgfSBvcHRpb24gaXMgcmVxdWlyZWRgKTtcbiAgICB9XG4\
              gICAgLy8ganNvbiAmIGpzb25BcmcgYXJlIG9ubHkgdXNlZCBmcm9tIHRvSlNPTigp\
              XG4gICAgdG9KUyh7IGpzb24sIGpzb25BcmcsIG1hcEFzTWFwLCBtYXhBbGlhc0Nvd\
              W50LCBvbkFuY2hvciwgcmV2aXZlciB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgY3\
              R4ID0ge1xuICAgICAgICAgICAgYW5jaG9yczogbmV3IE1hcCgpLFxuICAgICAgICA\
              gICAgZG9jOiB0aGlzLFxuICAgICAgICAgICAga2VlcDogIWpzb24sXG4gICAgICAg\
              ICAgICBtYXBBc01hcDogbWFwQXNNYXAgPT09IHRydWUsXG4gICAgICAgICAgICBtY\
              XBLZXlXYXJuZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbWF4QWxpYXNDb3VudDogdH\
              lwZW9mIG1heEFsaWFzQ291bnQgPT09ICdudW1iZXInID8gbWF4QWxpYXNDb3VudCA\
              6IDEwMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSB0b0pTKHRoaXMu\
              Y29udGVudHMsIGpzb25BcmcgPz8gJycsIGN0eCk7XG4gICAgICAgIGlmICh0eXBlb\
              2Ygb25BbmNob3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBmb3IgKGNvbn\
              N0IHsgY291bnQsIHJlcyB9IG9mIGN0eC5hbmNob3JzLnZhbHVlcygpKVxuICAgICA\
              gICAgICAgICAgIG9uQW5jaG9yKHJlcywgY291bnQpO1xuICAgICAgICByZXR1cm4g\
              dHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gYXBwb\
              HlSZXZpdmVyKHJldml2ZXIsIHsgJyc6IHJlcyB9LCAnJywgcmVzKVxuICAgICAgIC\
              AgICAgOiByZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgSlNPTiByZXByZXN\
              lbnRhdGlvbiBvZiB0aGUgZG9jdW1lbnQgYGNvbnRlbnRzYC5cbiAgICAgKlxuICAg\
              ICAqIEBwYXJhbSBqc29uQXJnIFVzZWQgYnkgYEpTT04uc3RyaW5naWZ5YCB0byBpb\
              mRpY2F0ZSB0aGUgYXJyYXkgaW5kZXggb3JcbiAgICAgKiAgIHByb3BlcnR5IG5hbW\
              UuXG4gICAgICovXG4gICAgdG9KU09OKGpzb25BcmcsIG9uQW5jaG9yKSB7XG4gICA\
              gICAgIHJldHVybiB0aGlzLnRvSlMoeyBqc29uOiB0cnVlLCBqc29uQXJnLCBtYXBB\
              c01hcDogZmFsc2UsIG9uQW5jaG9yIH0pO1xuICAgIH1cbiAgICAvKiogQSBZQU1MI\
              HJlcHJlc2VudGF0aW9uIG9mIHRoZSBkb2N1bWVudC4gKi9cbiAgICB0b1N0cmluZy\
              hvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JzLmxlbmd0aCA\
              +IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvY3VtZW50IHdpdGgg\
              ZXJyb3JzIGNhbm5vdCBiZSBzdHJpbmdpZmllZCcpO1xuICAgICAgICBpZiAoJ2luZ\
              GVudCcgaW4gb3B0aW9ucyAmJlxuICAgICAgICAgICAgKCFOdW1iZXIuaXNJbnRlZ2\
              VyKG9wdGlvbnMuaW5kZW50KSB8fCBOdW1iZXIob3B0aW9ucy5pbmRlbnQpIDw9IDA\
              pKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gSlNPTi5zdHJpbmdpZnkob3B0aW9u\
              cy5pbmRlbnQpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImluZGVud\
              FwiIG9wdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgbm90ICR7c31gKT\
              tcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5RG9jdW1lbnQodGh\
              pcywgb3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0Q29sbGVjdGlv\
              bihjb250ZW50cykge1xuICAgIGlmIChpc0NvbGxlY3Rpb24oY29udGVudHMpKVxuI\
              CAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdG\
              VkIGEgWUFNTCBjb2xsZWN0aW9uIGFzIGRvY3VtZW50IGNvbnRlbnRzJyk7XG59XG5\
              cbmV4cG9ydCB7IERvY3VtZW50IH07XG4iLCJjbGFzcyBZQU1MRXJyb3IgZXh0ZW5k\
              cyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgcG9zLCBjb2RlLCBtZXNzY\
              WdlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbW\
              U7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubWVzc2F\
              nZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgIH1cbn1c\
              bmNsYXNzIFlBTUxQYXJzZUVycm9yIGV4dGVuZHMgWUFNTEVycm9yIHtcbiAgICBjb\
              25zdHJ1Y3Rvcihwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ1\
              lBTUxQYXJzZUVycm9yJywgcG9zLCBjb2RlLCBtZXNzYWdlKTtcbiAgICB9XG59XG5\
              jbGFzcyBZQU1MV2FybmluZyBleHRlbmRzIFlBTUxFcnJvciB7XG4gICAgY29uc3Ry\
              dWN0b3IocG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCdZQU1MV\
              2FybmluZycsIHBvcywgY29kZSwgbWVzc2FnZSk7XG4gICAgfVxufVxuY29uc3QgcH\
              JldHRpZnlFcnJvciA9IChzcmMsIGxjKSA9PiAoZXJyb3IpID0+IHtcbiAgICBpZiA\
              oZXJyb3IucG9zWzBdID09PSAtMSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGVycm9y\
              LmxpbmVQb3MgPSBlcnJvci5wb3MubWFwKHBvcyA9PiBsYy5saW5lUG9zKHBvcykpO\
              1xuICAgIGNvbnN0IHsgbGluZSwgY29sIH0gPSBlcnJvci5saW5lUG9zWzBdO1xuIC\
              AgIGVycm9yLm1lc3NhZ2UgKz0gYCBhdCBsaW5lICR7bGluZX0sIGNvbHVtbiAke2N\
              vbH1gO1xuICAgIGxldCBjaSA9IGNvbCAtIDE7XG4gICAgbGV0IGxpbmVTdHIgPSBz\
              cmNcbiAgICAgICAgLnN1YnN0cmluZyhsYy5saW5lU3RhcnRzW2xpbmUgLSAxXSwgb\
              GMubGluZVN0YXJ0c1tsaW5lXSlcbiAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHJdKy\
              QvLCAnJyk7XG4gICAgLy8gVHJpbSB0byBtYXggODAgY2hhcnMsIGtlZXBpbmcgY29\
              sIHBvc2l0aW9uIG5lYXIgdGhlIG1pZGRsZVxuICAgIGlmIChjaSA+PSA2MCAmJiBs\
              aW5lU3RyLmxlbmd0aCA+IDgwKSB7XG4gICAgICAgIGNvbnN0IHRyaW1TdGFydCA9I\
              E1hdGgubWluKGNpIC0gMzksIGxpbmVTdHIubGVuZ3RoIC0gNzkpO1xuICAgICAgIC\
              BsaW5lU3RyID0gJ+KApicgKyBsaW5lU3RyLnN1YnN0cmluZyh0cmltU3RhcnQpO1x\
              uICAgICAgICBjaSAtPSB0cmltU3RhcnQgLSAxO1xuICAgIH1cbiAgICBpZiAobGlu\
              ZVN0ci5sZW5ndGggPiA4MClcbiAgICAgICAgbGluZVN0ciA9IGxpbmVTdHIuc3Vic\
              3RyaW5nKDAsIDc5KSArICfigKYnO1xuICAgIC8vIEluY2x1ZGUgcHJldmlvdXMgbG\
              luZSBpbiBjb250ZXh0IGlmIHBvaW50aW5nIGF0IGxpbmUgc3RhcnRcbiAgICBpZiA\
              obGluZSA+IDEgJiYgL14gKiQvLnRlc3QobGluZVN0ci5zdWJzdHJpbmcoMCwgY2kp\
              KSkge1xuICAgICAgICAvLyBSZWdleHAgd29uJ3QgbWF0Y2ggaWYgc3RhcnQgaXMgd\
              HJpbW1lZFxuICAgICAgICBsZXQgcHJldiA9IHNyYy5zdWJzdHJpbmcobGMubGluZV\
              N0YXJ0c1tsaW5lIC0gMl0sIGxjLmxpbmVTdGFydHNbbGluZSAtIDFdKTtcbiAgICA\
              gICAgaWYgKHByZXYubGVuZ3RoID4gODApXG4gICAgICAgICAgICBwcmV2ID0gcHJl\
              di5zdWJzdHJpbmcoMCwgNzkpICsgJ+KAplxcbic7XG4gICAgICAgIGxpbmVTdHIgP\
              SBwcmV2ICsgbGluZVN0cjtcbiAgICB9XG4gICAgaWYgKC9bXiBdLy50ZXN0KGxpbm\
              VTdHIpKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICAgIGNvbnN0IGV\
              uZCA9IGVycm9yLmxpbmVQb3NbMV07XG4gICAgICAgIGlmIChlbmQgJiYgZW5kLmxp\
              bmUgPT09IGxpbmUgJiYgZW5kLmNvbCA+IGNvbCkge1xuICAgICAgICAgICAgY291b\
              nQgPSBNYXRoLm1heCgxLCBNYXRoLm1pbihlbmQuY29sIC0gY29sLCA4MCAtIGNpKS\
              k7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9pbnRlciA9ICcgJy5yZXBlYXQ\
              oY2kpICsgJ14nLnJlcGVhdChjb3VudCk7XG4gICAgICAgIGVycm9yLm1lc3NhZ2Ug\
              Kz0gYDpcXG5cXG4ke2xpbmVTdHJ9XFxuJHtwb2ludGVyfVxcbmA7XG4gICAgfVxuf\
              TtcblxuZXhwb3J0IHsgWUFNTEVycm9yLCBZQU1MUGFyc2VFcnJvciwgWUFNTFdhcm\
              5pbmcsIHByZXR0aWZ5RXJyb3IgfTtcbiIsImZ1bmN0aW9uIHJlc29sdmVQcm9wcyh\
              0b2tlbnMsIHsgZmxvdywgaW5kaWNhdG9yLCBuZXh0LCBvZmZzZXQsIG9uRXJyb3Is\
              IHBhcmVudEluZGVudCwgc3RhcnRPbk5ld2xpbmUgfSkge1xuICAgIGxldCBzcGFjZ\
              UJlZm9yZSA9IGZhbHNlO1xuICAgIGxldCBhdE5ld2xpbmUgPSBzdGFydE9uTmV3bG\
              luZTtcbiAgICBsZXQgaGFzU3BhY2UgPSBzdGFydE9uTmV3bGluZTtcbiAgICBsZXQ\
              gY29tbWVudCA9ICcnO1xuICAgIGxldCBjb21tZW50U2VwID0gJyc7XG4gICAgbGV0\
              IGhhc05ld2xpbmUgPSBmYWxzZTtcbiAgICBsZXQgaGFzTmV3bGluZUFmdGVyUHJvc\
              CA9IGZhbHNlO1xuICAgIGxldCByZXFTcGFjZSA9IGZhbHNlO1xuICAgIGxldCB0YW\
              IgPSBudWxsO1xuICAgIGxldCBhbmNob3IgPSBudWxsO1xuICAgIGxldCB0YWcgPSB\
              udWxsO1xuICAgIGxldCBjb21tYSA9IG51bGw7XG4gICAgbGV0IGZvdW5kID0gbnVs\
              bDtcbiAgICBsZXQgc3RhcnQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgdG9rZW4gb\
              2YgdG9rZW5zKSB7XG4gICAgICAgIGlmIChyZXFTcGFjZSkge1xuICAgICAgICAgIC\
              AgaWYgKHRva2VuLnR5cGUgIT09ICdzcGFjZScgJiZcbiAgICAgICAgICAgICAgICB\
              0b2tlbi50eXBlICE9PSAnbmV3bGluZScgJiZcbiAgICAgICAgICAgICAgICB0b2tl\
              bi50eXBlICE9PSAnY29tbWEnKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZ\
              W4ub2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ1RhZ3MgYW5kIGFuY2hvcnMgbXVzdC\
              BiZSBzZXBhcmF0ZWQgZnJvbSB0aGUgbmV4dCB0b2tlbiBieSB3aGl0ZSBzcGFjZSc\
              pO1xuICAgICAgICAgICAgcmVxU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAg\
              ICAgICBpZiAodGFiKSB7XG4gICAgICAgICAgICBpZiAoYXROZXdsaW5lICYmIHRva\
              2VuLnR5cGUgIT09ICdjb21tZW50JyAmJiB0b2tlbi50eXBlICE9PSAnbmV3bGluZS\
              cpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRhYiwgJ1RBQl9BU19JTkRFTlQ\
              nLCAnVGFicyBhcmUgbm90IGFsbG93ZWQgYXMgaW5kZW50YXRpb24nKTtcbiAgICAg\
              ICAgICAgIH1cbiAgICAgICAgICAgIHRhYiA9IG51bGw7XG4gICAgICAgIH1cbiAgI\
              CAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcG\
              FjZSc6XG4gICAgICAgICAgICAgICAgLy8gQXQgdGhlIGRvYyBsZXZlbCwgdGFicyB\
              hdCBsaW5lIHN0YXJ0IG1heSBiZSBwYXJzZWRcbiAgICAgICAgICAgICAgICAvLyBh\
              cyBsZWFkaW5nIHdoaXRlIHNwYWNlIHJhdGhlciB0aGFuIGluZGVudGF0aW9uLlxuI\
              CAgICAgICAgICAgICAgIC8vIEluIGEgZmxvdyBjb2xsZWN0aW9uLCBvbmx5IHRoZS\
              BwYXJzZXIgaGFuZGxlcyBpbmRlbnQuXG4gICAgICAgICAgICAgICAgaWYgKCFmbG9\
              3ICYmXG4gICAgICAgICAgICAgICAgICAgIChpbmRpY2F0b3IgIT09ICdkb2Mtc3Rh\
              cnQnIHx8IG5leHQ/LnR5cGUgIT09ICdmbG93LWNvbGxlY3Rpb24nKSAmJlxuICAgI\
              CAgICAgICAgICAgICAgICB0b2tlbi5zb3VyY2UuaW5jbHVkZXMoJ1xcdCcpKSB7XG\
              4gICAgICAgICAgICAgICAgICAgIHRhYiA9IHRva2VuO1xuICAgICAgICAgICAgICA\
              gIH1cbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAg\
              ICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50Jzoge1xuICAgI\
              CAgICAgICAgICAgIGlmICghaGFzU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIG\
              9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCAnQ29tbWVudHMgbXVzdCBiZSB\
              zZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFj\
              dGVycycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gdG9rZW4uc291cmNlL\
              nN1YnN0cmluZygxKSB8fCAnICc7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21tZW\
              50KVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY2I7XG4gICAgICAgICA\
              gICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IGNvbW1l\
              bnRTZXAgKyBjYjtcbiAgICAgICAgICAgICAgICBjb21tZW50U2VwID0gJyc7XG4gI\
              CAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgIC\
              AgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICduZXdsaW5\
              lJzpcbiAgICAgICAgICAgICAgICBpZiAoYXROZXdsaW5lKSB7XG4gICAgICAgICAg\
              ICAgICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgY\
              29tbWVudCArPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2\
              VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmVmb3JlID0gdHJ1ZTtcbiA\
              gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAg\
              ICAgICAgICAgICBjb21tZW50U2VwICs9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgI\
              CAgICAgICBhdE5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhhc05ld2\
              xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChhbmNob3IgfHwgdGFnKVx\
              uICAgICAgICAgICAgICAgICAgICBoYXNOZXdsaW5lQWZ0ZXJQcm9wID0gdHJ1ZTtc\
              biAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgI\
              CAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgIC\
              AgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9\
              rZW4sICdNVUxUSVBMRV9BTkNIT1JTJywgJ0Egbm9kZSBjYW4gaGF2ZSBhdCBtb3N0\
              IG9uZSBhbmNob3InKTtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4uc291cmNlL\
              mVuZHNXaXRoKCc6JykpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW\
              4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCAtIDEsICdCQURfQUxJQVMnLCA\
              nQW5jaG9yIGVuZGluZyBpbiA6IGlzIGFtYmlndW91cycsIHRydWUpO1xuICAgICAg\
              ICAgICAgICAgIGFuY2hvciA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGlmIChzd\
              GFydCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0b2tlbi\
              5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICA\
              gICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBy\
              ZXFTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgI\
              CAgICBjYXNlICd0YWcnOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZylcbiAgIC\
              AgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01VTFRJUExFX1RBR1MnLCA\
              nQSBub2RlIGNhbiBoYXZlIGF0IG1vc3Qgb25lIHRhZycpO1xuICAgICAgICAgICAg\
              ICAgIHRhZyA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gb\
              nVsbClcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0b2tlbi5vZmZzZXQ7XG\
              4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICA\
              gICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXFTcGFjZSA9\
              IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gI\
              CAgICAgICAgICBjYXNlIGluZGljYXRvcjpcbiAgICAgICAgICAgICAgICAvLyBDb3\
              VsZCBoZXJlIGhhbmRsZSBwcmVjZWRpbmcgY29tbWVudHMgZGlmZmVyZW50bHlcbiA\
              gICAgICAgICAgICAgICBpZiAoYW5jaG9yIHx8IHRhZylcbiAgICAgICAgICAgICAg\
              ICAgICAgb25FcnJvcih0b2tlbiwgJ0JBRF9QUk9QX09SREVSJywgYEFuY2hvcnMgY\
              W5kIHRhZ3MgbXVzdCBiZSBhZnRlciB0aGUgJHt0b2tlbi5zb3VyY2V9IGluZGljYX\
              RvcmApO1xuICAgICAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICA\
              gICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBl\
              Y3RlZCAke3Rva2VuLnNvdXJjZX0gaW4gJHtmbG93ID8/ICdjb2xsZWN0aW9uJ31gK\
              TtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRva2VuO1xuICAgICAgICAgICAgIC\
              AgIGF0TmV3bGluZSA9XG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvciA9PT0\
              gJ3NlcS1pdGVtLWluZCcgfHwgaW5kaWNhdG9yID09PSAnZXhwbGljaXQta2V5LWlu\
              ZCc7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgI\
              CAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgIC\
              AgICAgICAgICBpZiAoZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29\
              tbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5F\
              WFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICwgaW4gJHtmbG93fWApO1xuICAgI\
              CAgICAgICAgICAgICAgICBjb21tYSA9IHRva2VuO1xuICAgICAgICAgICAgICAgIC\
              AgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzU3B\
              hY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAg\
              ICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSBmYWxsdGhyb3VnaFxuICAgI\
              CAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLC\
              AnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dG9rZW4udHlwZX0gdG9\
              rZW5gKTtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAg\
              ICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuI\
              CAgIGNvbnN0IGxhc3QgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgIG\
              NvbnN0IGVuZCA9IGxhc3QgPyBsYXN0Lm9mZnNldCArIGxhc3Quc291cmNlLmxlbmd\
              0aCA6IG9mZnNldDtcbiAgICBpZiAocmVxU3BhY2UgJiZcbiAgICAgICAgbmV4dCAm\
              JlxuICAgICAgICBuZXh0LnR5cGUgIT09ICdzcGFjZScgJiZcbiAgICAgICAgbmV4d\
              C50eXBlICE9PSAnbmV3bGluZScgJiZcbiAgICAgICAgbmV4dC50eXBlICE9PSAnY2\
              9tbWEnICYmXG4gICAgICAgIChuZXh0LnR5cGUgIT09ICdzY2FsYXInIHx8IG5leHQ\
              uc291cmNlICE9PSAnJykpIHtcbiAgICAgICAgb25FcnJvcihuZXh0Lm9mZnNldCwg\
              J01JU1NJTkdfQ0hBUicsICdUYWdzIGFuZCBhbmNob3JzIG11c3QgYmUgc2VwYXJhd\
              GVkIGZyb20gdGhlIG5leHQgdG9rZW4gYnkgd2hpdGUgc3BhY2UnKTtcbiAgICB9XG\
              4gICAgaWYgKHRhYiAmJlxuICAgICAgICAoKGF0TmV3bGluZSAmJiB0YWIuaW5kZW5\
              0IDw9IHBhcmVudEluZGVudCkgfHxcbiAgICAgICAgICAgIG5leHQ/LnR5cGUgPT09\
              ICdibG9jay1tYXAnIHx8XG4gICAgICAgICAgICBuZXh0Py50eXBlID09PSAnYmxvY\
              2stc2VxJykpXG4gICAgICAgIG9uRXJyb3IodGFiLCAnVEFCX0FTX0lOREVOVCcsIC\
              dUYWJzIGFyZSBub3QgYWxsb3dlZCBhcyBpbmRlbnRhdGlvbicpO1xuICAgIHJldHV\
              ybiB7XG4gICAgICAgIGNvbW1hLFxuICAgICAgICBmb3VuZCxcbiAgICAgICAgc3Bh\
              Y2VCZWZvcmUsXG4gICAgICAgIGNvbW1lbnQsXG4gICAgICAgIGhhc05ld2xpbmUsX\
              G4gICAgICAgIGhhc05ld2xpbmVBZnRlclByb3AsXG4gICAgICAgIGFuY2hvcixcbi\
              AgICAgICAgdGFnLFxuICAgICAgICBlbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydCA\
              /PyBlbmRcbiAgICB9O1xufVxuXG5leHBvcnQgeyByZXNvbHZlUHJvcHMgfTtcbiIs\
              ImZ1bmN0aW9uIGNvbnRhaW5zTmV3bGluZShrZXkpIHtcbiAgICBpZiAoIWtleSlcb\
              iAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgc3dpdGNoIChrZXkudHlwZSkge1xuIC\
              AgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICA\
              gICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAn\
              c2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgaWYgKGtleS5zb3VyY\
              2UuaW5jbHVkZXMoJ1xcbicpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1\
              xuICAgICAgICAgICAgaWYgKGtleS5lbmQpXG4gICAgICAgICAgICAgICAgZm9yICh\
              jb25zdCBzdCBvZiBrZXkuZW5kKVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Qu\
              dHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0d\
              XJuIHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2\
              UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0IG9\
              mIGtleS5pdGVtcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2Yg\
              aXQuc3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnb\
              mV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi\
              AgICAgICAgICAgICAgICBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICB\
              mb3IgKGNvbnN0IHN0IG9mIGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAg\
              IGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgI\
              CAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW\
              5zTmV3bGluZShpdC5rZXkpIHx8IGNvbnRhaW5zTmV3bGluZShpdC52YWx1ZSkpXG4\
              gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxu\
              ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgI\
              CAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBjb250YW\
              luc05ld2xpbmUgfTtcbiIsImltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZyb20\
              gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcblxuZnVuY3Rpb24gZmxvd0lu\
              ZGVudENoZWNrKGluZGVudCwgZmMsIG9uRXJyb3IpIHtcbiAgICBpZiAoZmM/LnR5c\
              GUgPT09ICdmbG93LWNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IG\
              ZjLmVuZFswXTtcbiAgICAgICAgaWYgKGVuZC5pbmRlbnQgPT09IGluZGVudCAmJlx\
              uICAgICAgICAgICAgKGVuZC5zb3VyY2UgPT09ICddJyB8fCBlbmQuc291cmNlID09\
              PSAnfScpICYmXG4gICAgICAgICAgICBjb250YWluc05ld2xpbmUoZmMpKSB7XG4gI\
              CAgICAgICAgICBjb25zdCBtc2cgPSAnRmxvdyBlbmQgaW5kaWNhdG9yIHNob3VsZC\
              BiZSBtb3JlIGluZGVudGVkIHRoYW4gcGFyZW50JztcbiAgICAgICAgICAgIG9uRXJ\
              yb3IoZW5kLCAnQkFEX0lOREVOVCcsIG1zZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAg\
              ICB9XG59XG5cbmV4cG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9O1xuIiwiaW1wb3J0I\
              HsgaXNTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5cbmZ1bm\
              N0aW9uIG1hcEluY2x1ZGVzKGN0eCwgaXRlbXMsIHNlYXJjaCkge1xuICAgIGNvbnN\
              0IHsgdW5pcXVlS2V5cyB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgaWYgKHVuaXF1ZUtl\
              eXMgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qga\
              XNFcXVhbCA9IHR5cGVvZiB1bmlxdWVLZXlzID09PSAnZnVuY3Rpb24nXG4gICAgIC\
              AgID8gdW5pcXVlS2V5c1xuICAgICAgICA6IChhLCBiKSA9PiBhID09PSBiIHx8XG4\
              gICAgICAgICAgICAoaXNTY2FsYXIoYSkgJiZcbiAgICAgICAgICAgICAgICBpc1Nj\
              YWxhcihiKSAmJlxuICAgICAgICAgICAgICAgIGEudmFsdWUgPT09IGIudmFsdWUgJ\
              iZcbiAgICAgICAgICAgICAgICAhKGEudmFsdWUgPT09ICc8PCcgJiYgY3R4LnNjaG\
              VtYS5tZXJnZSkpO1xuICAgIHJldHVybiBpdGVtcy5zb21lKHBhaXIgPT4gaXNFcXV\
              hbChwYWlyLmtleSwgc2VhcmNoKSk7XG59XG5cbmV4cG9ydCB7IG1hcEluY2x1ZGVz\
              IH07XG4iLCJpbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7X\
              G5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG\
              5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanM\
              nO1xuaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRh\
              aW5zLW5ld2xpbmUuanMnO1xuaW1wb3J0IHsgZmxvd0luZGVudENoZWNrIH0gZnJvb\
              SAnLi91dGlsLWZsb3ctaW5kZW50LWNoZWNrLmpzJztcbmltcG9ydCB7IG1hcEluY2\
              x1ZGVzIH0gZnJvbSAnLi91dGlsLW1hcC1pbmNsdWRlcy5qcyc7XG5cbmNvbnN0IHN\
              0YXJ0Q29sTXNnID0gJ0FsbCBtYXBwaW5nIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhl\
              IHNhbWUgY29sdW1uJztcbmZ1bmN0aW9uIHJlc29sdmVCbG9ja01hcCh7IGNvbXBvc\
              2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgYm0sIG9uRXJyb3IsIHRhZy\
              kge1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9IHRhZz8ubm9kZUNsYXNzID8/IFlBTUx\
              NYXA7XG4gICAgY29uc3QgbWFwID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtc\
              biAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO\
              1xuICAgIGxldCBvZmZzZXQgPSBibS5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbm\
              QgPSBudWxsO1xuICAgIGZvciAoY29uc3QgY29sbEl0ZW0gb2YgYm0uaXRlbXMpIHt\
              cbiAgICAgICAgY29uc3QgeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0gPSBjb2xs\
              SXRlbTtcbiAgICAgICAgLy8ga2V5IHByb3BlcnRpZXNcbiAgICAgICAgY29uc3Qga\
              2V5UHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgICAgIGluZG\
              ljYXRvcjogJ2V4cGxpY2l0LWtleS1pbmQnLFxuICAgICAgICAgICAgbmV4dDoga2V\
              5ID8/IHNlcD8uWzBdLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAg\
              b25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYm0uaW5kZW50LFxuI\
              CAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gIC\
              AgICAgIGNvbnN0IGltcGxpY2l0S2V5ID0gIWtleVByb3BzLmZvdW5kO1xuICAgICA\
              gICBpZiAoaW1wbGljaXRLZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAg\
              ICAgICAgICAgICAgICBpZiAoa2V5LnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgI\
              CAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JMT0NLX0FTX0lNUExJQ0\
              lUX0tFWScsICdBIGJsb2NrIHNlcXVlbmNlIG1heSBub3QgYmUgdXNlZCBhcyBhbiB\
              pbXBsaWNpdCBtYXAga2V5Jyk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2lu\
              ZGVudCcgaW4ga2V5ICYmIGtleS5pbmRlbnQgIT09IGJtLmluZGVudClcbiAgICAgI\
              CAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfSU5ERU5UJywgc3Rhcn\
              RDb2xNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFrZXlQcm9\
              wcy5hbmNob3IgJiYgIWtleVByb3BzLnRhZyAmJiAhc2VwKSB7XG4gICAgICAgICAg\
              ICAgICAgY29tbWVudEVuZCA9IGtleVByb3BzLmVuZDtcbiAgICAgICAgICAgICAgI\
              CBpZiAoa2V5UHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZi\
              AobWFwLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuY29tbWV\
              udCArPSAnXFxuJyArIGtleVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAg\
              ICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5jb21tZW50ID0ga\
              2V5UHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgIC\
              AgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V\
              5UHJvcHMuaGFzTmV3bGluZUFmdGVyUHJvcCB8fCBjb250YWluc05ld2xpbmUoa2V5\
              KSkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5ID8/IHN0YXJ0W3N0YXJ0L\
              mxlbmd0aCAtIDFdLCAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdC\
              BrZXlzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICAgICA\
              gfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleVByb3BzLmZvdW5kPy5p\
              bmRlbnQgIT09IGJtLmluZGVudCkge1xuICAgICAgICAgICAgb25FcnJvcihvZmZzZ\
              XQsICdCQURfSU5ERU5UJywgc3RhcnRDb2xNc2cpO1xuICAgICAgICB9XG4gICAgIC\
              AgIC8vIGtleSB2YWx1ZVxuICAgICAgICBjb25zdCBrZXlTdGFydCA9IGtleVByb3B\
              zLmVuZDtcbiAgICAgICAgY29uc3Qga2V5Tm9kZSA9IGtleVxuICAgICAgICAgICAg\
              PyBjb21wb3NlTm9kZShjdHgsIGtleSwga2V5UHJvcHMsIG9uRXJyb3IpXG4gICAgI\
              CAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBrZXlTdGFydCwgc3RhcnQsIG\
              51bGwsIGtleVByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGN0eC5zY2hlbWE\
              uY29tcGF0KVxuICAgICAgICAgICAgZmxvd0luZGVudENoZWNrKGJtLmluZGVudCwg\
              a2V5LCBvbkVycm9yKTtcbiAgICAgICAgaWYgKG1hcEluY2x1ZGVzKGN0eCwgbWFwL\
              ml0ZW1zLCBrZXlOb2RlKSlcbiAgICAgICAgICAgIG9uRXJyb3Ioa2V5U3RhcnQsIC\
              dEVVBMSUNBVEVfS0VZJywgJ01hcCBrZXlzIG11c3QgYmUgdW5pcXVlJyk7XG4gICA\
              gICAgIC8vIHZhbHVlIHByb3BlcnRpZXNcbiAgICAgICAgY29uc3QgdmFsdWVQcm9w\
              cyA9IHJlc29sdmVQcm9wcyhzZXAgPz8gW10sIHtcbiAgICAgICAgICAgIGluZGljY\
              XRvcjogJ21hcC12YWx1ZS1pbmQnLFxuICAgICAgICAgICAgbmV4dDogdmFsdWUsXG\
              4gICAgICAgICAgICBvZmZzZXQ6IGtleU5vZGUucmFuZ2VbMl0sXG4gICAgICAgICA\
              gICBvbkVycm9yLFxuICAgICAgICAgICAgcGFyZW50SW5kZW50OiBibS5pbmRlbnQs\
              XG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogIWtleSB8fCBrZXkudHlwZSA9P\
              T0gJ2Jsb2NrLXNjYWxhcidcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZnNldCA9IH\
              ZhbHVlUHJvcHMuZW5kO1xuICAgICAgICBpZiAodmFsdWVQcm9wcy5mb3VuZCkge1x\
              uICAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAg\
              aWYgKHZhbHVlPy50eXBlID09PSAnYmxvY2stbWFwJyAmJiAhdmFsdWVQcm9wcy5oY\
              XNOZXdsaW5lKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0\
              JMT0NLX0FTX0lNUExJQ0lUX0tFWScsICdOZXN0ZWQgbWFwcGluZ3MgYXJlIG5vdCB\
              hbGxvd2VkIGluIGNvbXBhY3QgbWFwcGluZ3MnKTtcbiAgICAgICAgICAgICAgICBp\
              ZiAoY3R4Lm9wdGlvbnMuc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgICAgIGtle\
              VByb3BzLnN0YXJ0IDwgdmFsdWVQcm9wcy5mb3VuZC5vZmZzZXQgLSAxMDI0KVxuIC\
              AgICAgICAgICAgICAgICAgICBvbkVycm9yKGtleU5vZGUucmFuZ2UsICdLRVlfT1Z\
              FUl8xMDI0X0NIQVJTJywgJ1RoZSA6IGluZGljYXRvciBtdXN0IGJlIGF0IG1vc3Qg\
              MTAyNCBjaGFycyBhZnRlciB0aGUgc3RhcnQgb2YgYW4gaW1wbGljaXQgYmxvY2sgb\
              WFwcGluZyBrZXknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZhbH\
              VlIHZhbHVlXG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICA\
              gICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgdmFsdWVQcm9w\
              cywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY\
              3R4LCBvZmZzZXQsIHNlcCwgbnVsbCwgdmFsdWVQcm9wcywgb25FcnJvcik7XG4gIC\
              AgICAgICAgICBpZiAoY3R4LnNjaGVtYS5jb21wYXQpXG4gICAgICAgICAgICAgICA\
              gZmxvd0luZGVudENoZWNrKGJtLmluZGVudCwgdmFsdWUsIG9uRXJyb3IpO1xuICAg\
              ICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlLnJhbmdlWzJdO1xuICAgICAgICAgI\
              CAgY29uc3QgcGFpciA9IG5ldyBQYWlyKGtleU5vZGUsIHZhbHVlTm9kZSk7XG4gIC\
              AgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucylcbiAgICA\
              gICAgICAgICAgICBwYWlyLnNyY1Rva2VuID0gY29sbEl0ZW07XG4gICAgICAgICAg\
              ICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlI\
              HtcbiAgICAgICAgICAgIC8vIGtleSB3aXRoIG5vIHZhbHVlXG4gICAgICAgICAgIC\
              BpZiAoaW1wbGljaXRLZXkpXG4gICAgICAgICAgICAgICAgb25FcnJvcihrZXlOb2R\
              lLnJhbmdlLCAnTUlTU0lOR19DSEFSJywgJ0ltcGxpY2l0IG1hcCBrZXlzIG5lZWQg\
              dG8gYmUgZm9sbG93ZWQgYnkgbWFwIHZhbHVlcycpO1xuICAgICAgICAgICAgaWYgK\
              HZhbHVlUHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlOb2\
              RlLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCA\
              rPSAnXFxuJyArIHZhbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBl\
              bHNlXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCA9IHZhbHVlU\
              HJvcHMuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IH\
              BhaXIgPSBuZXcgUGFpcihrZXlOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B\
              0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3Jj\
              VG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBha\
              XIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb21tZW50RW5kICYmIGNvbW\
              1lbnRFbmQgPCBvZmZzZXQpXG4gICAgICAgIG9uRXJyb3IoY29tbWVudEVuZCwgJ0l\
              NUE9TU0lCTEUnLCAnTWFwIGNvbW1lbnQgd2l0aCB0cmFpbGluZyBjb250ZW50Jyk7\
              XG4gICAgbWFwLnJhbmdlID0gW2JtLm9mZnNldCwgb2Zmc2V0LCBjb21tZW50RW5kI\
              D8/IG9mZnNldF07XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IHsgcmVzb2\
              x2ZUJsb2NrTWFwIH07XG4iLCJpbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9\
              kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcu\
              L3Jlc29sdmUtcHJvcHMuanMnO1xuaW1wb3J0IHsgZmxvd0luZGVudENoZWNrIH0gZ\
              nJvbSAnLi91dGlsLWZsb3ctaW5kZW50LWNoZWNrLmpzJztcblxuZnVuY3Rpb24gcm\
              Vzb2x2ZUJsb2NrU2VxKHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSw\
              gY3R4LCBicywgb25FcnJvciwgdGFnKSB7XG4gICAgY29uc3QgTm9kZUNsYXNzID0g\
              dGFnPy5ub2RlQ2xhc3MgPz8gWUFNTFNlcTtcbiAgICBjb25zdCBzZXEgPSBuZXcgT\
              m9kZUNsYXNzKGN0eC5zY2hlbWEpO1xuICAgIGlmIChjdHguYXRSb290KVxuICAgIC\
              AgICBjdHguYXRSb290ID0gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9IGJzLm9mZnN\
              ldDtcbiAgICBsZXQgY29tbWVudEVuZCA9IG51bGw7XG4gICAgZm9yIChjb25zdCB7\
              IHN0YXJ0LCB2YWx1ZSB9IG9mIGJzLml0ZW1zKSB7XG4gICAgICAgIGNvbnN0IHByb\
              3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBpbmRpY2F0b3\
              I6ICdzZXEtaXRlbS1pbmQnLFxuICAgICAgICAgICAgbmV4dDogdmFsdWUsXG4gICA\
              gICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAg\
              ICAgcGFyZW50SW5kZW50OiBicy5pbmRlbnQsXG4gICAgICAgICAgICBzdGFydE9uT\
              mV3bGluZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFwcm9wcy5mb3\
              VuZCkge1xuICAgICAgICAgICAgaWYgKHByb3BzLmFuY2hvciB8fCBwcm9wcy50YWc\
              gfHwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUu\
              dHlwZSA9PT0gJ2Jsb2NrLXNlcScpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb\
              3IocHJvcHMuZW5kLCAnQkFEX0lOREVOVCcsICdBbGwgc2VxdWVuY2UgaXRlbXMgbX\
              VzdCBzdGFydCBhdCB0aGUgc2FtZSBjb2x1bW4nKTtcbiAgICAgICAgICAgICAgICB\
              lbHNlXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnTUlTU0lO\
              R19DSEFSJywgJ1NlcXVlbmNlIGl0ZW0gd2l0aG91dCAtIGluZGljYXRvcicpO1xuI\
              CAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC\
              AgY29tbWVudEVuZCA9IHByb3BzLmVuZDtcbiAgICAgICAgICAgICAgICBpZiAocHJ\
              vcHMuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgc2VxLmNvbW1lbnQgPSBw\
              cm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgI\
              CAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vZGUgPSB2YWx1ZVxuIC\
              AgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCBwcm9wcywgb25FcnJ\
              vcilcbiAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIHByb3BzLmVu\
              ZCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGN0e\
              C5zY2hlbWEuY29tcGF0KVxuICAgICAgICAgICAgZmxvd0luZGVudENoZWNrKGJzLm\
              luZGVudCwgdmFsdWUsIG9uRXJyb3IpO1xuICAgICAgICBvZmZzZXQgPSBub2RlLnJ\
              hbmdlWzJdO1xuICAgICAgICBzZXEuaXRlbXMucHVzaChub2RlKTtcbiAgICB9XG4g\
              ICAgc2VxLnJhbmdlID0gW2JzLm9mZnNldCwgb2Zmc2V0LCBjb21tZW50RW5kID8/I\
              G9mZnNldF07XG4gICAgcmV0dXJuIHNlcTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZU\
              Jsb2NrU2VxIH07XG4iLCJmdW5jdGlvbiByZXNvbHZlRW5kKGVuZCwgb2Zmc2V0LCB\
              yZXFTcGFjZSwgb25FcnJvcikge1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAg\
              aWYgKGVuZCkge1xuICAgICAgICBsZXQgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgI\
              CAgbGV0IHNlcCA9ICcnO1xuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIGVuZC\
              kge1xuICAgICAgICAgICAgY29uc3QgeyBzb3VyY2UsIHR5cGUgfSA9IHRva2VuO1x\
              uICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2Fz\
              ZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7X\
              G4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2\
              UgJ2NvbW1lbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXFTcGFjZSA\
              mJiAhaGFzU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRv\
              a2VuLCAnTUlTU0lOR19DSEFSJywgJ0NvbW1lbnRzIG11c3QgYmUgc2VwYXJhdGVkI\
              GZyb20gb3RoZXIgdG9rZW5zIGJ5IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMnKTtcbi\
              AgICAgICAgICAgICAgICAgICAgY29uc3QgY2IgPSBzb3VyY2Uuc3Vic3RyaW5nKDE\
              pIHx8ICcgJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21tZW50KVxuICAg\
              ICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGNiO1xuICAgICAgICAgICAgI\
              CAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IH\
              NlcCArIGNiO1xuICAgICAgICAgICAgICAgICAgICBzZXAgPSAnJztcbiAgICAgICA\
              gICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAg\
              ICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoY\
              29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcCArPSBzb3VyY2U7XG\
              4gICAgICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICA\
              gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAg\
              ICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nL\
              CBgVW5leHBlY3RlZCAke3R5cGV9IGF0IG5vZGUgZW5kYCk7XG4gICAgICAgICAgIC\
              B9XG4gICAgICAgICAgICBvZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICA\
              gfVxuICAgIH1cbiAgICByZXR1cm4geyBjb21tZW50LCBvZmZzZXQgfTtcbn1cblxu\
              ZXhwb3J0IHsgcmVzb2x2ZUVuZCB9O1xuIiwiaW1wb3J0IHsgaXNQYWlyIH0gZnJvb\
              SAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciB9IGZyb20gJy\
              4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uL25\
              vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uL25v\
              ZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vc\
              mVzb2x2ZS1lbmQuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi\
              9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZ\
              yb20gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcbmltcG9ydCB7IG1hcElu\
              Y2x1ZGVzIH0gZnJvbSAnLi91dGlsLW1hcC1pbmNsdWRlcy5qcyc7XG5cbmNvbnN0I\
              GJsb2NrTXNnID0gJ0Jsb2NrIGNvbGxlY3Rpb25zIGFyZSBub3QgYWxsb3dlZCB3aX\
              RoaW4gZmxvdyBjb2xsZWN0aW9ucyc7XG5jb25zdCBpc0Jsb2NrID0gKHRva2VuKSA\
              9PiB0b2tlbiAmJiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHwgdG9rZW4u\
              dHlwZSA9PT0gJ2Jsb2NrLXNlcScpO1xuZnVuY3Rpb24gcmVzb2x2ZUZsb3dDb2xsZ\
              WN0aW9uKHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSwgY3R4LCBmYy\
              wgb25FcnJvciwgdGFnKSB7XG4gICAgY29uc3QgaXNNYXAgPSBmYy5zdGFydC5zb3V\
              yY2UgPT09ICd7JztcbiAgICBjb25zdCBmY05hbWUgPSBpc01hcCA/ICdmbG93IG1h\
              cCcgOiAnZmxvdyBzZXF1ZW5jZSc7XG4gICAgY29uc3QgTm9kZUNsYXNzID0gKHRhZ\
              z8ubm9kZUNsYXNzID8/IChpc01hcCA/IFlBTUxNYXAgOiBZQU1MU2VxKSk7XG4gIC\
              AgY29uc3QgY29sbCA9IG5ldyBOb2RlQ2xhc3MoY3R4LnNjaGVtYSk7XG4gICAgY29\
              sbC5mbG93ID0gdHJ1ZTtcbiAgICBjb25zdCBhdFJvb3QgPSBjdHguYXRSb290O1xu\
              ICAgIGlmIChhdFJvb3QpXG4gICAgICAgIGN0eC5hdFJvb3QgPSBmYWxzZTtcbiAgI\
              CBsZXQgb2Zmc2V0ID0gZmMub2Zmc2V0ICsgZmMuc3RhcnQuc291cmNlLmxlbmd0aD\
              tcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZjLml0ZW1zLmxlbmd0aDsgKytpKSB\
              7XG4gICAgICAgIGNvbnN0IGNvbGxJdGVtID0gZmMuaXRlbXNbaV07XG4gICAgICAg\
              IGNvbnN0IHsgc3RhcnQsIGtleSwgc2VwLCB2YWx1ZSB9ID0gY29sbEl0ZW07XG4gI\
              CAgICAgIGNvbnN0IHByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgIC\
              AgICAgICBmbG93OiBmY05hbWUsXG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdleHB\
              saWNpdC1rZXktaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IGtleSA/PyBzZXA/Llsw\
              XSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gI\
              CAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGZjLmluZGVudCxcbiAgICAgICAgICAgIH\
              N0YXJ0T25OZXdsaW5lOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF\
              wcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgaWYgKCFwcm9wcy5hbmNob3IgJiYg\
              IXByb3BzLnRhZyAmJiAhc2VwICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgICAgI\
              GlmIChpID09PSAwICYmIHByb3BzLmNvbW1hKVxuICAgICAgICAgICAgICAgICAgIC\
              BvbkVycm9yKHByb3BzLmNvbW1hLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGV\
              jdGVkICwgaW4gJHtmY05hbWV9YCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAo\
              aSA8IGZjLml0ZW1zLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgIG9uR\
              XJyb3IocHJvcHMuc3RhcnQsICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZW\
              QgZW1wdHkgaXRlbSBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBpZiA\
              ocHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbC5j\
              b21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbC5jb21tZW50ICs9I\
              CdcXG4nICsgcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZV\
              xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbC5jb21tZW50ID0gcHJvcHMuY29\
              tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2Zmc2V0\
              ID0gcHJvcHMuZW5kO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgI\
              CAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc01hcCAmJiBjdHgub3B0aW9ucy5zdH\
              JpY3QgJiYgY29udGFpbnNOZXdsaW5lKGtleSkpXG4gICAgICAgICAgICAgICAgb25\
              FcnJvcihrZXksIC8vIGNoZWNrZWQgYnkgY29udGFpbnNOZXdsaW5lKClcbiAgICAg\
              ICAgICAgICAgICAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdCBrZ\
              XlzIG9mIGZsb3cgc2VxdWVuY2UgcGFpcnMgbmVlZCB0byBiZSBvbiBhIHNpbmdsZS\
              BsaW5lJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICA\
              gICAgICAgIGlmIChwcm9wcy5jb21tYSlcbiAgICAgICAgICAgICAgICBvbkVycm9y\
              KHByb3BzLmNvbW1hLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICwga\
              W4gJHtmY05hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgIC\
              AgICAgICBpZiAoIXByb3BzLmNvbW1hKVxuICAgICAgICAgICAgICAgIG9uRXJyb3I\
              ocHJvcHMuc3RhcnQsICdNSVNTSU5HX0NIQVInLCBgTWlzc2luZyAsIGJldHdlZW4g\
              JHtmY05hbWV9IGl0ZW1zYCk7XG4gICAgICAgICAgICBpZiAocHJvcHMuY29tbWVud\
              Ckge1xuICAgICAgICAgICAgICAgIGxldCBwcmV2SXRlbUNvbW1lbnQgPSAnJztcbi\
              AgICAgICAgICAgICAgICBsb29wOiBmb3IgKGNvbnN0IHN0IG9mIHN0YXJ0KSB7XG4\
              gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAg\
              ICAgICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgICAgI\
              CAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG\
              JyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4\
              gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkl0ZW1Db21tZW50ID0gc3Qu\
              c291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgI\
              CBicmVhayBsb29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbi\
              AgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICA\
              gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAg\
              IGlmIChwcmV2SXRlbUNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0I\
              HByZXYgPSBjb2xsLml0ZW1zW2NvbGwuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgIC\
              AgICAgICAgICAgICAgIGlmIChpc1BhaXIocHJldikpXG4gICAgICAgICAgICAgICA\
              gICAgICAgICBwcmV2ID0gcHJldi52YWx1ZSA/PyBwcmV2LmtleTtcbiAgICAgICAg\
              ICAgICAgICAgICAgaWYgKHByZXYuY29tbWVudClcbiAgICAgICAgICAgICAgICAgI\
              CAgICAgIHByZXYuY29tbWVudCArPSAnXFxuJyArIHByZXZJdGVtQ29tbWVudDtcbi\
              AgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICA\
              gcHJldi5jb21tZW50ID0gcHJldkl0ZW1Db21tZW50O1xuICAgICAgICAgICAgICAg\
              ICAgICBwcm9wcy5jb21tZW50ID0gcHJvcHMuY29tbWVudC5zdWJzdHJpbmcocHJld\
              kl0ZW1Db21tZW50Lmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgIC\
              AgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTWFwICYmICFzZXA\
              gJiYgIXByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICAvLyBpdGVtIGlzIGEgdmFs\
              dWUgaW4gYSBzZXFcbiAgICAgICAgICAgIC8vIOKGkiBrZXkgJiBzZXAgYXJlIGVtc\
              HR5LCBzdGFydCBkb2VzIG5vdCBpbmNsdWRlID8gb3IgOlxuICAgICAgICAgICAgY2\
              9uc3QgdmFsdWVOb2RlID0gdmFsdWVcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2V\
              Ob2RlKGN0eCwgdmFsdWUsIHByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAg\
              IDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIHByb3BzLmVuZCwgc2VwLCBudWxsLCBwc\
              m9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBjb2xsLml0ZW1zLnB1c2godmFsdW\
              VOb2RlKTtcbiAgICAgICAgICAgIG9mZnNldCA9IHZhbHVlTm9kZS5yYW5nZVsyXTt\
              cbiAgICAgICAgICAgIGlmIChpc0Jsb2NrKHZhbHVlKSlcbiAgICAgICAgICAgICAg\
              ICBvbkVycm9yKHZhbHVlTm9kZS5yYW5nZSwgJ0JMT0NLX0lOX0ZMT1cnLCBibG9ja\
              01zZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLy\
              BpdGVtIGlzIGEga2V5K3ZhbHVlIHBhaXJcbiAgICAgICAgICAgIC8vIGtleSB2YWx\
              1ZVxuICAgICAgICAgICAgY29uc3Qga2V5U3RhcnQgPSBwcm9wcy5lbmQ7XG4gICAg\
              ICAgICAgICBjb25zdCBrZXlOb2RlID0ga2V5XG4gICAgICAgICAgICAgICAgPyBjb\
              21wb3NlTm9kZShjdHgsIGtleSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgIC\
              AgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwga2V5U3RhcnQsIHN0YXJ0LCBudWx\
              sLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoaXNCbG9jayhrZXkp\
              KVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ0JMT0NLX\
              0lOX0ZMT1cnLCBibG9ja01zZyk7XG4gICAgICAgICAgICAvLyB2YWx1ZSBwcm9wZX\
              J0aWVzXG4gICAgICAgICAgICBjb25zdCB2YWx1ZVByb3BzID0gcmVzb2x2ZVByb3B\
              zKHNlcCA/PyBbXSwge1xuICAgICAgICAgICAgICAgIGZsb3c6IGZjTmFtZSxcbiAg\
              ICAgICAgICAgICAgICBpbmRpY2F0b3I6ICdtYXAtdmFsdWUtaW5kJyxcbiAgICAgI\
              CAgICAgICAgICBuZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG\
              tleU5vZGUucmFuZ2VbMl0sXG4gICAgICAgICAgICAgICAgb25FcnJvcixcbiAgICA\
              gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGZjLmluZGVudCxcbiAgICAgICAgICAg\
              ICAgICBzdGFydE9uTmV3bGluZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgI\
              CAgICAgICAgaWYgKHZhbHVlUHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgICAgIC\
              BpZiAoIWlzTWFwICYmICFwcm9wcy5mb3VuZCAmJiBjdHgub3B0aW9ucy5zdHJpY3Q\
              pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcClcbiAgICAgICAgICAgICAg\
              ICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2Ygc2VwKSB7XG4gICAgICAgICAgICAgI\
              CAgICAgICAgICAgICAgaWYgKHN0ID09PSB2YWx1ZVByb3BzLmZvdW5kKVxuICAgIC\
              AgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICA\
              gICAgICAgICAgICAgICBpZiAoc3QudHlwZSA9PT0gJ25ld2xpbmUnKSB7XG4gICAg\
              ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioc3QsICdNVUxUSUxJT\
              kVfSU1QTElDSVRfS0VZJywgJ0ltcGxpY2l0IGtleXMgb2YgZmxvdyBzZXF1ZW5jZS\
              BwYWlycyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgICA\
              gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAg\
              ICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgI\
              CAgICAgICAgICBpZiAocHJvcHMuc3RhcnQgPCB2YWx1ZVByb3BzLmZvdW5kLm9mZn\
              NldCAtIDEwMjQpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHV\
              lUHJvcHMuZm91bmQsICdLRVlfT1ZFUl8xMDI0X0NIQVJTJywgJ1RoZSA6IGluZGlj\
              YXRvciBtdXN0IGJlIGF0IG1vc3QgMTAyNCBjaGFycyBhZnRlciB0aGUgc3RhcnQgb\
              2YgYW4gaW1wbGljaXQgZmxvdyBzZXF1ZW5jZSBrZXknKTtcbiAgICAgICAgICAgIC\
              AgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSk\
              ge1xuICAgICAgICAgICAgICAgIGlmICgnc291cmNlJyBpbiB2YWx1ZSAmJiB2YWx1\
              ZS5zb3VyY2UgJiYgdmFsdWUuc291cmNlWzBdID09PSAnOicpXG4gICAgICAgICAgI\
              CAgICAgICAgIG9uRXJyb3IodmFsdWUsICdNSVNTSU5HX0NIQVInLCBgTWlzc2luZy\
              BzcGFjZSBhZnRlciA6IGluICR7ZmNOYW1lfWApO1xuICAgICAgICAgICAgICAgIGV\
              sc2VcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZVByb3BzLnN0YXJ0\
              LCAnTUlTU0lOR19DSEFSJywgYE1pc3NpbmcgLCBvciA6IGJldHdlZW4gJHtmY05hb\
              WV9IGl0ZW1zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2YWx1ZS\
              B2YWx1ZVxuICAgICAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gdmFsdWVcbiAgICA\
              gICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHZhbHVlUHJvcHMs\
              IG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiB2YWx1ZVByb3BzLmZvdW5kXG4gI\
              CAgICAgICAgICAgICAgICAgID8gY29tcG9zZUVtcHR5Tm9kZShjdHgsIHZhbHVlUH\
              JvcHMuZW5kLCBzZXAsIG51bGwsIHZhbHVlUHJvcHMsIG9uRXJyb3IpXG4gICAgICA\
              gICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmICh2YWx1ZU5vZGUp\
              IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCbG9jayh2YWx1ZSkpXG4gICAgICAgI\
              CAgICAgICAgICAgIG9uRXJyb3IodmFsdWVOb2RlLnJhbmdlLCAnQkxPQ0tfSU5fRk\
              xPVycsIGJsb2NrTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2U\
              gaWYgKHZhbHVlUHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChr\
              ZXlOb2RlLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tb\
              WVudCArPSAnXFxuJyArIHZhbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgIC\
              AgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCA9IHZ\
              hbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNv\
              bnN0IHBhaXIgPSBuZXcgUGFpcihrZXlOb2RlLCB2YWx1ZU5vZGUpO1xuICAgICAgI\
              CAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgIC\
              AgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgaWY\
              gKGlzTWFwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0gY29sbDtcbiAg\
              ICAgICAgICAgICAgICBpZiAobWFwSW5jbHVkZXMoY3R4LCBtYXAuaXRlbXMsIGtle\
              U5vZGUpKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGtleVN0YXJ0LCAnRF\
              VQTElDQVRFX0tFWScsICdNYXAga2V5cyBtdXN0IGJlIHVuaXF1ZScpO1xuICAgICA\
              gICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgfVxu\
              ICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0gb\
              mV3IFlBTUxNYXAoY3R4LnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgbWFwLmZsb3\
              cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1x\
              uICAgICAgICAgICAgICAgIGNvbGwuaXRlbXMucHVzaChtYXApO1xuICAgICAgICAg\
              ICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlID8gdmFsdWVOb2RlL\
              nJhbmdlWzJdIDogdmFsdWVQcm9wcy5lbmQ7XG4gICAgICAgIH1cbiAgICB9XG4gIC\
              AgY29uc3QgZXhwZWN0ZWRFbmQgPSBpc01hcCA/ICd9JyA6ICddJztcbiAgICBjb25\
              zdCBbY2UsIC4uLmVlXSA9IGZjLmVuZDtcbiAgICBsZXQgY2VQb3MgPSBvZmZzZXQ7\
              XG4gICAgaWYgKGNlICYmIGNlLnNvdXJjZSA9PT0gZXhwZWN0ZWRFbmQpXG4gICAgI\
              CAgIGNlUG9zID0gY2Uub2Zmc2V0ICsgY2Uuc291cmNlLmxlbmd0aDtcbiAgICBlbH\
              NlIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZjTmFtZVswXS50b1VwcGVyQ2FzZSg\
              pICsgZmNOYW1lLnN1YnN0cmluZygxKTtcbiAgICAgICAgY29uc3QgbXNnID0gYXRS\
              b290XG4gICAgICAgICAgICA/IGAke25hbWV9IG11c3QgZW5kIHdpdGggYSAke2V4c\
              GVjdGVkRW5kfWBcbiAgICAgICAgICAgIDogYCR7bmFtZX0gaW4gYmxvY2sgY29sbG\
              VjdGlvbiBtdXN0IGJlIHN1ZmZpY2llbnRseSBpbmRlbnRlZCBhbmQgZW5kIHdpdGg\
              gYSAke2V4cGVjdGVkRW5kfWA7XG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0LCBhdFJv\
              b3QgPyAnTUlTU0lOR19DSEFSJyA6ICdCQURfSU5ERU5UJywgbXNnKTtcbiAgICAgI\
              CAgaWYgKGNlICYmIGNlLnNvdXJjZS5sZW5ndGggIT09IDEpXG4gICAgICAgICAgIC\
              BlZS51bnNoaWZ0KGNlKTtcbiAgICB9XG4gICAgaWYgKGVlLmxlbmd0aCA+IDApIHt\
              cbiAgICAgICAgY29uc3QgZW5kID0gcmVzb2x2ZUVuZChlZSwgY2VQb3MsIGN0eC5v\
              cHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgICAgIGlmIChlbmQuY29tbWVud\
              Ckge1xuICAgICAgICAgICAgaWYgKGNvbGwuY29tbWVudClcbiAgICAgICAgICAgIC\
              AgICBjb2xsLmNvbW1lbnQgKz0gJ1xcbicgKyBlbmQuY29tbWVudDtcbiAgICAgICA\
              gICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgPSBlbmQuY29t\
              bWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb2xsLnJhbmdlID0gW2ZjLm9mZnNld\
              CwgY2VQb3MsIGVuZC5vZmZzZXRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC\
              AgY29sbC5yYW5nZSA9IFtmYy5vZmZzZXQsIGNlUG9zLCBjZVBvc107XG4gICAgfVx\
              uICAgIHJldHVybiBjb2xsO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRmxvd0NvbGxl\
              Y3Rpb24gfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZ\
              W50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYW\
              xhci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1\
              hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9kZXMvWUFNTFNl\
              cS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tNYXAgfSBmcm9tICcuL3Jlc29sd\
              mUtYmxvY2stbWFwLmpzJztcbmltcG9ydCB7IHJlc29sdmVCbG9ja1NlcSB9IGZyb2\
              0gJy4vcmVzb2x2ZS1ibG9jay1zZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZsb3d\
              Db2xsZWN0aW9uIH0gZnJvbSAnLi9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyc7\
              XG5cbmZ1bmN0aW9uIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvb\
              kVycm9yLCB0YWdOYW1lLCB0YWcpIHtcbiAgICBjb25zdCBjb2xsID0gdG9rZW4udH\
              lwZSA9PT0gJ2Jsb2NrLW1hcCdcbiAgICAgICAgPyByZXNvbHZlQmxvY2tNYXAoQ04\
              sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZylcbiAgICAgICAgOiB0b2tlbi50eXBl\
              ID09PSAnYmxvY2stc2VxJ1xuICAgICAgICAgICAgPyByZXNvbHZlQmxvY2tTZXEoQ\
              04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZylcbiAgICAgICAgICAgIDogcmVzb2\
              x2ZUZsb3dDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWcpO1x\
              uICAgIGNvbnN0IENvbGwgPSBjb2xsLmNvbnN0cnVjdG9yO1xuICAgIC8vIElmIHdl\
              IGdvdCBhIHRhZ05hbWUgbWF0Y2hpbmcgdGhlIGNsYXNzLCBvciB0aGUgdGFnIG5hb\
              WUgaXMgJyEnLFxuICAgIC8vIHRoZW4gdXNlIHRoZSB0YWdOYW1lIGZyb20gdGhlIG\
              5vZGUgY2xhc3MgdXNlZCB0byBjcmVhdGUgaXQuXG4gICAgaWYgKHRhZ05hbWUgPT0\
              9ICchJyB8fCB0YWdOYW1lID09PSBDb2xsLnRhZ05hbWUpIHtcbiAgICAgICAgY29s\
              bC50YWcgPSBDb2xsLnRhZ05hbWU7XG4gICAgICAgIHJldHVybiBjb2xsO1xuICAgI\
              H1cbiAgICBpZiAodGFnTmFtZSlcbiAgICAgICAgY29sbC50YWcgPSB0YWdOYW1lO1\
              xuICAgIHJldHVybiBjb2xsO1xufVxuZnVuY3Rpb24gY29tcG9zZUNvbGxlY3Rpb24\
              oQ04sIGN0eCwgdG9rZW4sIHRhZ1Rva2VuLCBvbkVycm9yKSB7XG4gICAgY29uc3Qg\
              dGFnTmFtZSA9ICF0YWdUb2tlblxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBjd\
              HguZGlyZWN0aXZlcy50YWdOYW1lKHRhZ1Rva2VuLnNvdXJjZSwgbXNnID0+IG9uRX\
              Jyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpKTtcbiAgICB\
              jb25zdCBleHBUeXBlID0gdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCdcbiAgICAg\
              ICAgPyAnbWFwJ1xuICAgICAgICA6IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnX\
              G4gICAgICAgICAgICA/ICdzZXEnXG4gICAgICAgICAgICA6IHRva2VuLnN0YXJ0Ln\
              NvdXJjZSA9PT0gJ3snXG4gICAgICAgICAgICAgICAgPyAnbWFwJ1xuICAgICAgICA\
              gICAgICAgIDogJ3NlcSc7XG4gICAgLy8gc2hvcnRjdXQ6IGNoZWNrIGlmIGl0J3Mg\
              YSBnZW5lcmljIFlBTUxNYXAgb3IgWUFNTFNlcVxuICAgIC8vIGJlZm9yZSBqdW1wa\
              W5nIGludG8gdGhlIGN1c3RvbSB0YWcgbG9naWMuXG4gICAgaWYgKCF0YWdUb2tlbi\
              B8fFxuICAgICAgICAhdGFnTmFtZSB8fFxuICAgICAgICB0YWdOYW1lID09PSAnISc\
              gfHxcbiAgICAgICAgKHRhZ05hbWUgPT09IFlBTUxNYXAudGFnTmFtZSAmJiBleHBU\
              eXBlID09PSAnbWFwJykgfHxcbiAgICAgICAgKHRhZ05hbWUgPT09IFlBTUxTZXEud\
              GFnTmFtZSAmJiBleHBUeXBlID09PSAnc2VxJykgfHxcbiAgICAgICAgIWV4cFR5cG\
              UpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHR\
              va2VuLCBvbkVycm9yLCB0YWdOYW1lKTtcbiAgICB9XG4gICAgbGV0IHRhZyA9IGN0\
              eC5zY2hlbWEudGFncy5maW5kKHQgPT4gdC50YWcgPT09IHRhZ05hbWUgJiYgdC5jb\
              2xsZWN0aW9uID09PSBleHBUeXBlKTtcbiAgICBpZiAoIXRhZykge1xuICAgICAgIC\
              Bjb25zdCBrdCA9IGN0eC5zY2hlbWEua25vd25UYWdzW3RhZ05hbWVdO1xuICAgICA\
              gICBpZiAoa3QgJiYga3QuY29sbGVjdGlvbiA9PT0gZXhwVHlwZSkge1xuICAgICAg\
              ICAgICAgY3R4LnNjaGVtYS50YWdzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwga3QsI\
              HsgZGVmYXVsdDogZmFsc2UgfSkpO1xuICAgICAgICAgICAgdGFnID0ga3Q7XG4gIC\
              AgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoa3Q/LmNvbGx\
              lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRhZ1Rva2VuLCAnQkFE\
              X0NPTExFQ1RJT05fVFlQRScsIGAke2t0LnRhZ30gdXNlZCBmb3IgJHtleHBUeXBlf\
              SBjb2xsZWN0aW9uLCBidXQgZXhwZWN0cyAke2t0LmNvbGxlY3Rpb259YCwgdHJ1ZS\
              k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICA\
              gICAgICBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgYFVu\
              cmVzb2x2ZWQgdGFnOiAke3RhZ05hbWV9YCwgdHJ1ZSk7XG4gICAgICAgICAgICB9X\
              G4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG\
              9rZW4sIG9uRXJyb3IsIHRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGN\
              vbnN0IGNvbGwgPSByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25F\
              cnJvciwgdGFnTmFtZSwgdGFnKTtcbiAgICBjb25zdCByZXMgPSB0YWcucmVzb2x2Z\
              T8uKGNvbGwsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRk\
              FJTEVEJywgbXNnKSwgY3R4Lm9wdGlvbnMpID8/IGNvbGw7XG4gICAgY29uc3Qgbm9\
              kZSA9IGlzTm9kZShyZXMpXG4gICAgICAgID8gcmVzXG4gICAgICAgIDogbmV3IFNj\
              YWxhcihyZXMpO1xuICAgIG5vZGUucmFuZ2UgPSBjb2xsLnJhbmdlO1xuICAgIG5vZ\
              GUudGFnID0gdGFnTmFtZTtcbiAgICBpZiAodGFnPy5mb3JtYXQpXG4gICAgICAgIG\
              5vZGUuZm9ybWF0ID0gdGFnLmZvcm1hdDtcbiAgICByZXR1cm4gbm9kZTtcbn1cblx\
              uZXhwb3J0IHsgY29tcG9zZUNvbGxlY3Rpb24gfTtcbiIsImltcG9ydCB7IFNjYWxh\
              ciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sd\
              mVCbG9ja1NjYWxhcihjdHgsIHNjYWxhciwgb25FcnJvcikge1xuICAgIGNvbnN0IH\
              N0YXJ0ID0gc2NhbGFyLm9mZnNldDtcbiAgICBjb25zdCBoZWFkZXIgPSBwYXJzZUJ\
              sb2NrU2NhbGFySGVhZGVyKHNjYWxhciwgY3R4Lm9wdGlvbnMuc3RyaWN0LCBvbkVy\
              cm9yKTtcbiAgICBpZiAoIWhlYWRlcilcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6I\
              CcnLCB0eXBlOiBudWxsLCBjb21tZW50OiAnJywgcmFuZ2U6IFtzdGFydCwgc3Rhcn\
              QsIHN0YXJ0XSB9O1xuICAgIGNvbnN0IHR5cGUgPSBoZWFkZXIubW9kZSA9PT0gJz4\
              nID8gU2NhbGFyLkJMT0NLX0ZPTERFRCA6IFNjYWxhci5CTE9DS19MSVRFUkFMO1xu\
              ICAgIGNvbnN0IGxpbmVzID0gc2NhbGFyLnNvdXJjZSA/IHNwbGl0TGluZXMoc2Nhb\
              GFyLnNvdXJjZSkgOiBbXTtcbiAgICAvLyBkZXRlcm1pbmUgdGhlIGVuZCBvZiBjb2\
              50ZW50ICYgc3RhcnQgb2YgY2hvbXBpbmdcbiAgICBsZXQgY2hvbXBTdGFydCA9IGx\
              pbmVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gbGluZXMubGVuZ3RoIC0gMTsg\
              aSA+PSAwOyAtLWkpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGxpbmVzW2ldW\
              zFdO1xuICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ1\
              xccicpXG4gICAgICAgICAgICBjaG9tcFN0YXJ0ID0gaTtcbiAgICAgICAgZWxzZVx\
              uICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIHNob3J0Y3V0IGZvciBl\
              bXB0eSBjb250ZW50c1xuICAgIGlmIChjaG9tcFN0YXJ0ID09PSAwKSB7XG4gICAgI\
              CAgIGNvbnN0IHZhbHVlID0gaGVhZGVyLmNob21wID09PSAnKycgJiYgbGluZXMubG\
              VuZ3RoID4gMFxuICAgICAgICAgICAgPyAnXFxuJy5yZXBlYXQoTWF0aC5tYXgoMSw\
              gbGluZXMubGVuZ3RoIC0gMSkpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICBs\
              ZXQgZW5kID0gc3RhcnQgKyBoZWFkZXIubGVuZ3RoO1xuICAgICAgICBpZiAoc2Nhb\
              GFyLnNvdXJjZSlcbiAgICAgICAgICAgIGVuZCArPSBzY2FsYXIuc291cmNlLmxlbm\
              d0aDtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWUsIHR5cGUsIGNvbW1lbnQ6IGhlYWR\
              lci5jb21tZW50LCByYW5nZTogW3N0YXJ0LCBlbmQsIGVuZF0gfTtcbiAgICB9XG4g\
              ICAgLy8gZmluZCB0aGUgaW5kZW50YXRpb24gbGV2ZWwgdG8gdHJpbSBmcm9tIHN0Y\
              XJ0XG4gICAgbGV0IHRyaW1JbmRlbnQgPSBzY2FsYXIuaW5kZW50ICsgaGVhZGVyLm\
              luZGVudDtcbiAgICBsZXQgb2Zmc2V0ID0gc2NhbGFyLm9mZnNldCArIGhlYWRlci5\
              sZW5ndGg7XG4gICAgbGV0IGNvbnRlbnRTdGFydCA9IDA7XG4gICAgZm9yIChsZXQg\
              aSA9IDA7IGkgPCBjaG9tcFN0YXJ0OyArK2kpIHtcbiAgICAgICAgY29uc3QgW2luZ\
              GVudCwgY29udGVudF0gPSBsaW5lc1tpXTtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT\
              09ICcnIHx8IGNvbnRlbnQgPT09ICdcXHInKSB7XG4gICAgICAgICAgICBpZiAoaGV\
              hZGVyLmluZGVudCA9PT0gMCAmJiBpbmRlbnQubGVuZ3RoID4gdHJpbUluZGVudClc\
              biAgICAgICAgICAgICAgICB0cmltSW5kZW50ID0gaW5kZW50Lmxlbmd0aDtcbiAgI\
              CAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbmRlbnQubG\
              VuZ3RoIDwgdHJpbUluZGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3N\
              hZ2UgPSAnQmxvY2sgc2NhbGFycyB3aXRoIG1vcmUtaW5kZW50ZWQgbGVhZGluZyBl\
              bXB0eSBsaW5lcyBtdXN0IHVzZSBhbiBleHBsaWNpdCBpbmRlbnRhdGlvbiBpbmRpY\
              2F0b3InO1xuICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0ICsgaW5kZW50Lm\
              xlbmd0aCwgJ01JU1NJTkdfQ0hBUicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVx\
              uICAgICAgICAgICAgaWYgKGhlYWRlci5pbmRlbnQgPT09IDApXG4gICAgICAgICAg\
              ICAgICAgdHJpbUluZGVudCA9IGluZGVudC5sZW5ndGg7XG4gICAgICAgICAgICBjb\
              250ZW50U3RhcnQgPSBpO1xuICAgICAgICAgICAgaWYgKHRyaW1JbmRlbnQgPT09ID\
              AgJiYgIWN0eC5hdFJvb3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWd\
              lID0gJ0Jsb2NrIHNjYWxhciB2YWx1ZXMgaW4gY29sbGVjdGlvbnMgbXVzdCBiZSBp\
              bmRlbnRlZCc7XG4gICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfS\
              U5ERU5UJywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicm\
              VhaztcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gaW5kZW50Lmxlbmd0aCA\
              rIGNvbnRlbnQubGVuZ3RoICsgMTtcbiAgICB9XG4gICAgLy8gaW5jbHVkZSB0cmFp\
              bGluZyBtb3JlLWluZGVudGVkIGVtcHR5IGxpbmVzIGluIGNvbnRlbnRcbiAgICBmb\
              3IgKGxldCBpID0gbGluZXMubGVuZ3RoIC0gMTsgaSA+PSBjaG9tcFN0YXJ0OyAtLW\
              kpIHtcbiAgICAgICAgaWYgKGxpbmVzW2ldWzBdLmxlbmd0aCA+IHRyaW1JbmRlbnQ\
              pXG4gICAgICAgICAgICBjaG9tcFN0YXJ0ID0gaSArIDE7XG4gICAgfVxuICAgIGxl\
              dCB2YWx1ZSA9ICcnO1xuICAgIGxldCBzZXAgPSAnJztcbiAgICBsZXQgcHJldk1vc\
              mVJbmRlbnRlZCA9IGZhbHNlO1xuICAgIC8vIGxlYWRpbmcgd2hpdGVzcGFjZSBpcy\
              BrZXB0IGludGFjdFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudFN0YXJ\
              0OyArK2kpXG4gICAgICAgIHZhbHVlICs9IGxpbmVzW2ldWzBdLnNsaWNlKHRyaW1J\
              bmRlbnQpICsgJ1xcbic7XG4gICAgZm9yIChsZXQgaSA9IGNvbnRlbnRTdGFydDsga\
              SA8IGNob21wU3RhcnQ7ICsraSkge1xuICAgICAgICBsZXQgW2luZGVudCwgY29udG\
              VudF0gPSBsaW5lc1tpXTtcbiAgICAgICAgb2Zmc2V0ICs9IGluZGVudC5sZW5ndGg\
              gKyBjb250ZW50Lmxlbmd0aCArIDE7XG4gICAgICAgIGNvbnN0IGNybGYgPSBjb250\
              ZW50W2NvbnRlbnQubGVuZ3RoIC0gMV0gPT09ICdcXHInO1xuICAgICAgICBpZiAoY\
              3JsZilcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDAsIC0xKT\
              tcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIGFscmVhZHkgY2F1Z2h0IGl\
              uIGxleGVyICovXG4gICAgICAgIGlmIChjb250ZW50ICYmIGluZGVudC5sZW5ndGgg\
              PCB0cmltSW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzcmMgPSBoZWFkZXIua\
              W5kZW50XG4gICAgICAgICAgICAgICAgPyAnZXhwbGljaXQgaW5kZW50YXRpb24gaW\
              5kaWNhdG9yJ1xuICAgICAgICAgICAgICAgIDogJ2ZpcnN0IGxpbmUnO1xuICAgICA\
              gICAgICAgY29uc3QgbWVzc2FnZSA9IGBCbG9jayBzY2FsYXIgbGluZXMgbXVzdCBu\
              b3QgYmUgbGVzcyBpbmRlbnRlZCB0aGFuIHRoZWlyICR7c3JjfWA7XG4gICAgICAgI\
              CAgICBvbkVycm9yKG9mZnNldCAtIGNvbnRlbnQubGVuZ3RoIC0gKGNybGYgPyAyID\
              ogMSksICdCQURfSU5ERU5UJywgbWVzc2FnZSk7XG4gICAgICAgICAgICBpbmRlbnQ\
              gPSAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gU2NhbGFyLkJM\
              T0NLX0xJVEVSQUwpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IHNlcCArIGluZGVud\
              C5zbGljZSh0cmltSW5kZW50KSArIGNvbnRlbnQ7XG4gICAgICAgICAgICBzZXAgPS\
              AnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbmRlbnQubGVuZ3R\
              oID4gdHJpbUluZGVudCB8fCBjb250ZW50WzBdID09PSAnXFx0Jykge1xuICAgICAg\
              ICAgICAgLy8gbW9yZS1pbmRlbnRlZCBjb250ZW50IHdpdGhpbiBhIGZvbGRlZCBib\
              G9ja1xuICAgICAgICAgICAgaWYgKHNlcCA9PT0gJyAnKVxuICAgICAgICAgICAgIC\
              AgIHNlcCA9ICdcXG4nO1xuICAgICAgICAgICAgZWxzZSBpZiAoIXByZXZNb3JlSW5\
              kZW50ZWQgJiYgc2VwID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICBzZXAgPSAn\
              XFxuXFxuJztcbiAgICAgICAgICAgIHZhbHVlICs9IHNlcCArIGluZGVudC5zbGljZ\
              Sh0cmltSW5kZW50KSArIGNvbnRlbnQ7XG4gICAgICAgICAgICBzZXAgPSAnXFxuJz\
              tcbiAgICAgICAgICAgIHByZXZNb3JlSW5kZW50ZWQgPSB0cnVlO1xuICAgICAgICB\
              9XG4gICAgICAgIGVsc2UgaWYgKGNvbnRlbnQgPT09ICcnKSB7XG4gICAgICAgICAg\
              ICAvLyBlbXB0eSBsaW5lXG4gICAgICAgICAgICBpZiAoc2VwID09PSAnXFxuJylcb\
              iAgICAgICAgICAgICAgICB2YWx1ZSArPSAnXFxuJztcbiAgICAgICAgICAgIGVsc2\
              VcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgfVxuICAgICA\
              gICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICs9IHNlcCArIGNvbnRlbnQ7XG4g\
              ICAgICAgICAgICBzZXAgPSAnICc7XG4gICAgICAgICAgICBwcmV2TW9yZUluZGVud\
              GVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3dpdGNoIChoZWFkZX\
              IuY2hvbXApIHtcbiAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICBicmVhazt\
              cbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY2hv\
              bXBTdGFydDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgI\
              HZhbHVlICs9ICdcXG4nICsgbGluZXNbaV1bMF0uc2xpY2UodHJpbUluZGVudCk7XG\
              4gICAgICAgICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gIT09ICdcXG4\
              nKVxuICAgICAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgICAgICAgICAg\
              YnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YWx1ZSArPSAnX\
              FxuJztcbiAgICB9XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBoZWFkZXIubGVuZ3\
              RoICsgc2NhbGFyLnNvdXJjZS5sZW5ndGg7XG4gICAgcmV0dXJuIHsgdmFsdWUsIHR\
              5cGUsIGNvbW1lbnQ6IGhlYWRlci5jb21tZW50LCByYW5nZTogW3N0YXJ0LCBlbmQs\
              IGVuZF0gfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoeyBvZ\
              mZzZXQsIHByb3BzIH0sIHN0cmljdCwgb25FcnJvcikge1xuICAgIC8qIGlzdGFuYn\
              VsIGlnbm9yZSBpZiBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgIGlmIChwcm9wc1s\
              wXS50eXBlICE9PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpIHtcbiAgICAgICAgb25F\
              cnJvcihwcm9wc1swXSwgJ0lNUE9TU0lCTEUnLCAnQmxvY2sgc2NhbGFyIGhlYWRlc\
              iBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG\
              NvbnN0IHsgc291cmNlIH0gPSBwcm9wc1swXTtcbiAgICBjb25zdCBtb2RlID0gc29\
              1cmNlWzBdO1xuICAgIGxldCBpbmRlbnQgPSAwO1xuICAgIGxldCBjaG9tcCA9ICcn\
              O1xuICAgIGxldCBlcnJvciA9IC0xO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc\
              291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNoID0gc291cmNlW2\
              ldO1xuICAgICAgICBpZiAoIWNob21wICYmIChjaCA9PT0gJy0nIHx8IGNoID09PSA\
              nKycpKVxuICAgICAgICAgICAgY2hvbXAgPSBjaDtcbiAgICAgICAgZWxzZSB7XG4g\
              ICAgICAgICAgICBjb25zdCBuID0gTnVtYmVyKGNoKTtcbiAgICAgICAgICAgIGlmI\
              CghaW5kZW50ICYmIG4pXG4gICAgICAgICAgICAgICAgaW5kZW50ID0gbjtcbiAgIC\
              AgICAgICAgIGVsc2UgaWYgKGVycm9yID09PSAtMSlcbiAgICAgICAgICAgICAgICB\
              lcnJvciA9IG9mZnNldCArIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVy\
              cm9yICE9PSAtMSlcbiAgICAgICAgb25FcnJvcihlcnJvciwgJ1VORVhQRUNURURfV\
              E9LRU4nLCBgQmxvY2sgc2NhbGFyIGhlYWRlciBpbmNsdWRlcyBleHRyYSBjaGFyYW\
              N0ZXJzOiAke3NvdXJjZX1gKTtcbiAgICBsZXQgaGFzU3BhY2UgPSBmYWxzZTtcbiA\
              gICBsZXQgY29tbWVudCA9ICcnO1xuICAgIGxldCBsZW5ndGggPSBzb3VyY2UubGVu\
              Z3RoO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpI\
              HtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBwcm9wc1tpXTtcbiAgICAgICAgc3dpdG\
              NoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICA\
              gICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgLy8gZmFs\
              bHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgI\
              CAgICAgIGxlbmd0aCArPSB0b2tlbi5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgIC\
              AgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICA\
              gICAgICAgICAgaWYgKHN0cmljdCAmJiAhaGFzU3BhY2UpIHtcbiAgICAgICAgICAg\
              ICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdDb21tZW50cyBtdXN0IGJlIHNlcGFyY\
              XRlZCBmcm9tIG90aGVyIHRva2VucyBieSB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzJz\
              tcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0h\
              BUicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAg\
              ICBsZW5ndGggKz0gdG9rZW4uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgI\
              CBjb21tZW50ID0gdG9rZW4uc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgIC\
              AgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICA\
              gICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIHRva2Vu\
              Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0b2tlbi5zb3VyY\
              2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy\
              ogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICA\
              gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdl\
              ID0gYFVuZXhwZWN0ZWQgdG9rZW4gaW4gYmxvY2sgc2NhbGFyIGhlYWRlcjogJHt0b\
              2tlbi50eXBlfWA7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORV\
              hQRUNURURfVE9LRU4nLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB\
              0cyA9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBpZiAodHMgJiYgdHlw\
              ZW9mIHRzID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoI\
              Cs9IHRzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbi\
              AgICByZXR1cm4geyBtb2RlLCBpbmRlbnQsIGNob21wLCBjb21tZW50LCBsZW5ndGg\
              gfTtcbn1cbi8qKiBAcmV0dXJucyBBcnJheSBvZiBsaW5lcyBzcGxpdCB1cCBhcyBg\
              W2luZGVudCwgY29udGVudF1gICovXG5mdW5jdGlvbiBzcGxpdExpbmVzKHNvdXJjZ\
              Skge1xuICAgIGNvbnN0IHNwbGl0ID0gc291cmNlLnNwbGl0KC9cXG4oICopLyk7XG\
              4gICAgY29uc3QgZmlyc3QgPSBzcGxpdFswXTtcbiAgICBjb25zdCBtID0gZmlyc3Q\
              ubWF0Y2goL14oICopLyk7XG4gICAgY29uc3QgbGluZTAgPSBtPy5bMV1cbiAgICAg\
              ICAgPyBbbVsxXSwgZmlyc3Quc2xpY2UobVsxXS5sZW5ndGgpXVxuICAgICAgICA6I\
              FsnJywgZmlyc3RdO1xuICAgIGNvbnN0IGxpbmVzID0gW2xpbmUwXTtcbiAgICBmb3\
              IgKGxldCBpID0gMTsgaSA8IHNwbGl0Lmxlbmd0aDsgaSArPSAyKVxuICAgICAgICB\
              saW5lcy5wdXNoKFtzcGxpdFtpXSwgc3BsaXRbaSArIDFdXSk7XG4gICAgcmV0dXJu\
              IGxpbmVzO1xufVxuXG5leHBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfTtcbiIsI\
              mltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbX\
              BvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5cbmZ\
              1bmN0aW9uIHJlc29sdmVGbG93U2NhbGFyKHNjYWxhciwgc3RyaWN0LCBvbkVycm9y\
              KSB7XG4gICAgY29uc3QgeyBvZmZzZXQsIHR5cGUsIHNvdXJjZSwgZW5kIH0gPSBzY\
              2FsYXI7XG4gICAgbGV0IF90eXBlO1xuICAgIGxldCB2YWx1ZTtcbiAgICBjb25zdC\
              Bfb25FcnJvciA9IChyZWwsIGNvZGUsIG1zZykgPT4gb25FcnJvcihvZmZzZXQgKyB\
              yZWwsIGNvZGUsIG1zZyk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNh\
              c2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBfdHlwZSA9IFNjYWxhci5QTEFJTjtcb\
              iAgICAgICAgICAgIHZhbHVlID0gcGxhaW5WYWx1ZShzb3VyY2UsIF9vbkVycm9yKT\
              tcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGV\
              kLXNjYWxhcic6XG4gICAgICAgICAgICBfdHlwZSA9IFNjYWxhci5RVU9URV9TSU5H\
              TEU7XG4gICAgICAgICAgICB2YWx1ZSA9IHNpbmdsZVF1b3RlZFZhbHVlKHNvdXJjZ\
              SwgX29uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2\
              RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIF90eXBlID0gU2NhbGF\
              yLlFVT1RFX0RPVUJMRTtcbiAgICAgICAgICAgIHZhbHVlID0gZG91YmxlUXVvdGVk\
              VmFsdWUoc291cmNlLCBfb25FcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgI\
              CAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi\
              9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG9uRXJyb3Ioc2NhbGFyLCA\
              nVU5FWFBFQ1RFRF9UT0tFTicsIGBFeHBlY3RlZCBhIGZsb3cgc2NhbGFyIHZhbHVl\
              LCBidXQgZm91bmQ6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gI\
              CAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgIHR5cGU6IG\
              51bGwsXG4gICAgICAgICAgICAgICAgY29tbWVudDogJycsXG4gICAgICAgICAgICA\
              gICAgcmFuZ2U6IFtvZmZzZXQsIG9mZnNldCArIHNvdXJjZS5sZW5ndGgsIG9mZnNl\
              dCArIHNvdXJjZS5sZW5ndGhdXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICBjb\
              25zdCB2YWx1ZUVuZCA9IG9mZnNldCArIHNvdXJjZS5sZW5ndGg7XG4gICAgY29uc3\
              QgcmUgPSByZXNvbHZlRW5kKGVuZCwgdmFsdWVFbmQsIHN0cmljdCwgb25FcnJvcik\
              7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHR5cGU6IF90\
              eXBlLFxuICAgICAgICBjb21tZW50OiByZS5jb21tZW50LFxuICAgICAgICByYW5nZ\
              TogW29mZnNldCwgdmFsdWVFbmQsIHJlLm9mZnNldF1cbiAgICB9O1xufVxuZnVuY3\
              Rpb24gcGxhaW5WYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgYmFkQ2h\
              hciA9ICcnO1xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIC8qIGlz\
              dGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgI\
              GNhc2UgJ1xcdCc6XG4gICAgICAgICAgICBiYWRDaGFyID0gJ2EgdGFiIGNoYXJhY3\
              Rlcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnLCc6XG4gICA\
              gICAgICAgICBiYWRDaGFyID0gJ2Zsb3cgaW5kaWNhdG9yIGNoYXJhY3RlciAsJztc\
              biAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgI\
              CAgIGJhZENoYXIgPSAnZGlyZWN0aXZlIGluZGljYXRvciBjaGFyYWN0ZXIgJSc7XG\
              4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGN\
              hc2UgJz4nOiB7XG4gICAgICAgICAgICBiYWRDaGFyID0gYGJsb2NrIHNjYWxhciBp\
              bmRpY2F0b3IgJHtzb3VyY2VbMF19YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgI\
              CAgICB9XG4gICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICBjYXNlICdgJzoge1xuIC\
              AgICAgICAgICAgYmFkQ2hhciA9IGByZXNlcnZlZCBjaGFyYWN0ZXIgJHtzb3VyY2V\
              bMF19YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAg\
              IGlmIChiYWRDaGFyKVxuICAgICAgICBvbkVycm9yKDAsICdCQURfU0NBTEFSX1NUQ\
              VJUJywgYFBsYWluIHZhbHVlIGNhbm5vdCBzdGFydCB3aXRoICR7YmFkQ2hhcn1gKT\
              tcbiAgICByZXR1cm4gZm9sZExpbmVzKHNvdXJjZSk7XG59XG5mdW5jdGlvbiBzaW5\
              nbGVRdW90ZWRWYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBpZiAoc291cmNl\
              W3NvdXJjZS5sZW5ndGggLSAxXSAhPT0gXCInXCIgfHwgc291cmNlLmxlbmd0aCA9P\
              T0gMSlcbiAgICAgICAgb25FcnJvcihzb3VyY2UubGVuZ3RoLCAnTUlTU0lOR19DSE\
              FSJywgXCJNaXNzaW5nIGNsb3NpbmcgJ3F1b3RlXCIpO1xuICAgIHJldHVybiBmb2x\
              kTGluZXMoc291cmNlLnNsaWNlKDEsIC0xKSkucmVwbGFjZSgvJycvZywgXCInXCIp\
              O1xufVxuZnVuY3Rpb24gZm9sZExpbmVzKHNvdXJjZSkge1xuICAgIC8qKlxuICAgI\
              CAqIFRoZSBuZWdhdGl2ZSBsb29rYmVoaW5kIGhlcmUgYW5kIGluIHRoZSBgcmVgIF\
              JlZ0V4cCBpcyB0b1xuICAgICAqIHByZXZlbnQgY2F1c2luZyBhIHBvbHlub21pYWw\
              gc2VhcmNoIHRpbWUgaW4gY2VydGFpbiBjYXNlcy5cbiAgICAgKlxuICAgICAqIFRo\
              ZSB0cnktY2F0Y2ggaXMgZm9yIFNhZmFyaSwgd2hpY2ggZG9lc24ndCBzdXBwb3J0I\
              HRoaXMgeWV0OlxuICAgICAqIGh0dHBzOi8vY2FuaXVzZS5jb20vanMtcmVnZXhwLW\
              xvb2tiZWhpbmRcbiAgICAgKi9cbiAgICBsZXQgZmlyc3QsIGxpbmU7XG4gICAgdHJ\
              5IHtcbiAgICAgICAgZmlyc3QgPSBuZXcgUmVnRXhwKCcoLio/KSg/PCFbIFxcdF0p\
              WyBcXHRdKlxccj9cXG4nLCAnc3knKTtcbiAgICAgICAgbGluZSA9IG5ldyBSZWdFe\
              HAoJ1sgXFx0XSooLio/KSg/Oig/PCFbIFxcdF0pWyBcXHRdKik/XFxyP1xcbicsIC\
              dzeScpO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICBmaXJzdCA9IC8\
              oLio/KVsgXFx0XSpcXHI/XFxuL3N5O1xuICAgICAgICBsaW5lID0gL1sgXFx0XSoo\
              Lio/KVsgXFx0XSpcXHI/XFxuL3N5O1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBma\
              XJzdC5leGVjKHNvdXJjZSk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dX\
              JuIHNvdXJjZTtcbiAgICBsZXQgcmVzID0gbWF0Y2hbMV07XG4gICAgbGV0IHNlcCA\
              9ICcgJztcbiAgICBsZXQgcG9zID0gZmlyc3QubGFzdEluZGV4O1xuICAgIGxpbmUu\
              bGFzdEluZGV4ID0gcG9zO1xuICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lLmV4ZWMoc\
              291cmNlKSkpIHtcbiAgICAgICAgaWYgKG1hdGNoWzFdID09PSAnJykge1xuICAgIC\
              AgICAgICAgaWYgKHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgcmVzICs\
              9IHNlcDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzZXAgPSAn\
              XFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc\
              yArPSBzZXAgKyBtYXRjaFsxXTtcbiAgICAgICAgICAgIHNlcCA9ICcgJztcbiAgIC\
              AgICAgfVxuICAgICAgICBwb3MgPSBsaW5lLmxhc3RJbmRleDtcbiAgICB9XG4gICA\
              gY29uc3QgbGFzdCA9IC9bIFxcdF0qKC4qKS9zeTtcbiAgICBsYXN0Lmxhc3RJbmRl\
              eCA9IHBvcztcbiAgICBtYXRjaCA9IGxhc3QuZXhlYyhzb3VyY2UpO1xuICAgIHJld\
              HVybiByZXMgKyBzZXAgKyAobWF0Y2g/LlsxXSA/PyAnJyk7XG59XG5mdW5jdGlvbi\
              Bkb3VibGVRdW90ZWRWYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgcmV\
              zID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzb3VyY2UubGVuZ3RoIC0g\
              MTsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNoID0gc291cmNlW2ldO1xuICAgICAgI\
              CBpZiAoY2ggPT09ICdcXHInICYmIHNvdXJjZVtpICsgMV0gPT09ICdcXG4nKVxuIC\
              AgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHt\
              cbiAgICAgICAgICAgIGNvbnN0IHsgZm9sZCwgb2Zmc2V0IH0gPSBmb2xkTmV3bGlu\
              ZShzb3VyY2UsIGkpO1xuICAgICAgICAgICAgcmVzICs9IGZvbGQ7XG4gICAgICAgI\
              CAgICBpID0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoID\
              09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc291cmNlWysraV0\
              7XG4gICAgICAgICAgICBjb25zdCBjYyA9IGVzY2FwZUNvZGVzW25leHRdO1xuICAg\
              ICAgICAgICAgaWYgKGNjKVxuICAgICAgICAgICAgICAgIHJlcyArPSBjYztcbiAgI\
              CAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICdcXG4nKSB7XG4gICAgICAgICAgIC\
              AgICAgLy8gc2tpcCBlc2NhcGVkIG5ld2xpbmVzLCBidXQgc3RpbGwgdHJpbSB0aGU\
              gZm9sbG93aW5nIGxpbmVcbiAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlW2kg\
              KyAxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5le\
              HQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWy\
              sraSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV\
              4dCA9PT0gJ1xccicgJiYgc291cmNlW2kgKyAxXSA9PT0gJ1xcbicpIHtcbiAgICAg\
              ICAgICAgICAgICAvLyBza2lwIGVzY2FwZWQgQ1JMRiBuZXdsaW5lcywgYnV0IHN0a\
              WxsIHRyaW0gdGhlIGZvbGxvd2luZyBsaW5lXG4gICAgICAgICAgICAgICAgbmV4dC\
              A9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCA\
              9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBu\
              ZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgI\
              CAgZWxzZSBpZiAobmV4dCA9PT0gJ3gnIHx8IG5leHQgPT09ICd1JyB8fCBuZXh0ID\
              09PSAnVScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB7IHg6IDI\
              sIHU6IDQsIFU6IDggfVtuZXh0XTtcbiAgICAgICAgICAgICAgICByZXMgKz0gcGFy\
              c2VDaGFyQ29kZShzb3VyY2UsIGkgKyAxLCBsZW5ndGgsIG9uRXJyb3IpO1xuICAgI\
              CAgICAgICAgICAgIGkgKz0gbGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgIC\
              AgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF3ID0gc291cmNlLnN\
              1YnN0cihpIC0gMSwgMik7XG4gICAgICAgICAgICAgICAgb25FcnJvcihpIC0gMSwg\
              J0JBRF9EUV9FU0NBUEUnLCBgSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgJHtyYXd9Y\
              Ck7XG4gICAgICAgICAgICAgICAgcmVzICs9IHJhdztcbiAgICAgICAgICAgIH1cbi\
              AgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJyAnIHx8IGNoID09PSA\
              nXFx0Jykge1xuICAgICAgICAgICAgLy8gdHJpbSB0cmFpbGluZyB3aGl0ZXNwYWNl\
              XG4gICAgICAgICAgICBjb25zdCB3c1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIGxld\
              CBuZXh0ID0gc291cmNlW2kgKyAxXTtcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ID\
              09PSAnICcgfHwgbmV4dCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgbmV4dCA\
              9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSAnXFxu\
              JyAmJiAhKG5leHQgPT09ICdcXHInICYmIHNvdXJjZVtpICsgMl0gPT09ICdcXG4nK\
              SlcbiAgICAgICAgICAgICAgICByZXMgKz0gaSA+IHdzU3RhcnQgPyBzb3VyY2Uuc2\
              xpY2Uod3NTdGFydCwgaSArIDEpIDogY2g7XG4gICAgICAgIH1cbiAgICAgICAgZWx\
              zZSB7XG4gICAgICAgICAgICByZXMgKz0gY2g7XG4gICAgICAgIH1cbiAgICB9XG4g\
              ICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICdcIicgfHwgc291c\
              mNlLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgb25FcnJvcihzb3VyY2UubGVuZ3RoLC\
              AnTUlTU0lOR19DSEFSJywgJ01pc3NpbmcgY2xvc2luZyBcInF1b3RlJyk7XG4gICA\
              gcmV0dXJuIHJlcztcbn1cbi8qKlxuICogRm9sZCBhIHNpbmdsZSBuZXdsaW5lIGlu\
              dG8gYSBzcGFjZSwgbXVsdGlwbGUgbmV3bGluZXMgdG8gTiAtIDEgbmV3bGluZXMuX\
              G4gKiBQcmVzdW1lcyBgc291cmNlW29mZnNldF0gPT09ICdcXG4nYFxuICovXG5mdW\
              5jdGlvbiBmb2xkTmV3bGluZShzb3VyY2UsIG9mZnNldCkge1xuICAgIGxldCBmb2x\
              kID0gJyc7XG4gICAgbGV0IGNoID0gc291cmNlW29mZnNldCArIDFdO1xuICAgIHdo\
              aWxlIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0JyB8fCBjaCA9PT0gJ1xcbicgf\
              HwgY2ggPT09ICdcXHInKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgc2\
              91cmNlW29mZnNldCArIDJdICE9PSAnXFxuJylcbiAgICAgICAgICAgIGJyZWFrO1x\
              uICAgICAgICBpZiAoY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgZm9sZCArPSAn\
              XFxuJztcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIGNoID0gc291cmNlW\
              29mZnNldCArIDFdO1xuICAgIH1cbiAgICBpZiAoIWZvbGQpXG4gICAgICAgIGZvbG\
              QgPSAnICc7XG4gICAgcmV0dXJuIHsgZm9sZCwgb2Zmc2V0IH07XG59XG5jb25zdCB\
              lc2NhcGVDb2RlcyA9IHtcbiAgICAnMCc6ICdcXDAnLCAvLyBudWxsIGNoYXJhY3Rl\
              clxuICAgIGE6ICdcXHgwNycsIC8vIGJlbGwgY2hhcmFjdGVyXG4gICAgYjogJ1xcY\
              icsIC8vIGJhY2tzcGFjZVxuICAgIGU6ICdcXHgxYicsIC8vIGVzY2FwZSBjaGFyYW\
              N0ZXJcbiAgICBmOiAnXFxmJywgLy8gZm9ybSBmZWVkXG4gICAgbjogJ1xcbicsIC8\
              vIGxpbmUgZmVlZFxuICAgIHI6ICdcXHInLCAvLyBjYXJyaWFnZSByZXR1cm5cbiAg\
              ICB0OiAnXFx0JywgLy8gaG9yaXpvbnRhbCB0YWJcbiAgICB2OiAnXFx2JywgLy8gd\
              mVydGljYWwgdGFiXG4gICAgTjogJ1xcdTAwODUnLCAvLyBVbmljb2RlIG5leHQgbG\
              luZVxuICAgIF86ICdcXHUwMGEwJywgLy8gVW5pY29kZSBub24tYnJlYWtpbmcgc3B\
              hY2VcbiAgICBMOiAnXFx1MjAyOCcsIC8vIFVuaWNvZGUgbGluZSBzZXBhcmF0b3Jc\
              biAgICBQOiAnXFx1MjAyOScsIC8vIFVuaWNvZGUgcGFyYWdyYXBoIHNlcGFyYXRvc\
              lxuICAgICcgJzogJyAnLFxuICAgICdcIic6ICdcIicsXG4gICAgJy8nOiAnLycsXG\
              4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgJ1xcdCc6ICdcXHQnXG59O1xuZnVuY3R\
              pb24gcGFyc2VDaGFyQ29kZShzb3VyY2UsIG9mZnNldCwgbGVuZ3RoLCBvbkVycm9y\
              KSB7XG4gICAgY29uc3QgY2MgPSBzb3VyY2Uuc3Vic3RyKG9mZnNldCwgbGVuZ3RoK\
              TtcbiAgICBjb25zdCBvayA9IGNjLmxlbmd0aCA9PT0gbGVuZ3RoICYmIC9eWzAtOW\
              EtZkEtRl0rJC8udGVzdChjYyk7XG4gICAgY29uc3QgY29kZSA9IG9rID8gcGFyc2V\
              JbnQoY2MsIDE2KSA6IE5hTjtcbiAgICBpZiAoaXNOYU4oY29kZSkpIHtcbiAgICAg\
              ICAgY29uc3QgcmF3ID0gc291cmNlLnN1YnN0cihvZmZzZXQgLSAyLCBsZW5ndGggK\
              yAyKTtcbiAgICAgICAgb25FcnJvcihvZmZzZXQgLSAyLCAnQkFEX0RRX0VTQ0FQRS\
              csIGBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZSAke3Jhd31gKTtcbiAgICAgICAgcmV\
              0dXJuIHJhdztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50\
              KGNvZGUpO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRmxvd1NjYWxhciB9O1xuIiwia\
              W1wb3J0IHsgU0NBTEFSLCBpc1NjYWxhciB9IGZyb20gJy4uL25vZGVzL2lkZW50aX\
              R5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5\
              qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfSBmcm9tICcuL3Jlc29s\
              dmUtYmxvY2stc2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVGbG93U2NhbGFyI\
              H0gZnJvbSAnLi9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzJztcblxuZnVuY3Rpb24gY2\
              9tcG9zZVNjYWxhcihjdHgsIHRva2VuLCB0YWdUb2tlbiwgb25FcnJvcikge1xuICA\
              gIGNvbnN0IHsgdmFsdWUsIHR5cGUsIGNvbW1lbnQsIHJhbmdlIH0gPSB0b2tlbi50\
              eXBlID09PSAnYmxvY2stc2NhbGFyJ1xuICAgICAgICA/IHJlc29sdmVCbG9ja1NjY\
              WxhcihjdHgsIHRva2VuLCBvbkVycm9yKVxuICAgICAgICA6IHJlc29sdmVGbG93U2\
              NhbGFyKHRva2VuLCBjdHgub3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGN\
              vbnN0IHRhZ05hbWUgPSB0YWdUb2tlblxuICAgICAgICA/IGN0eC5kaXJlY3RpdmVz\
              LnRhZ05hbWUodGFnVG9rZW4uc291cmNlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlb\
              iwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZykpXG4gICAgICAgIDogbnVsbDtcbi\
              AgICBjb25zdCB0YWcgPSB0YWdUb2tlbiAmJiB0YWdOYW1lXG4gICAgICAgID8gZml\
              uZFNjYWxhclRhZ0J5TmFtZShjdHguc2NoZW1hLCB2YWx1ZSwgdGFnTmFtZSwgdGFn\
              VG9rZW4sIG9uRXJyb3IpXG4gICAgICAgIDogdG9rZW4udHlwZSA9PT0gJ3NjYWxhc\
              idcbiAgICAgICAgICAgID8gZmluZFNjYWxhclRhZ0J5VGVzdChjdHgsIHZhbHVlLC\
              B0b2tlbiwgb25FcnJvcilcbiAgICAgICAgICAgIDogY3R4LnNjaGVtYVtTQ0FMQVJ\
              dO1xuICAgIGxldCBzY2FsYXI7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVz\
              ID0gdGFnLnJlc29sdmUodmFsdWUsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuID8/I\
              HRva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSwgY3R4Lm9wdGlvbnMpO1\
              xuICAgICAgICBzY2FsYXIgPSBpc1NjYWxhcihyZXMpID8gcmVzIDogbmV3IFNjYWx\
              hcihyZXMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29u\
              c3QgbXNnID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgO\
              iBTdHJpbmcoZXJyb3IpO1xuICAgICAgICBvbkVycm9yKHRhZ1Rva2VuID8/IHRva2\
              VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKTtcbiAgICAgICAgc2NhbGFyID0\
              gbmV3IFNjYWxhcih2YWx1ZSk7XG4gICAgfVxuICAgIHNjYWxhci5yYW5nZSA9IHJh\
              bmdlO1xuICAgIHNjYWxhci5zb3VyY2UgPSB2YWx1ZTtcbiAgICBpZiAodHlwZSlcb\
              iAgICAgICAgc2NhbGFyLnR5cGUgPSB0eXBlO1xuICAgIGlmICh0YWdOYW1lKVxuIC\
              AgICAgICBzY2FsYXIudGFnID0gdGFnTmFtZTtcbiAgICBpZiAodGFnLmZvcm1hdCl\
              cbiAgICAgICAgc2NhbGFyLmZvcm1hdCA9IHRhZy5mb3JtYXQ7XG4gICAgaWYgKGNv\
              bW1lbnQpXG4gICAgICAgIHNjYWxhci5jb21tZW50ID0gY29tbWVudDtcbiAgICByZ\
              XR1cm4gc2NhbGFyO1xufVxuZnVuY3Rpb24gZmluZFNjYWxhclRhZ0J5TmFtZShzY2\
              hlbWEsIHZhbHVlLCB0YWdOYW1lLCB0YWdUb2tlbiwgb25FcnJvcikge1xuICAgIGl\
              mICh0YWdOYW1lID09PSAnIScpXG4gICAgICAgIHJldHVybiBzY2hlbWFbU0NBTEFS\
              XTsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgIGNvbnN0IG1hdGNoV2l0aFRlc3QgP\
              SBbXTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBzY2hlbWEudGFncykge1xuICAgIC\
              AgICBpZiAoIXRhZy5jb2xsZWN0aW9uICYmIHRhZy50YWcgPT09IHRhZ05hbWUpIHt\
              cbiAgICAgICAgICAgIGlmICh0YWcuZGVmYXVsdCAmJiB0YWcudGVzdClcbiAgICAg\
              ICAgICAgICAgICBtYXRjaFdpdGhUZXN0LnB1c2godGFnKTtcbiAgICAgICAgICAgI\
              GVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9XG4gIC\
              AgfVxuICAgIGZvciAoY29uc3QgdGFnIG9mIG1hdGNoV2l0aFRlc3QpXG4gICAgICA\
              gIGlmICh0YWcudGVzdD8udGVzdCh2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4g\
              dGFnO1xuICAgIGNvbnN0IGt0ID0gc2NoZW1hLmtub3duVGFnc1t0YWdOYW1lXTtcb\
              iAgICBpZiAoa3QgJiYgIWt0LmNvbGxlY3Rpb24pIHtcbiAgICAgICAgLy8gRW5zdX\
              JlIHRoYXQgdGhlIGtub3duIHRhZyBpcyBhdmFpbGFibGUgZm9yIHN0cmluZ2lmeWl\
              uZyxcbiAgICAgICAgLy8gYnV0IGRvZXMgbm90IGdldCB1c2VkIGJ5IGRlZmF1bHQu\
              XG4gICAgICAgIHNjaGVtYS50YWdzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwga3QsI\
              HsgZGVmYXVsdDogZmFsc2UsIHRlc3Q6IHVuZGVmaW5lZCB9KSk7XG4gICAgICAgIH\
              JldHVybiBrdDtcbiAgICB9XG4gICAgb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVN\
              PTFZFX0ZBSUxFRCcsIGBVbnJlc29sdmVkIHRhZzogJHt0YWdOYW1lfWAsIHRhZ05h\
              bWUgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInKTtcbiAgICByZXR1cm4gc2NoZ\
              W1hW1NDQUxBUl07XG59XG5mdW5jdGlvbiBmaW5kU2NhbGFyVGFnQnlUZXN0KHsgZG\
              lyZWN0aXZlcywgc2NoZW1hIH0sIHZhbHVlLCB0b2tlbiwgb25FcnJvcikge1xuICA\
              gIGNvbnN0IHRhZyA9IHNjaGVtYS50YWdzLmZpbmQodGFnID0+IHRhZy5kZWZhdWx0\
              ICYmIHRhZy50ZXN0Py50ZXN0KHZhbHVlKSkgfHwgc2NoZW1hW1NDQUxBUl07XG4gI\
              CAgaWYgKHNjaGVtYS5jb21wYXQpIHtcbiAgICAgICAgY29uc3QgY29tcGF0ID0gc2\
              NoZW1hLmNvbXBhdC5maW5kKHRhZyA9PiB0YWcuZGVmYXVsdCAmJiB0YWcudGVzdD8\
              udGVzdCh2YWx1ZSkpID8/XG4gICAgICAgICAgICBzY2hlbWFbU0NBTEFSXTtcbiAg\
              ICAgICAgaWYgKHRhZy50YWcgIT09IGNvbXBhdC50YWcpIHtcbiAgICAgICAgICAgI\
              GNvbnN0IHRzID0gZGlyZWN0aXZlcy50YWdTdHJpbmcodGFnLnRhZyk7XG4gICAgIC\
              AgICAgICBjb25zdCBjcyA9IGRpcmVjdGl2ZXMudGFnU3RyaW5nKGNvbXBhdC50YWc\
              pO1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFZhbHVlIG1heSBiZSBwYXJzZWQg\
              YXMgZWl0aGVyICR7dHN9IG9yICR7Y3N9YDtcbiAgICAgICAgICAgIG9uRXJyb3Iod\
              G9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2csIHRydWUpO1xuICAgICAgIC\
              B9XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2V\
              TY2FsYXIgfTtcbiIsImZ1bmN0aW9uIGVtcHR5U2NhbGFyUG9zaXRpb24ob2Zmc2V0\
              LCBiZWZvcmUsIHBvcykge1xuICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgaWYgK\
              HBvcyA9PT0gbnVsbClcbiAgICAgICAgICAgIHBvcyA9IGJlZm9yZS5sZW5ndGg7XG\
              4gICAgICAgIGZvciAobGV0IGkgPSBwb3MgLSAxOyBpID49IDA7IC0taSkge1xuICA\
              gICAgICAgICAgbGV0IHN0ID0gYmVmb3JlW2ldO1xuICAgICAgICAgICAgc3dpdGNo\
              IChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgI\
              CAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2\
              UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgLT0gc3Quc29\
              1cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAg\
              ICAgICAgICB9XG4gICAgICAgICAgICAvLyBUZWNobmljYWxseSwgYW4gZW1wdHkgc\
              2NhbGFyIGlzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBsYXN0IG5vbi1lbXB0eVxuIC\
              AgICAgICAgICAgLy8gbm9kZSwgYnV0IGl0J3MgbW9yZSB1c2VmdWwgdG8gcGxhY2U\
              gaXQgYWZ0ZXIgYW55IHdoaXRlc3BhY2UuXG4gICAgICAgICAgICBzdCA9IGJlZm9y\
              ZVsrK2ldO1xuICAgICAgICAgICAgd2hpbGUgKHN0Py50eXBlID09PSAnc3BhY2UnK\
              SB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHN0LnNvdXJjZS5sZW5ndGg7XG\
              4gICAgICAgICAgICAgICAgc3QgPSBiZWZvcmVbKytpXTtcbiAgICAgICAgICAgIH1\
              cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVy\
              biBvZmZzZXQ7XG59XG5cbmV4cG9ydCB7IGVtcHR5U2NhbGFyUG9zaXRpb24gfTtcb\
              iIsImltcG9ydCB7IEFsaWFzIH0gZnJvbSAnLi4vbm9kZXMvQWxpYXMuanMnO1xuaW\
              1wb3J0IHsgY29tcG9zZUNvbGxlY3Rpb24gfSBmcm9tICcuL2NvbXBvc2UtY29sbGV\
              jdGlvbi5qcyc7XG5pbXBvcnQgeyBjb21wb3NlU2NhbGFyIH0gZnJvbSAnLi9jb21w\
              b3NlLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZ\
              XNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyBlbXB0eVNjYWxhclBvc2l0aW9uIH0gZn\
              JvbSAnLi91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyc7XG5cbmNvbnN0IEN\
              OID0geyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9O1xuZnVuY3Rpb24g\
              Y29tcG9zZU5vZGUoY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpIHtcbiAgICBjb\
              25zdCB7IHNwYWNlQmVmb3JlLCBjb21tZW50LCBhbmNob3IsIHRhZyB9ID0gcHJvcH\
              M7XG4gICAgbGV0IG5vZGU7XG4gICAgbGV0IGlzU3JjVG9rZW4gPSB0cnVlO1xuICA\
              gIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdhbGlhcyc6XG4g\
              ICAgICAgICAgICBub2RlID0gY29tcG9zZUFsaWFzKGN0eCwgdG9rZW4sIG9uRXJyb\
              3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvciB8fCB0YWcpXG4gICAgICAgICAgIC\
              AgICAgb25FcnJvcih0b2tlbiwgJ0FMSUFTX1BST1BTJywgJ0FuIGFsaWFzIG5vZGU\
              gbXVzdCBub3Qgc3BlY2lmeSBhbnkgcHJvcGVydGllcycpO1xuICAgICAgICAgICAg\
              YnJlYWs7XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ3Npb\
              mdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC\
              1zY2FsYXInOlxuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICA\
              gICAgbm9kZSA9IGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnLCBvbkVycm9y\
              KTtcbiAgICAgICAgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgbm9kZ\
              S5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgIC\
              AgIGJyZWFrO1xuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXN\
              lICdibG9jay1zZXEnOlxuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOlxu\
              ICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VDb2xsZWN0aW9uKENOLCBjdHgsIHRva\
              2VuLCB0YWcsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvcilcbiAgIC\
              AgICAgICAgICAgICBub2RlLmFuY2hvciA9IGFuY2hvci5zb3VyY2Uuc3Vic3RyaW5\
              nKDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAg\
              ICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0b2tlbi50eXBlID09PSAnZXJyb3InX\
              G4gICAgICAgICAgICAgICAgPyB0b2tlbi5tZXNzYWdlXG4gICAgICAgICAgICAgIC\
              AgOiBgVW5zdXBwb3J0ZWQgdG9rZW4gKHR5cGU6ICR7dG9rZW4udHlwZX0pYDtcbiA\
              gICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgbWVz\
              c2FnZSk7XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZUVtcHR5Tm9kZShjdHgsI\
              HRva2VuLm9mZnNldCwgdW5kZWZpbmVkLCBudWxsLCBwcm9wcywgb25FcnJvcik7XG\
              4gICAgICAgICAgICBpc1NyY1Rva2VuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB\
              9XG4gICAgaWYgKGFuY2hvciAmJiBub2RlLmFuY2hvciA9PT0gJycpXG4gICAgICAg\
              IG9uRXJyb3IoYW5jaG9yLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBjYW5ub3QgYmUgY\
              W4gZW1wdHkgc3RyaW5nJyk7XG4gICAgaWYgKHNwYWNlQmVmb3JlKVxuICAgICAgIC\
              Bub2RlLnNwYWNlQmVmb3JlID0gdHJ1ZTtcbiAgICBpZiAoY29tbWVudCkge1xuICA\
              gICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicgJiYgdG9rZW4uc291cmNl\
              ID09PSAnJylcbiAgICAgICAgICAgIG5vZGUuY29tbWVudCA9IGNvbW1lbnQ7XG4gI\
              CAgICAgIGVsc2VcbiAgICAgICAgICAgIG5vZGUuY29tbWVudEJlZm9yZSA9IGNvbW\
              1lbnQ7XG4gICAgfVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVHlwZSBjaGVja2l\
              uZyBtaXNzZXMgbWVhbmluZyBvZiBpc1NyY1Rva2VuXG4gICAgaWYgKGN0eC5vcHRp\
              b25zLmtlZXBTb3VyY2VUb2tlbnMgJiYgaXNTcmNUb2tlbilcbiAgICAgICAgbm9kZ\
              S5zcmNUb2tlbiA9IHRva2VuO1xuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb2\
              4gY29tcG9zZUVtcHR5Tm9kZShjdHgsIG9mZnNldCwgYmVmb3JlLCBwb3MsIHsgc3B\
              hY2VCZWZvcmUsIGNvbW1lbnQsIGFuY2hvciwgdGFnLCBlbmQgfSwgb25FcnJvcikg\
              e1xuICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnc2NhbGFyJyxcb\
              iAgICAgICAgb2Zmc2V0OiBlbXB0eVNjYWxhclBvc2l0aW9uKG9mZnNldCwgYmVmb3\
              JlLCBwb3MpLFxuICAgICAgICBpbmRlbnQ6IC0xLFxuICAgICAgICBzb3VyY2U6ICc\
              nXG4gICAgfTtcbiAgICBjb25zdCBub2RlID0gY29tcG9zZVNjYWxhcihjdHgsIHRv\
              a2VuLCB0YWcsIG9uRXJyb3IpO1xuICAgIGlmIChhbmNob3IpIHtcbiAgICAgICAgb\
              m9kZS5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgIC\
              AgaWYgKG5vZGUuYW5jaG9yID09PSAnJylcbiAgICAgICAgICAgIG9uRXJyb3IoYW5\
              jaG9yLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBjYW5ub3QgYmUgYW4gZW1wdHkgc3Ry\
              aW5nJyk7XG4gICAgfVxuICAgIGlmIChzcGFjZUJlZm9yZSlcbiAgICAgICAgbm9kZ\
              S5zcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIC\
              Agbm9kZS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgbm9kZS5yYW5nZVsyXSA\
              9IGVuZDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBjb21w\
              b3NlQWxpYXMoeyBvcHRpb25zIH0sIHsgb2Zmc2V0LCBzb3VyY2UsIGVuZCB9LCBvb\
              kVycm9yKSB7XG4gICAgY29uc3QgYWxpYXMgPSBuZXcgQWxpYXMoc291cmNlLnN1Yn\
              N0cmluZygxKSk7XG4gICAgaWYgKGFsaWFzLnNvdXJjZSA9PT0gJycpXG4gICAgICA\
              gIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0FMSUFTJywgJ0FsaWFzIGNhbm5vdCBiZSBh\
              biBlbXB0eSBzdHJpbmcnKTtcbiAgICBpZiAoYWxpYXMuc291cmNlLmVuZHNXaXRoK\
              Cc6JykpXG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0ICsgc291cmNlLmxlbmd0aCAtID\
              EsICdCQURfQUxJQVMnLCAnQWxpYXMgZW5kaW5nIGluIDogaXMgYW1iaWd1b3VzJyw\
              gdHJ1ZSk7XG4gICAgY29uc3QgdmFsdWVFbmQgPSBvZmZzZXQgKyBzb3VyY2UubGVu\
              Z3RoO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIHZhbHVlRW5kLCBvc\
              HRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgYWxpYXMucmFuZ2UgPSBbb2Zmc2\
              V0LCB2YWx1ZUVuZCwgcmUub2Zmc2V0XTtcbiAgICBpZiAocmUuY29tbWVudClcbiA\
              gICAgICAgYWxpYXMuY29tbWVudCA9IHJlLmNvbW1lbnQ7XG4gICAgcmV0dXJuIGFs\
              aWFzO1xufVxuXG5leHBvcnQgeyBjb21wb3NlRW1wdHlOb2RlLCBjb21wb3NlTm9kZ\
              SB9O1xuIiwiaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICcuLi9kb2MvRG9jdW1lbn\
              QuanMnO1xuaW1wb3J0IHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSB\
              mcm9tICcuL2NvbXBvc2Utbm9kZS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0g\
              ZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgf\
              SBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuXG5mdW5jdGlvbiBjb21wb3NlRG\
              9jKG9wdGlvbnMsIGRpcmVjdGl2ZXMsIHsgb2Zmc2V0LCBzdGFydCwgdmFsdWUsIGV\
              uZCB9LCBvbkVycm9yKSB7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24o\
              eyBfZGlyZWN0aXZlczogZGlyZWN0aXZlcyB9LCBvcHRpb25zKTtcbiAgICBjb25zd\
              CBkb2MgPSBuZXcgRG9jdW1lbnQodW5kZWZpbmVkLCBvcHRzKTtcbiAgICBjb25zdC\
              BjdHggPSB7XG4gICAgICAgIGF0Um9vdDogdHJ1ZSxcbiAgICAgICAgZGlyZWN0aXZ\
              lczogZG9jLmRpcmVjdGl2ZXMsXG4gICAgICAgIG9wdGlvbnM6IGRvYy5vcHRpb25z\
              LFxuICAgICAgICBzY2hlbWE6IGRvYy5zY2hlbWFcbiAgICB9O1xuICAgIGNvbnN0I\
              HByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgIGluZGljYXRvcj\
              ogJ2RvYy1zdGFydCcsXG4gICAgICAgIG5leHQ6IHZhbHVlID8/IGVuZD8uWzBdLFx\
              uICAgICAgICBvZmZzZXQsXG4gICAgICAgIG9uRXJyb3IsXG4gICAgICAgIHBhcmVu\
              dEluZGVudDogMCxcbiAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICB9K\
              TtcbiAgICBpZiAocHJvcHMuZm91bmQpIHtcbiAgICAgICAgZG9jLmRpcmVjdGl2ZX\
              MuZG9jU3RhcnQgPSB0cnVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICA\
              gICAgICh2YWx1ZS50eXBlID09PSAnYmxvY2stbWFwJyB8fCB2YWx1ZS50eXBlID09\
              PSAnYmxvY2stc2VxJykgJiZcbiAgICAgICAgICAgICFwcm9wcy5oYXNOZXdsaW5lK\
              VxuICAgICAgICAgICAgb25FcnJvcihwcm9wcy5lbmQsICdNSVNTSU5HX0NIQVInLC\
              AnQmxvY2sgY29sbGVjdGlvbiBjYW5ub3Qgc3RhcnQgb24gc2FtZSBsaW5lIHdpdGg\
              gZGlyZWN0aXZlcy1lbmQgbWFya2VyJyk7XG4gICAgfVxuICAgIC8vIEB0cy1leHBl\
              Y3QtZXJyb3IgSWYgQ29udGVudHMgaXMgc2V0LCBsZXQncyB0cnVzdCB0aGUgdXNlc\
              lxuICAgIGRvYy5jb250ZW50cyA9IHZhbHVlXG4gICAgICAgID8gY29tcG9zZU5vZG\
              UoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgIDogY29tcG9zZUV\
              tcHR5Tm9kZShjdHgsIHByb3BzLmVuZCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVy\
              cm9yKTtcbiAgICBjb25zdCBjb250ZW50RW5kID0gZG9jLmNvbnRlbnRzLnJhbmdlW\
              zJdO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIGNvbnRlbnRFbmQsIG\
              ZhbHNlLCBvbkVycm9yKTtcbiAgICBpZiAocmUuY29tbWVudClcbiAgICAgICAgZG9\
              jLmNvbW1lbnQgPSByZS5jb21tZW50O1xuICAgIGRvYy5yYW5nZSA9IFtvZmZzZXQs\
              IGNvbnRlbnRFbmQsIHJlLm9mZnNldF07XG4gICAgcmV0dXJuIGRvYztcbn1cblxuZ\
              Xhwb3J0IHsgY29tcG9zZURvYyB9O1xuIiwiaW1wb3J0IHsgRGlyZWN0aXZlcyB9IG\
              Zyb20gJy4uL2RvYy9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IERvY3VtZW50IH0\
              gZnJvbSAnLi4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IFlBTUxXYXJuaW5n\
              LCBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQge\
              yBpc0NvbGxlY3Rpb24sIGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5Lm\
              pzJztcbmltcG9ydCB7IGNvbXBvc2VEb2MgfSBmcm9tICcuL2NvbXBvc2UtZG9jLmp\
              zJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpz\
              JztcblxuZnVuY3Rpb24gZ2V0RXJyb3JQb3Moc3JjKSB7XG4gICAgaWYgKHR5cGVvZ\
              iBzcmMgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gW3NyYywgc3JjICsgMV\
              07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSlcbiAgICAgICAgcmV0dXJuIHN\
              yYy5sZW5ndGggPT09IDIgPyBzcmMgOiBbc3JjWzBdLCBzcmNbMV1dO1xuICAgIGNv\
              bnN0IHsgb2Zmc2V0LCBzb3VyY2UgfSA9IHNyYztcbiAgICByZXR1cm4gW29mZnNld\
              Cwgb2Zmc2V0ICsgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gc291cmNlLm\
              xlbmd0aCA6IDEpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlUHJlbHVkZShwcmVsdWRlKSB\
              7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgYXRDb21tZW50ID0gZmFs\
              c2U7XG4gICAgbGV0IGFmdGVyRW1wdHlMaW5lID0gZmFsc2U7XG4gICAgZm9yIChsZ\
              XQgaSA9IDA7IGkgPCBwcmVsdWRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbn\
              N0IHNvdXJjZSA9IHByZWx1ZGVbaV07XG4gICAgICAgIHN3aXRjaCAoc291cmNlWzB\
              dKSB7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICBjb21t\
              ZW50ICs9XG4gICAgICAgICAgICAgICAgICAgIChjb21tZW50ID09PSAnJyA/ICcnI\
              DogYWZ0ZXJFbXB0eUxpbmUgPyAnXFxuXFxuJyA6ICdcXG4nKSArXG4gICAgICAgIC\
              AgICAgICAgICAgICAgICAoc291cmNlLnN1YnN0cmluZygxKSB8fCAnICcpO1xuICA\
              gICAgICAgICAgICAgIGF0Q29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAg\
              YWZ0ZXJFbXB0eUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcb\
              iAgICAgICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgICAgIGlmIChwcmVsdW\
              RlW2kgKyAxXT8uWzBdICE9PSAnIycpXG4gICAgICAgICAgICAgICAgICAgIGkgKz0\
              gMTtcbiAgICAgICAgICAgICAgICBhdENvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAg\
              ICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgI\
              CAgICAgLy8gVGhpcyBtYXkgYmUgd3JvbmcgYWZ0ZXIgZG9jLWVuZCwgYnV0IGluIH\
              RoYXQgY2FzZSBpdCBkb2Vzbid0IG1hdHRlclxuICAgICAgICAgICAgICAgIGlmICg\
              hYXRDb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBhZnRlckVtcHR5TGluZSA9\
              IHRydWU7XG4gICAgICAgICAgICAgICAgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgI\
              CAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29tbWVudCwgYWZ0ZXJFbXB0eUxpbm\
              UgfTtcbn1cbi8qKlxuICogQ29tcG9zZSBhIHN0cmVhbSBvZiBDU1Qgbm9kZXMgaW5\
              0byBhIHN0cmVhbSBvZiBZQU1MIERvY3VtZW50cy5cbiAqXG4gKiBgYGB0c1xuICog\
              aW1wb3J0IHsgQ29tcG9zZXIsIFBhcnNlciB9IGZyb20gJ3lhbWwnXG4gKlxuICogY\
              29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGNvbnN0IHRva2VucyA9IG5ldyBQYX\
              JzZXIoKS5wYXJzZShzcmMpXG4gKiBjb25zdCBkb2NzID0gbmV3IENvbXBvc2VyKCk\
              uY29tcG9zZSh0b2tlbnMpXG4gKiBgYGBcbiAqL1xuY2xhc3MgQ29tcG9zZXIge1xu\
              ICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLmRvY\
              yA9IG51bGw7XG4gICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gZmFsc2U7XG4gIC\
              AgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFt\
              dO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgICAgIHRoaXMub25F\
              cnJvciA9IChzb3VyY2UsIGNvZGUsIG1lc3NhZ2UsIHdhcm5pbmcpID0+IHtcbiAgI\
              CAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHNvdXJjZSk7XG4gICAgIC\
              AgICAgICBpZiAod2FybmluZylcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmd\
              zLnB1c2gobmV3IFlBTUxXYXJuaW5nKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAg\
              ICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gob\
              mV3IFlBTUxQYXJzZUVycm9yKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgIC\
              B9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3J\
              pcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgdGhp\
              cy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uOiBvcHRpb25zL\
              nZlcnNpb24gfHwgJzEuMicgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdG\
              lvbnM7XG4gICAgfVxuICAgIGRlY29yYXRlKGRvYywgYWZ0ZXJEb2MpIHtcbiAgICA\
              gICAgY29uc3QgeyBjb21tZW50LCBhZnRlckVtcHR5TGluZSB9ID0gcGFyc2VQcmVs\
              dWRlKHRoaXMucHJlbHVkZSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coeyBkYzogZ\
              G9jLmNvbW1lbnQsIHByZWx1ZGUsIGNvbW1lbnQgfSlcbiAgICAgICAgaWYgKGNvbW\
              1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRjID0gZG9jLmNvbnRlbnRzO1xuICA\
              gICAgICAgICAgaWYgKGFmdGVyRG9jKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNv\
              bW1lbnQgPSBkb2MuY29tbWVudCA/IGAke2RvYy5jb21tZW50fVxcbiR7Y29tbWVud\
              H1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaW\
              YgKGFmdGVyRW1wdHlMaW5lIHx8IGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0IHx8ICF\
              kYykge1xuICAgICAgICAgICAgICAgIGRvYy5jb21tZW50QmVmb3JlID0gY29tbWVu\
              dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQ29sbGVjd\
              GlvbihkYykgJiYgIWRjLmZsb3cgJiYgZGMuaXRlbXMubGVuZ3RoID4gMCkge1xuIC\
              AgICAgICAgICAgICAgIGxldCBpdCA9IGRjLml0ZW1zWzBdO1xuICAgICAgICAgICA\
              gICAgIGlmIChpc1BhaXIoaXQpKVxuICAgICAgICAgICAgICAgICAgICBpdCA9IGl0\
              LmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IGl0LmNvbW1lbnRCZWZvc\
              mU7XG4gICAgICAgICAgICAgICAgaXQuY29tbWVudEJlZm9yZSA9IGNiID8gYCR7Y2\
              9tbWVudH1cXG4ke2NifWAgOiBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICA\
              gICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSBkYy5jb21t\
              ZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGRjLmNvbW1lbnRCZWZvcmUgPSBjY\
              iA/IGAke2NvbW1lbnR9XFxuJHtjYn1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH\
              1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWZ0ZXJEb2MpIHtcbiAgICAgICAgICA\
              gIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy5lcnJvcnMsIHRoaXMuZXJy\
              b3JzKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvY\
              y53YXJuaW5ncywgdGhpcy53YXJuaW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgZW\
              xzZSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICA\
              gICAgICAgICBkb2Mud2FybmluZ3MgPSB0aGlzLndhcm5pbmdzO1xuICAgICAgICB9\
              XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9yc\
              yA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgfVxuICAgIC\
              8qKlxuICAgICAqIEN1cnJlbnQgc3RyZWFtIHN0YXR1cyBpbmZvcm1hdGlvbi5cbiA\
              gICAgKlxuICAgICAqIE1vc3RseSB1c2VmdWwgYXQgdGhlIGVuZCBvZiBpbnB1dCBm\
              b3IgYW4gZW1wdHkgc3RyZWFtLlxuICAgICAqL1xuICAgIHN0cmVhbUluZm8oKSB7X\
              G4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21tZW50OiBwYXJzZVByZW\
              x1ZGUodGhpcy5wcmVsdWRlKS5jb21tZW50LFxuICAgICAgICAgICAgZGlyZWN0aXZ\
              lczogdGhpcy5kaXJlY3RpdmVzLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLmVy\
              cm9ycyxcbiAgICAgICAgICAgIHdhcm5pbmdzOiB0aGlzLndhcm5pbmdzXG4gICAgI\
              CAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBvc2UgdG9rZW5zIGludG\
              8gZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlRG9jIC0gSWY\
              gdGhlIHN0cmVhbSBjb250YWlucyBubyBkb2N1bWVudCwgc3RpbGwgZW1pdCBhIGZp\
              bmFsIGRvY3VtZW50IGluY2x1ZGluZyBhbnkgY29tbWVudHMgYW5kIGRpcmVjdGl2Z\
              XMgdGhhdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGEgc3Vic2VxdWVudCBkb2N1bWVudC\
              5cbiAgICAgKiBAcGFyYW0gZW5kT2Zmc2V0IC0gU2hvdWxkIGJlIHNldCBpZiBgZm9\
              yY2VEb2NgIGlzIGFsc28gc2V0LCB0byBzZXQgdGhlIGRvY3VtZW50IHJhbmdlIGVu\
              ZCBhbmQgdG8gaW5kaWNhdGUgZXJyb3JzIGNvcnJlY3RseS5cbiAgICAgKi9cbiAgI\
              CAqY29tcG9zZSh0b2tlbnMsIGZvcmNlRG9jID0gZmFsc2UsIGVuZE9mZnNldCA9IC\
              0xKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKVxuICAgICA\
              gICAgICAgeWllbGQqIHRoaXMubmV4dCh0b2tlbik7XG4gICAgICAgIHlpZWxkKiB0\
              aGlzLmVuZChmb3JjZURvYywgZW5kT2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIEFkd\
              mFuY2UgdGhlIGNvbXBvc2VyIGJ5IG9uZSBDU1QgdG9rZW4uICovXG4gICAgKm5leH\
              QodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICA\
              gICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGly\
              ZWN0aXZlcy5hZGQodG9rZW4uc291cmNlLCAob2Zmc2V0LCBtZXNzYWdlLCB3YXJua\
              W5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm\
              9yUG9zKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zWzBdICs9IG9mZnN\
              ldDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHBvcywgJ0JBRF9E\
              SVJFQ1RJVkUnLCBtZXNzYWdlLCB3YXJuaW5nKTtcbiAgICAgICAgICAgICAgICB9K\
              TtcbiAgICAgICAgICAgICAgICB0aGlzLnByZWx1ZGUucHVzaCh0b2tlbi5zb3VyY2\
              UpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gdHJ1ZTtcbiA\
              gICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50\
              Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IGNvbXBvc2VEb2ModGhpc\
              y5vcHRpb25zLCB0aGlzLmRpcmVjdGl2ZXMsIHRva2VuLCB0aGlzLm9uRXJyb3IpO1\
              xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0RGlyZWN0aXZlcyAmJiAhZG9jLmR\
              pcmVjdGl2ZXMuZG9jU3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25F\
              cnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGRpcmVjdGl2ZXMtZ\
              W5kL2RvYy1zdGFydCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgICAgIH\
              RoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR\
              oaXMuZG9jKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRvYztcbiAg\
              ICAgICAgICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgICAgICAgICB0a\
              GlzLmF0RGlyZWN0aXZlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1\
              xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYnl0ZS1vcmRlci1tYXJ\
              rJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBi\
              cmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY\
              2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsdWRlLnB1c2\
              godG9rZW4uc291cmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICA\
              gICAgIGNhc2UgJ2Vycm9yJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9\
              IHRva2VuLnNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/IGAke3Rva2VuLm1lc\
              3NhZ2V9OiAke0pTT04uc3RyaW5naWZ5KHRva2VuLnNvdXJjZSl9YFxuICAgICAgIC\
              AgICAgICAgICAgICA6IHRva2VuLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY29\
              uc3QgZXJyb3IgPSBuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4p\
              LCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1zZyk7XG4gICAgICAgICAgICAgICAgaWYgK\
              HRoaXMuYXREaXJlY3RpdmVzIHx8ICF0aGlzLmRvYylcbiAgICAgICAgICAgICAgIC\
              AgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgZWx\
              zZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5lcnJvcnMucHVzaChlcnJv\
              cik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgI\
              CAgICAgICBjYXNlICdkb2MtZW5kJzoge1xuICAgICAgICAgICAgICAgIGlmICghdG\
              hpcy5kb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ1VuZXh\
              wZWN0ZWQgZG9jLWVuZCB3aXRob3V0IHByZWNlZGluZyBkb2N1bWVudCc7XG4gICAg\
              ICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVyc\
              m9yKGdldEVycm9yUG9zKHRva2VuKSwgJ1VORVhQRUNURURfVE9LRU4nLCBtc2cpKT\
              tcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVx\
              uICAgICAgICAgICAgICAgIHRoaXMuZG9jLmRpcmVjdGl2ZXMuZG9jRW5kID0gdHJ1\
              ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSByZXNvbHZlRW5kKHRva2VuL\
              mVuZCwgdG9rZW4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCwgdGhpcy5kb2\
              Mub3B0aW9ucy5zdHJpY3QsIHRoaXMub25FcnJvcik7XG4gICAgICAgICAgICAgICA\
              gdGhpcy5kZWNvcmF0ZSh0aGlzLmRvYywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAg\
              aWYgKGVuZC5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRjI\
              D0gdGhpcy5kb2MuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2\
              MuY29tbWVudCA9IGRjID8gYCR7ZGN9XFxuJHtlbmQuY29tbWVudH1gIDogZW5kLmN\
              vbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMu\
              ZG9jLnJhbmdlWzJdID0gZW5kLm9mZnNldDtcbiAgICAgICAgICAgICAgICBicmVha\
              ztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC\
              AgICAgICAgdGhpcy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJ\
              yb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbnN1cHBvcnRlZCB0\
              b2tlbiAke3Rva2VuLnR5cGV9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qK\
              lxuICAgICAqIENhbGwgYXQgZW5kIG9mIGlucHV0IHRvIHlpZWxkIGFueSByZW1haW\
              5pbmcgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2VEb2MgLSB\
              JZiB0aGUgc3RyZWFtIGNvbnRhaW5zIG5vIGRvY3VtZW50LCBzdGlsbCBlbWl0IGEg\
              ZmluYWwgZG9jdW1lbnQgaW5jbHVkaW5nIGFueSBjb21tZW50cyBhbmQgZGlyZWN0a\
              XZlcyB0aGF0IHdvdWxkIGJlIGFwcGxpZWQgdG8gYSBzdWJzZXF1ZW50IGRvY3VtZW\
              50LlxuICAgICAqIEBwYXJhbSBlbmRPZmZzZXQgLSBTaG91bGQgYmUgc2V0IGlmIGB\
              mb3JjZURvY2AgaXMgYWxzbyBzZXQsIHRvIHNldCB0aGUgZG9jdW1lbnQgcmFuZ2Ug\
              ZW5kIGFuZCB0byBpbmRpY2F0ZSBlcnJvcnMgY29ycmVjdGx5LlxuICAgICAqL1xuI\
              CAgICplbmQoZm9yY2VEb2MgPSBmYWxzZSwgZW5kT2Zmc2V0ID0gLTEpIHtcbiAgIC\
              AgICAgaWYgKHRoaXMuZG9jKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRlKHR\
              oaXMuZG9jLCB0cnVlKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZG9jO1xuICAg\
              ICAgICAgICAgdGhpcy5kb2MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc\
              2UgaWYgKGZvcmNlRG9jKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gT2JqZW\
              N0LmFzc2lnbih7IF9kaXJlY3RpdmVzOiB0aGlzLmRpcmVjdGl2ZXMgfSwgdGhpcy5\
              vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IG5ldyBEb2N1bWVudCh1\
              bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3Rpd\
              mVzKVxuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlbmRPZmZzZXQsICdNSV\
              NTSU5HX0NIQVInLCAnTWlzc2luZyBkaXJlY3RpdmVzLWVuZCBpbmRpY2F0b3IgbGl\
              uZScpO1xuICAgICAgICAgICAgZG9jLnJhbmdlID0gWzAsIGVuZE9mZnNldCwgZW5k\
              T2Zmc2V0XTtcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7X\
              G4gICAgICAgICAgICB5aWVsZCBkb2M7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm\
              V4cG9ydCB7IENvbXBvc2VyIH07XG4iLCJleHBvcnQgeyBjcmVhdGVTY2FsYXJUb2t\
              lbiwgcmVzb2x2ZUFzU2NhbGFyLCBzZXRTY2FsYXJWYWx1ZSB9IGZyb20gJy4vY3N0\
              LXNjYWxhci5qcyc7XG5leHBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL2NzdC1zd\
              HJpbmdpZnkuanMnO1xuZXhwb3J0IHsgdmlzaXQgfSBmcm9tICcuL2NzdC12aXNpdC\
              5qcyc7XG5cbi8qKiBUaGUgYnl0ZSBvcmRlciBtYXJrICovXG5jb25zdCBCT00gPSA\
              nXFx1e0ZFRkZ9Jztcbi8qKiBTdGFydCBvZiBkb2MtbW9kZSAqL1xuY29uc3QgRE9D\
              VU1FTlQgPSAnXFx4MDInOyAvLyBDMDogU3RhcnQgb2YgVGV4dFxuLyoqIFVuZXhwZ\
              WN0ZWQgZW5kIG9mIGZsb3ctbW9kZSAqL1xuY29uc3QgRkxPV19FTkQgPSAnXFx4MT\
              gnOyAvLyBDMDogQ2FuY2VsXG4vKiogTmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx\
              1ZSAqL1xuY29uc3QgU0NBTEFSID0gJ1xceDFmJzsgLy8gQzA6IFVuaXQgU2VwYXJh\
              dG9yXG4vKiogQHJldHVybnMgYHRydWVgIGlmIGB0b2tlbmAgaXMgYSBmbG93IG9yI\
              GJsb2NrIGNvbGxlY3Rpb24gKi9cbmNvbnN0IGlzQ29sbGVjdGlvbiA9ICh0b2tlbi\
              kgPT4gISF0b2tlbiAmJiAnaXRlbXMnIGluIHRva2VuO1xuLyoqIEByZXR1cm5zIGB\
              0cnVlYCBpZiBgdG9rZW5gIGlzIGEgZmxvdyBvciBibG9jayBzY2FsYXI7IG5vdCBh\
              biBhbGlhcyAqL1xuY29uc3QgaXNTY2FsYXIgPSAodG9rZW4pID0+ICEhdG9rZW4gJ\
              iZcbiAgICAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicgfHxcbiAgICAgICAgdG9rZW\
              4udHlwZSA9PT0gJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJyB8fFxuICAgICAgICB0b2t\
              lbi50eXBlID09PSAnZG91YmxlLXF1b3RlZC1zY2FsYXInIHx8XG4gICAgICAgIHRv\
              a2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInKTtcbi8qIGlzdGFuYnVsIGlnbm9yZ\
              SBuZXh0ICovXG4vKiogR2V0IGEgcHJpbnRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIG\
              EgbGV4ZXIgdG9rZW4gKi9cbmZ1bmN0aW9uIHByZXR0eVRva2VuKHRva2VuKSB7XG4\
              gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlIEJPTTpcbiAgICAgICAg\
              ICAgIHJldHVybiAnPEJPTT4nO1xuICAgICAgICBjYXNlIERPQ1VNRU5UOlxuICAgI\
              CAgICAgICAgcmV0dXJuICc8RE9DPic7XG4gICAgICAgIGNhc2UgRkxPV19FTkQ6XG\
              4gICAgICAgICAgICByZXR1cm4gJzxGTE9XX0VORD4nO1xuICAgICAgICBjYXNlIFN\
              DQUxBUjpcbiAgICAgICAgICAgIHJldHVybiAnPFNDQUxBUj4nO1xuICAgICAgICBk\
              ZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRva2VuK\
              TtcbiAgICB9XG59XG4vKiogSWRlbnRpZnkgdGhlIHR5cGUgb2YgYSBsZXhlciB0b2\
              tlbi4gTWF5IHJldHVybiBgbnVsbGAgZm9yIHVua25vd24gdG9rZW5zLiAqL1xuZnV\
              uY3Rpb24gdG9rZW5UeXBlKHNvdXJjZSkge1xuICAgIHN3aXRjaCAoc291cmNlKSB7\
              XG4gICAgICAgIGNhc2UgQk9NOlxuICAgICAgICAgICAgcmV0dXJuICdieXRlLW9yZ\
              GVyLW1hcmsnO1xuICAgICAgICBjYXNlIERPQ1VNRU5UOlxuICAgICAgICAgICAgcm\
              V0dXJuICdkb2MtbW9kZSc7XG4gICAgICAgIGNhc2UgRkxPV19FTkQ6XG4gICAgICA\
              gICAgICByZXR1cm4gJ2Zsb3ctZXJyb3ItZW5kJztcbiAgICAgICAgY2FzZSBTQ0FM\
              QVI6XG4gICAgICAgICAgICByZXR1cm4gJ3NjYWxhcic7XG4gICAgICAgIGNhc2UgJ\
              y0tLSc6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1zdGFydCc7XG4gICAgICAgIG\
              Nhc2UgJy4uLic6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1lbmQnO1xuICAgICA\
              gICBjYXNlICcnOlxuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICBjYXNlICdc\
              XHJcXG4nOlxuICAgICAgICAgICAgcmV0dXJuICduZXdsaW5lJztcbiAgICAgICAgY\
              2FzZSAnLSc6XG4gICAgICAgICAgICByZXR1cm4gJ3NlcS1pdGVtLWluZCc7XG4gIC\
              AgICAgIGNhc2UgJz8nOlxuICAgICAgICAgICAgcmV0dXJuICdleHBsaWNpdC1rZXk\
              taW5kJztcbiAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICByZXR1cm4gJ21h\
              cC12YWx1ZS1pbmQnO1xuICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIHJld\
              HVybiAnZmxvdy1tYXAtc3RhcnQnO1xuICAgICAgICBjYXNlICd9JzpcbiAgICAgIC\
              AgICAgIHJldHVybiAnZmxvdy1tYXAtZW5kJztcbiAgICAgICAgY2FzZSAnWyc6XG4\
              gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctc2VxLXN0YXJ0JztcbiAgICAgICAgY2Fz\
              ZSAnXSc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctc2VxLWVuZCc7XG4gICAgI\
              CAgIGNhc2UgJywnOlxuICAgICAgICAgICAgcmV0dXJuICdjb21tYSc7XG4gICAgfV\
              xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIGNhc2UgJyAnOlxuICA\
              gICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgcmV0dXJuICdzcGFjZSc7XG4g\
              ICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgcmV0dXJuICdjb21tZW50Jztcb\
              iAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICByZXR1cm4gJ2RpcmVjdGl2ZS\
              1saW5lJztcbiAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICByZXR1cm4gJ2F\
              saWFzJztcbiAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICByZXR1cm4gJ2Fu\
              Y2hvcic7XG4gICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgcmV0dXJuICd0Y\
              WcnO1xuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgcmV0dXJuICdzaW\
              5nbGUtcXVvdGVkLXNjYWxhcic7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICA\
              gICAgIHJldHVybiAnZG91YmxlLXF1b3RlZC1zY2FsYXInO1xuICAgICAgICBjYXNl\
              ICd8JzpcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICByZXR1cm4gJ2Jsb\
              2NrLXNjYWxhci1oZWFkZXInO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbl\
              xuZXhwb3J0IHsgQk9NLCBET0NVTUVOVCwgRkxPV19FTkQsIFNDQUxBUiwgaXNDb2x\
              sZWN0aW9uLCBpc1NjYWxhciwgcHJldHR5VG9rZW4sIHRva2VuVHlwZSB9O1xuIiwi\
              aW1wb3J0IHsgcmVzb2x2ZUJsb2NrU2NhbGFyIH0gZnJvbSAnLi4vY29tcG9zZS9yZ\
              XNvbHZlLWJsb2NrLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmxvd1NjYW\
              xhciB9IGZyb20gJy4uL2NvbXBvc2UvcmVzb2x2ZS1mbG93LXNjYWxhci5qcyc7XG5\
              pbXBvcnQgeyBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5p\
              bXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3Rya\
              W5naWZ5U3RyaW5nLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUFzU2NhbGFyKHRva2\
              VuLCBzdHJpY3QgPSB0cnVlLCBvbkVycm9yKSB7XG4gICAgaWYgKHRva2VuKSB7XG4\
              gICAgICAgIGNvbnN0IF9vbkVycm9yID0gKHBvcywgY29kZSwgbWVzc2FnZSkgPT4g\
              e1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdHlwZW9mIHBvcyA9PT0gJ251b\
              WJlcicgPyBwb3MgOiBBcnJheS5pc0FycmF5KHBvcykgPyBwb3NbMF0gOiBwb3Mub2\
              Zmc2V0O1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpXG4gICAgICAgICAgICAgICA\
              gb25FcnJvcihvZmZzZXQsIGNvZGUsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgZWxz\
              ZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBZQU1MUGFyc2VFcnJvcihbb2Zmc\
              2V0LCBvZmZzZXQgKyAxXSwgY29kZSwgbWVzc2FnZSk7XG4gICAgICAgIH07XG4gIC\
              AgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2N\
              hbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpc\
              biAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgI\
              CAgICAgICAgICByZXR1cm4gcmVzb2x2ZUZsb3dTY2FsYXIodG9rZW4sIHN0cmljdC\
              wgX29uRXJyb3IpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiA\
              gICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUJsb2NrU2NhbGFyKHsgb3B0aW9u\
              czogeyBzdHJpY3QgfSB9LCB0b2tlbiwgX29uRXJyb3IpO1xuICAgICAgICB9XG4gI\
              CAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2\
              NhbGFyIHRva2VuIHdpdGggYHZhbHVlYFxuICpcbiAqIFZhbHVlcyB0aGF0IHJlcHJ\
              lc2VudCBhbiBhY3R1YWwgc3RyaW5nIGJ1dCBtYXkgYmUgcGFyc2VkIGFzIGEgZGlm\
              ZmVyZW50IHR5cGUgc2hvdWxkIHVzZSBhIGB0eXBlYCBvdGhlciB0aGFuIGAnUExBS\
              U4nYCxcbiAqIGFzIHRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCBhbnkgc2\
              NoZW1hIG9wZXJhdGlvbnMgYW5kIHdvbid0IGNoZWNrIGZvciBzdWNoIGNvbmZsaWN\
              0cy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHN0cmluZyByZXByZXNlbnRhdGlv\
              biBvZiB0aGUgdmFsdWUsIHdoaWNoIHdpbGwgaGF2ZSBpdHMgY29udGVudCBwcm9wZ\
              XJseSBpbmRlbnRlZC5cbiAqIEBwYXJhbSBjb250ZXh0LmVuZCBDb21tZW50cyBhbm\
              Qgd2hpdGVzcGFjZSBhZnRlciB0aGUgZW5kIG9mIHRoZSB2YWx1ZSwgb3IgYWZ0ZXI\
              gdGhlIGJsb2NrIHNjYWxhciBoZWFkZXIuIElmIHVuZGVmaW5lZCwgYSBuZXdsaW5l\
              IHdpbGwgYmUgYWRkZWQuXG4gKiBAcGFyYW0gY29udGV4dC5pbXBsaWNpdEtleSBCZ\
              WluZyB3aXRoaW4gYW4gaW1wbGljaXQga2V5IG1heSBhZmZlY3QgdGhlIHJlc29sdm\
              VkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC5\
              pbmRlbnQgVGhlIGluZGVudCBsZXZlbCBvZiB0aGUgdG9rZW4uXG4gKiBAcGFyYW0g\
              Y29udGV4dC5pbkZsb3cgSXMgdGhpcyBzY2FsYXIgd2l0aGluIGEgZmxvdyBjb2xsZ\
              WN0aW9uPyBUaGlzIG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIH\
              Rva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC5vZmZzZXQgVGhlIG9mZnN\
              ldCBwb3NpdGlvbiBvZiB0aGUgdG9rZW4uXG4gKiBAcGFyYW0gY29udGV4dC50eXBl\
              IFRoZSBwcmVmZXJyZWQgdHlwZSBvZiB0aGUgc2NhbGFyIHRva2VuLiBJZiB1bmRlZ\
              mluZWQsIHRoZSBwcmV2aW91cyB0eXBlIG9mIHRoZSBgdG9rZW5gIHdpbGwgYmUgdX\
              NlZCwgZGVmYXVsdGluZyB0byBgJ1BMQUlOJ2AuXG4gKi9cbmZ1bmN0aW9uIGNyZWF\
              0ZVNjYWxhclRva2VuKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgY29uc3QgeyBpbXBs\
              aWNpdEtleSA9IGZhbHNlLCBpbmRlbnQsIGluRmxvdyA9IGZhbHNlLCBvZmZzZXQgP\
              SAtMSwgdHlwZSA9ICdQTEFJTicgfSA9IGNvbnRleHQ7XG4gICAgY29uc3Qgc291cm\
              NlID0gc3RyaW5naWZ5U3RyaW5nKHsgdHlwZSwgdmFsdWUgfSwge1xuICAgICAgICB\
              pbXBsaWNpdEtleSxcbiAgICAgICAgaW5kZW50OiBpbmRlbnQgPiAwID8gJyAnLnJl\
              cGVhdChpbmRlbnQpIDogJycsXG4gICAgICAgIGluRmxvdyxcbiAgICAgICAgb3B0a\
              W9uczogeyBibG9ja1F1b3RlOiB0cnVlLCBsaW5lV2lkdGg6IC0xIH1cbiAgICB9KT\
              tcbiAgICBjb25zdCBlbmQgPSBjb250ZXh0LmVuZCA/PyBbXG4gICAgICAgIHsgdHl\
              wZTogJ25ld2xpbmUnLCBvZmZzZXQ6IC0xLCBpbmRlbnQsIHNvdXJjZTogJ1xcbicg\
              fVxuICAgIF07XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZ\
              SAnfCc6XG4gICAgICAgIGNhc2UgJz4nOiB7XG4gICAgICAgICAgICBjb25zdCBoZS\
              A9IHNvdXJjZS5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWQ\
              gPSBzb3VyY2Uuc3Vic3RyaW5nKDAsIGhlKTtcbiAgICAgICAgICAgIGNvbnN0IGJv\
              ZHkgPSBzb3VyY2Uuc3Vic3RyaW5nKGhlICsgMSkgKyAnXFxuJztcbiAgICAgICAgI\
              CAgIGNvbnN0IHByb3BzID0gW1xuICAgICAgICAgICAgICAgIHsgdHlwZTogJ2Jsb2\
              NrLXNjYWxhci1oZWFkZXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlOiBoZWFkIH1\
              cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoIWFkZEVuZHRvQmxvY2tQ\
              cm9wcyhwcm9wcywgZW5kKSlcbiAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHsgd\
              HlwZTogJ25ld2xpbmUnLCBvZmZzZXQ6IC0xLCBpbmRlbnQsIHNvdXJjZTogJ1xcbi\
              cgfSk7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnYmxvY2stc2NhbGFyJyw\
              gb2Zmc2V0LCBpbmRlbnQsIHByb3BzLCBzb3VyY2U6IGJvZHkgfTtcbiAgICAgICAg\
              fVxuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlO\
              iAnZG91YmxlLXF1b3RlZC1zY2FsYXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlLC\
              BlbmQgfTtcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHJldHVybiB\
              7IHR5cGU6ICdzaW5nbGUtcXVvdGVkLXNjYWxhcicsIG9mZnNldCwgaW5kZW50LCBz\
              b3VyY2UsIGVuZCB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0d\
              XJuIHsgdHlwZTogJ3NjYWxhcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2UsIGVuZC\
              B9O1xuICAgIH1cbn1cbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgdG9rZW5gIHR\
              vIHRoZSBnaXZlbiBzdHJpbmcgYHZhbHVlYCwgb3ZlcndyaXRpbmcgYW55IHByZXZp\
              b3VzIGNvbnRlbnRzIGFuZCB0eXBlIHRoYXQgaXQgbWF5IGhhdmUuXG4gKlxuICogQ\
              mVzdCBlZmZvcnRzIGFyZSBtYWRlIHRvIHJldGFpbiBhbnkgY29tbWVudHMgcHJldm\
              lvdXNseSBhc3NvY2lhdGVkIHdpdGggdGhlIGB0b2tlbmAsXG4gKiB0aG91Z2ggYWx\
              sIGNvbnRlbnRzIHdpdGhpbiBhIGNvbGxlY3Rpb24ncyBgaXRlbXNgIHdpbGwgYmUg\
              b3ZlcndyaXR0ZW4uXG4gKlxuICogVmFsdWVzIHRoYXQgcmVwcmVzZW50IGFuIGFjd\
              HVhbCBzdHJpbmcgYnV0IG1heSBiZSBwYXJzZWQgYXMgYSBkaWZmZXJlbnQgdHlwZS\
              BzaG91bGQgdXNlIGEgYHR5cGVgIG90aGVyIHRoYW4gYCdQTEFJTidgLFxuICogYXM\
              gdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGFueSBzY2hlbWEgb3BlcmF0\
              aW9ucyBhbmQgd29uJ3QgY2hlY2sgZm9yIHN1Y2ggY29uZmxpY3RzLlxuICpcbiAqI\
              EBwYXJhbSB0b2tlbiBBbnkgdG9rZW4uIElmIGl0IGRvZXMgbm90IGluY2x1ZGUgYW\
              4gYGluZGVudGAgdmFsdWUsIHRoZSB2YWx1ZSB3aWxsIGJlIHN0cmluZ2lmaWVkIGF\
              zIGlmIGl0IHdlcmUgYW4gaW1wbGljaXQga2V5LlxuICogQHBhcmFtIHZhbHVlIFRo\
              ZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlLCB3aGljaCB3aWxsI\
              GhhdmUgaXRzIGNvbnRlbnQgcHJvcGVybHkgaW5kZW50ZWQuXG4gKiBAcGFyYW0gY2\
              9udGV4dC5hZnRlcktleSBJbiBtb3N0IGNhc2VzLCB2YWx1ZXMgYWZ0ZXIgYSBrZXk\
              gc2hvdWxkIGhhdmUgYW4gYWRkaXRpb25hbCBsZXZlbCBvZiBpbmRlbnRhdGlvbi5c\
              biAqIEBwYXJhbSBjb250ZXh0LmltcGxpY2l0S2V5IEJlaW5nIHdpdGhpbiBhbiBpb\
              XBsaWNpdCBrZXkgbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG\
              9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0LmluRmxvdyBCZWluZyB3aXR\
              oaW4gYSBmbG93IGNvbGxlY3Rpb24gbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlw\
              ZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0LnR5cGUgV\
              GhlIHByZWZlcnJlZCB0eXBlIG9mIHRoZSBzY2FsYXIgdG9rZW4uIElmIHVuZGVmaW\
              5lZCwgdGhlIHByZXZpb3VzIHR5cGUgb2YgdGhlIGB0b2tlbmAgd2lsbCBiZSB1c2V\
              kLCBkZWZhdWx0aW5nIHRvIGAnUExBSU4nYC5cbiAqL1xuZnVuY3Rpb24gc2V0U2Nh\
              bGFyVmFsdWUodG9rZW4sIHZhbHVlLCBjb250ZXh0ID0ge30pIHtcbiAgICBsZXQge\
              yBhZnRlcktleSA9IGZhbHNlLCBpbXBsaWNpdEtleSA9IGZhbHNlLCBpbkZsb3cgPS\
              BmYWxzZSwgdHlwZSB9ID0gY29udGV4dDtcbiAgICBsZXQgaW5kZW50ID0gJ2luZGV\
              udCcgaW4gdG9rZW4gPyB0b2tlbi5pbmRlbnQgOiBudWxsO1xuICAgIGlmIChhZnRl\
              cktleSAmJiB0eXBlb2YgaW5kZW50ID09PSAnbnVtYmVyJylcbiAgICAgICAgaW5kZ\
              W50ICs9IDI7XG4gICAgaWYgKCF0eXBlKVxuICAgICAgICBzd2l0Y2ggKHRva2VuLn\
              R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzp\
              cbiAgICAgICAgICAgICAgICB0eXBlID0gJ1FVT1RFX1NJTkdMRSc7XG4gICAgICAg\
              ICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkL\
              XNjYWxhcic6XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdRVU9URV9ET1VCTEUnO1\
              xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2s\
              tc2NhbGFyJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHRva2Vu\
              LnByb3BzWzBdO1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIudHlwZSAhPT0gJ\
              2Jsb2NrLXNjYWxhci1oZWFkZXInKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdy\
              BuZXcgRXJyb3IoJ0ludmFsaWQgYmxvY2sgc2NhbGFyIGhlYWRlcicpO1xuICAgICA\
              gICAgICAgICAgIHR5cGUgPSBoZWFkZXIuc291cmNlWzBdID09PSAnPicgPyAnQkxP\
              Q0tfRk9MREVEJyA6ICdCTE9DS19MSVRFUkFMJztcbiAgICAgICAgICAgICAgICBic\
              mVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgIC\
              AgICAgICAgICAgdHlwZSA9ICdQTEFJTic7XG4gICAgICAgIH1cbiAgICBjb25zdCB\
              zb3VyY2UgPSBzdHJpbmdpZnlTdHJpbmcoeyB0eXBlLCB2YWx1ZSB9LCB7XG4gICAg\
              ICAgIGltcGxpY2l0S2V5OiBpbXBsaWNpdEtleSB8fCBpbmRlbnQgPT09IG51bGwsX\
              G4gICAgICAgIGluZGVudDogaW5kZW50ICE9PSBudWxsICYmIGluZGVudCA+IDAgPy\
              AnICcucmVwZWF0KGluZGVudCkgOiAnJyxcbiAgICAgICAgaW5GbG93LFxuICAgICA\
              gICBvcHRpb25zOiB7IGJsb2NrUXVvdGU6IHRydWUsIGxpbmVXaWR0aDogLTEgfVxu\
              ICAgIH0pO1xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIGNhc2UgJ\
              3wnOlxuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgIHNldEJsb2NrU2NhbG\
              FyVmFsdWUodG9rZW4sIHNvdXJjZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICA\
              gICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgc2V0Rmxvd1NjYWxhclZhbHVlKHRv\
              a2VuLCBzb3VyY2UsICdkb3VibGUtcXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgI\
              CAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICBzZXRGbG\
              93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgJ3NpbmdsZS1xdW90ZWQtc2NhbGF\
              yJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAg\
              ICAgICAgIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCAnc2NhbGFyJ\
              yk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0QmxvY2tTY2FsYXJWYWx1ZSh0b2tlbi\
              wgc291cmNlKSB7XG4gICAgY29uc3QgaGUgPSBzb3VyY2UuaW5kZXhPZignXFxuJyk\
              7XG4gICAgY29uc3QgaGVhZCA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgaGUpO1xuICAg\
              IGNvbnN0IGJvZHkgPSBzb3VyY2Uuc3Vic3RyaW5nKGhlICsgMSkgKyAnXFxuJztcb\
              iAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpIHtcbiAgICAgIC\
              AgY29uc3QgaGVhZGVyID0gdG9rZW4ucHJvcHNbMF07XG4gICAgICAgIGlmIChoZWF\
              kZXIudHlwZSAhPT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKVxuICAgICAgICAgICAg\
              dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJsb2NrIHNjYWxhciBoZWFkZXInKTtcb\
              iAgICAgICAgaGVhZGVyLnNvdXJjZSA9IGhlYWQ7XG4gICAgICAgIHRva2VuLnNvdX\
              JjZSA9IGJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB7IG9\
              mZnNldCB9ID0gdG9rZW47XG4gICAgICAgIGNvbnN0IGluZGVudCA9ICdpbmRlbnQn\
              IGluIHRva2VuID8gdG9rZW4uaW5kZW50IDogLTE7XG4gICAgICAgIGNvbnN0IHByb\
              3BzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiAnYmxvY2stc2NhbGFyLWhlYWRlci\
              csIG9mZnNldCwgaW5kZW50LCBzb3VyY2U6IGhlYWQgfVxuICAgICAgICBdO1xuICA\
              gICAgICBpZiAoIWFkZEVuZHRvQmxvY2tQcm9wcyhwcm9wcywgJ2VuZCcgaW4gdG9r\
              ZW4gPyB0b2tlbi5lbmQgOiB1bmRlZmluZWQpKVxuICAgICAgICAgICAgcHJvcHMuc\
              HVzaCh7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0OiAtMSwgaW5kZW50LCBzb3VyY2\
              U6ICdcXG4nIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V\
              5cyh0b2tlbikpXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAndHlwZScgJiYga2V5\
              ICE9PSAnb2Zmc2V0JylcbiAgICAgICAgICAgICAgICBkZWxldGUgdG9rZW5ba2V5X\
              TtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlOiAnYmxvY2stc2\
              NhbGFyJywgaW5kZW50LCBwcm9wcywgc291cmNlOiBib2R5IH0pO1xuICAgIH1cbn1\
              cbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgbGFzdCB0b2tlbiBpcyBhIG5ld2xpbmUg\
              Ki9cbmZ1bmN0aW9uIGFkZEVuZHRvQmxvY2tQcm9wcyhwcm9wcywgZW5kKSB7XG4gI\
              CAgaWYgKGVuZClcbiAgICAgICAgZm9yIChjb25zdCBzdCBvZiBlbmQpXG4gICAgIC\
              AgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd\
              zcGFjZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAg\
              ICAgICAgICAgICAgIHByb3BzLnB1c2goc3QpO1xuICAgICAgICAgICAgICAgICAgI\
              CBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgIC\
              AgICAgICAgICAgICAgcHJvcHMucHVzaChzdCk7XG4gICAgICAgICAgICAgICAgICA\
              gIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtc\
              bn1cbmZ1bmN0aW9uIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCB0e\
              XBlKSB7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3\
              NjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiA\
              gICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAg\
              dG9rZW4udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0b2tlbi5zb3VyY2UgPSBzb\
              3VyY2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYmxvY2stc2\
              NhbGFyJzoge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gdG9rZW4ucHJvcHMuc2x\
              pY2UoMSk7XG4gICAgICAgICAgICBsZXQgb2EgPSBzb3VyY2UubGVuZ3RoO1xuICAg\
              ICAgICAgICAgaWYgKHRva2VuLnByb3BzWzBdLnR5cGUgPT09ICdibG9jay1zY2FsY\
              XItaGVhZGVyJylcbiAgICAgICAgICAgICAgICBvYSAtPSB0b2tlbi5wcm9wc1swXS\
              5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0b2sgb2YgZW5\
              kKVxuICAgICAgICAgICAgICAgIHRvay5vZmZzZXQgKz0gb2E7XG4gICAgICAgICAg\
              ICBkZWxldGUgdG9rZW4ucHJvcHM7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduK\
              HRva2VuLCB7IHR5cGUsIHNvdXJjZSwgZW5kIH0pO1xuICAgICAgICAgICAgYnJlYW\
              s7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICA\
              gY2FzZSAnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0g\
              dG9rZW4ub2Zmc2V0ICsgc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0I\
              G5sID0geyB0eXBlOiAnbmV3bGluZScsIG9mZnNldCwgaW5kZW50OiB0b2tlbi5pbm\
              RlbnQsIHNvdXJjZTogJ1xcbicgfTtcbiAgICAgICAgICAgIGRlbGV0ZSB0b2tlbi5\
              pdGVtcztcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZSwg\
              c291cmNlLCBlbmQ6IFtubF0gfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgI\
              CAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zdCBpbmRlbn\
              QgPSAnaW5kZW50JyBpbiB0b2tlbiA/IHRva2VuLmluZGVudCA6IC0xO1xuICAgICA\
              gICAgICAgY29uc3QgZW5kID0gJ2VuZCcgaW4gdG9rZW4gJiYgQXJyYXkuaXNBcnJh\
              eSh0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgPyB0b2tlbi5lbmQuZmlsdGVyK\
              HN0ID0+IHN0LnR5cGUgPT09ICdzcGFjZScgfHxcbiAgICAgICAgICAgICAgICAgIC\
              Agc3QudHlwZSA9PT0gJ2NvbW1lbnQnIHx8XG4gICAgICAgICAgICAgICAgICAgIHN\
              0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAg\
              ICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModG9rZW4pKVxuI\
              CAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICd0eXBlJyAmJiBrZXkgIT09ICdvZm\
              ZzZXQnKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG9rZW5ba2V5XTtcbiA\
              gICAgICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZSwgaW5kZW50LCBz\
              b3VyY2UsIGVuZCB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgY\
              3JlYXRlU2NhbGFyVG9rZW4sIHJlc29sdmVBc1NjYWxhciwgc2V0U2NhbGFyVmFsdW\
              UgfTtcbiIsIi8qKlxuICogU3RyaW5naWZ5IGEgQ1NUIGRvY3VtZW50LCB0b2tlbiw\
              gb3IgY29sbGVjdGlvbiBpdGVtXG4gKlxuICogRmFpciB3YXJuaW5nOiBUaGlzIGFw\
              cGxpZXMgbm8gdmFsaWRhdGlvbiB3aGF0c29ldmVyLCBhbmRcbiAqIHNpbXBseSBjb\
              25jYXRlbmF0ZXMgdGhlIHNvdXJjZXMgaW4gdGhlaXIgbG9naWNhbCBvcmRlci5cbi\
              AqL1xuY29uc3Qgc3RyaW5naWZ5ID0gKGNzdCkgPT4gJ3R5cGUnIGluIGNzdCA/IHN\
              0cmluZ2lmeVRva2VuKGNzdCkgOiBzdHJpbmdpZnlJdGVtKGNzdCk7XG5mdW5jdGlv\
              biBzdHJpbmdpZnlUb2tlbih0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZ\
              Skge1xuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOiB7XG4gICAgICAgICAgIC\
              BsZXQgcmVzID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvayBvZiB0b2t\
              lbi5wcm9wcylcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyaW5naWZ5VG9rZW4o\
              dG9rKTtcbiAgICAgICAgICAgIHJldHVybiByZXMgKyB0b2tlbi5zb3VyY2U7XG4gI\
              CAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgY2FzZS\
              AnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9ICcnO1xuICAgICA\
              gICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRva2VuLml0ZW1zKVxuICAgICAgICAg\
              ICAgICAgIHJlcyArPSBzdHJpbmdpZnlJdGVtKGl0ZW0pO1xuICAgICAgICAgICAgc\
              mV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3\
              Rpb24nOiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gdG9rZW4uc3RhcnQuc291cmN\
              lO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRva2VuLml0ZW1zKVxu\
              ICAgICAgICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlJdGVtKGl0ZW0pO1xuICAgI\
              CAgICAgICAgZm9yIChjb25zdCBzdCBvZiB0b2tlbi5lbmQpXG4gICAgICAgICAgIC\
              AgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4\
              gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZG9jdW1lbnQnOiB7XG4gICAgICAgICAg\
              ICBsZXQgcmVzID0gc3RyaW5naWZ5SXRlbSh0b2tlbik7XG4gICAgICAgICAgICBpZ\
              iAodG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgdG\
              9rZW4uZW5kKVxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1x\
              uICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBkZWZh\
              dWx0OiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gdG9rZW4uc291cmNlO1xuICAgI\
              CAgICAgICAgaWYgKCdlbmQnIGluIHRva2VuICYmIHRva2VuLmVuZClcbiAgICAgIC\
              AgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHRva2VuLmVuZClcbiAgICAgICAgICA\
              gICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiBy\
              ZXM7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlJdGVtK\
              Hsgc3RhcnQsIGtleSwgc2VwLCB2YWx1ZSB9KSB7XG4gICAgbGV0IHJlcyA9ICcnO1\
              xuICAgIGZvciAoY29uc3Qgc3Qgb2Ygc3RhcnQpXG4gICAgICAgIHJlcyArPSBzdC5\
              zb3VyY2U7XG4gICAgaWYgKGtleSlcbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVRv\
              a2VuKGtleSk7XG4gICAgaWYgKHNlcClcbiAgICAgICAgZm9yIChjb25zdCBzdCBvZ\
              iBzZXApXG4gICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgIGlmICh2YW\
              x1ZSlcbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVRva2VuKHZhbHVlKTtcbiAgICB\
              yZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnkgfTtcbiIsImNvbnN0\
              IEJSRUFLID0gU3ltYm9sKCdicmVhayB2aXNpdCcpO1xuY29uc3QgU0tJUCA9IFN5b\
              WJvbCgnc2tpcCBjaGlsZHJlbicpO1xuY29uc3QgUkVNT1ZFID0gU3ltYm9sKCdyZW\
              1vdmUgaXRlbScpO1xuLyoqXG4gKiBBcHBseSBhIHZpc2l0b3IgdG8gYSBDU1QgZG9\
              jdW1lbnQgb3IgaXRlbS5cbiAqXG4gKiBXYWxrcyB0aHJvdWdoIHRoZSB0cmVlIChk\
              ZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSB0aGUgcm9vdCwgY2FsbGluZyBhXG4gK\
              iBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0d28gYXJndW1lbnRzIHdoZW4gZW50ZX\
              JpbmcgZWFjaCBpdGVtOlxuICogICAtIGBpdGVtYDogVGhlIGN1cnJlbnQgaXRlbSw\
              gd2hpY2ggaW5jbHVkZWQgdGhlIGZvbGxvd2luZyBtZW1iZXJzOlxuICogICAgIC0g\
              YHN0YXJ0OiBTb3VyY2VUb2tlbltdYCDigJMgU291cmNlIHRva2VucyBiZWZvcmUgd\
              GhlIGtleSBvciB2YWx1ZSxcbiAqICAgICAgIHBvc3NpYmx5IGluY2x1ZGluZyBpdH\
              MgYW5jaG9yIG9yIHRhZy5cbiAqICAgICAtIGBrZXk/OiBUb2tlbiB8IG51bGxgIOK\
              AkyBTZXQgZm9yIHBhaXIgdmFsdWVzLiBNYXkgdGhlbiBiZSBgbnVsbGAsIGlmXG4g\
              KiAgICAgICB0aGUga2V5IGJlZm9yZSB0aGUgYDpgIHNlcGFyYXRvciBpcyBlbXB0e\
              S5cbiAqICAgICAtIGBzZXA/OiBTb3VyY2VUb2tlbltdYCDigJMgU291cmNlIHRva2\
              VucyBiZXR3ZWVuIHRoZSBrZXkgYW5kIHRoZSB2YWx1ZSxcbiAqICAgICAgIHdoaWN\
              oIHNob3VsZCBpbmNsdWRlIHRoZSBgOmAgbWFwIHZhbHVlIGluZGljYXRvciBpZiBg\
              dmFsdWVgIGlzIHNldC5cbiAqICAgICAtIGB2YWx1ZT86IFRva2VuYCDigJMgVGhlI\
              HZhbHVlIG9mIGEgc2VxdWVuY2UgaXRlbSwgb3Igb2YgYSBtYXAgcGFpci5cbiAqIC\
              AgLSBgcGF0aGA6IFRoZSBzdGVwcyBmcm9tIHRoZSByb290IHRvIHRoZSBjdXJyZW5\
              0IG5vZGUsIGFzIGFuIGFycmF5IG9mXG4gKiAgICAgYFsna2V5JyB8ICd2YWx1ZScs\
              IG51bWJlcl1gIHR1cGxlcy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZ\
              SB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbi\
              AqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnR\
              pbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxk\
              cmVuIG9mIHRoaXMgdG9rZW4sIGNvbnRpbnVlIHdpdGhcbiAqICAgICAgbmV4dCBza\
              WJsaW5nXG4gKiAgIC0gYHZpc2l0LkJSRUFLYDogVGVybWluYXRlIHRyYXZlcnNhbC\
              Bjb21wbGV0ZWx5XG4gKiAgIC0gYHZpc2l0LlJFTU9WRWA6IFJlbW92ZSB0aGUgY3V\
              ycmVudCBpdGVtLCB0aGVuIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgb25lXG4gKiAg\
              IC0gYG51bWJlcmA6IFNldCB0aGUgaW5kZXggb2YgdGhlIG5leHQgc3RlcC4gVGhpc\
              yBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZlxuICogICAgIHRoZSBpbmRleCBvZiB0aG\
              UgY3VycmVudCB0b2tlbiBoYXMgY2hhbmdlZC5cbiAqICAgLSBgZnVuY3Rpb25gOiB\
              EZWZpbmUgdGhlIG5leHQgdmlzaXRvciBmb3IgdGhpcyBpdGVtLiBBZnRlciB0aGUg\
              b3JpZ2luYWxcbiAqICAgICB2aXNpdG9yIGlzIGNhbGxlZCBvbiBpdGVtIGVudHJ5L\
              CBuZXh0IHZpc2l0b3JzIGFyZSBjYWxsZWQgYWZ0ZXIgaGFuZGxpbmdcbiAqICAgIC\
              BhIG5vbi1lbXB0eSBga2V5YCBhbmQgd2hlbiBleGl0aW5nIHRoZSBpdGVtLlxuICo\
              vXG5mdW5jdGlvbiB2aXNpdChjc3QsIHZpc2l0b3IpIHtcbiAgICBpZiAoJ3R5cGUn\
              IGluIGNzdCAmJiBjc3QudHlwZSA9PT0gJ2RvY3VtZW50JylcbiAgICAgICAgY3N0I\
              D0geyBzdGFydDogY3N0LnN0YXJ0LCB2YWx1ZTogY3N0LnZhbHVlIH07XG4gICAgX3\
              Zpc2l0KE9iamVjdC5mcmVlemUoW10pLCBjc3QsIHZpc2l0b3IpO1xufVxuLy8gV2l\
              0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlIGlu\
              IHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aGVuI\
              GNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9sYC\
              BtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNhbCB\
              jb21wbGV0ZWx5ICovXG52aXNpdC5CUkVBSyA9IEJSRUFLO1xuLyoqIERvIG5vdCB2\
              aXNpdCB0aGUgY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgaXRlbSAqL1xudmlzaXQuU\
              0tJUCA9IFNLSVA7XG4vKiogUmVtb3ZlIHRoZSBjdXJyZW50IGl0ZW0gKi9cbnZpc2\
              l0LlJFTU9WRSA9IFJFTU9WRTtcbi8qKiBGaW5kIHRoZSBpdGVtIGF0IGBwYXRoYCB\
              mcm9tIGBjc3RgIGFzIHRoZSByb290ICovXG52aXNpdC5pdGVtQXRQYXRoID0gKGNz\
              dCwgcGF0aCkgPT4ge1xuICAgIGxldCBpdGVtID0gY3N0O1xuICAgIGZvciAoY29uc\
              3QgW2ZpZWxkLCBpbmRleF0gb2YgcGF0aCkge1xuICAgICAgICBjb25zdCB0b2sgPS\
              BpdGVtPy5bZmllbGRdO1xuICAgICAgICBpZiAodG9rICYmICdpdGVtcycgaW4gdG9\
              rKSB7XG4gICAgICAgICAgICBpdGVtID0gdG9rLml0ZW1zW2luZGV4XTtcbiAgICAg\
              ICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO\
              1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn07XG4vKipcbiAqIEdldCB0aGUgaW\
              1tZWRpYXRlIHBhcmVudCBjb2xsZWN0aW9uIG9mIHRoZSBpdGVtIGF0IGBwYXRoYCB\
              mcm9tIGBjc3RgIGFzIHRoZSByb290LlxuICpcbiAqIFRocm93cyBhbiBlcnJvciBp\
              ZiB0aGUgY29sbGVjdGlvbiBpcyBub3QgZm91bmQsIHdoaWNoIHNob3VsZCBuZXZlc\
              iBoYXBwZW4gaWYgdGhlIGl0ZW0gaXRzZWxmIGV4aXN0cy5cbiAqL1xudmlzaXQucG\
              FyZW50Q29sbGVjdGlvbiA9IChjc3QsIHBhdGgpID0+IHtcbiAgICBjb25zdCBwYXJ\
              lbnQgPSB2aXNpdC5pdGVtQXRQYXRoKGNzdCwgcGF0aC5zbGljZSgwLCAtMSkpO1xu\
              ICAgIGNvbnN0IGZpZWxkID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdWzBdO1xuICAgI\
              GNvbnN0IGNvbGwgPSBwYXJlbnQ/LltmaWVsZF07XG4gICAgaWYgKGNvbGwgJiYgJ2\
              l0ZW1zJyBpbiBjb2xsKVxuICAgICAgICByZXR1cm4gY29sbDtcbiAgICB0aHJvdyB\
              uZXcgRXJyb3IoJ1BhcmVudCBjb2xsZWN0aW9uIG5vdCBmb3VuZCcpO1xufTtcbmZ1\
              bmN0aW9uIF92aXNpdChwYXRoLCBpdGVtLCB2aXNpdG9yKSB7XG4gICAgbGV0IGN0c\
              mwgPSB2aXNpdG9yKGl0ZW0sIHBhdGgpO1xuICAgIGlmICh0eXBlb2YgY3RybCA9PT\
              0gJ3N5bWJvbCcpXG4gICAgICAgIHJldHVybiBjdHJsO1xuICAgIGZvciAoY29uc3Q\
              gZmllbGQgb2YgWydrZXknLCAndmFsdWUnXSkge1xuICAgICAgICBjb25zdCB0b2tl\
              biA9IGl0ZW1bZmllbGRdO1xuICAgICAgICBpZiAodG9rZW4gJiYgJ2l0ZW1zJyBpb\
              iB0b2tlbikge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbi\
              5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0\
              gX3Zpc2l0KE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQoW1tmaWVsZCwgaV1dKSks\
              IHRva2VuLml0ZW1zW2ldLCB2aXNpdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAod\
              HlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IG\
              NpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4\
              gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAg\
              ICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgI\
              HRva2VuLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaS\
              AtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICA\
              gICAgIGlmICh0eXBlb2YgY3RybCA9PT0gJ2Z1bmN0aW9uJyAmJiBmaWVsZCA9PT0g\
              J2tleScpXG4gICAgICAgICAgICAgICAgY3RybCA9IGN0cmwoaXRlbSwgcGF0aCk7X\
              G4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBjdHJsID09PSAnZn\
              VuY3Rpb24nID8gY3RybChpdGVtLCBwYXRoKSA6IGN0cmw7XG59XG5cbmV4cG9ydCB\
              7IHZpc2l0IH07XG4iLCJpbXBvcnQgeyBCT00sIERPQ1VNRU5ULCBGTE9XX0VORCwg\
              U0NBTEFSIH0gZnJvbSAnLi9jc3QuanMnO1xuXG4vKlxuU1RBUlQgLT4gc3RyZWFtX\
              G5cbnN0cmVhbVxuICBkaXJlY3RpdmUgLT4gbGluZS1lbmQgLT4gc3RyZWFtXG4gIG\
              luZGVudCArIGxpbmUtZW5kIC0+IHN0cmVhbVxuICBbZWxzZV0gLT4gbGluZS1zdGF\
              ydFxuXG5saW5lLWVuZFxuICBjb21tZW50IC0+IGxpbmUtZW5kXG4gIG5ld2xpbmUg\
              LT4gLlxuICBpbnB1dC1lbmQgLT4gRU5EXG5cbmxpbmUtc3RhcnRcbiAgZG9jLXN0Y\
              XJ0IC0+IGRvY1xuICBkb2MtZW5kIC0+IHN0cmVhbVxuICBbZWxzZV0gLT4gaW5kZW\
              50IC0+IGJsb2NrLXN0YXJ0XG5cbmJsb2NrLXN0YXJ0XG4gIHNlcS1pdGVtLXN0YXJ\
              0IC0+IGJsb2NrLXN0YXJ0XG4gIGV4cGxpY2l0LWtleS1zdGFydCAtPiBibG9jay1z\
              dGFydFxuICBtYXAtdmFsdWUtc3RhcnQgLT4gYmxvY2stc3RhcnRcbiAgW2Vsc2VdI\
              C0+IGRvY1xuXG5kb2NcbiAgbGluZS1lbmQgLT4gbGluZS1zdGFydFxuICBzcGFjZX\
              MgLT4gZG9jXG4gIGFuY2hvciAtPiBkb2NcbiAgdGFnIC0+IGRvY1xuICBmbG93LXN\
              0YXJ0IC0+IGZsb3cgLT4gZG9jXG4gIGZsb3ctZW5kIC0+IGVycm9yIC0+IGRvY1xu\
              ICBzZXEtaXRlbS1zdGFydCAtPiBlcnJvciAtPiBkb2NcbiAgZXhwbGljaXQta2V5L\
              XN0YXJ0IC0+IGVycm9yIC0+IGRvY1xuICBtYXAtdmFsdWUtc3RhcnQgLT4gZG9jXG\
              4gIGFsaWFzIC0+IGRvY1xuICBxdW90ZS1zdGFydCAtPiBxdW90ZWQtc2NhbGFyIC0\
              +IGRvY1xuICBibG9jay1zY2FsYXItaGVhZGVyIC0+IGxpbmUtZW5kIC0+IGJsb2Nr\
              LXNjYWxhcihtaW4pIC0+IGxpbmUtc3RhcnRcbiAgW2Vsc2VdIC0+IHBsYWluLXNjY\
              WxhcihmYWxzZSwgbWluKSAtPiBkb2NcblxuZmxvd1xuICBsaW5lLWVuZCAtPiBmbG\
              93XG4gIHNwYWNlcyAtPiBmbG93XG4gIGFuY2hvciAtPiBmbG93XG4gIHRhZyAtPiB\
              mbG93XG4gIGZsb3ctc3RhcnQgLT4gZmxvdyAtPiBmbG93XG4gIGZsb3ctZW5kIC0+\
              IC5cbiAgc2VxLWl0ZW0tc3RhcnQgLT4gZXJyb3IgLT4gZmxvd1xuICBleHBsaWNpd\
              C1rZXktc3RhcnQgLT4gZmxvd1xuICBtYXAtdmFsdWUtc3RhcnQgLT4gZmxvd1xuIC\
              BhbGlhcyAtPiBmbG93XG4gIHF1b3RlLXN0YXJ0IC0+IHF1b3RlZC1zY2FsYXIgLT4\
              gZmxvd1xuICBjb21tYSAtPiBmbG93XG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIo\
              dHJ1ZSwgMCkgLT4gZmxvd1xuXG5xdW90ZWQtc2NhbGFyXG4gIHF1b3RlLWVuZCAtP\
              iAuXG4gIFtlbHNlXSAtPiBxdW90ZWQtc2NhbGFyXG5cbmJsb2NrLXNjYWxhcihtaW\
              4pXG4gIG5ld2xpbmUgKyBwZWVrKGluZGVudCA8IG1pbikgLT4gLlxuICBbZWxzZV0\
              gLT4gYmxvY2stc2NhbGFyKG1pbilcblxucGxhaW4tc2NhbGFyKGlzLWZsb3csIG1p\
              bilcbiAgc2NhbGFyLWVuZChpcy1mbG93KSAtPiAuXG4gIHBlZWsobmV3bGluZSArI\
              ChpbmRlbnQgPCBtaW4pKSAtPiAuXG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIobW\
              luKVxuKi9cbmZ1bmN0aW9uIGlzRW1wdHkoY2gpIHtcbiAgICBzd2l0Y2ggKGNoKSB\
              7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBjYXNlICcgJzpcbiAg\
              ICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgY\
              2FzZSAnXFx0JzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZW\
              ZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmNvbnN\
              0IGhleERpZ2l0cyA9IG5ldyBTZXQoJzAxMjM0NTY3ODlBQkNERUZhYmNkZWYnKTtc\
              bmNvbnN0IHRhZ0NoYXJzID0gbmV3IFNldChcIjAxMjM0NTY3ODlBQkNERUZHSElKS\
              0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LSM7Lz86QC\
              Y9KyRfLiF+KicoKVwiKTtcbmNvbnN0IGZsb3dJbmRpY2F0b3JDaGFycyA9IG5ldyB\
              TZXQoJyxbXXt9Jyk7XG5jb25zdCBpbnZhbGlkQW5jaG9yQ2hhcnMgPSBuZXcgU2V0\
              KCcgLFtde31cXG5cXHJcXHQnKTtcbmNvbnN0IGlzTm90QW5jaG9yQ2hhciA9IChja\
              CkgPT4gIWNoIHx8IGludmFsaWRBbmNob3JDaGFycy5oYXMoY2gpO1xuLyoqXG4gKi\
              BTcGxpdHMgYW4gaW5wdXQgc3RyaW5nIGludG8gbGV4aWNhbCB0b2tlbnMsIGkuZS4\
              gc21hbGxlciBzdHJpbmdzIHRoYXQgYXJlXG4gKiBlYXNpbHkgaWRlbnRpZmlhYmxl\
              IGJ5IGB0b2tlbnMudG9rZW5UeXBlKClgLlxuICpcbiAqIExleGluZyBzdGFydHMgY\
              Wx3YXlzIGluIGEgXCJzdHJlYW1cIiBjb250ZXh0LiBJbmNvbXBsZXRlIGlucHV0IG\
              1heSBiZSBidWZmZXJlZFxuICogdW50aWwgYSBjb21wbGV0ZSB0b2tlbiBjYW4gYmU\
              gZW1pdHRlZC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBzbGljZXMgb2YgdGhlIG9y\
              aWdpbmFsIGlucHV0LCB0aGUgZm9sbG93aW5nIGNvbnRyb2wgY2hhcmFjdGVyc1xuI\
              CogbWF5IGFsc28gYmUgZW1pdHRlZDpcbiAqXG4gKiAtIGBcXHgwMmAgKFN0YXJ0IG\
              9mIFRleHQpOiBBIGRvY3VtZW50IHN0YXJ0cyB3aXRoIHRoZSBuZXh0IHRva2VuXG4\
              gKiAtIGBcXHgxOGAgKENhbmNlbCk6IFVuZXhwZWN0ZWQgZW5kIG9mIGZsb3ctbW9k\
              ZSAoaW5kaWNhdGVzIGFuIGVycm9yKVxuICogLSBgXFx4MWZgIChVbml0IFNlcGFyY\
              XRvcik6IE5leHQgdG9rZW4gaXMgYSBzY2FsYXIgdmFsdWVcbiAqIC0gYFxcdXtGRU\
              ZGfWAgKEJ5dGUgb3JkZXIgbWFyayk6IEVtaXR0ZWQgc2VwYXJhdGVseSBvdXRzaWR\
              lIGRvY3VtZW50c1xuICovXG5jbGFzcyBMZXhlciB7XG4gICAgY29uc3RydWN0b3Io\
              KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIGluZGljYXRpbmcgd2hld\
              GhlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJ1ZmZlciBtYXJrcyB0aGUgZW5kIG\
              9mXG4gICAgICAgICAqIGFsbCBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgdGh\
              pcy5hdEVuZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhwbGlj\
              aXQgaW5kZW50IHNldCBpbiBibG9jayBzY2FsYXIgaGVhZGVyLCBhcyBhbiBvZmZzZ\
              XQgZnJvbSB0aGUgY3VycmVudFxuICAgICAgICAgKiBtaW5pbXVtIGluZGVudCwgc2\
              8gZS5nLiBzZXQgdG8gMSBmcm9tIGEgaGVhZGVyIGB8MitgLiBTZXQgdG8gLTEgaWY\
              gbm90XG4gICAgICAgICAqIGV4cGxpY2l0bHkgc2V0LlxuICAgICAgICAgKi9cbiAg\
              ICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCA9IC0xO1xuICAgICAgICAvKipcb\
              iAgICAgICAgICogQmxvY2sgc2NhbGFycyB0aGF0IGluY2x1ZGUgYSArIChrZWVwKS\
              BjaG9tcGluZyBpbmRpY2F0b3IgaW4gdGhlaXIgaGVhZGVyXG4gICAgICAgICAqIGl\
              uY2x1ZGUgdHJhaWxpbmcgZW1wdHkgbGluZXMsIHdoaWNoIGFyZSBvdGhlcndpc2Ug\
              ZXhjbHVkZWQgZnJvbSB0aGVcbiAgICAgICAgICogc2NhbGFyJ3MgY29udGVudHMuX\
              G4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFyS2VlcCA9IGZhbH\
              NlO1xuICAgICAgICAvKiogQ3VycmVudCBpbnB1dCAqL1xuICAgICAgICB0aGlzLmJ\
              1ZmZlciA9ICcnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBub3Rpbmcg\
              d2hldGhlciB0aGUgbWFwIHZhbHVlIGluZGljYXRvciA6IGNhbiBpbW1lZGlhdGVse\
              SBmb2xsb3cgdGhpc1xuICAgICAgICAgKiBub2RlIHdpdGhpbiBhIGZsb3cgY29udG\
              V4dC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1x\
              uICAgICAgICAvKiogQ291bnQgb2Ygc3Vycm91bmRpbmcgZmxvdyBjb2xsZWN0aW9u\
              IGxldmVscy4gKi9cbiAgICAgICAgdGhpcy5mbG93TGV2ZWwgPSAwO1xuICAgICAgI\
              CAvKipcbiAgICAgICAgICogTWluaW11bSBsZXZlbCBvZiBpbmRlbnRhdGlvbiByZX\
              F1aXJlZCBmb3IgbmV4dCBsaW5lcyB0byBiZSBwYXJzZWQgYXMgYVxuICAgICAgICA\
              gKiBwYXJ0IG9mIHRoZSBjdXJyZW50IHNjYWxhciB2YWx1ZS5cbiAgICAgICAgICov\
              XG4gICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IDA7XG4gICAgICAgIC8qKiBJbmRlb\
              nRhdGlvbiBsZXZlbCBvZiB0aGUgY3VycmVudCBsaW5lLiAqL1xuICAgICAgICB0aG\
              lzLmluZGVudFZhbHVlID0gMDtcbiAgICAgICAgLyoqIFBvc2l0aW9uIG9mIHRoZSB\
              uZXh0IFxcbiBjaGFyYWN0ZXIuICovXG4gICAgICAgIHRoaXMubGluZUVuZFBvcyA9\
              IG51bGw7XG4gICAgICAgIC8qKiBTdG9yZXMgdGhlIHN0YXRlIG9mIHRoZSBsZXhlc\
              iBpZiByZWFjaGluZyB0aGUgZW5kIG9mIGluY3BvbXBsZXRlIGlucHV0ICovXG4gIC\
              AgICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgICAgIC8qKiBBIHBvaW50ZXIgdG8\
              gYGJ1ZmZlcmA7IHRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBsZXhlci4gKi9c\
              biAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZ\
              W5lcmF0ZSBZQU1MIHRva2VucyBmcm9tIHRoZSBgc291cmNlYCBzdHJpbmcuIElmIG\
              BpbmNvbXBsZXRlYCxcbiAgICAgKiBhIHBhcnQgb2YgdGhlIGxhc3QgbGluZSBtYXk\
              gYmUgbGVmdCBhcyBhIGJ1ZmZlciBmb3IgdGhlIG5leHQgY2FsbC5cbiAgICAgKlxu\
              ICAgICAqIEByZXR1cm5zIEEgZ2VuZXJhdG9yIG9mIGxleGljYWwgdG9rZW5zXG4gI\
              CAgICovXG4gICAgKmxleChzb3VyY2UsIGluY29tcGxldGUgPSBmYWxzZSkge1xuIC\
              AgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJ\
              jZSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9y\
              KCdzb3VyY2UgaXMgbm90IGEgc3RyaW5nJyk7XG4gICAgICAgICAgICB0aGlzLmJ1Z\
              mZlciA9IHRoaXMuYnVmZmVyID8gdGhpcy5idWZmZXIgKyBzb3VyY2UgOiBzb3VyY2\
              U7XG4gICAgICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBudWxsO1xuICAgICAgICB\
              9XG4gICAgICAgIHRoaXMuYXRFbmQgPSAhaW5jb21wbGV0ZTtcbiAgICAgICAgbGV0\
              IG5leHQgPSB0aGlzLm5leHQgPz8gJ3N0cmVhbSc7XG4gICAgICAgIHdoaWxlIChuZ\
              Xh0ICYmIChpbmNvbXBsZXRlIHx8IHRoaXMuaGFzQ2hhcnMoMSkpKVxuICAgICAgIC\
              AgICAgbmV4dCA9IHlpZWxkKiB0aGlzLnBhcnNlTmV4dChuZXh0KTtcbiAgICB9XG4\
              gICAgYXRMaW5lRW5kKCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zO1xuICAg\
              ICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKGNoI\
              D09PSAnICcgfHwgY2ggPT09ICdcXHQnKVxuICAgICAgICAgICAgY2ggPSB0aGlzLm\
              J1ZmZlclsrK2ldO1xuICAgICAgICBpZiAoIWNoIHx8IGNoID09PSAnIycgfHwgY2g\
              gPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlm\
              IChjaCA9PT0gJ1xccicpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJba\
              SArIDFdID09PSAnXFxuJztcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbi\
              AgICBjaGFyQXQobikge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5\
              wb3MgKyBuXTtcbiAgICB9XG4gICAgY29udGludWVTY2FsYXIob2Zmc2V0KSB7XG4g\
              ICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW29mZnNldF07XG4gICAgICAgIGlmI\
              Ch0aGlzLmluZGVudE5leHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgaW5kZW50ID\
              0gMDtcbiAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICA\
              gICAgIGNoID0gdGhpcy5idWZmZXJbKytpbmRlbnQgKyBvZmZzZXRdO1xuICAgICAg\
              ICAgICAgaWYgKGNoID09PSAnXFxyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0I\
              G5leHQgPSB0aGlzLmJ1ZmZlcltpbmRlbnQgKyBvZmZzZXQgKyAxXTtcbiAgICAgIC\
              AgICAgICAgICBpZiAobmV4dCA9PT0gJ1xcbicgfHwgKCFuZXh0ICYmICF0aGlzLmF\
              0RW5kKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldCArIGluZGVu\
              dCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2ggPT09I\
              CdcXG4nIHx8IGluZGVudCA+PSB0aGlzLmluZGVudE5leHQgfHwgKCFjaCAmJiAhdG\
              hpcy5hdEVuZClcbiAgICAgICAgICAgICAgICA/IG9mZnNldCArIGluZGVudFxuICA\
              gICAgICAgICAgICAgIDogLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09\
              PSAnLScgfHwgY2ggPT09ICcuJykge1xuICAgICAgICAgICAgY29uc3QgZHQgPSB0a\
              GlzLmJ1ZmZlci5zdWJzdHIob2Zmc2V0LCAzKTtcbiAgICAgICAgICAgIGlmICgoZH\
              QgPT09ICctLS0nIHx8IGR0ID09PSAnLi4uJykgJiYgaXNFbXB0eSh0aGlzLmJ1ZmZ\
              lcltvZmZzZXQgKyAzXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAg\
              ICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIGdldExpb\
              mUoKSB7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLmxpbmVFbmRQb3M7XG4gICAgIC\
              AgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCAoZW5kICE9PSAtMSAmJiB\
              lbmQgPCB0aGlzLnBvcykpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVy\
              LmluZGV4T2YoJ1xcbicsIHRoaXMucG9zKTtcbiAgICAgICAgICAgIHRoaXMubGluZ\
              UVuZFBvcyA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMS\
              lcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0RW5kID8gdGhpcy5idWZmZXIuc3V\
              ic3RyaW5nKHRoaXMucG9zKSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZl\
              cltlbmQgLSAxXSA9PT0gJ1xccicpXG4gICAgICAgICAgICBlbmQgLT0gMTtcbiAgI\
              CAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnBvcywgZW5kKT\
              tcbiAgICB9XG4gICAgaGFzQ2hhcnMobikge1xuICAgICAgICByZXR1cm4gdGhpcy5\
              wb3MgKyBuIDw9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgc2V0TmV4\
              dChzdGF0ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnN1Y\
              nN0cmluZyh0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgIC\
              AgdGhpcy5saW5lRW5kUG9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5uZXh0ID0gc3R\
              hdGU7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwZWVrKG4pIHtc\
              biAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnBvcywgbik7X\
              G4gICAgfVxuICAgICpwYXJzZU5leHQobmV4dCkge1xuICAgICAgICBzd2l0Y2ggKG\
              5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmVhbSc6XG4gICAgICAgICAgICA\
              gICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlU3RyZWFtKCk7XG4gICAgICAgICAg\
              ICBjYXNlICdsaW5lLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllb\
              GQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2\
              NrLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGF\
              yc2VCbG9ja1N0YXJ0KCk7XG4gICAgICAgICAgICBjYXNlICdkb2MnOlxuICAgICAg\
              ICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZURvY3VtZW50KCk7XG4gI\
              CAgICAgICAgICBjYXNlICdmbG93JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geW\
              llbGQqIHRoaXMucGFyc2VGbG93Q29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY2F\
              zZSAncXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxk\
              KiB0aGlzLnBhcnNlUXVvdGVkU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICdib\
              G9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy\
              5wYXJzZUJsb2NrU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICdwbGFpbi1zY2F\
              sYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBs\
              YWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlU3RyZWFtK\
              Ckge1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgIC\
              BpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5\
              leHQoJ3N0cmVhbScpO1xuICAgICAgICBpZiAobGluZVswXSA9PT0gQk9NKSB7XG4g\
              ICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgI\
              CBsaW5lID0gbGluZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaW\
              YgKGxpbmVbMF0gPT09ICclJykge1xuICAgICAgICAgICAgbGV0IGRpckVuZCA9IGx\
              pbmUubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGNzID0gbGluZS5pbmRleE9mKCcj\
              Jyk7XG4gICAgICAgICAgICB3aGlsZSAoY3MgIT09IC0xKSB7XG4gICAgICAgICAgI\
              CAgICAgY29uc3QgY2ggPSBsaW5lW2NzIC0gMV07XG4gICAgICAgICAgICAgICAgaW\
              YgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAgICA\
              gICAgIGRpckVuZCA9IGNzIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7\
              XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgI\
              CAgICAgICAgICAgICAgICBjcyA9IGxpbmUuaW5kZXhPZignIycsIGNzICsgMSk7XG\
              4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2h\
              pbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGxpbmVbZGly\
              RW5kIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnICcgfHwgY2ggP\
              T09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBkaXJFbmQgLT0gMTtcbiAgIC\
              AgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICA\
              gICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbiA9ICh5aWVsZCogdGhpcy5w\
              dXNoQ291bnQoZGlyRW5kKSkgKyAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlK\
              Sk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndG\
              ggLSBuKTsgLy8gcG9zc2libGUgY29tbWVudFxuICAgICAgICAgICAgdGhpcy5wdXN\
              oTmV3bGluZSgpO1xuICAgICAgICAgICAgcmV0dXJuICdzdHJlYW0nO1xuICAgICAg\
              ICB9XG4gICAgICAgIGlmICh0aGlzLmF0TGluZUVuZCgpKSB7XG4gICAgICAgICAgI\
              CBjb25zdCBzcCA9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgIC\
              AgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBzcCk7XG4\
              gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAg\
              ICAgcmV0dXJuICdzdHJlYW0nO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIERPQ\
              1VNRU5UO1xuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3Rhcn\
              QoKTtcbiAgICB9XG4gICAgKnBhcnNlTGluZVN0YXJ0KCkge1xuICAgICAgICBjb25\
              zdCBjaCA9IHRoaXMuY2hhckF0KDApO1xuICAgICAgICBpZiAoIWNoICYmICF0aGlz\
              LmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnbGluZS1zd\
              GFydCcpO1xuICAgICAgICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJy4nKSB7XG\
              4gICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQgJiYgIXRoaXMuaGFzQ2hhcnMoNCk\
              pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnbGluZS1zdGFy\
              dCcpO1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMucGVlaygzKTtcbiAgICAgI\
              CAgICAgIGlmIChzID09PSAnLS0tJyAmJiBpc0VtcHR5KHRoaXMuY2hhckF0KDMpKS\
              kge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgzKTtcbiA\
              gICAgICAgICAgICAgICB0aGlzLmluZGVudFZhbHVlID0gMDtcbiAgICAgICAgICAg\
              ICAgICB0aGlzLmluZGVudE5leHQgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVyb\
              iAnZG9jJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHMgPT\
              09ICcuLi4nICYmIGlzRW1wdHkodGhpcy5jaGFyQXQoMykpKSB7XG4gICAgICAgICA\
              gICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDMpO1xuICAgICAgICAgICAgICAg\
              IHJldHVybiAnc3RyZWFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgI\
              CAgICB0aGlzLmluZGVudFZhbHVlID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyhmYW\
              xzZSk7XG4gICAgICAgIGlmICh0aGlzLmluZGVudE5leHQgPiB0aGlzLmluZGVudFZ\
              hbHVlICYmICFpc0VtcHR5KHRoaXMuY2hhckF0KDEpKSlcbiAgICAgICAgICAgIHRo\
              aXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZW50VmFsdWU7XG4gICAgICAgIHJldHVyb\
              iB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU3RhcnQoKTtcbiAgICB9XG4gICAgKnBhcn\
              NlQmxvY2tTdGFydCgpIHtcbiAgICAgICAgY29uc3QgW2NoMCwgY2gxXSA9IHRoaXM\
              ucGVlaygyKTtcbiAgICAgICAgaWYgKCFjaDEgJiYgIXRoaXMuYXRFbmQpXG4gICAg\
              ICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zdGFydCcpO1xuICAgI\
              CAgICBpZiAoKGNoMCA9PT0gJy0nIHx8IGNoMCA9PT0gJz8nIHx8IGNoMCA9PT0gJz\
              onKSAmJiBpc0VtcHR5KGNoMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSAoeWl\
              lbGQqIHRoaXMucHVzaENvdW50KDEpKSArICh5aWVsZCogdGhpcy5wdXNoU3BhY2Vz\
              KHRydWUpKTtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZ\
              W50VmFsdWUgKyAxO1xuICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSArPSBuO1\
              xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTdGFydCg\
              pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnZG9jJztcbiAgICB9XG4gICAg\
              KnBhcnNlRG9jdW1lbnQoKSB7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hTcGFjZ\
              XModHJ1ZSk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmdldExpbmUoKTtcbi\
              AgICAgICAgaWYgKGxpbmUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGh\
              pcy5zZXROZXh0KCdkb2MnKTtcbiAgICAgICAgbGV0IG4gPSB5aWVsZCogdGhpcy5w\
              dXNoSW5kaWNhdG9ycygpO1xuICAgICAgICBzd2l0Y2ggKGxpbmVbbl0pIHtcbiAgI\
              CAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLn\
              B1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pO1xuICAgICAgICAgICAgLy8gZmFsbHR\
              ocm91Z2hcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAg\
              ICAgIHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICAgICAgc\
              mV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgICAgICAgIC\
              BjYXNlICd7JzpcbiAgICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgICA\
              gIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlz\
              LmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlb\
              CA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgIC\
              AgIGNhc2UgJ30nOlxuICAgICAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICA\
              gICAgLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHlpZWxkKiB0\
              aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvYyc7X\
              G4gICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdG\
              hpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKTtcbiAgICAgICAgICAgICAgICB\
              yZXR1cm4gJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAg\
              ICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpc\
              y5wYXJzZVF1b3RlZFNjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAnfCc6XG4gIC\
              AgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICBuICs9IHlpZWxkKiB\
              0aGlzLnBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBu\
              ICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICAgI\
              CAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7XG4gICAgIC\
              AgICAgICAgICAgeWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICA\
              gICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1NjYWxhcigpO1xuICAg\
              ICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqI\
              HRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC\
              pwYXJzZUZsb3dDb2xsZWN0aW9uKCkge1xuICAgICAgICBsZXQgbmwsIHNwO1xuICA\
              gICAgICBsZXQgaW5kZW50ID0gLTE7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAg\
              IG5sID0geWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgIGlmI\
              ChubCA+IDApIHtcbiAgICAgICAgICAgICAgICBzcCA9IHlpZWxkKiB0aGlzLnB1c2\
              hTcGFjZXMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50VmFsdWU\
              gPSBpbmRlbnQgPSBzcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Ug\
              e1xuICAgICAgICAgICAgICAgIHNwID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgI\
              CAgICAgIHNwICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgIC\
              AgIH0gd2hpbGUgKG5sICsgc3AgPiAwKTtcbiAgICAgICAgY29uc3QgbGluZSA9IHR\
              oaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAg\
              ICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Zsb3cnKTtcbiAgICAgICAgaWYgK\
              ChpbmRlbnQgIT09IC0xICYmIGluZGVudCA8IHRoaXMuaW5kZW50TmV4dCAmJiBsaW\
              5lWzBdICE9PSAnIycpIHx8XG4gICAgICAgICAgICAoaW5kZW50ID09PSAwICYmXG4\
              gICAgICAgICAgICAgICAgKGxpbmUuc3RhcnRzV2l0aCgnLS0tJykgfHwgbGluZS5z\
              dGFydHNXaXRoKCcuLi4nKSkgJiZcbiAgICAgICAgICAgICAgICBpc0VtcHR5KGxpb\
              mVbM10pKSkge1xuICAgICAgICAgICAgLy8gQWxsb3dpbmcgZm9yIHRoZSB0ZXJtaW\
              5hbCBdIG9yIH0gYXQgdGhlIHNhbWUgKHJhdGhlciB0aGFuIGdyZWF0ZXIpXG4gICA\
              gICAgICAgICAvLyBpbmRlbnQgbGV2ZWwgYXMgdGhlIGluaXRpYWwgWyBvciB7IGlz\
              IHRlY2huaWNhbGx5IGludmFsaWQsIGJ1dFxuICAgICAgICAgICAgLy8gZmFpbGluZ\
              yBoZXJlIHdvdWxkIGJlIHN1cnByaXNpbmcgdG8gdXNlcnMuXG4gICAgICAgICAgIC\
              Bjb25zdCBhdEZsb3dFbmRNYXJrZXIgPSBpbmRlbnQgPT09IHRoaXMuaW5kZW50TmV\
              4dCAtIDEgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCA9PT0gMSAm\
              JlxuICAgICAgICAgICAgICAgIChsaW5lWzBdID09PSAnXScgfHwgbGluZVswXSA9P\
              T0gJ30nKTtcbiAgICAgICAgICAgIGlmICghYXRGbG93RW5kTWFya2VyKSB7XG4gIC\
              AgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgICA\
              gIHRoaXMuZmxvd0xldmVsID0gMDtcbiAgICAgICAgICAgICAgICB5aWVsZCBGTE9X\
              X0VORDtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMa\
              W5lU3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZX\
              QgbiA9IDA7XG4gICAgICAgIHdoaWxlIChsaW5lW25dID09PSAnLCcpIHtcbiAgICA\
              gICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAg\
              ICAgbiArPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgI\
              CAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbiArPS\
              B5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpO1xuICAgICAgICBzd2l0Y2ggKGx\
              pbmVbbl0pIHtcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAg\
              ICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgI\
              CAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLS\
              BuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICA\
              gY2FzZSAneyc6XG4gICAgICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgICAg\
              ICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgdGhpc\
              y5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZW\
              wgKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICA\
              gICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAg\
              ICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgd\
              Ghpcy5mbG93S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZX\
              ZlbCAtPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dMZXZlbCA\
              /ICdmbG93JyA6ICdkb2MnO1xuICAgICAgICAgICAgY2FzZSAnKic6XG4gICAgICAg\
              ICAgICAgICAgeWllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcik7X\
              G4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2\
              UgJ1wiJzpcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICAgICA\
              gdGhpcy5mbG93S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWll\
              bGQqIHRoaXMucGFyc2VRdW90ZWRTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ\
              zonOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuY2hhckF0KD\
              EpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZsb3dLZXkgfHwgaXNFbXB0eSh\
              uZXh0KSB8fCBuZXh0ID09PSAnLCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhp\
              cy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0a\
              GlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaX\
              MucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd\
              mbG93JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAg\
              ICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgI\
              CAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgIC\
              ByZXR1cm4geWllbGQqIHRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB\
              9XG4gICAgfVxuICAgICpwYXJzZVF1b3RlZFNjYWxhcigpIHtcbiAgICAgICAgY29u\
              c3QgcXVvdGUgPSB0aGlzLmNoYXJBdCgwKTtcbiAgICAgICAgbGV0IGVuZCA9IHRoa\
              XMuYnVmZmVyLmluZGV4T2YocXVvdGUsIHRoaXMucG9zICsgMSk7XG4gICAgICAgIG\
              lmIChxdW90ZSA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIHdoaWxlIChlbmQgIT0\
              9IC0xICYmIHRoaXMuYnVmZmVyW2VuZCArIDFdID09PSBcIidcIilcbiAgICAgICAg\
              ICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKFwiJ1wiLCBlbmQgKyAyK\
              TtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRvdW\
              JsZS1xdW90ZVxuICAgICAgICAgICAgd2hpbGUgKGVuZCAhPT0gLTEpIHtcbiAgICA\
              gICAgICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRo\
              aXMuYnVmZmVyW2VuZCAtIDEgLSBuXSA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgI\
              CAgICAgICBuICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKG4gJSAyID09PSAwKV\
              xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQ\
              gPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcIicsIGVuZCArIDEpO1xuICAgICAgICAg\
              ICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE9ubHkgbG9va2luZyBmb3IgbmV3b\
              GluZXMgd2l0aGluIHRoZSBxdW90ZXNcbiAgICAgICAgY29uc3QgcWIgPSB0aGlzLm\
              J1ZmZlci5zdWJzdHJpbmcoMCwgZW5kKTtcbiAgICAgICAgbGV0IG5sID0gcWIuaW5\
              kZXhPZignXFxuJywgdGhpcy5wb3MpO1xuICAgICAgICBpZiAobmwgIT09IC0xKSB7\
              XG4gICAgICAgICAgICB3aGlsZSAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICAgI\
              CAgY29uc3QgY3MgPSB0aGlzLmNvbnRpbnVlU2NhbGFyKG5sICsgMSk7XG4gICAgIC\
              AgICAgICAgICAgaWYgKGNzID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgYnJ\
              lYWs7XG4gICAgICAgICAgICAgICAgbmwgPSBxYi5pbmRleE9mKCdcXG4nLCBjcyk7\
              XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmwgIT09IC0xKSB7XG4gI\
              CAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvciBjYXVzZWQgYnkgYW4gdW\
              5leHBlY3RlZCB1bmluZGVudFxuICAgICAgICAgICAgICAgIGVuZCA9IG5sIC0gKHF\
              iW25sIC0gMV0gPT09ICdcXHInID8gMiA6IDEpO1xuICAgICAgICAgICAgfVxuICAg\
              ICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICBpZ\
              iAoIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Tm\
              V4dCgncXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5idWZ\
              mZXIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hU\
              b0luZGV4KGVuZCArIDEsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd\
              0xldmVsID8gJ2Zsb3cnIDogJ2RvYyc7XG4gICAgfVxuICAgICpwYXJzZUJsb2NrU2\
              NhbGFySGVhZGVyKCkge1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0\
              gLTE7XG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gZmFsc2U7XG4gICAg\
              ICAgIGxldCBpID0gdGhpcy5wb3M7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gI\
              CAgICAgICAgICBjb25zdCBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIC\
              AgICBpZiAoY2ggPT09ICcrJylcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2N\
              hbGFyS2VlcCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjaCA+ICcwJyAm\
              JiBjaCA8PSAnOScpXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZ\
              GVudCA9IE51bWJlcihjaCkgLSAxO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2ggIT\
              09ICctJylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICA\
              gICByZXR1cm4geWllbGQqIHRoaXMucHVzaFVudGlsKGNoID0+IGlzRW1wdHkoY2gp\
              IHx8IGNoID09PSAnIycpO1xuICAgIH1cbiAgICAqcGFyc2VCbG9ja1NjYWxhcigpI\
              HtcbiAgICAgICAgbGV0IG5sID0gdGhpcy5wb3MgLSAxOyAvLyBtYXkgYmUgLTEgaW\
              YgdGhpcy5wb3MgPT09IDBcbiAgICAgICAgbGV0IGluZGVudCA9IDA7XG4gICAgICA\
              gIGxldCBjaDtcbiAgICAgICAgbG9vcDogZm9yIChsZXQgaSA9IHRoaXMucG9zOyAo\
              Y2ggPSB0aGlzLmJ1ZmZlcltpXSk7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoI\
              ChjaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgIC\
              AgICAgICBpbmRlbnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4\
              gICAgICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgICAgICAg\
              bmwgPSBpO1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgPSAwO1xuICAgICAgI\
              CAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdcXHInOi\
              B7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmJ1ZmZlclt\
              pICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCAmJiAhdGhpcy5h\
              dEVuZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5le\
              HQoJ2Jsb2NrLXNjYWxhcicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC\
              A9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICA\
              gICAgICAgICAgICB9IC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICAgICAgZGVm\
              YXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgI\
              CAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKV\
              xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc2NhbGFyJyk\
              7XG4gICAgICAgIGlmIChpbmRlbnQgPj0gdGhpcy5pbmRlbnROZXh0KSB7XG4gICAg\
              ICAgICAgICBpZiAodGhpcy5ibG9ja1NjYWxhckluZGVudCA9PT0gLTEpXG4gICAgI\
              CAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gaW5kZW50O1xuICAgICAgICAgIC\
              AgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID1cbiAgICA\
              gICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCArICh0aGlzLmlu\
              ZGVudE5leHQgPT09IDAgPyAxIDogdGhpcy5pbmRlbnROZXh0KTtcbiAgICAgICAgI\
              CAgIH1cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcy\
              A9IHRoaXMuY29udGludWVTY2FsYXIobmwgKyAxKTtcbiAgICAgICAgICAgICAgICB\
              pZiAoY3MgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAg\
              ICAgICAgICAgICBubCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1xcbicsIGNzKTtcb\
              iAgICAgICAgICAgIH0gd2hpbGUgKG5sICE9PSAtMSk7XG4gICAgICAgICAgICBpZi\
              AobmwgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmF0RW5kKVx\
              uICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1z\
              Y2FsYXInKTtcbiAgICAgICAgICAgICAgICBubCA9IHRoaXMuYnVmZmVyLmxlbmd0a\
              DtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFpbGluZy\
              BpbnN1ZmZpY2llbnRseSBpbmRlbnRlZCB0YWJzIGFyZSBpbnZhbGlkLlxuICAgICA\
              gICAvLyBUbyBjYXRjaCB0aGF0IGR1cmluZyBwYXJzaW5nLCB3ZSBpbmNsdWRlIHRo\
              ZW0gaW4gdGhlIGJsb2NrIHNjYWxhciB2YWx1ZS5cbiAgICAgICAgbGV0IGkgPSBub\
              CArIDE7XG4gICAgICAgIGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgIHdoaW\
              xlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2l\
              dO1xuICAgICAgICBpZiAoY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICB3aGls\
              ZSAoY2ggPT09ICdcXHQnIHx8IGNoID09PSAnICcgfHwgY2ggPT09ICdcXHInIHx8I\
              GNoID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWy\
              sraV07XG4gICAgICAgICAgICBubCA9IGkgLSAxO1xuICAgICAgICB9XG4gICAgICA\
              gIGVsc2UgaWYgKCF0aGlzLmJsb2NrU2NhbGFyS2VlcCkge1xuICAgICAgICAgICAg\
              ZG8ge1xuICAgICAgICAgICAgICAgIGxldCBpID0gbmwgLSAxO1xuICAgICAgICAgI\
              CAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgICAgIG\
              lmIChjaCA9PT0gJ1xccicpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5\
              idWZmZXJbLS1pXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2hhciA9IGk7\
              IC8vIERyb3AgdGhlIGxpbmUgaWYgbGFzdCBjaGFyIG5vdCBtb3JlIGluZGVudGVkX\
              G4gICAgICAgICAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgIC\
              AgICAgICAgIGNoID0gdGhpcy5idWZmZXJbLS1pXTtcbiAgICAgICAgICAgICAgICB\
              pZiAoY2ggPT09ICdcXG4nICYmIGkgPj0gdGhpcy5wb3MgJiYgaSArIDEgKyBpbmRl\
              bnQgPiBsYXN0Q2hhcilcbiAgICAgICAgICAgICAgICAgICAgbmwgPSBpO1xuICAgI\
              CAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gIC\
              AgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB5aWV\
              sZCBTQ0FMQVI7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KG5sICsg\
              MSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTd\
              GFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VQbGFpblNjYWxhcigpIHtcbiAgICAgIC\
              AgY29uc3QgaW5GbG93ID0gdGhpcy5mbG93TGV2ZWwgPiAwO1xuICAgICAgICBsZXQ\
              gZW5kID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zIC0g\
              MTtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICB3aGlsZSAoKGNoID0gdGhpcy5id\
              WZmZXJbKytpXSkpIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJzonKSB7XG4gIC\
              AgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiA\
              gICAgICAgICAgICAgICBpZiAoaXNFbXB0eShuZXh0KSB8fCAoaW5GbG93ICYmIGZs\
              b3dJbmRpY2F0b3JDaGFycy5oYXMobmV4dCkpKVxuICAgICAgICAgICAgICAgICAgI\
              CBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgfV\
              xuICAgICAgICAgICAgZWxzZSBpZiAoaXNFbXB0eShjaCkpIHtcbiAgICAgICAgICA\
              gICAgICBsZXQgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAg\
              ICAgICBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmI\
              ChuZXh0ID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPS\
              AxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSAnXFxuJztcbiAgICAgICA\
              gICAgICAgICAgICAgICAgIG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAg\
              ICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgI\
              CAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICB9XG\
              4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICcjJyB8fCAoaW5GbG93ICYmIGZ\
              sb3dJbmRpY2F0b3JDaGFycy5oYXMobmV4dCkpKVxuICAgICAgICAgICAgICAgICAg\
              ICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gI\
              CAgICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb250aW51ZVNjYWxhci\
              hpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcyA9PT0gLTEpXG4gICA\
              gICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAg\
              aSA9IE1hdGgubWF4KGksIGNzIC0gMik7IC8vIHRvIGFkdmFuY2UsIGJ1dCBzdGlsb\
              CBhY2NvdW50IGZvciAnICMnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgIC\
              AgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGluRmx\
              vdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKGNoKSlcbiAgICAgICAgICAgICAg\
              ICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgI\
              CAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKV\
              xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgncGxhaW4tc2NhbGFyJyk\
              7XG4gICAgICAgIHlpZWxkIFNDQUxBUjtcbiAgICAgICAgeWllbGQqIHRoaXMucHVz\
              aFRvSW5kZXgoZW5kICsgMSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBpbkZsb3cgP\
              yAnZmxvdycgOiAnZG9jJztcbiAgICB9XG4gICAgKnB1c2hDb3VudChuKSB7XG4gIC\
              AgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5idWZmZXI\
              uc3Vic3RyKHRoaXMucG9zLCBuKTtcbiAgICAgICAgICAgIHRoaXMucG9zICs9IG47\
              XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1c\
              m4gMDtcbiAgICB9XG4gICAgKnB1c2hUb0luZGV4KGksIGFsbG93RW1wdHkpIHtcbi\
              AgICAgICAgY29uc3QgcyA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMucG9zLCBpKTt\
              cbiAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHlpZWxkIHM7XG4gICAgICAg\
              ICAgICB0aGlzLnBvcyArPSBzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiBzL\
              mxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGxvd0VtcHR5KV\
              xuICAgICAgICAgICAgeWllbGQgJyc7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1\
              cbiAgICAqcHVzaEluZGljYXRvcnMoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5j\
              aGFyQXQoMCkpIHtcbiAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgI\
              CAgIHJldHVybiAoKHlpZWxkKiB0aGlzLnB1c2hUYWcoKSkgK1xuICAgICAgICAgIC\
              AgICAgICAgICAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSkgK1xuICAgICA\
              gICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xu\
              ICAgICAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoe\
              WllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcikpICtcbiAgICAgIC\
              AgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpICtcbiA\
              gICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCkp\
              KTtcbiAgICAgICAgICAgIGNhc2UgJy0nOiAvLyB0aGlzIGlzIGFuIGVycm9yXG4gI\
              CAgICAgICAgICBjYXNlICc/JzogLy8gdGhpcyBpcyBhbiBlcnJvciBvdXRzaWRlIG\
              Zsb3cgY29sbGVjdGlvbnNcbiAgICAgICAgICAgIGNhc2UgJzonOiB7XG4gICAgICA\
              gICAgICAgICAgY29uc3QgaW5GbG93ID0gdGhpcy5mbG93TGV2ZWwgPiAwO1xuICAg\
              ICAgICAgICAgICAgIGNvbnN0IGNoMSA9IHRoaXMuY2hhckF0KDEpO1xuICAgICAgI\
              CAgICAgICAgIGlmIChpc0VtcHR5KGNoMSkgfHwgKGluRmxvdyAmJiBmbG93SW5kaW\
              NhdG9yQ2hhcnMuaGFzKGNoMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICg\
              haW5GbG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0\
              ID0gdGhpcy5pbmRlbnRWYWx1ZSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGVsc\
              2UgaWYgKHRoaXMuZmxvd0tleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaX\
              MuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh\
              5aWVsZCogdGhpcy5wdXNoQ291bnQoMSkpICtcbiAgICAgICAgICAgICAgICAgICAg\
              ICAgICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKSArXG4gICAgICAgICAgI\
              CAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuIC\
              AgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICA\
              gICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hUYWcoKSB7XG4gICAgICAgIGlm\
              ICh0aGlzLmNoYXJBdCgxKSA9PT0gJzwnKSB7XG4gICAgICAgICAgICBsZXQgaSA9I\
              HRoaXMucG9zICsgMjtcbiAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2\
              ldO1xuICAgICAgICAgICAgd2hpbGUgKCFpc0VtcHR5KGNoKSAmJiBjaCAhPT0gJz4\
              nKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAg\
              ICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChjaCA9PT0gJz4nI\
              D8gaSArIDEgOiBpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG\
              4gICAgICAgICAgICBsZXQgaSA9IHRoaXMucG9zICsgMTtcbiAgICAgICAgICAgIGx\
              ldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgd2hpbGUgKGNoKSB7\
              XG4gICAgICAgICAgICAgICAgaWYgKHRhZ0NoYXJzLmhhcyhjaCkpXG4gICAgICAgI\
              CAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIC\
              AgICBlbHNlIGlmIChjaCA9PT0gJyUnICYmXG4gICAgICAgICAgICAgICAgICAgIGh\
              leERpZ2l0cy5oYXModGhpcy5idWZmZXJbaSArIDFdKSAmJlxuICAgICAgICAgICAg\
              ICAgICAgICBoZXhEaWdpdHMuaGFzKHRoaXMuYnVmZmVyW2kgKyAyXSkpIHtcbiAgI\
              CAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsoaSArPSAzKV07XG4gIC\
              AgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICA\
              gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1\
              cm4geWllbGQqIHRoaXMucHVzaFRvSW5kZXgoaSwgZmFsc2UpO1xuICAgICAgICB9X\
              G4gICAgfVxuICAgICpwdXNoTmV3bGluZSgpIHtcbiAgICAgICAgY29uc3QgY2ggPS\
              B0aGlzLmJ1ZmZlclt0aGlzLnBvc107XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbic\
              pXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xu\
              ICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xccicgJiYgdGhpcy5jaGFyQXQoMSkgP\
              T09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hDb3\
              VudCgyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICA\
              gfVxuICAgICpwdXNoU3BhY2VzKGFsbG93VGFicykge1xuICAgICAgICBsZXQgaSA9\
              IHRoaXMucG9zIC0gMTtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICBkbyB7XG4gI\
              CAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIH0gd2hpbG\
              UgKGNoID09PSAnICcgfHwgKGFsbG93VGFicyAmJiBjaCA9PT0gJ1xcdCcpKTtcbiA\
              gICAgICAgY29uc3QgbiA9IGkgLSB0aGlzLnBvcztcbiAgICAgICAgaWYgKG4gPiAw\
              KSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5wb\
              3MsIG4pO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBpO1xuICAgICAgICB9XG4gIC\
              AgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICAqcHVzaFVudGlsKHRlc3QpIHtcbiA\
              gICAgICAgbGV0IGkgPSB0aGlzLnBvcztcbiAgICAgICAgbGV0IGNoID0gdGhpcy5i\
              dWZmZXJbaV07XG4gICAgICAgIHdoaWxlICghdGVzdChjaCkpXG4gICAgICAgICAgI\
              CBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIHJldHVybiB5aWVsZCogdG\
              hpcy5wdXNoVG9JbmRleChpLCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyB\
              MZXhlciB9O1xuIiwiLyoqXG4gKiBUcmFja3MgbmV3bGluZXMgZHVyaW5nIHBhcnNp\
              bmcgaW4gb3JkZXIgdG8gcHJvdmlkZSBhbiBlZmZpY2llbnQgQVBJIGZvclxuICogZ\
              GV0ZXJtaW5pbmcgdGhlIG9uZS1pbmRleGVkIGB7IGxpbmUsIGNvbCB9YCBwb3NpdG\
              lvbiBmb3IgYW55IG9mZnNldFxuICogd2l0aGluIHRoZSBpbnB1dC5cbiAqL1xuY2x\
              hc3MgTGluZUNvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0\
              aGlzLmxpbmVTdGFydHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob\
              3VsZCBiZSBjYWxsZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIGNhbG\
              xcbiAgICAgICAgICogYGxpbmVDb3VudGVyLmxpbmVTdGFydHMuc29ydCgpYCBiZWZ\
              vcmUgY2FsbGluZyBgbGluZVBvcygpYC5cbiAgICAgICAgICovXG4gICAgICAgIHRo\
              aXMuYWRkTmV3TGluZSA9IChvZmZzZXQpID0+IHRoaXMubGluZVN0YXJ0cy5wdXNoK\
              G9mZnNldCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJmb3JtcyBhIGJpbm\
              FyeSBzZWFyY2ggYW5kIHJldHVybnMgdGhlIDEtaW5kZXhlZCB7IGxpbmUsIGNvbCB\
              9XG4gICAgICAgICAqIHBvc2l0aW9uIG9mIGBvZmZzZXRgLiBJZiBgbGluZSA9PT0g\
              MGAsIGBhZGROZXdMaW5lYCBoYXMgbmV2ZXIgYmVlblxuICAgICAgICAgKiBjYWxsZ\
              WQgb3IgYG9mZnNldGAgaXMgYmVmb3JlIHRoZSBmaXJzdCBrbm93biBuZXdsaW5lLl\
              xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saW5lUG9zID0gKG9mZnNldCkgPT4\
              ge1xuICAgICAgICAgICAgbGV0IGxvdyA9IDA7XG4gICAgICAgICAgICBsZXQgaGln\
              aCA9IHRoaXMubGluZVN0YXJ0cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAob\
              G93IDwgaGlnaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pZCA9IChsb3cgKy\
              BoaWdoKSA+PiAxOyAvLyBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpXG4gICA\
              gICAgICAgICAgICAgaWYgKHRoaXMubGluZVN0YXJ0c1ttaWRdIDwgb2Zmc2V0KVxu\
              ICAgICAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgI\
              CAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgIC\
              AgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmVTdGFydHNbbG93XSA9PT0\
              gb2Zmc2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IGxvdyArIDEs\
              IGNvbDogMSB9O1xuICAgICAgICAgICAgaWYgKGxvdyA9PT0gMClcbiAgICAgICAgI\
              CAgICAgICByZXR1cm4geyBsaW5lOiAwLCBjb2w6IG9mZnNldCB9O1xuICAgICAgIC\
              AgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmxpbmVTdGFydHNbbG93IC0gMV07XG4gICA\
              gICAgICAgICByZXR1cm4geyBsaW5lOiBsb3csIGNvbDogb2Zmc2V0IC0gc3RhcnQg\
              KyAxIH07XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBMaW5lQ291b\
              nRlciB9O1xuIiwiaW1wb3J0IHsgdG9rZW5UeXBlIH0gZnJvbSAnLi9jc3QuanMnO1\
              xuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tICcuL2xleGVyLmpzJztcblxuZnVuY3Rpb24\
              gaW5jbHVkZXNUb2tlbihsaXN0LCB0eXBlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7\
              IGkgPCBsaXN0Lmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAobGlzdFtpXS50eXBlI\
              D09PSB0eXBlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIG\
              ZhbHNlO1xufVxuZnVuY3Rpb24gZmluZE5vbkVtcHR5SW5kZXgobGlzdCkge1xuICA\
              gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAg\
              ICBzd2l0Y2ggKGxpc3RbaV0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY\
              2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYX\
              NlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICA\
              gIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1c\
              biAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gaXNGbG93VG9rZW4od\
              G9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuPy50eXBlKSB7XG4gICAgICAgIGNhc2\
              UgJ2FsaWFzJzpcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSA\
              nc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVv\
              dGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gI\
              CAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIC\
              AgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRQcmV2UHJ\
              vcHMocGFyZW50KSB7XG4gICAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuICAgICAg\
              ICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnN0Y\
              XJ0O1xuICAgICAgICBjYXNlICdibG9jay1tYXAnOiB7XG4gICAgICAgICAgICBjb2\
              5zdCBpdCA9IHBhcmVudC5pdGVtc1twYXJlbnQuaXRlbXMubGVuZ3RoIC0gMV07XG4\
              gICAgICAgICAgICByZXR1cm4gaXQuc2VwID8/IGl0LnN0YXJ0O1xuICAgICAgICB9\
              XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6XG4gICAgICAgICAgICByZXR1cm4gc\
              GFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXS5zdGFydDtcbiAgIC\
              AgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9\
              cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICB9\
              XG59XG4vKiogTm90ZTogTWF5IG1vZGlmeSBpbnB1dCBhcnJheSAqL1xuZnVuY3Rpb\
              24gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpIHtcbiAgICBpZiAocHJldi5sZW\
              5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBsZXQgaSA9IHByZXY\
              ubGVuZ3RoO1xuICAgIGxvb3A6IHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICBz\
              d2l0Y2ggKHByZXZbaV0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jLXN0Y\
              XJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgIC\
              AgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICBjYXNlICd\
              zZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAg\
              ICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3a\
              GlsZSAocHJldlsrK2ldPy50eXBlID09PSAnc3BhY2UnKSB7XG4gICAgICAgIC8qIG\
              xvb3AgKi9cbiAgICB9XG4gICAgcmV0dXJuIHByZXYuc3BsaWNlKGksIHByZXYubGV\
              uZ3RoKTtcbn1cbmZ1bmN0aW9uIGZpeEZsb3dTZXFJdGVtcyhmYykge1xuICAgIGlm\
              IChmYy5zdGFydC50eXBlID09PSAnZmxvdy1zZXEtc3RhcnQnKSB7XG4gICAgICAgI\
              GZvciAoY29uc3QgaXQgb2YgZmMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdC\
              5zZXAgJiZcbiAgICAgICAgICAgICAgICAhaXQudmFsdWUgJiZcbiAgICAgICAgICA\
              gICAgICAhaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ2V4cGxpY2l0LWtleS1pbmQn\
              KSAmJlxuICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hc\
              C12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdC5rZXkpXG4gIC\
              AgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gaXQua2V5O1xuICAgICAgICAgICA\
              gICAgIGRlbGV0ZSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmxvd1Rv\
              a2VuKGl0LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsd\
              WUuZW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLn\
              B1c2guYXBwbHkoaXQudmFsdWUuZW5kLCBpdC5zZXApO1xuICAgICAgICAgICAgICA\
              gICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZS5lbmQg\
              PSBpdC5zZXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc\
              2VcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbH\
              koaXQuc3RhcnQsIGl0LnNlcCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGl0LnN\
              lcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICog\
              QSBZQU1MIGNvbmNyZXRlIHN5bnRheCB0cmVlIChDU1QpIHBhcnNlclxuICpcbiAqI\
              GBgYHRzXG4gKiBjb25zdCBzcmM6IHN0cmluZyA9IC4uLlxuICogZm9yIChjb25zdC\
              B0b2tlbiBvZiBuZXcgUGFyc2VyKCkucGFyc2Uoc3JjKSkge1xuICogICAvLyB0b2t\
              lbjogVG9rZW5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRvIHVzZSB0aGUgcGFyc2Vy\
              IHdpdGggYSB1c2VyLXByb3ZpZGVkIGxleGVyOlxuICpcbiAqIGBgYHRzXG4gKiBmd\
              W5jdGlvbiogcGFyc2Uoc291cmNlOiBzdHJpbmcsIGxleGVyOiBMZXhlcikge1xuIC\
              ogICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKClcbiAqICAgZm9yIChjb25zdCB\
              sZXhlbWUgb2YgbGV4ZXIubGV4KHNvdXJjZSkpXG4gKiAgICAgeWllbGQqIHBhcnNl\
              ci5uZXh0KGxleGVtZSlcbiAqICAgeWllbGQqIHBhcnNlci5lbmQoKVxuICogfVxuI\
              CpcbiAqIGNvbnN0IHNyYzogc3RyaW5nID0gLi4uXG4gKiBjb25zdCBsZXhlciA9IG\
              5ldyBMZXhlcigpXG4gKiBmb3IgKGNvbnN0IHRva2VuIG9mIHBhcnNlKHNyYywgbGV\
              4ZXIpKSB7XG4gKiAgIC8vIHRva2VuOiBUb2tlblxuICogfVxuICogYGBgXG4gKi9c\
              bmNsYXNzIFBhcnNlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9uTmV3TGluZ\
              SAtIElmIGRlZmluZWQsIGNhbGxlZCBzZXBhcmF0ZWx5IHdpdGggdGhlIHN0YXJ0IH\
              Bvc2l0aW9uIG9mXG4gICAgICogICBlYWNoIG5ldyBsaW5lIChpbiBgcGFyc2UoKWA\
              sIGluY2x1ZGluZyB0aGUgc3RhcnQgb2YgaW5wdXQpLlxuICAgICAqL1xuICAgIGNv\
              bnN0cnVjdG9yKG9uTmV3TGluZSkge1xuICAgICAgICAvKiogSWYgdHJ1ZSwgc3BhY\
              2UgYW5kIHNlcXVlbmNlIGluZGljYXRvcnMgY291bnQgYXMgaW5kZW50YXRpb24gKi\
              9cbiAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAvKiogSWY\
              gdHJ1ZSwgbmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx1ZSAqL1xuICAgICAgICB0\
              aGlzLmF0U2NhbGFyID0gZmFsc2U7XG4gICAgICAgIC8qKiBDdXJyZW50IGluZGVud\
              GF0aW9uIGxldmVsICovXG4gICAgICAgIHRoaXMuaW5kZW50ID0gMDtcbiAgICAgIC\
              AgLyoqIEN1cnJlbnQgb2Zmc2V0IHNpbmNlIHRoZSBzdGFydCBvZiBwYXJzaW5nICo\
              vXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgLyoqIE9uIHRoZSBz\
              YW1lIGxpbmUgd2l0aCBhIGJsb2NrIG1hcCBrZXkgKi9cbiAgICAgICAgdGhpcy5vb\
              ktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgLyoqIFRvcCBpbmRpY2F0ZXMgdGhlIG\
              5vZGUgdGhhdCdzIGN1cnJlbnRseSBiZWluZyBidWlsdCAqL1xuICAgICAgICB0aGl\
              zLnN0YWNrID0gW107XG4gICAgICAgIC8qKiBUaGUgc291cmNlIG9mIHRoZSBjdXJy\
              ZW50IHRva2VuLCBzZXQgaW4gcGFyc2UoKSAqL1xuICAgICAgICB0aGlzLnNvdXJjZ\
              SA9ICcnO1xuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhlIGN1cnJlbnQgdG9rZW\
              4sIHNldCBpbiBwYXJzZSgpICovXG4gICAgICAgIHRoaXMudHlwZSA9ICcnO1xuICA\
              gICAgICAvLyBNdXN0IGJlIGRlZmluZWQgYWZ0ZXIgYG5leHQoKWBcbiAgICAgICAg\
              dGhpcy5sZXhlciA9IG5ldyBMZXhlcigpO1xuICAgICAgICB0aGlzLm9uTmV3TGluZ\
              SA9IG9uTmV3TGluZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgYHNvdX\
              JjZWAgYXMgYSBZQU1MIHN0cmVhbS5cbiAgICAgKiBJZiBgaW5jb21wbGV0ZWAsIGE\
              gcGFydCBvZiB0aGUgbGFzdCBsaW5lIG1heSBiZSBsZWZ0IGFzIGEgYnVmZmVyIGZv\
              ciB0aGUgbmV4dCBjYWxsLlxuICAgICAqXG4gICAgICogRXJyb3JzIGFyZSBub3Qgd\
              Ghyb3duLCBidXQgeWllbGRlZCBhcyBgeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlIH\
              1gIHRva2Vucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgZ2VuZXJhdG9yIG9\
              mIHRva2VucyByZXByZXNlbnRpbmcgZWFjaCBkaXJlY3RpdmUsIGRvY3VtZW50LCBh\
              bmQgb3RoZXIgc3RydWN0dXJlLlxuICAgICAqL1xuICAgICpwYXJzZShzb3VyY2UsI\
              GluY29tcGxldGUgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5vbk5ld0xpbm\
              UgJiYgdGhpcy5vZmZzZXQgPT09IDApXG4gICAgICAgICAgICB0aGlzLm9uTmV3TGl\
              uZSgwKTtcbiAgICAgICAgZm9yIChjb25zdCBsZXhlbWUgb2YgdGhpcy5sZXhlci5s\
              ZXgoc291cmNlLCBpbmNvbXBsZXRlKSlcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzL\
              m5leHQobGV4ZW1lKTtcbiAgICAgICAgaWYgKCFpbmNvbXBsZXRlKVxuICAgICAgIC\
              AgICAgeWllbGQqIHRoaXMuZW5kKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF\
              kdmFuY2UgdGhlIHBhcnNlciBieSB0aGUgYHNvdXJjZWAgb2Ygb25lIGxleGljYWwg\
              dG9rZW4uXG4gICAgICovXG4gICAgKm5leHQoc291cmNlKSB7XG4gICAgICAgIHRoa\
              XMuc291cmNlID0gc291cmNlO1xuICAgICAgICBpZiAodGhpcy5hdFNjYWxhcikge1\
              xuICAgICAgICAgICAgdGhpcy5hdFNjYWxhciA9IGZhbHNlO1xuICAgICAgICAgICA\
              geWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0g\
              c291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuI\
              CAgICAgICBjb25zdCB0eXBlID0gdG9rZW5UeXBlKHNvdXJjZSk7XG4gICAgICAgIG\
              lmICghdHlwZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBOb3QgYSB\
              ZQU1MIHRva2VuOiAke3NvdXJjZX1gO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMu\
              cG9wKHsgdHlwZTogJ2Vycm9yJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgbWVzc2FnZ\
              Swgc291cmNlIH0pO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLm\
              xlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnc2N\
              hbGFyJykge1xuICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSBmYWxzZTtcbiAg\
              ICAgICAgICAgIHRoaXMuYXRTY2FsYXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpc\
              y50eXBlID0gJ3NjYWxhcic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gIC\
              AgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgeWllbGQqIHR\
              oaXMuc3RlcCgpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAg\
              ICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoa\
              XMuYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbm\
              RlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmU\
              pXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTmV3TGluZSh0aGlzLm9m\
              ZnNldCArIHNvdXJjZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVha\
              ztcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgIC\
              AgICAgIGlmICh0aGlzLmF0TmV3TGluZSAmJiBzb3VyY2VbMF0gPT09ICcgJylcbiA\
              gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ICs9IHNvdXJjZS5sZW5n\
              dGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgI\
              GNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2\
              1hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWl\
              uZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0TmV3TGluZSlcbiAg\
              ICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ICs9IHNvdXJjZS5sZW5nd\
              Gg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIG\
              Nhc2UgJ2RvYy1tb2RlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LWVycm9\
              yLWVuZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAg\
              ICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0TmV3TGluZ\
              SA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZX\
              QgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQ2F\
              sbCBhdCBlbmQgb2YgaW5wdXQgdG8gcHVzaCBvdXQgYW55IHJlbWFpbmluZyBjb25z\
              dHJ1Y3Rpb25zICovXG4gICAgKmVuZCgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuc\
              3RhY2subGVuZ3RoID4gMClcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1\
              xuICAgIH1cbiAgICBnZXQgc291cmNlVG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IHN\
              0ID0ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAg\
              b2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIGluZGVudDogdGhpcy5pb\
              mRlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH\
              07XG4gICAgICAgIHJldHVybiBzdDtcbiAgICB9XG4gICAgKnN0ZXAoKSB7XG4gICA\
              gICAgIGNvbnN0IHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgaWYgKHRoaXMu\
              dHlwZSA9PT0gJ2RvYy1lbmQnICYmICghdG9wIHx8IHRvcC50eXBlICE9PSAnZG9jL\
              WVuZCcpKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPi\
              AwKVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICA\
              gICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZG9j\
              LWVuZCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgI\
              CAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICB9KT\
              tcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXR\
              vcClcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5zdHJlYW0oKTtcbiAg\
              ICAgICAgc3dpdGNoICh0b3AudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jd\
              W1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5kb2N1bW\
              VudCh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICA\
              gY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQt\
              c2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJ\
              zpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuc2NhbGFyKHRvcC\
              k7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICA\
              gICAgIHJldHVybiB5aWVsZCogdGhpcy5ibG9ja1NjYWxhcih0b3ApO1xuICAgICAg\
              ICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge\
              WllbGQqIHRoaXMuYmxvY2tNYXAodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2\
              NrLXNlcSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmJsb2N\
              rU2VxdWVuY2UodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlv\
              bic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmZsb3dDb2xsZ\
              WN0aW9uKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzpcbiAgICAgIC\
              AgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuZG9jdW1lbnRFbmQodG9wKTtcbiA\
              gICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQg\
              bm90IGhhcHBlbiAqL1xuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICB9X\
              G4gICAgcGVlayhuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuc3\
              RhY2subGVuZ3RoIC0gbl07XG4gICAgfVxuICAgICpwb3AoZXJyb3IpIHtcbiAgICA\
              gICAgY29uc3QgdG9rZW4gPSBlcnJvciA/PyB0aGlzLnN0YWNrLnBvcCgpO1xuICAg\
              ICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgc2hvdWxkIG5vdCBoYXBwZW4gKi9cb\
              iAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZS\
              A9ICdUcmllZCB0byBwb3AgYW4gZW1wdHkgc3RhY2snO1xuICAgICAgICAgICAgeWl\
              lbGQgeyB0eXBlOiAnZXJyb3InLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBzb3VyY2U6\
              ICcnLCBtZXNzYWdlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpc\
              y5zdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHlpZWxkIHRva2VuO1\
              xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdG9\
              wID0gdGhpcy5wZWVrKDEpO1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09\
              ICdibG9jay1zY2FsYXInKSB7XG4gICAgICAgICAgICAgICAgLy8gQmxvY2sgc2Nhb\
              GFycyB1c2UgdGhlaXIgcGFyZW50IHJhdGhlciB0aGFuIGhlYWRlciBpbmRlbnRcbi\
              AgICAgICAgICAgICAgICB0b2tlbi5pbmRlbnQgPSAnaW5kZW50JyBpbiB0b3AgPyB\
              0b3AuaW5kZW50IDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Ug\
              aWYgKHRva2VuLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nICYmIHRvcC50eXBlI\
              D09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIGFsbC\
              BpbmRlbnQgZm9yIHRvcC1sZXZlbCBmbG93IGNvbGxlY3Rpb25zXG4gICAgICAgICA\
              gICAgICAgdG9rZW4uaW5kZW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAg\
              ICAgIGlmICh0b2tlbi50eXBlID09PSAnZmxvdy1jb2xsZWN0aW9uJylcbiAgICAgI\
              CAgICAgICAgICBmaXhGbG93U2VxSXRlbXModG9rZW4pO1xuICAgICAgICAgICAgc3\
              dpdGNoICh0b3AudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW5\
              0JzpcbiAgICAgICAgICAgICAgICAgICAgdG9wLnZhbHVlID0gdG9rZW47XG4gICAg\
              ICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb\
              2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgICAgIHRvcC5wcm9wcy5wdXNoKH\
              Rva2VuKTsgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICA\
              gICAgICAgICAgICAgY2FzZSAnYmxvY2stbWFwJzoge1xuICAgICAgICAgICAgICAg\
              ICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07X\
              G4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgIC\
              AgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogdG9\
              rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9u\
              S2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47X\
              G4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZS\
              BpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA\
              9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAg\
              ICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnb\
              ihpdCwgeyBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgIC\
              AgICAgICAgdGhpcy5vbktleUxpbmUgPSAhaXQuZXhwbGljaXRLZXk7XG4gICAgICA\
              gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1c\
              biAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuI\
              CAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgIC\
              AgICAgICAgY29uc3QgaXQgPSB0b3AuaXRlbXNbdG9wLml0ZW1zLmxlbmd0aCAtIDF\
              dO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpXG4gICAgICAgICAg\
              ICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwgdmFsdWU6I\
              HRva2VuIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgIC\
              AgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICA\
              gICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2Fz\
              ZSAnZmxvdy1jb2xsZWN0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zd\
              CBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIC\
              AgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICA\
              gICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiB0b2tlbiwg\
              c2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwK\
              VxuICAgICAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSB0b2tlbjtcbiAgIC\
              AgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2J\
              qZWN0LmFzc2lnbihpdCwgeyBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAg\
              ICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgI\
              CAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcG\
              VuICovXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA\
              gICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxk\
              KiB0aGlzLnBvcCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZ\
              iAoKHRvcC50eXBlID09PSAnZG9jdW1lbnQnIHx8XG4gICAgICAgICAgICAgICAgdG\
              9wLnR5cGUgPT09ICdibG9jay1tYXAnIHx8XG4gICAgICAgICAgICAgICAgdG9wLnR\
              5cGUgPT09ICdibG9jay1zZXEnKSAmJlxuICAgICAgICAgICAgICAgICh0b2tlbi50\
              eXBlID09PSAnYmxvY2stbWFwJyB8fCB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJ\
              ykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gdG9rZW4uaXRlbXNbdG\
              9rZW4uaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3Q\
              gJiZcbiAgICAgICAgICAgICAgICAgICAgIWxhc3Quc2VwICYmXG4gICAgICAgICAg\
              ICAgICAgICAgICFsYXN0LnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIGxhc\
              3Quc3RhcnQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmaW5kTm\
              9uRW1wdHlJbmRleChsYXN0LnN0YXJ0KSA9PT0gLTEgJiZcbiAgICAgICAgICAgICA\
              gICAgICAgKHRva2VuLmluZGVudCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAg\
              ICAgICAgbGFzdC5zdGFydC5ldmVyeShzdCA9PiBzdC50eXBlICE9PSAnY29tbWVud\
              CcgfHwgc3QuaW5kZW50IDwgdG9rZW4uaW5kZW50KSkpIHtcbiAgICAgICAgICAgIC\
              AgICAgICAgaWYgKHRvcC50eXBlID09PSAnZG9jdW1lbnQnKVxuICAgICAgICAgICA\
              gICAgICAgICAgICAgdG9wLmVuZCA9IGxhc3Quc3RhcnQ7XG4gICAgICAgICAgICAg\
              ICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wd\
              XNoKHsgc3RhcnQ6IGxhc3Quc3RhcnQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH\
              Rva2VuLml0ZW1zLnNwbGljZSgtMSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICA\
              gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgICpzdHJlYW0oKSB7XG4g\
              ICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdka\
              XJlY3RpdmUtbGluZSc6XG4gICAgICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAnZG\
              lyZWN0aXZlJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgc291cmNlOiB0aGlzLnNvdXJ\
              jZSB9O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2Ug\
              J2J5dGUtb3JkZXItbWFyayc6XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gI\
              CAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2\
              xpbmUnOlxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuc291cmNlVG9rZW47XG4\
              gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnZG9jLW1v\
              ZGUnOlxuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0Jzoge1xuICAgICAgICAgI\
              CAgICAgIGNvbnN0IGRvYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2\
              RvY3VtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnN\
              ldCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFtdXG4gICAgICAgICAgICAg\
              ICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZG9jLXN0Y\
              XJ0JylcbiAgICAgICAgICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3\
              VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGRvYyk\
              7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAg\
              ICB9XG4gICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsX\
              G4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgbW\
              Vzc2FnZTogYFVuZXhwZWN0ZWQgJHt0aGlzLnR5cGV9IHRva2VuIGluIFlBTUwgc3R\
              yZWFtYCxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAg\
              fTtcbiAgICB9XG4gICAgKmRvY3VtZW50KGRvYykge1xuICAgICAgICBpZiAoZG9jL\
              nZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmxpbmVFbmQoZG\
              9jKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGN\
              hc2UgJ2RvYy1zdGFydCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoZmluZE5vbkVt\
              cHR5SW5kZXgoZG9jLnN0YXJ0KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgI\
              CAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKi\
              B0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICA\
              gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNv\
              dXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgI\
              CB9XG4gICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgY2FzZS\
              AndGFnJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGN\
              hc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAg\
              ICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gI\
              CAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG\
              J2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoZG9jKTtcbiAgICAgICAgaWYgKGJ2KVx\
              uICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgZWxzZSB7\
              XG4gICAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Vyc\
              m9yJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgIC\
              AgICAgICAgICAgIG1lc3NhZ2U6IGBVbmV4cGVjdGVkICR7dGhpcy50eXBlfSB0b2t\
              lbiBpbiBZQU1MIGRvY3VtZW50YCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRo\
              aXMuc291cmNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgI\
              CpzY2FsYXIoc2NhbGFyKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdtYX\
              AtdmFsdWUtaW5kJykge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZ\
              Qcm9wcyh0aGlzLnBlZWsoMikpO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBn\
              ZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICBsZXQgc2VwO\
              1xuICAgICAgICAgICAgaWYgKHNjYWxhci5lbmQpIHtcbiAgICAgICAgICAgICAgIC\
              BzZXAgPSBzY2FsYXIuZW5kO1xuICAgICAgICAgICAgICAgIHNlcC5wdXNoKHRoaXM\
              uc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2FsYXIuZW5k\
              O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgI\
              CAgIHNlcCA9IFt0aGlzLnNvdXJjZVRva2VuXTtcbiAgICAgICAgICAgIGNvbnN0IG\
              1hcCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICA\
              gICAgICAgICAgICBvZmZzZXQ6IHNjYWxhci5vZmZzZXQsXG4gICAgICAgICAgICAg\
              ICAgaW5kZW50OiBzY2FsYXIuaW5kZW50LFxuICAgICAgICAgICAgICAgIGl0ZW1zO\
              iBbeyBzdGFydCwga2V5OiBzY2FsYXIsIHNlcCB9XVxuICAgICAgICAgICAgfTtcbi\
              AgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIHR\
              oaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSA9IG1hcDtcbiAgICAgICAg\
              fVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5saW5lRW5kK\
              HNjYWxhcik7XG4gICAgfVxuICAgICpibG9ja1NjYWxhcihzY2FsYXIpIHtcbiAgIC\
              AgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWN\
              lJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2Fz\
              ZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgc2NhbGFyLnByb3BzLnB1c2god\
              Ghpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIC\
              AgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBzY2FsYXIuc29\
              1cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgICAgICAgICAgLy8gYmxvY2stc2Nh\
              bGFyIHNvdXJjZSBpbmNsdWRlcyB0cmFpbGluZyBuZXdsaW5lXG4gICAgICAgICAgI\
              CAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaX\
              MuaW5kZW50ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmU\
              pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5sID0gdGhpcy5zb3VyY2UuaW5k\
              ZXhPZignXFxuJykgKyAxO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmwgI\
              T09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKH\
              RoaXMub2Zmc2V0ICsgbmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmwgPSB\
              0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nLCBubCkgKyAxO1xuICAgICAgICAgICAg\
              ICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHlpZ\
              WxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgIC\
              AgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9\
              cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRo\
              aXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuI\
              CAgICAgICB9XG4gICAgfVxuICAgICpibG9ja01hcChtYXApIHtcbiAgICAgICAgY2\
              9uc3QgaXQgPSBtYXAuaXRlbXNbbWFwLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICA\
              gICAvLyBpdC5zZXAgaXMgdHJ1ZS1pc2ggaWYgcGFpciBhbHJlYWR5IGhhcyBrZXkg\
              b3IgOiBzZXBhcmF0b3JcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgI\
              CAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHRoaXMub2\
              5LZXlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB\
              7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIGl0LnZh\
              bHVlID8gaXQudmFsdWUuZW5kIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgI\
              CAgICBjb25zdCBsYXN0ID0gQXJyYXkuaXNBcnJheShlbmQpID8gZW5kW2VuZC5sZW\
              5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGx\
              hc3Q/LnR5cGUgPT09ICdjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAg\
              IGVuZD8ucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgI\
              CAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goey\
              BzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1\
              cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAg\
              ICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgI\
              CAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgIC\
              AgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICA\
              gICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBj\
              YXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgI\
              CAgICAgICAgICBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbW\
              FwLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICA\
              gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXAp\
              IHtcbiAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb\
              2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1\
              xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdEluZGVudGVkQ29tbWVudCh\
              pdC5zdGFydCwgbWFwLmluZGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAg\
              IGNvbnN0IHByZXYgPSBtYXAuaXRlbXNbbWFwLml0ZW1zLmxlbmd0aCAtIDJdO1xuI\
              CAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcHJldj8udmFsdWU/Lm\
              VuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV\
              uZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5\
              cGUucHVzaC5hcHBseShlbmQsIGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgI\
              CAgICAgICAgICBlbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgIC\
              AgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucG9wKCk7XG4gICAgICAgICAgICA\
              gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAg\
              fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0L\
              nN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfV\
              xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiA\
              odGhpcy5pbmRlbnQgPj0gbWFwLmluZGVudCkge1xuICAgICAgICAgICAgY29uc3Qg\
              YXRNYXBJbmRlbnQgPSAhdGhpcy5vbktleUxpbmUgJiYgdGhpcy5pbmRlbnQgPT09I\
              G1hcC5pbmRlbnQ7XG4gICAgICAgICAgICBjb25zdCBhdE5leHRJdGVtID0gYXRNYX\
              BJbmRlbnQgJiZcbiAgICAgICAgICAgICAgICAoaXQuc2VwIHx8IGl0LmV4cGxpY2l\
              0S2V5KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSAhPT0gJ3NlcS1pdGVt\
              LWluZCc7XG4gICAgICAgICAgICAvLyBGb3IgZW1wdHkgbm9kZXMsIGFzc2lnbiBuZ\
              XdsaW5lLXNlcGFyYXRlZCBub3QgaW5kZW50ZWQgZW1wdHkgdG9rZW5zIHRvIGZvbG\
              xvd2luZyBub2RlXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBbXTtcbiAgICAgICA\
              gICAgIGlmIChhdE5leHRJdGVtICYmIGl0LnNlcCAmJiAhaXQudmFsdWUpIHtcbiAg\
              ICAgICAgICAgICAgICBjb25zdCBubCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvc\
              iAobGV0IGkgPSAwOyBpIDwgaXQuc2VwLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIC\
              AgICAgICAgICAgIGNvbnN0IHN0ID0gaXQuc2VwW2ldO1xuICAgICAgICAgICAgICA\
              gICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAg\
              IGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5sL\
              nB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gIC\
              AgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICA\
              gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBj\
              YXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc\
              3QuaW5kZW50ID4gbWFwLmluZGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC\
              AgICAgICAgbmwubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICA\
              gICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAg\
              ICAgICAgICAgICAgICAgICAgICAgICAgbmwubGVuZ3RoID0gMDtcbiAgICAgICAgI\
              CAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIC\
              BpZiAobmwubGVuZ3RoID49IDIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0\
              gaXQuc2VwLnNwbGljZShubFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAg\
              ICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FuY\
              2hvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgIC\
              AgICAgICAgaWYgKGF0TmV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICA\
              gICAgICAgICAgICAgIHN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAg\
              ICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0IH0pO1xuI\
              CAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuIC\
              AgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWY\
              gKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2go\
              dGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgI\
              CAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC\
              5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICA\
              gICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAg\
              ICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgICAgICAgICAga\
              WYgKCFpdC5zZXAgJiYgIWl0LmV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgIC\
              AgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICA\
              gICAgICAgICAgICAgICAgICAgaXQuZXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAg\
              ICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF0T\
              mV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIH\
              N0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICA\
              gICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBleHBsaWNpdEtleTogdHJ1ZSB9\
              KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlb\
              HNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG\
              4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4\
              gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxc\
              biAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50L\
              FxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW3\
              RoaXMuc291cmNlVG9rZW5dLCBleHBsaWNpdEtleTogdHJ1ZSB9XVxuICAgICAgICA\
              gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAg\
              ICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgI\
              CAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbH\
              VlLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5leHBsaWNpdEtleSk\
              ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpdC5zZXApIHtcbiAgICAg\
              ICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZXNUb2tlbihpdC5zdGFyd\
              CwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC\
              BPYmplY3QuYXNzaWduKGl0LCB7IGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2V\
              Ub2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAg\
              ICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgI\
              CAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcy\
              hpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXM\
              uc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\
              ICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgI\
              CAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgIC\
              AgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICA\
              gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6\
              IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgI\
              CAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC\
              AgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA\
              gICAgICAgIGVsc2UgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAg\
              ICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogbnVsbCwgc\
              2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgIC\
              AgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmNsdWRlc1R\
              va2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAg\
              ICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgI\
              CAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgIC\
              AgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICA\
              gICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAg\
              ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtle\
              TogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgIC\
              AgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiA\
              gICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRmxvd1Rva2VuKGl0Lmtl\
              eSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlb\
              ihpdC5zZXAsICduZXdsaW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC\
              AgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhpdC5zdGFydCk\
              7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaXQua2V5\
              O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcCA9IGl0LnNlc\
              DtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdX\
              JjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXh\
              wZWN0LWVycm9yIHR5cGUgZ3VhcmQgaXMgd3JvbmcgaGVyZVxuICAgICAgICAgICAg\
              ICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5rZXksIGRlbGV0ZSBpdC5zZXA7XG4gI\
              CAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgIC\
              AgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4\
              gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZz\
              ZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpc\
              y5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOi\
              BbeyBzdGFydCwga2V5LCBzZXAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICA\
              gICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAg\
              ICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgI\
              CAgICAgICAgICAgICAgICAgICAvLyBOb3QgYWN0dWFsbHkgYXQgbmV4dCBpdGVtXG\
              4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwID0gaXQuc2VwLmNvbmN\
              hdChzdGFydCwgdGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAg\
              ICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgI\
              CAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKT\
              tcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICA\
              gfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAg\
              ICAgICAgIGlmICghaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgI\
              CAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cm\
              NlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICA\
              gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQudmFsdWUgfHwgYXROZXh0SXRlbSkg\
              e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc\
              3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gIC\
              AgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB\
              lbHNlIGlmIChpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkg\
              e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7X\
              G4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYX\
              AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXM\
              ub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6\
              IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpd\
              GVtczogW3sgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG\
              9rZW5dIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICA\
              gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNl\
              IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzL\
              nNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgIC\
              AgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGl\
              uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAg\
              ICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Nhb\
              GFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhci\
              c6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOiB\
              7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gdGhpcy5mbG93U2NhbGFy\
              KHRoaXMudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdE5leHRJdGVtI\
              Hx8IGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbX\
              MucHVzaCh7IHN0YXJ0LCBrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICA\
              gICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAg\
              ICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge\
              1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGZzKTtcbi\
              AgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHt\
              cbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5\
              OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub\
              25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgIC\
              AgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICA\
              gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnYg\
              PSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShtYXApO1xuICAgICAgICAgICAgICAgICAgI\
              CBpZiAoYnYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdE1hcEluZG\
              VudCAmJiBidi50eXBlICE9PSAnYmxvY2stc2VxJykge1xuICAgICAgICAgICAgICA\
              gICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQgfSk7XG4gICAgICAg\
              ICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzL\
              nN0YWNrLnB1c2goYnYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1\
              xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICA\
              gICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xu\
              ICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgfVxuICAgICpibG9ja1Nlc\
              XVlbmNlKHNlcSkge1xuICAgICAgICBjb25zdCBpdCA9IHNlcS5pdGVtc1tzZXEuaX\
              RlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4\
              gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBpZiAo\
              aXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gJ2VuZ\
              CcgaW4gaXQudmFsdWUgPyBpdC52YWx1ZS5lbmQgOiB1bmRlZmluZWQ7XG4gICAgIC\
              AgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBBcnJheS5pc0FycmF5KGVuZCkgPyB\
              lbmRbZW5kLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAg\
              ICAgICBpZiAobGFzdD8udHlwZSA9PT0gJ2NvbW1lbnQnKVxuICAgICAgICAgICAgI\
              CAgICAgICAgICAgZW5kPy5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgIC\
              AgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXEuaXR\
              lbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAg\
              ICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgI\
              CAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgIC\
              AgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICA\
              gICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFs\
              dWUpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKHsgc3RhcnQ6I\
              Ft0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbi\
              AgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXRJbmRlbnRlZENvbW1lbnQoaXQ\
              uc3RhcnQsIHNlcS5pbmRlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBj\
              b25zdCBwcmV2ID0gc2VxLml0ZW1zW3NlcS5pdGVtcy5sZW5ndGggLSAyXTtcbiAgI\
              CAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IHByZXY/LnZhbHVlPy5lbm\
              Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbmQ\
              pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBl\
              LnB1c2guYXBwbHkoZW5kLCBpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgI\
              CAgICAgICAgZW5kLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgIC\
              AgICAgICAgICAgICAgICAgc2VxLml0ZW1zLnBvcCgpO1xuICAgICAgICAgICAgICA\
              gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1c\
              biAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpdC5zd\
              GFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbi\
              AgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdhbmNob3I\
              nOlxuICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgICAgICBpZiAo\
              aXQudmFsdWUgfHwgdGhpcy5pbmRlbnQgPD0gc2VxLmluZGVudClcbiAgICAgICAgI\
              CAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaC\
              h0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICA\
              gICAgICAgICBjYXNlICdzZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgICAgIGlm\
              ICh0aGlzLmluZGVudCAhPT0gc2VxLmluZGVudClcbiAgICAgICAgICAgICAgICAgI\
              CAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlIHx8IGluY2x1ZG\
              VzVG9rZW4oaXQuc3RhcnQsICdzZXEtaXRlbS1pbmQnKSlcbiAgICAgICAgICAgICA\
              gICAgICAgc2VxLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5d\
              IH0pO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAga\
              XQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgIC\
              ByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5kZW50ID4gc2V\
              xLmluZGVudCkge1xuICAgICAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0Qmxv\
              Y2tWYWx1ZShzZXEpO1xuICAgICAgICAgICAgaWYgKGJ2KSB7XG4gICAgICAgICAgI\
              CAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgICAgICByZXR1cm\
              47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIHRoaXM\
              ucG9wKCk7XG4gICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICB9XG4gICAg\
              KmZsb3dDb2xsZWN0aW9uKGZjKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gZmMuaXRlb\
              XNbZmMuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT\
              09ICdmbG93LWVycm9yLWVuZCcpIHtcbiAgICAgICAgICAgIGxldCB0b3A7XG4gICA\
              gICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7\
              XG4gICAgICAgICAgICAgICAgdG9wID0gdGhpcy5wZWVrKDEpO1xuICAgICAgICAgI\
              CAgfSB3aGlsZSAodG9wICYmIHRvcC50eXBlID09PSAnZmxvdy1jb2xsZWN0aW9uJy\
              k7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmMuZW5kLmxlbmd0aCA9PT0\
              gMCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAg\
              ICAgICAgICBjYXNlICdjb21tYSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhwb\
              GljaXQta2V5LWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaX\
              Quc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmMuaXRlbXMucHVzaCh7IHN\
              0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAg\
              IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpc\
              y5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgIC\
              AgICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICAgICAgICA\
              gICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAg\
              ICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogbnVsbCwgc2VwOiBbd\
              Ghpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaW\
              YgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcC5wdXNoKHR\
              oaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAg\
              ICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogbnVsb\
              Cwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgIC\
              AgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICA\
              gICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgY2FzZSAn\
              bmV3bGluZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgI\
              CAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIW\
              l0IHx8IGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmMuaXRlbXM\
              ucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAg\
              ICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgI\
              CAgIGl0LnNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgIC\
              AgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXN\
              oKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47\
              XG4gICAgICAgICAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgICAgI\
              GNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3\
              RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQ\
              tc2NhbGFyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcyA9IHRoaXMu\
              Zmxvd1NjYWxhcih0aGlzLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoI\
              Wl0IHx8IGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmMuaXRlbX\
              MucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICA\
              gICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAg\
              ICAgICAgdGhpcy5zdGFjay5wdXNoKGZzKTtcbiAgICAgICAgICAgICAgICAgICAgZ\
              WxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgey\
              BrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4\
              7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ct\
              bWFwLWVuZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvdy1zZXEtZW5kJzpcb\
              iAgICAgICAgICAgICAgICAgICAgZmMuZW5kLnB1c2godGhpcy5zb3VyY2VUb2tlbi\
              k7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiA\
              gICAgICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoZmMpO1xu\
              ICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2Ugc2hvdWxkIG5vdCBoY\
              XBwZW4gKi9cbiAgICAgICAgICAgIGlmIChidilcbiAgICAgICAgICAgICAgICB0aG\
              lzLnN0YWNrLnB1c2goYnYpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICA\
              gICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQq\
              IHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgI\
              GVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5wZWVrKDIpO1\
              xuICAgICAgICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnYmxvY2stbWFwJyAmJlx\
              uICAgICAgICAgICAgICAgICgodGhpcy50eXBlID09PSAnbWFwLXZhbHVlLWluZCcg\
              JiYgcGFyZW50LmluZGVudCA9PT0gZmMuaW5kZW50KSB8fFxuICAgICAgICAgICAgI\
              CAgICAgICAodGhpcy50eXBlID09PSAnbmV3bGluZScgJiZcbiAgICAgICAgICAgIC\
              AgICAgICAgICAgICFwYXJlbnQuaXRlbXNbcGFyZW50Lml0ZW1zLmxlbmd0aCAtIDF\
              dLnNlcCkpKSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4g\
              ICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgf\
              VxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09PSAnbWFwLXZhbHVlLW\
              luZCcgJiZcbiAgICAgICAgICAgICAgICBwYXJlbnQudHlwZSAhPT0gJ2Zsb3ctY29\
              sbGVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJl\
              dlByb3BzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZ\
              XRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICAgICAgZml4Rm\
              xvd1NlcUl0ZW1zKGZjKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXAgPSBmYy5\
              lbmQuc3BsaWNlKDEsIGZjLmVuZC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHNl\
              cC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnN0I\
              G1hcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG\
              4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogZmMub2Zmc2V0LFxuICAgICAgICA\
              gICAgICAgICAgICBpbmRlbnQ6IGZjLmluZGVudCxcbiAgICAgICAgICAgICAgICAg\
              ICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IGZjLCBzZXAgfV1cbiAgICAgICAgICAgI\
              CAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbi\
              AgICAgICAgICAgICAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0\
              gPSBtYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAg\
              ICAgICAgICAgICB5aWVsZCogdGhpcy5saW5lRW5kKGZjKTtcbiAgICAgICAgICAgI\
              H1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmbG93U2NhbGFyKHR5cGUpIHtcbiAgIC\
              AgICAgaWYgKHRoaXMub25OZXdMaW5lKSB7XG4gICAgICAgICAgICBsZXQgbmwgPSB\
              0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nKSArIDE7XG4gICAgICAgICAgICB3aGls\
              ZSAobmwgIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uTmV3TGluZSh0a\
              GlzLm9mZnNldCArIG5sKTtcbiAgICAgICAgICAgICAgICBubCA9IHRoaXMuc291cm\
              NlLmluZGV4T2YoJ1xcbicsIG5sKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICA\
              gIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAg\
              ICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgaW5kZW50OiB0a\
              GlzLmluZGVudCxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgIC\
              AgICAgfTtcbiAgICB9XG4gICAgc3RhcnRCbG9ja1ZhbHVlKHBhcmVudCkge1xuICA\
              gICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnYWxp\
              YXMnOlxuICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc\
              2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvdW\
              JsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5\
              mbG93U2NhbGFyKHRoaXMudHlwZSk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1z\
              Y2FsYXItaGVhZGVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgI\
              CAgICAgICAgICAgICB0eXBlOiAnYmxvY2stc2NhbGFyJyxcbiAgICAgICAgICAgIC\
              AgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICA\
              gaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6\
              IFt0aGlzLnNvdXJjZVRva2VuXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlO\
              iAnJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdmbG93LW\
              1hcC1zdGFydCc6XG4gICAgICAgICAgICBjYXNlICdmbG93LXNlcS1zdGFydCc6XG4\
              gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlw\
              ZTogJ2Zsb3ctY29sbGVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNld\
              DogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy\
              5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnNvdXJjZVR\
              va2VuLFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAg\
              ICAgICAgICAgIGVuZDogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgI\
              CAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1\
              xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stc2VxJyxcbiAgICAgICA\
              gICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAg\
              ICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAga\
              XRlbXM6IFt7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgIC\
              AgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnZXhwbGljaXQta2V5LWluZCc6IHt\
              cbiAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAg\
              ICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyhwYXJlbnQpO1xuICAgI\
              CAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKH\
              ByZXYpO1xuICAgICAgICAgICAgICAgIHN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2t\
              lbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAg\
              ICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNld\
              DogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy\
              5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwgZXh\
              wbGljaXRLZXk6IHRydWUgfV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAg\
              ICAgfVxuICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6IHtcbiAgICAgI\
              CAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgIC\
              AgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyhwYXJlbnQpO1xuICAgICAgICAgICA\
              gICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpO1xu\
              ICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5c\
              GU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaX\
              Mub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW5\
              0LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogbnVs\
              bCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgICAgICB9O\
              1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1\
              xuICAgIH1cbiAgICBhdEluZGVudGVkQ29tbWVudChzdGFydCwgaW5kZW50KSB7XG4\
              gICAgICAgIGlmICh0aGlzLnR5cGUgIT09ICdjb21tZW50JylcbiAgICAgICAgICAg\
              IHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50IDw9IGluZGVud\
              ClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHN0YX\
              J0LmV2ZXJ5KHN0ID0+IHN0LnR5cGUgPT09ICduZXdsaW5lJyB8fCBzdC50eXBlID0\
              9PSAnc3BhY2UnKTtcbiAgICB9XG4gICAgKmRvY3VtZW50RW5kKGRvY0VuZCkge1xu\
              ICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnZG9jLW1vZGUnKSB7XG4gICAgICAgI\
              CAgICBpZiAoZG9jRW5kLmVuZClcbiAgICAgICAgICAgICAgICBkb2NFbmQuZW5kLn\
              B1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICA\
              gICAgICAgICAgZG9jRW5kLmVuZCA9IFt0aGlzLnNvdXJjZVRva2VuXTtcbiAgICAg\
              ICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgI\
              CAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqbG\
              luZUVuZCh0b2tlbikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICA\
              gICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgY2FzZSAnZG9jLXN0\
              YXJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1lbmQnOlxuICAgICAgICAgICAgY\
              2FzZSAnZmxvdy1zZXEtZW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctbWFwLW\
              VuZCc6XG4gICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICA\
              gICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVs\
              ZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgI\
              CAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TG\
              luZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICA\
              gICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxu\
              ICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBhbGwgb3RoZ\
              XIgdmFsdWVzIGFyZSBlcnJvcnNcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4uZW\
              5kKVxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5lbmQucHVzaCh0aGlzLnNvdXJ\
              jZVRva2VuKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAg\
              ICAgIHRva2VuLmVuZCA9IFt0aGlzLnNvdXJjZVRva2VuXTtcbiAgICAgICAgICAgI\
              CAgICBpZiAodGhpcy50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgIC\
              AgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5\
              leHBvcnQgeyBQYXJzZXIgfTtcbiIsImltcG9ydCB7IENvbXBvc2VyIH0gZnJvbSAn\
              Li9jb21wb3NlL2NvbXBvc2VyLmpzJztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvb\
              SAnLi9kb2MvRG9jdW1lbnQuanMnO1xuaW1wb3J0IHsgcHJldHRpZnlFcnJvciwgWU\
              FNTFBhcnNlRXJyb3IgfSBmcm9tICcuL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyB3YXJ\
              uIH0gZnJvbSAnLi9sb2cuanMnO1xuaW1wb3J0IHsgTGluZUNvdW50ZXIgfSBmcm9t\
              ICcuL3BhcnNlL2xpbmUtY291bnRlci5qcyc7XG5pbXBvcnQgeyBQYXJzZXIgfSBmc\
              m9tICcuL3BhcnNlL3BhcnNlci5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlT3B0aW9ucy\
              hvcHRpb25zKSB7XG4gICAgY29uc3QgcHJldHR5RXJyb3JzID0gb3B0aW9ucy5wcmV\
              0dHlFcnJvcnMgIT09IGZhbHNlO1xuICAgIGNvbnN0IGxpbmVDb3VudGVyID0gb3B0\
              aW9ucy5saW5lQ291bnRlciB8fCAocHJldHR5RXJyb3JzICYmIG5ldyBMaW5lQ291b\
              nRlcigpKSB8fCBudWxsO1xuICAgIHJldHVybiB7IGxpbmVDb3VudGVyLCBwcmV0dH\
              lFcnJvcnMgfTtcbn1cbi8qKlxuICogUGFyc2UgdGhlIGlucHV0IGFzIGEgc3RyZWF\
              tIG9mIFlBTUwgZG9jdW1lbnRzLlxuICpcbiAqIERvY3VtZW50cyBzaG91bGQgYmUg\
              c2VwYXJhdGVkIGZyb20gZWFjaCBvdGhlciBieSBgLi4uYCBvciBgLS0tYCBtYXJrZ\
              XIgbGluZXMuXG4gKlxuICogQHJldHVybnMgSWYgYW4gZW1wdHkgYGRvY3NgIGFycm\
              F5IGlzIHJldHVybmVkLCBpdCB3aWxsIGJlIG9mIHR5cGVcbiAqICAgRW1wdHlTdHJ\
              lYW0gYW5kIGNvbnRhaW4gYWRkaXRpb25hbCBzdHJlYW0gaW5mb3JtYXRpb24uIElu\
              XG4gKiAgIFR5cGVTY3JpcHQsIHlvdSBzaG91bGQgdXNlIGAnZW1wdHknIGluIGRvY\
              3NgIGFzIGEgdHlwZSBndWFyZCBmb3IgaXQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQW\
              xsRG9jdW1lbnRzKHNvdXJjZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyB\
              saW5lQ291bnRlciwgcHJldHR5RXJyb3JzIH0gPSBwYXJzZU9wdGlvbnMob3B0aW9u\
              cyk7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihsaW5lQ291bnRlcj8uY\
              WRkTmV3TGluZSk7XG4gICAgY29uc3QgY29tcG9zZXIgPSBuZXcgQ29tcG9zZXIob3\
              B0aW9ucyk7XG4gICAgY29uc3QgZG9jcyA9IEFycmF5LmZyb20oY29tcG9zZXIuY29\
              tcG9zZShwYXJzZXIucGFyc2Uoc291cmNlKSkpO1xuICAgIGlmIChwcmV0dHlFcnJv\
              cnMgJiYgbGluZUNvdW50ZXIpXG4gICAgICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY\
              3MpIHtcbiAgICAgICAgICAgIGRvYy5lcnJvcnMuZm9yRWFjaChwcmV0dGlmeUVycm\
              9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICAgICAgICAgIGRvYy53YXJuaW5\
              ncy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xu\
              ICAgICAgICB9XG4gICAgaWYgKGRvY3MubGVuZ3RoID4gMClcbiAgICAgICAgcmV0d\
              XJuIGRvY3M7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oW10sIHsgZW1wdHk6IH\
              RydWUgfSwgY29tcG9zZXIuc3RyZWFtSW5mbygpKTtcbn1cbi8qKiBQYXJzZSBhbiB\
              pbnB1dCBzdHJpbmcgaW50byBhIHNpbmdsZSBZQU1MLkRvY3VtZW50ICovXG5mdW5j\
              dGlvbiBwYXJzZURvY3VtZW50KHNvdXJjZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY\
              29uc3QgeyBsaW5lQ291bnRlciwgcHJldHR5RXJyb3JzIH0gPSBwYXJzZU9wdGlvbn\
              Mob3B0aW9ucyk7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihsaW5lQ29\
              1bnRlcj8uYWRkTmV3TGluZSk7XG4gICAgY29uc3QgY29tcG9zZXIgPSBuZXcgQ29t\
              cG9zZXIob3B0aW9ucyk7XG4gICAgLy8gYGRvY2AgaXMgYWx3YXlzIHNldCBieSBjb\
              21wb3NlLmVuZCh0cnVlKSBhdCB0aGUgdmVyeSBsYXRlc3RcbiAgICBsZXQgZG9jID\
              0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IF9kb2Mgb2YgY29tcG9zZXIuY29tcG9zZSh\
              wYXJzZXIucGFyc2Uoc291cmNlKSwgdHJ1ZSwgc291cmNlLmxlbmd0aCkpIHtcbiAg\
              ICAgICAgaWYgKCFkb2MpXG4gICAgICAgICAgICBkb2MgPSBfZG9jO1xuICAgICAgI\
              CBlbHNlIGlmIChkb2Mub3B0aW9ucy5sb2dMZXZlbCAhPT0gJ3NpbGVudCcpIHtcbi\
              AgICAgICAgICAgIGRvYy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IoX2R\
              vYy5yYW5nZS5zbGljZSgwLCAyKSwgJ01VTFRJUExFX0RPQ1MnLCAnU291cmNlIGNv\
              bnRhaW5zIG11bHRpcGxlIGRvY3VtZW50czsgcGxlYXNlIHVzZSBZQU1MLnBhcnNlQ\
              WxsRG9jdW1lbnRzKCknKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfV\
              xuICAgIH1cbiAgICBpZiAocHJldHR5RXJyb3JzICYmIGxpbmVDb3VudGVyKSB7XG4\
              gICAgICAgIGRvYy5lcnJvcnMuZm9yRWFjaChwcmV0dGlmeUVycm9yKHNvdXJjZSwg\
              bGluZUNvdW50ZXIpKTtcbiAgICAgICAgZG9jLndhcm5pbmdzLmZvckVhY2gocHJld\
              HRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgfVxuICAgIHJldH\
              VybiBkb2M7XG59XG5mdW5jdGlvbiBwYXJzZShzcmMsIHJldml2ZXIsIG9wdGlvbnM\
              pIHtcbiAgICBsZXQgX3Jldml2ZXIgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVv\
              ZiByZXZpdmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIF9yZXZpdmVyID0gc\
              mV2aXZlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbm\
              VkICYmIHJldml2ZXIgJiYgdHlwZW9mIHJldml2ZXIgPT09ICdvYmplY3QnKSB7XG4\
              gICAgICAgIG9wdGlvbnMgPSByZXZpdmVyO1xuICAgIH1cbiAgICBjb25zdCBkb2Mg\
              PSBwYXJzZURvY3VtZW50KHNyYywgb3B0aW9ucyk7XG4gICAgaWYgKCFkb2MpXG4gI\
              CAgICAgIHJldHVybiBudWxsO1xuICAgIGRvYy53YXJuaW5ncy5mb3JFYWNoKHdhcm\
              5pbmcgPT4gd2Fybihkb2Mub3B0aW9ucy5sb2dMZXZlbCwgd2FybmluZykpO1xuICA\
              gIGlmIChkb2MuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGRvYy5v\
              cHRpb25zLmxvZ0xldmVsICE9PSAnc2lsZW50JylcbiAgICAgICAgICAgIHRocm93I\
              GRvYy5lcnJvcnNbMF07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRvYy5lcn\
              JvcnMgPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGRvYy50b0pTKE9iamVjdC5hc3N\
              pZ24oeyByZXZpdmVyOiBfcmV2aXZlciB9LCBvcHRpb25zKSk7XG59XG5mdW5jdGlv\
              biBzdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBvcHRpb25zKSB7XG4gICAgbGV0I\
              F9yZXBsYWNlciA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2\
              Z1bmN0aW9uJyB8fCBBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICB\
              fcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9u\
              cyA9PT0gdW5kZWZpbmVkICYmIHJlcGxhY2VyKSB7XG4gICAgICAgIG9wdGlvbnMgP\
              SByZXBsYWNlcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3\
              RyaW5nJylcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMubGVuZ3RoO1xuICAgIGl\
              mICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3Qg\
              aW5kZW50ID0gTWF0aC5yb3VuZChvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucyA9I\
              GluZGVudCA8IDEgPyB1bmRlZmluZWQgOiBpbmRlbnQgPiA4ID8geyBpbmRlbnQ6ID\
              ggfSA6IHsgaW5kZW50IH07XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZ\
              pbmVkKSB7XG4gICAgICAgIGNvbnN0IHsga2VlcFVuZGVmaW5lZCB9ID0gb3B0aW9u\
              cyA/PyByZXBsYWNlciA/PyB7fTtcbiAgICAgICAgaWYgKCFrZWVwVW5kZWZpbmVkK\
              VxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dX\
              JuIG5ldyBEb2N1bWVudCh2YWx1ZSwgX3JlcGxhY2VyLCBvcHRpb25zKS50b1N0cml\
              uZyhvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgcGFyc2UsIHBhcnNlQWxsRG9jdW1l\
              bnRzLCBwYXJzZURvY3VtZW50LCBzdHJpbmdpZnkgfTtcbiIsIi8vIGBleHBvcnQgK\
              iBhcyBkZWZhdWx0IGZyb20gLi4uYCBmYWlscyBvbiBXZWJwYWNrIHY0XG4vLyBodH\
              RwczovL2dpdGh1Yi5jb20vZWVtZWxpL3lhbWwvaXNzdWVzLzIyOFxuaW1wb3J0ICo\
              gYXMgWUFNTCBmcm9tICcuL2Rpc3QvaW5kZXguanMnXG5leHBvcnQgZGVmYXVsdCBZ\
              QU1MXG5leHBvcnQgKiBmcm9tICcuL2Rpc3QvaW5kZXguanMnXG4iLCJpbXBvcnQgW\
              UFNTCBmcm9tICd5YW1sJztcblxuZXhwb3J0IGRlZmF1bHQgKHJlcSwgcnNwKSA9Pi\
              B7XG4gIGNvbnNvbGUubG9nKFwiUnVubmluZyBmdW5jdGlvblwiKTtcblxuICBbXCJ\
              1cy1lYXN0LTFcIiwgXCJ1cy1lYXN0LTJcIl0uZm9yRWFjaCgocmVnaW9uKSA9PiB7\
              XG4gICAgcnNwLnNldERlc2lyZWRDb21wb3NlZFJlc291cmNlKGBidWNrZXQtJHtyZ\
              Wdpb259YCwge1xuICAgICAgYXBpVmVyc2lvbjogJ2V4YW1wbGUub3JnL3YxYWxwaG\
              ExJyxcbiAgICAgIGtpbmQ6ICdCdWNrZXQnLFxuICAgICAgbWV0YWRhdGE6IHtcbiA\
              gICAgICAgYW5ub3RhdGlvbnM6IHtcbiAgICAgICAgICAnamF2YXNjcmlwdC5mbi5j\
              cm9zc3BsYW5lLmlvL3JlYWR5JzogJ1RydWUnLFxuICAgICAgICAgIC4uLnJlcS5pb\
              nB1dC5tZXRhZGF0YS5hbm5vdGF0aW9uc1xuICAgICAgICB9LFxuICAgICAgICBsYW\
              JlbHM6IHtcbiAgICAgICAgICAuLi4ocmVxLm9ic2VydmVkLmNvbXBvc2l0ZS5yZXN\
              vdXJjZS5tZXRhZGF0YT8ubGFiZWxzIHx8IHt9KSxcbiAgICAgICAgICBmb286IFwi\
              YmFyXCJcbiAgICAgICAgfSxcbiAgICAgICAgc3BlYzoge1xuICAgICAgICAgIG5hb\
              WU6IGB0ZXN0LSR7cmVnaW9ufWAsXG4gICAgICAgICAgcmVnaW9uOiByZWdpb24sXG\
              4gICAgICAgICAgY29tcG9zaXRlUmVnaW9uOiByZXEub2JzZXJ2ZWQuY29tcG9zaXR\
              lLnJlc291cmNlLnNwZWMucmVnaW9uLFxuICAgICAgICAgIHlhbWxUZXN0OiBZQU1M\
              LnN0cmluZ2lmeSh7IGZvbzogXCJiYXJcIiwgYmF4OiBbMTIsIDIzXSB9KSxcbiAgI\
              CAgICAgICBiNjR0ZXN0OiBidG9hKCdhYmNkZWZnaCcpXG4gICAgICAgIH1cbiAgIC\
              AgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcnNwLnNldENvbm5lY3Rpb25EZXRhaWx\
              zKHsgXCJmb29cIjogXCJiYXJcIiB9KVxuICByc3AudXBkYXRlQ29tcG9zaXRlU3Rh\
              dHVzKHtcbiAgICBzb21ldGhpbmc6IFwiaW4gdGhlIHdheVwiLFxuICAgIHNoZToge\
              yBtb3ZlczogdHJ1ZSB9XG4gIH0pO1xuXG4gIHJzcC51cGRhdGVDb21wb3NpdGVTdG\
              F0dXMoeyB4OiBcInlcIiB9KTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs\
              7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7\
              Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLFlBQUE7QUFBQUMsUUFBQ\
              SxDQUFBRCxZQUFBO0VBQUFFLEtBQUEsRUFBQUEsQ0FBQSxLQUFBQSxLQUFBO0VBQU\
              FDLEdBQUEsRUFBQUEsQ0FBQSxLQUFBQyxXQUFBO0VBQUFDLFFBQUEsRUFBQUEsQ0F\
              BQSxLQUFBQSxRQUFBO0VBQUFDLFFBQUEsRUFBQUEsQ0FBQSxLQUFBQSxRQUFBO0VB\
              QUFDLEtBQUEsRUFBQUEsQ0FBQSxLQUFBQSxLQUFBO0VBQUFDLFdBQUEsRUFBQUEsQ\
              0FBQSxLQUFBQSxXQUFBO0VBQUFDLElBQUEsRUFBQUEsQ0FBQSxLQUFBQSxJQUFBO0\
              VBQUFDLE1BQUEsRUFBQUEsQ0FBQSxLQUFBQSxNQUFBO0VBQUFDLE1BQUEsRUFBQUE\
              sQ0FBQSxLQUFBQSxNQUFBO0VBQUFDLE1BQUEsRUFBQUEsQ0FBQSxLQUFBQSxNQUFB\
              O0VBQUFDLFNBQUEsRUFBQUEsQ0FBQSxLQUFBQSxTQUFBO0VBQUFDLE9BQUEsRUFBQ\
              UEsQ0FBQSxLQUFBQSxPQUFBO0VBQUFDLGNBQUEsRUFBQUEsQ0FBQSxLQUFBQSxjQU\
              FBO0VBQUFDLE9BQUEsRUFBQUEsQ0FBQSxLQUFBQSxPQUFBO0VBQUFDLFdBQUEsRUF\
              BQUEsQ0FBQSxLQUFBQSxXQUFBO0VBQUFDLE9BQUEsRUFBQUEsQ0FBQSxLQUFBQSxP\
              QUFBO0VBQUFDLFlBQUEsRUFBQUEsQ0FBQSxLQUFBQSxZQUFBO0VBQUFDLFVBQUEsR\
              UFBQUEsQ0FBQSxLQUFBQSxVQUFBO0VBQUFDLEtBQUEsRUFBQUEsQ0FBQSxLQUFBQS\
              xLQUFBO0VBQUFDLE1BQUEsRUFBQUEsQ0FBQSxLQUFBQSxNQUFBO0VBQUFDLE1BQUE\
              sRUFBQUEsQ0FBQSxLQUFBQSxNQUFBO0VBQUFDLFFBQUEsRUFBQUEsQ0FBQSxLQUFB\
              QSxRQUFBO0VBQUFDLEtBQUEsRUFBQUEsQ0FBQSxLQUFBQSxLQUFBO0VBQUFDLEtBQ\
              UEsRUFBQUEsQ0FBQSxLQUFBQSxLQUFBO0VBQUFDLGlCQUFBLEVBQUFBLENBQUEsS0\
              FBQUEsaUJBQUE7RUFBQUMsYUFBQSxFQUFBQSxDQUFBLEtBQUFBLGFBQUE7RUFBQUM\
              sU0FBQSxFQUFBQSxDQUFBLEtBQUFDLFVBQUE7RUFBQUMsS0FBQSxFQUFBQSxDQUFB\
              LEtBQUFBLEtBQUE7RUFBQUMsVUFBQSxFQUFBQSxDQUFBLEtBQUFBO0FBQUE7OztBQ\
              0FBLElBQU1DLEtBQUEsR0FBUUMsTUFBQSxDQUFPQyxHQUFBLENBQUksWUFBWTtBQU\
              NyQyxJQUFNQyxHQUFBLEdBQU1GLE1BQUEsQ0FBT0MsR0FBQSxDQUFJLGVBQWU7QUF\
              DdEMsSUFBTUUsR0FBQSxHQUFNSCxNQUFBLENBQU9DLEdBQUEsQ0FBSSxVQUFVO0FB\
              Q2pDLElBQU1HLElBQUEsR0FBT0osTUFBQSxDQUFPQyxHQUFBLENBQUksV0FBVztBQ\
              UNuQyxJQUFNSSxNQUFBLEdBQVNMLE1BQUEsQ0FBT0MsR0FBQSxDQUFJLGFBQWE7QU\
              FDdkMsSUFBTUssR0FBQSxHQUFNTixNQUFBLENBQU9DLEdBQUEsQ0FBSSxVQUFVO0F\
              BQ2pDLElBQU1NLFNBQUEsR0FBWVAsTUFBQSxDQUFPQyxHQUFBLENBQUksZ0JBQWdC\
              O0FBQzdDLElBQU1qQixPQUFBLEdBQVVBLENBQUN3QixJQUFBLEtBQVMsQ0FBQyxDQ\
              UFDQSxJQUFBLElBQVEsT0FBT0EsSUFBQSxLQUFTLFlBQVlBLElBQUEsQ0FBS0QsU0\
              FBUyxNQUFNUixLQUFBO0FBQ3BGLElBQU1iLFVBQUEsR0FBYUEsQ0FBQ3NCLElBQUE\
              sS0FBUyxDQUFDLENBQUNBLElBQUEsSUFBUSxPQUFPQSxJQUFBLEtBQVMsWUFBWUEs\
              SUFBQSxDQUFLRCxTQUFTLE1BQU1MLEdBQUE7QUFDdkYsSUFBTWYsS0FBQSxHQUFRQ\
              SxDQUFDcUIsSUFBQSxLQUFTLENBQUMsQ0FBQ0EsSUFBQSxJQUFRLE9BQU9BLElBQU\
              EsS0FBUyxZQUFZQSxJQUFBLENBQUtELFNBQVMsTUFBTUosR0FBQTtBQUNsRixJQUF\
              NZCxNQUFBLEdBQVNBLENBQUNtQixJQUFBLEtBQVMsQ0FBQyxDQUFDQSxJQUFBLElB\
              QVEsT0FBT0EsSUFBQSxLQUFTLFlBQVlBLElBQUEsQ0FBS0QsU0FBUyxNQUFNSCxJQ\
              UFBO0FBQ25GLElBQU1kLFFBQUEsR0FBV0EsQ0FBQ2tCLElBQUEsS0FBUyxDQUFDLE\
              NBQUNBLElBQUEsSUFBUSxPQUFPQSxJQUFBLEtBQVMsWUFBWUEsSUFBQSxDQUFLRCx\
              TQUFTLE1BQU1GLE1BQUE7QUFDckYsSUFBTWQsS0FBQSxHQUFRQSxDQUFDaUIsSUFB\
              QSxLQUFTLENBQUMsQ0FBQ0EsSUFBQSxJQUFRLE9BQU9BLElBQUEsS0FBUyxZQUFZQ\
              SxJQUFBLENBQUtELFNBQVMsTUFBTUQsR0FBQTtBQUNsRixTQUFTckIsYUFBYXVCLE\
              lBQUEsRUFBTTtFQUN4QixJQUFJQSxJQUFBLElBQVEsT0FBT0EsSUFBQSxLQUFTO0V\
              BQ3hCLFFBQVFBLElBQUEsQ0FBS0QsU0FBUztJQUNsQixLQUFLSixHQUFBO0lBQ0ws\
              S0FBS0csR0FBQTtNQUNELE9BQU87RUFDZjtFQUNKLE9BQU87QUFDWDtBQUNBLFNBQ\
              VNsQixPQUFPb0IsSUFBQSxFQUFNO0VBQ2xCLElBQUlBLElBQUEsSUFBUSxPQUFPQS\
              xJQUFBLEtBQVM7RUFDeEIsUUFBUUEsSUFBQSxDQUFLRCxTQUFTO0lBQ2xCLEtBQUt\
              SLEtBQUE7SUFDTCxLQUFLSSxHQUFBO0lBQ0wsS0FBS0UsTUFBQTtJQUNMLEtBQUtD\
              LEdBQUE7TUFDRCxPQUFPO0VBQ2Y7RUFDSixPQUFPO0FBQ1g7QUFDQSxJQUFNRyxTQ\
              UFBLEdBQVlBLENBQUNELElBQUEsTUFBVWxCLFFBQUEsQ0FBU2tCLElBQUksS0FBS3\
              ZCLFlBQUEsQ0FBYXVCLElBQUksTUFBTSxDQUFDLENBQUNBLElBQUEsQ0FBS0UsTUF\
              BQTs7O0FDL0I3RSxJQUFNQyxLQUFBLEdBQVFYLE1BQUEsQ0FBTyxhQUFhO0FBQ2xD\
              LElBQU1ZLElBQUEsR0FBT1osTUFBQSxDQUFPLGVBQWU7QUFDbkMsSUFBTWEsTUFBQ\
              SxHQUFTYixNQUFBLENBQU8sYUFBYTtBQStCbkMsU0FBU0gsTUFBTVcsSUFBQSxFQU\
              FNTSxPQUFBLEVBQVM7RUFDMUIsTUFBTUMsUUFBQSxHQUFXQyxXQUFBLENBQVlGLE9\
              BQU87RUFDcEMsSUFBSTVCLFVBQUEsQ0FBV3NCLElBQUksR0FBRztJQUNsQixNQUFN\
              UyxFQUFBLEdBQUtDLE1BQUEsQ0FBTyxNQUFNVixJQUFBLENBQUtXLFFBQUEsRUFBV\
              UosUUFBQSxFQUFVSyxNQUFBLENBQU9DLE1BQUEsQ0FBTyxDQUFDYixJQUFJLENBQU\
              MsQ0FBQztJQUN0RSxJQUFJUyxFQUFBLEtBQU9KLE1BQUE7SUFDUEwsSUFBQSxDQUF\
              LVyxRQUFBLEdBQVc7RUFDeEI7RUFFSUQsTUFBQSxDQUFPLE1BQU1WLElBQUEsRUFB\
              TU8sUUFBQSxFQUFVSyxNQUFBLENBQU9DLE1BQUEsQ0FBTyxFQUFFLENBQUM7QUFDd\
              EQ7QUFLQXhCLEtBQUEsQ0FBTWMsS0FBQSxHQUFRQSxLQUFBO0FBRWRkLEtBQUEsQ0\
              FBTWUsSUFBQSxHQUFPQSxJQUFBO0FBRWJmLEtBQUEsQ0FBTWdCLE1BQUEsR0FBU0E\
              sTUFBQTtBQUNmLFNBQVNLLE9BQU9JLEdBQUEsRUFBS2QsSUFBQSxFQUFNTSxPQUFB\
              LEVBQVNTLElBQUEsRUFBTTtFQUN0QyxNQUFNQyxJQUFBLEdBQU9DLFdBQUEsQ0FBW\
              UgsR0FBQSxFQUFLZCxJQUFBLEVBQU1NLE9BQUEsRUFBU1MsSUFBSTtFQUNqRCxJQU\
              FJbkMsTUFBQSxDQUFPb0MsSUFBSSxLQUFLbkMsTUFBQSxDQUFPbUMsSUFBSSxHQUF\
              HO0lBQzlCRSxXQUFBLENBQVlKLEdBQUEsRUFBS0MsSUFBQSxFQUFNQyxJQUFJO0lB\
              QzNCLE9BQU9OLE1BQUEsQ0FBT0ksR0FBQSxFQUFLRSxJQUFBLEVBQU1WLE9BQUEsR\
              UFBU1MsSUFBSTtFQUMxQztFQUNBLElBQUksT0FBT0MsSUFBQSxLQUFTLFVBQVU7SU\
              FDMUIsSUFBSXZDLFlBQUEsQ0FBYXVCLElBQUksR0FBRztNQUNwQmUsSUFBQSxHQUF\
              PSCxNQUFBLENBQU9DLE1BQUEsQ0FBT0UsSUFBQSxDQUFLSSxNQUFBLENBQU9uQixJ\
              QUFJLENBQUM7TUFDdEMsU0FBU29CLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUlwQ\
              ixJQUFBLENBQUtxQixLQUFBLENBQU1DLE1BQUEsRUFBUSxFQUFFRixDQUFBLEVBQU\
              c7UUFDeEMsTUFBTUcsRUFBQSxHQUFLYixNQUFBLENBQU9VLENBQUEsRUFBR3BCLEl\
              BQUEsQ0FBS3FCLEtBQUEsQ0FBTUQsQ0FBQyxHQUFHZCxPQUFBLEVBQVNTLElBQUk7\
              UUFDakQsSUFBSSxPQUFPUSxFQUFBLEtBQU87UUFDZEgsQ0FBQSxHQUFJRyxFQUFBL\
              EdBQUs7UUFBQSxJQUNKQSxFQUFBLEtBQU9wQixLQUFBO1FBQ1osT0FBT0EsS0FBQT\
              tRQUFBLElBQ0ZvQixFQUFBLEtBQU9sQixNQUFBLEVBQVE7VUFDcEJMLElBQUEsQ0F\
              BS3FCLEtBQUEsQ0FBTUcsTUFBQSxDQUFPSixDQUFBLEVBQUcsQ0FBQztVQUN0QkEs\
              Q0FBQSxJQUFLO1FBQ1Q7TUFDSjtJQUNKLFdBQ1N2QyxNQUFBLENBQU9tQixJQUFJL\
              EdBQUc7TUFDbkJlLElBQUEsR0FBT0gsTUFBQSxDQUFPQyxNQUFBLENBQU9FLElBQU\
              EsQ0FBS0ksTUFBQSxDQUFPbkIsSUFBSSxDQUFDO01BQ3RDLE1BQU15QixFQUFBLEd\
              BQUtmLE1BQUEsQ0FBTyxPQUFPVixJQUFBLENBQUtjLEdBQUEsRUFBS1IsT0FBQSxF\
              QUFTUyxJQUFJO01BQ2hELElBQUlVLEVBQUEsS0FBT3RCLEtBQUE7TUFDUCxPQUFPQ\
              SxLQUFBO01BQUEsSUFDRnNCLEVBQUEsS0FBT3BCLE1BQUE7TUFDWkwsSUFBQSxDQU\
              FLYyxHQUFBLEdBQU07TUFDZixNQUFNWSxFQUFBLEdBQUtoQixNQUFBLENBQU8sU0F\
              BU1YsSUFBQSxDQUFLMkIsS0FBQSxFQUFPckIsT0FBQSxFQUFTUyxJQUFJO01BQ3BE\
              LElBQUlXLEVBQUEsS0FBT3ZCLEtBQUE7TUFDUCxPQUFPQSxLQUFBO01BQUEsSUFDR\
              nVCLEVBQUEsS0FBT3JCLE1BQUE7TUFDWkwsSUFBQSxDQUFLMkIsS0FBQSxHQUFRO0\
              lBQ3JCO0VBQ0o7RUFDQSxPQUFPWCxJQUFBO0FBQ1g7QUFnQ0EsU0FBZTFCLFdBQVd\
              VLElBQUEsRUFBTU0sT0FBQSxFQUFTO0VBQUEsT0FBQXNCLE9BQUE7SUFDckMsTUFB\
              TXJCLFFBQUEsR0FBV0MsV0FBQSxDQUFZRixPQUFPO0lBQ3BDLElBQUk1QixVQUFBL\
              ENBQVdzQixJQUFJLEdBQUc7TUFDbEIsTUFBTVMsRUFBQSxHQUFLLE1BQU1vQixXQU\
              FBLENBQVksTUFBTTdCLElBQUEsQ0FBS1csUUFBQSxFQUFVSixRQUFBLEVBQVVLLE1\
              BQUEsQ0FBT0MsTUFBQSxDQUFPLENBQUNiLElBQUksQ0FBQyxDQUFDO01BQ2pGLElB\
              QUlTLEVBQUEsS0FBT0osTUFBQTtNQUNQTCxJQUFBLENBQUtXLFFBQUEsR0FBVztJQ\
              UN4QjtJQUVJLE1BQU1rQixXQUFBLENBQVksTUFBTTdCLElBQUEsRUFBTU8sUUFBQS\
              xFQUFVSyxNQUFBLENBQU9DLE1BQUEsQ0FBTyxFQUFFLENBQUM7RUFDakU7QUFBQTt\
              BQUtBdkIsVUFBQSxDQUFXYSxLQUFBLEdBQVFBLEtBQUE7QUFFbkJiLFVBQUEsQ0FB\
              V2MsSUFBQSxHQUFPQSxJQUFBO0FBRWxCZCxVQUFBLENBQVdlLE1BQUEsR0FBU0EsT\
              UFBQTtBQUNwQixTQUFld0IsWUFBWWYsR0FBQSxFQUFLZCxJQUFBLEVBQU1NLE9BQU\
              EsRUFBU1MsSUFBQSxFQUFNO0VBQUEsT0FBQWEsT0FBQTtJQUNqRCxNQUFNWixJQUF\
              BLEdBQU8sTUFBTUMsV0FBQSxDQUFZSCxHQUFBLEVBQUtkLElBQUEsRUFBTU0sT0FB\
              QSxFQUFTUyxJQUFJO0lBQ3ZELElBQUluQyxNQUFBLENBQU9vQyxJQUFJLEtBQUtuQ\
              yxNQUFBLENBQU9tQyxJQUFJLEdBQUc7TUFDOUJFLFdBQUEsQ0FBWUosR0FBQSxFQU\
              FLQyxJQUFBLEVBQU1DLElBQUk7TUFDM0IsT0FBT2EsV0FBQSxDQUFZZixHQUFBLEV\
              BQUtFLElBQUEsRUFBTVYsT0FBQSxFQUFTUyxJQUFJO0lBQy9DO0lBQ0EsSUFBSSxP\
              QUFPQyxJQUFBLEtBQVMsVUFBVTtNQUMxQixJQUFJdkMsWUFBQSxDQUFhdUIsSUFBS\
              SxHQUFHO1FBQ3BCZSxJQUFBLEdBQU9ILE1BQUEsQ0FBT0MsTUFBQSxDQUFPRSxJQU\
              FBLENBQUtJLE1BQUEsQ0FBT25CLElBQUksQ0FBQztRQUN0QyxTQUFTb0IsQ0FBQSx\
              HQUFJLEdBQUdBLENBQUEsR0FBSXBCLElBQUEsQ0FBS3FCLEtBQUEsQ0FBTUMsTUFB\
              QSxFQUFRLEVBQUVGLENBQUEsRUFBRztVQUN4QyxNQUFNRyxFQUFBLEdBQUssTUFBT\
              U0sV0FBQSxDQUFZVCxDQUFBLEVBQUdwQixJQUFBLENBQUtxQixLQUFBLENBQU1ELE\
              NBQUMsR0FBR2QsT0FBQSxFQUFTUyxJQUFJO1VBQzVELElBQUksT0FBT1EsRUFBQSx\
              LQUFPO1VBQ2RILENBQUEsR0FBSUcsRUFBQSxHQUFLO1VBQUEsSUFDSkEsRUFBQSxL\
              QUFPcEIsS0FBQTtVQUNaLE9BQU9BLEtBQUE7VUFBQSxJQUNGb0IsRUFBQSxLQUFPb\
              EIsTUFBQSxFQUFRO1lBQ3BCTCxJQUFBLENBQUtxQixLQUFBLENBQU1HLE1BQUEsQ0\
              FBT0osQ0FBQSxFQUFHLENBQUM7WUFDdEJBLENBQUEsSUFBSztVQUNUO1FBQ0o7TUF\
              DSixXQUNTdkMsTUFBQSxDQUFPbUIsSUFBSSxHQUFHO1FBQ25CZSxJQUFBLEdBQU9I\
              LE1BQUEsQ0FBT0MsTUFBQSxDQUFPRSxJQUFBLENBQUtJLE1BQUEsQ0FBT25CLElBQ\
              UksQ0FBQztRQUN0QyxNQUFNeUIsRUFBQSxHQUFLLE1BQU1JLFdBQUEsQ0FBWSxPQU\
              FPN0IsSUFBQSxDQUFLYyxHQUFBLEVBQUtSLE9BQUEsRUFBU1MsSUFBSTtRQUMzRCx\
              JQUFJVSxFQUFBLEtBQU90QixLQUFBO1FBQ1AsT0FBT0EsS0FBQTtRQUFBLElBQ0Zz\
              QixFQUFBLEtBQU9wQixNQUFBO1FBQ1pMLElBQUEsQ0FBS2MsR0FBQSxHQUFNO1FBQ\
              2YsTUFBTVksRUFBQSxHQUFLLE1BQU1HLFdBQUEsQ0FBWSxTQUFTN0IsSUFBQSxDQU\
              FLMkIsS0FBQSxFQUFPckIsT0FBQSxFQUFTUyxJQUFJO1FBQy9ELElBQUlXLEVBQUE\
              sS0FBT3ZCLEtBQUE7UUFDUCxPQUFPQSxLQUFBO1FBQUEsSUFDRnVCLEVBQUEsS0FB\
              T3JCLE1BQUE7UUFDWkwsSUFBQSxDQUFLMkIsS0FBQSxHQUFRO01BQ3JCO0lBQ0o7S\
              UFDQSxPQUFPWCxJQUFBO0VBQ1g7QUFBQTtBQUNBLFNBQVNSLFlBQVlGLE9BQUEsRU\
              FBUztFQUMxQixJQUFJLE9BQU9BLE9BQUEsS0FBWSxhQUNsQkEsT0FBQSxDQUFRd0I\
              sVUFBQSxJQUFjeEIsT0FBQSxDQUFReUIsSUFBQSxJQUFRekIsT0FBQSxDQUFRMEIs\
              S0FBQSxHQUFRO0lBQ3ZELE9BQU9wQixNQUFBLENBQU9xQixNQUFBLENBQU87TUFDa\
              kJ6RSxLQUFBLEVBQU84QyxPQUFBLENBQVF5QixJQUFBO01BQ2ZHLEdBQUEsRUFBSz\
              VCLE9BQUEsQ0FBUXlCLElBQUE7TUFDYjlELE1BQUEsRUFBUXFDLE9BQUEsQ0FBUXl\
              CLElBQUE7TUFDaEJJLEdBQUEsRUFBSzdCLE9BQUEsQ0FBUXlCO0lBQ2pCLEdBQUd6\
              QixPQUFBLENBQVEwQixLQUFBLElBQVM7TUFDaEJFLEdBQUEsRUFBSzVCLE9BQUEsQ\
              0FBUTBCLEtBQUE7TUFDYi9ELE1BQUEsRUFBUXFDLE9BQUEsQ0FBUTBCLEtBQUE7TU\
              FDaEJHLEdBQUEsRUFBSzdCLE9BQUEsQ0FBUTBCO0lBQ2pCLEdBQUcxQixPQUFBLEN\
              BQVF3QixVQUFBLElBQWM7TUFDckJJLEdBQUEsRUFBSzVCLE9BQUEsQ0FBUXdCLFVB\
              QUE7TUFDYkssR0FBQSxFQUFLN0IsT0FBQSxDQUFRd0I7SUFDakIsR0FBR3hCLE9BQ\
              U87RUFDZDtFQUNBLE9BQU9BLE9BQUE7QUFDWDtBQUNBLFNBQVNXLFlBQVlILEdBQU\
              EsRUFBS2QsSUFBQSxFQUFNTSxPQUFBLEVBQVNTLElBQUEsRUFBTTtFQXJNL0MsSUF\
              BQXFCLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFBQUMs\
              RUFBQTtFQXNNSSxJQUFJLE9BQU9sQyxPQUFBLEtBQVk7RUFDbkIsT0FBT0EsT0FBQ\
              SxDQUFRUSxHQUFBLEVBQUtkLElBQUEsRUFBTWUsSUFBSTtFQUNsQyxJQUFJcEMsS0\
              FBQSxDQUFNcUIsSUFBSTtFQUNWLFFBQU9vQyxFQUFBLEdBQUE5QixPQUFBLENBQVE\
              0QixHQUFBLEtBQVIsZ0JBQUFFLEVBQUEsQ0FBQUssSUFBQSxDQUFBbkMsT0FBQSxF\
              QUFjUSxHQUFBLEVBQUtkLElBQUEsRUFBTWUsSUFBQTtFQUNwQyxJQUFJaEMsS0FBQ\
              SxDQUFNaUIsSUFBSTtFQUNWLFFBQU9xQyxFQUFBLEdBQUEvQixPQUFBLENBQVE2Qi\
              xHQUFBLEtBQVIsZ0JBQUFFLEVBQUEsQ0FBQUksSUFBQSxDQUFBbkMsT0FBQSxFQUF\
              jUSxHQUFBLEVBQUtkLElBQUEsRUFBTWUsSUFBQTtFQUNwQyxJQUFJbEMsTUFBQSxD\
              QUFPbUIsSUFBSTtFQUNYLFFBQU9zQyxFQUFBLEdBQUFoQyxPQUFBLENBQVF2QyxJQ\
              UFBLEtBQVIsZ0JBQUF1RSxFQUFBLENBQUFHLElBQUEsQ0FBQW5DLE9BQUEsRUFBZV\
              EsR0FBQSxFQUFLZCxJQUFBLEVBQU1lLElBQUE7RUFDckMsSUFBSWpDLFFBQUEsQ0F\
              BU2tCLElBQUk7RUFDYixRQUFPdUMsRUFBQSxHQUFBakMsT0FBQSxDQUFRckMsTUFB\
              QSxLQUFSLGdCQUFBc0UsRUFBQSxDQUFBRSxJQUFBLENBQUFuQyxPQUFBLEVBQWlCU\
              SxHQUFBLEVBQUtkLElBQUEsRUFBTWUsSUFBQTtFQUN2QyxJQUFJdkMsT0FBQSxDQU\
              FRd0IsSUFBSTtFQUNaLFFBQU93QyxFQUFBLEdBQUFsQyxPQUFBLENBQVE5QyxLQUF\
              BLEtBQVIsZ0JBQUFnRixFQUFBLENBQUFDLElBQUEsQ0FBQW5DLE9BQUEsRUFBZ0JR\
              LEdBQUEsRUFBS2QsSUFBQSxFQUFNZSxJQUFBO0VBQ3RDLE9BQU87QUFDWDtBQUNBL\
              FNBQVNHLFlBQVlKLEdBQUEsRUFBS0MsSUFBQSxFQUFNZixJQUFBLEVBQU07RUFDbE\
              MsTUFBTTBDLE1BQUEsR0FBUzNCLElBQUEsQ0FBS0EsSUFBQSxDQUFLTyxNQUFBLEd\
              BQVMsQ0FBQztFQUNuQyxJQUFJN0MsWUFBQSxDQUFhaUUsTUFBTSxHQUFHO0lBQ3RC\
              QSxNQUFBLENBQU9yQixLQUFBLENBQU1QLEdBQUcsSUFBSWQsSUFBQTtFQUN4QixXQ\
              UNTbkIsTUFBQSxDQUFPNkQsTUFBTSxHQUFHO0lBQ3JCLElBQUk1QixHQUFBLEtBQV\
              E7SUFDUjRCLE1BQUEsQ0FBTzVCLEdBQUEsR0FBTWQsSUFBQTs7SUFFYjBDLE1BQUE\
              sQ0FBT2YsS0FBQSxHQUFRM0IsSUFBQTtFQUN2QixXQUNTdEIsVUFBQSxDQUFXZ0Us\
              TUFBTSxHQUFHO0lBQ3pCQSxNQUFBLENBQU8vQixRQUFBLEdBQVdYLElBQUE7RUFDd\
              EIsT0FDSztJQUNELE1BQU0yQyxFQUFBLEdBQUtuRSxPQUFBLENBQVFrRSxNQUFNLE\
              lBQUksVUFBVTtJQUN2QyxNQUFNLElBQUlFLEtBQUEsQ0FBTSw0QkFBNEJELEVBQUU\
              sU0FBUztFQUMzRDtBQUNKOzs7QUNuT0EsSUFBTUUsV0FBQSxHQUFjO0VBQ2hCLEtB\
              QUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS\
              0FBSztBQUNUO0FBQ0EsSUFBTUMsYUFBQSxHQUFnQkEsQ0FBQ0MsRUFBQSxLQUFPQS\
              xFQUFBLENBQUdDLE9BQUEsQ0FBUSxjQUFjLENBQUFDLEVBQUEsS0FBTUosV0FBQSx\
              DQUFZSSxFQUFFLENBQUM7QUFDNUUsSUFBTUMsVUFBQSxHQUFOLE1BQU1DLFdBQUEs\
              Q0FBVztFQUNiQyxZQUFZQyxJQUFBLEVBQU1DLElBQUEsRUFBTTtJQUtwQixLQUFLQ\
              yxRQUFBLEdBQVc7SUFFaEIsS0FBS0MsTUFBQSxHQUFTO0lBQ2QsS0FBS0gsSUFBQS\
              xHQUFPekMsTUFBQSxDQUFPcUIsTUFBQSxDQUFPLENBQUMsR0FBR2tCLFdBQUEsQ0F\
              BV00sV0FBQSxFQUFhSixJQUFJO0lBQzFELEtBQUtDLElBQUEsR0FBTzFDLE1BQUEs\
              Q0FBT3FCLE1BQUEsQ0FBTyxDQUFDLEdBQUdrQixXQUFBLENBQVdPLFdBQUEsRUFBY\
              UosSUFBSTtFQUM5RDtFQUNBSyxNQUFBLEVBQVE7SUFDSixNQUFNQyxJQUFBLEdBQU\
              8sSUFBSVQsV0FBQSxDQUFXLEtBQUtFLElBQUEsRUFBTSxLQUFLQyxJQUFJO0lBQ2h\
              ETSxJQUFBLENBQUtMLFFBQUEsR0FBVyxLQUFLQSxRQUFBO0lBQ3JCLE9BQU9LLElB\
              QUE7RUFDWDtFQUFBO0FBQUE7QUFBQTtBQUFBO0VBS0FDLFdBQUEsRUFBYTtJQUNUL\
              E1BQU1DLEdBQUEsR0FBTSxJQUFJWCxXQUFBLENBQVcsS0FBS0UsSUFBQSxFQUFNLE\
              tBQUtDLElBQUk7SUFDL0MsUUFBUSxLQUFLRCxJQUFBLENBQUtVLE9BQUE7TUFDZCx\
              LQUFLO1FBQ0QsS0FBS0MsY0FBQSxHQUFpQjtRQUN0QjtNQUNKLEtBQUs7UUFDRCxL\
              QUFLQSxjQUFBLEdBQWlCO1FBQ3RCLEtBQUtYLElBQUEsR0FBTztVQUNSWSxRQUFBL\
              EVBQVVkLFdBQUEsQ0FBV00sV0FBQSxDQUFZUSxRQUFBO1VBQ2pDRixPQUFBLEVBQV\
              M7UUFDYjtRQUNBLEtBQUtULElBQUEsR0FBTzFDLE1BQUEsQ0FBT3FCLE1BQUEsQ0F\
              BTyxDQUFDLEdBQUdrQixXQUFBLENBQVdPLFdBQVc7UUFDcEQ7SUFDUjtJQUNBLE9B\
              QU9JLEdBQUE7RUFDWDtFQUFBO0FBQUE7QUFBQTtBQUFBO0VBS0FJLElBQUlDLElBQ\
              UEsRUFBTUMsT0FBQSxFQUFTO0lBQ2YsSUFBSSxLQUFLSixjQUFBLEVBQWdCO01BQ3\
              JCLEtBQUtYLElBQUEsR0FBTyxFQUFFWSxRQUFBLEVBQVVkLFdBQUEsQ0FBV00sV0F\
              BQSxDQUFZUSxRQUFBLEVBQVVGLE9BQUEsRUFBUyxNQUFNO01BQ3hFLEtBQUtULElB\
              QUEsR0FBTzFDLE1BQUEsQ0FBT3FCLE1BQUEsQ0FBTyxDQUFDLEdBQUdrQixXQUFBL\
              ENBQVdPLFdBQVc7TUFDcEQsS0FBS00sY0FBQSxHQUFpQjtJQUMxQjtJQUNBLE1BQU\
              1LLEtBQUEsR0FBUUYsSUFBQSxDQUFLRyxJQUFBLENBQUssRUFBRUMsS0FBQSxDQUF\
              NLFFBQVE7SUFDeEMsTUFBTUMsSUFBQSxHQUFPSCxLQUFBLENBQU1JLEtBQUEsQ0FB\
              TTtJQUN6QixRQUFRRCxJQUFBO01BQ0osS0FBSyxPQUFRO1VBQ1QsSUFBSUgsS0FBQ\
              SxDQUFNL0MsTUFBQSxLQUFXLEdBQUc7WUFDcEI4QyxPQUFBLENBQVEsR0FBRyxpRE\
              FBaUQ7WUFDNUQsSUFBSUMsS0FBQSxDQUFNL0MsTUFBQSxHQUFTO1lBQ2YsT0FBTzt\
              VQUNmO1VBQ0EsTUFBTSxDQUFDb0QsTUFBQSxFQUFRQyxNQUFNLElBQUlOLEtBQUE7\
              VUFDekIsS0FBS2YsSUFBQSxDQUFLb0IsTUFBTSxJQUFJQyxNQUFBO1VBQ3BCLE9BQ\
              U87UUFDWDtNQUNBLEtBQUssUUFBUztVQUNWLEtBQUt0QixJQUFBLENBQUtZLFFBQU\
              EsR0FBVztVQUNyQixJQUFJSSxLQUFBLENBQU0vQyxNQUFBLEtBQVcsR0FBRztZQUN\
              wQjhDLE9BQUEsQ0FBUSxHQUFHLGlEQUFpRDtZQUM1RCxPQUFPO1VBQ1g7VUFDQSxN\
              QUFNLENBQUNMLE9BQU8sSUFBSU0sS0FBQTtVQUNsQixJQUFJTixPQUFBLEtBQVksU\
              0FBU0EsT0FBQSxLQUFZLE9BQU87WUFDeEMsS0FBS1YsSUFBQSxDQUFLVSxPQUFBLE\
              dBQVVBLE9BQUE7WUFDcEIsT0FBTztVQUNYLE9BQ0s7WUFDRCxNQUFNYSxPQUFBLEd\
              BQVUsYUFBYUMsSUFBQSxDQUFLZCxPQUFPO1lBQ3pDSyxPQUFBLENBQVEsR0FBRyw0\
              QkFBNEJMLE9BQU8sSUFBSWEsT0FBTztZQUN6RCxPQUFPO1VBQ1g7UUFDSjtNQUNBO\
              1FBQ0lSLE9BQUEsQ0FBUSxHQUFHLHFCQUFxQkksSUFBSSxJQUFJLElBQUk7UUFDNU\
              MsT0FBTztJQUNmO0VBQ0o7RUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7RUF\
              PQU0sUUFBUUMsTUFBQSxFQUFRWCxPQUFBLEVBQVM7SUFDckIsSUFBSVcsTUFBQSxL\
              QUFXO0lBQ1gsT0FBTztJQUNYLElBQUlBLE1BQUEsQ0FBTyxDQUFDLE1BQU0sS0FBS\
              ztNQUNuQlgsT0FBQSxDQUFRLG9CQUFvQlcsTUFBTSxFQUFFO01BQ3BDLE9BQU87SU\
              FDWDtJQUNBLElBQUlBLE1BQUEsQ0FBTyxDQUFDLE1BQU0sS0FBSztNQUNuQixNQUF\
              NQyxRQUFBLEdBQVdELE1BQUEsQ0FBT0UsS0FBQSxDQUFNLEdBQUcsRUFBRTtNQUNu\
              QyxJQUFJRCxRQUFBLEtBQWEsT0FBT0EsUUFBQSxLQUFhLE1BQU07UUFDdkNaLE9BQ\
              UEsQ0FBUSxxQ0FBcUNXLE1BQU0sY0FBYztRQUNqRSxPQUFPO01BQ1g7TUFDQSxJQU\
              FJQSxNQUFBLENBQU9BLE1BQUEsQ0FBT3pELE1BQUEsR0FBUyxDQUFDLE1BQU07TUF\
              DOUI4QyxPQUFBLENBQVEsaUNBQWlDO01BQzdDLE9BQU9ZLFFBQUE7SUFDWDtJQUNB\
              LE1BQU0sR0FBR04sTUFBQSxFQUFRUSxNQUFNLElBQUlILE1BQUEsQ0FBT0ksS0FBQ\
              SxDQUFNLElBQUFDLE1BQUEsQ0FBQyxrQkFBZSxHQUFDO0lBQ3pELElBQUksQ0FBQ0\
              YsTUFBQTtJQUNEZCxPQUFBLENBQVEsT0FBT1csTUFBTSxvQkFBb0I7SUFDN0MsTUF\
              BTUosTUFBQSxHQUFTLEtBQUtyQixJQUFBLENBQUtvQixNQUFNO0lBQy9CLElBQUlD\
              LE1BQUEsRUFBUTtNQUNSLElBQUk7UUFDQSxPQUFPQSxNQUFBLEdBQVNVLGtCQUFBL\
              ENBQW1CSCxNQUFNO01BQzdDLFNBQ09JLEtBQUEsRUFBTztRQUNWbEIsT0FBQSxDQU\
              FRbUIsTUFBQSxDQUFPRCxLQUFLLENBQUM7UUFDckIsT0FBTztNQUNYO0lBQ0o7SUF\
              DQSxJQUFJWixNQUFBLEtBQVc7SUFDWCxPQUFPSyxNQUFBO0lBQ1hYLE9BQUEsQ0FB\
              USwwQkFBMEJXLE1BQU0sRUFBRTtJQUMxQyxPQUFPO0VBQ1g7RUFBQTtBQUFBO0FBQ\
              UE7QUFBQTtFQUtBUyxVQUFVQyxHQUFBLEVBQUs7SUFDWCxXQUFXLENBQUNmLE1BQU\
              EsRUFBUUMsTUFBTSxLQUFLL0QsTUFBQSxDQUFPOEUsT0FBQSxDQUFRLEtBQUtwQyx\
              JQUFJLEdBQUc7TUFDdEQsSUFBSW1DLEdBQUEsQ0FBSUUsVUFBQSxDQUFXaEIsTUFB\
              TTtNQUNyQixPQUFPRCxNQUFBLEdBQVM1QixhQUFBLENBQWMyQyxHQUFBLENBQUlHL\
              FNBQUEsQ0FBVWpCLE1BQUEsQ0FBT3JELE1BQU0sQ0FBQztJQUNsRTtJQUNBLE9BQU\
              9tRSxHQUFBLENBQUksQ0FBQyxNQUFNLE1BQU1BLEdBQUEsR0FBTSxLQUFLQSxHQUF\
              HO0VBQzFDO0VBQ0FJLFNBQVNDLEdBQUEsRUFBSztJQUNWLE1BQU1DLEtBQUEsR0FB\
              USxLQUFLMUMsSUFBQSxDQUFLWSxRQUFBLEdBQ2xCLENBQUMsU0FBUyxLQUFLWixJQ\
              UFBLENBQUtVLE9BQUEsSUFBVyxLQUFLLEVBQUUsSUFDdEMsRUFBQztJQUNQLE1BQU\
              1pQyxVQUFBLEdBQWFwRixNQUFBLENBQU84RSxPQUFBLENBQVEsS0FBS3BDLElBQUk\
              7SUFDM0MsSUFBSTJDLFFBQUE7SUFDSixJQUFJSCxHQUFBLElBQU9FLFVBQUEsQ0FB\
              VzFFLE1BQUEsR0FBUyxLQUFLMUMsTUFBQSxDQUFPa0gsR0FBQSxDQUFJbkYsUUFBU\
              SxHQUFHO01BQ3RELE1BQU0yQyxJQUFBLEdBQU8sQ0FBQztNQUNkakUsS0FBQSxDQU\
              FNeUcsR0FBQSxDQUFJbkYsUUFBQSxFQUFVLENBQUN1RixJQUFBLEVBQU1sRyxJQUF\
              BLEtBQVM7UUFDaEMsSUFBSXBCLE1BQUEsQ0FBT29CLElBQUksS0FBS0EsSUFBQSxD\
              QUFLeUYsR0FBQTtRQUNyQm5DLElBQUEsQ0FBS3RELElBQUEsQ0FBS3lGLEdBQUcsS\
              UFBSTtNQUN6QixDQUFDO01BQ0RRLFFBQUEsR0FBV3JGLE1BQUEsQ0FBT3VGLElBQU\
              EsQ0FBSzdDLElBQUk7SUFDL0I7SUFFSTJDLFFBQUEsR0FBVyxFQUFDO0lBQ2hCLFd\
              BQVcsQ0FBQ3ZCLE1BQUEsRUFBUUMsTUFBTSxLQUFLcUIsVUFBQSxFQUFZO01BQ3ZD\
              LElBQUl0QixNQUFBLEtBQVcsUUFBUUMsTUFBQSxLQUFXO01BQzlCO01BQ0osSUFBS\
              SxDQUFDbUIsR0FBQSxJQUFPRyxRQUFBLENBQVNHLElBQUEsQ0FBSyxDQUFBckQsRU\
              FBQSxLQUFNQSxFQUFBLENBQUc0QyxVQUFBLENBQVdoQixNQUFNLENBQUM7TUFDakR\
              vQixLQUFBLENBQU1NLElBQUEsQ0FBSyxRQUFRM0IsTUFBTSxJQUFJQyxNQUFNLEVB\
              QUU7SUFDN0M7SUFDQSxPQUFPb0IsS0FBQSxDQUFNTyxJQUFBLENBQUssSUFBSTtFQ\
              UMxQjtBQUNKO0FBQ0FwRCxVQUFBLENBQVdPLFdBQUEsR0FBYyxFQUFFUSxRQUFBLE\
              VBQVUsT0FBT0YsT0FBQSxFQUFTLE1BQU07QUFDM0RiLFVBQUEsQ0FBV1EsV0FBQSx\
              HQUFjLEVBQUUsTUFBTSxxQkFBcUI7OztBQ3JLdEQsU0FBUzZDLGNBQWNyRyxNQUFB\
              LEVBQVE7RUFDM0IsSUFBSSxzQkFBc0IyRSxJQUFBLENBQUszRSxNQUFNLEdBQUc7S\
              UFDcEMsTUFBTXNHLEVBQUEsR0FBS0MsSUFBQSxDQUFLdEgsU0FBQSxDQUFVZSxNQU\
              FNO0lBQ2hDLE1BQU13RyxHQUFBLEdBQU0sNkRBQTZERixFQUFFO0lBQzNFLE1BQU0\
              sSUFBSTVELEtBQUEsQ0FBTThELEdBQUc7RUFDdkI7RUFDQSxPQUFPO0FBQ1g7QUFD\
              QSxTQUFTQyxZQUFZQyxJQUFBLEVBQU07RUFDdkIsTUFBTUMsT0FBQSxHQUFVLG1CQ\
              UFJQyxHQUFBLENBQUk7RUFDeEJ6SCxLQUFBLENBQU11SCxJQUFBLEVBQU07SUFDUj\
              VFLE1BQU1rRSxJQUFBLEVBQU1sRyxJQUFBLEVBQU07TUFDZCxJQUFJQSxJQUFBLEN\
              BQUtFLE1BQUE7TUFDTDJHLE9BQUEsQ0FBUTNDLEdBQUEsQ0FBSWxFLElBQUEsQ0FB\
              S0UsTUFBTTtJQUMvQjtFQUNKLENBQUM7RUFDRCxPQUFPMkcsT0FBQTtBQUNYO0FBR\
              UEsU0FBU0UsY0FBY3BDLE1BQUEsRUFBUXFDLE9BQUEsRUFBUztFQUNwQyxTQUFTNU\
              YsQ0FBQSxHQUFJLEdBQUcsTUFBTSxFQUFFQSxDQUFBLEVBQUc7SUFDdkIsTUFBTW9\
              ELElBQUEsR0FBTyxHQUFHRyxNQUFNLEdBQUd2RCxDQUFDO0lBQzFCLElBQUksQ0FB\
              QzRGLE9BQUEsQ0FBUUMsR0FBQSxDQUFJekMsSUFBSTtJQUNqQixPQUFPQSxJQUFBO\
              0VBQ2Y7QUFDSjtBQUNBLFNBQVMwQyxrQkFBa0JwQixHQUFBLEVBQUtuQixNQUFBLE\
              VBQVE7RUFDcEMsTUFBTXdDLFlBQUEsR0FBZSxFQUFDO0VBQ3RCLE1BQU1DLGFBQUE\
              sR0FBZ0IsbUJBQUlsRixHQUFBLENBQUk7RUFDOUIsSUFBSW1GLFdBQUEsR0FBYztF\
              QUNsQixPQUFPO0lBQ0hDLFFBQUEsRUFBVUEsQ0FBQ3ZDLE1BQUEsS0FBVztNQUNsQ\
              m9DLFlBQUEsQ0FBYWQsSUFBQSxDQUFLdEIsTUFBTTtNQUN4QixJQUFJLENBQUNzQy\
              xXQUFBO01BQ0RBLFdBQUEsR0FBY1YsV0FBQSxDQUFZYixHQUFHO01BQ2pDLE1BQU0\
              1RixNQUFBLEdBQVM2RyxhQUFBLENBQWNwQyxNQUFBLEVBQVEwQyxXQUFXO01BQ2hE\
              QSxXQUFBLENBQVluRCxHQUFBLENBQUloRSxNQUFNO01BQ3RCLE9BQU9BLE1BQUE7S\
              UFDWDtJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7SUFNQXFILFVBQUEsRUFBWUEsQ0\
              FBQSxLQUFNO01BQ2QsV0FBV3hDLE1BQUEsSUFBVW9DLFlBQUEsRUFBYztRQUMvQix\
              NQUFNSyxHQUFBLEdBQU1KLGFBQUEsQ0FBY0ssR0FBQSxDQUFJMUMsTUFBTTtRQUNw\
              QyxJQUFJLE9BQU95QyxHQUFBLEtBQVEsWUFDZkEsR0FBQSxDQUFJdEgsTUFBQSxLQ\
              UNIcEIsUUFBQSxDQUFTMEksR0FBQSxDQUFJeEgsSUFBSSxLQUFLdkIsWUFBQSxDQU\
              FhK0ksR0FBQSxDQUFJeEgsSUFBSSxJQUFJO1VBQ2hEd0gsR0FBQSxDQUFJeEgsSUF\
              BQSxDQUFLRSxNQUFBLEdBQVNzSCxHQUFBLENBQUl0SCxNQUFBO1FBQzFCLE9BQ0s7\
              VUFDRCxNQUFNb0YsS0FBQSxHQUFRLElBQUkxQyxLQUFBLENBQU0sNERBQTREO1VBQ\
              3BGMEMsS0FBQSxDQUFNUCxNQUFBLEdBQVNBLE1BQUE7VUFDZixNQUFNTyxLQUFBO1\
              FBQ1Y7TUFDSjtJQUNKO0lBQ0E4QjtFQUNKO0FBQ0o7OztBQzlEQSxTQUFTTSxhQUF\
              hQyxPQUFBLEVBQVNDLEdBQUEsRUFBSzlHLEdBQUEsRUFBSytHLEdBQUEsRUFBSztF\
              QUMxQyxJQUFJQSxHQUFBLElBQU8sT0FBT0EsR0FBQSxLQUFRLFVBQVU7SUFDaEMsS\
              UFBSUMsS0FBQSxDQUFNQyxPQUFBLENBQVFGLEdBQUcsR0FBRztNQUNwQixTQUFTek\
              csQ0FBQSxHQUFJLEdBQUc0RyxHQUFBLEdBQU1ILEdBQUEsQ0FBSXZHLE1BQUEsRUF\
              BUUYsQ0FBQSxHQUFJNEcsR0FBQSxFQUFLLEVBQUU1RyxDQUFBLEVBQUc7UUFDNUMs\
              TUFBTTZHLEVBQUEsR0FBS0osR0FBQSxDQUFJekcsQ0FBQztRQUNoQixNQUFNOEcsR\
              UFBQSxHQUFLUixZQUFBLENBQWFDLE9BQUEsRUFBU0UsR0FBQSxFQUFLdEMsTUFBQS\
              xDQUFPbkUsQ0FBQyxHQUFHNkcsRUFBRTtRQUNuRCxJQUFJQyxFQUFBLEtBQU87UUF\
              DUCxPQUFPTCxHQUFBLENBQUl6RyxDQUFDO1FBQUEsSUFDUDhHLEVBQUEsS0FBT0Qs\
              RUFBQTtRQUNaSixHQUFBLENBQUl6RyxDQUFDLElBQUk4RyxFQUFBO01BQ2pCO0lBQ\
              0osV0FDU0wsR0FBQSxZQUFlM0YsR0FBQSxFQUFLO01BQ3pCLFdBQVdpRyxDQUFBLE\
              lBQUtMLEtBQUEsQ0FBTU0sSUFBQSxDQUFLUCxHQUFBLENBQUkxQixJQUFBLENBQUs\
              sQ0FBQyxHQUFHO1FBQ3BDLE1BQU04QixFQUFBLEdBQUtKLEdBQUEsQ0FBSUosR0FB\
              QSxDQUFJVSxDQUFDO1FBQ3BCLE1BQU1ELEVBQUEsR0FBS1IsWUFBQSxDQUFhQyxPQ\
              UFBLEVBQVNFLEdBQUEsRUFBS00sQ0FBQSxFQUFHRixFQUFFO1FBQzNDLElBQUlDLE\
              VBQUEsS0FBTztRQUNQTCxHQUFBLENBQUlRLE1BQUEsQ0FBT0YsQ0FBQztRQUFBLEl\
              BQ1BELEVBQUEsS0FBT0QsRUFBQTtRQUNaSixHQUFBLENBQUlTLEdBQUEsQ0FBSUgs\
              Q0FBQSxFQUFHRCxFQUFFO01BQ3JCO0lBQ0osV0FDU0wsR0FBQSxZQUFlZixHQUFBL\
              EVBQUs7TUFDekIsV0FBV21CLEVBQUEsSUFBTUgsS0FBQSxDQUFNTSxJQUFBLENBQU\
              tQLEdBQUcsR0FBRztRQUM5QixNQUFNSyxFQUFBLEdBQUtSLFlBQUEsQ0FBYUMsT0F\
              BQSxFQUFTRSxHQUFBLEVBQUtJLEVBQUEsRUFBSUEsRUFBRTtRQUM1QyxJQUFJQyxF\
              QUFBLEtBQU87UUFDUEwsR0FBQSxDQUFJUSxNQUFBLENBQU9KLEVBQUU7UUFBQSxJQ\
              UNSQyxFQUFBLEtBQU9ELEVBQUEsRUFBSTtVQUNoQkosR0FBQSxDQUFJUSxNQUFBLE\
              NBQU9KLEVBQUU7VUFDYkosR0FBQSxDQUFJM0QsR0FBQSxDQUFJZ0UsRUFBRTtRQUN\
              kO01BQ0o7SUFDSixPQUNLO01BQ0QsV0FBVyxDQUFDQyxDQUFBLEVBQUdGLEVBQUUs\
              S0FBS3JILE1BQUEsQ0FBTzhFLE9BQUEsQ0FBUW1DLEdBQUcsR0FBRztRQUN2QyxNQ\
              UFNSyxFQUFBLEdBQUtSLFlBQUEsQ0FBYUMsT0FBQSxFQUFTRSxHQUFBLEVBQUtNLE\
              NBQUEsRUFBR0YsRUFBRTtRQUMzQyxJQUFJQyxFQUFBLEtBQU87UUFDUCxPQUFPTCx\
              HQUFBLENBQUlNLENBQUM7UUFBQSxJQUNQRCxFQUFBLEtBQU9ELEVBQUE7UUFDWkos\
              R0FBQSxDQUFJTSxDQUFDLElBQUlELEVBQUE7TUFDakI7SUFDSjtFQUNKO0VBQ0EsT\
              0FBT1AsT0FBQSxDQUFRbEYsSUFBQSxDQUFLbUYsR0FBQSxFQUFLOUcsR0FBQSxFQU\
              FLK0csR0FBRztBQUNyQzs7O0FDdkNBLFNBQVNVLEtBQUs1RyxLQUFBLEVBQU82Ryx\
              HQUFBLEVBQUtDLEdBQUEsRUFBSztFQUUzQixJQUFJWCxLQUFBLENBQU1DLE9BQUEs\
              Q0FBUXBHLEtBQUs7RUFDbkIsT0FBT0EsS0FBQSxDQUFNK0csR0FBQSxDQUFJLENBQ\
              UNDLENBQUEsRUFBR3ZILENBQUEsS0FBTW1ILElBQUEsQ0FBS0ksQ0FBQSxFQUFHcE\
              QsTUFBQSxDQUFPbkUsQ0FBQyxHQUFHcUgsR0FBRyxDQUFDO0VBQ3RELElBQUk5Ryx\
              LQUFBLElBQVMsT0FBT0EsS0FBQSxDQUFNaUgsTUFBQSxLQUFXLFlBQVk7SUFFN0Ms\
              SUFBSSxDQUFDSCxHQUFBLElBQU8sQ0FBQ3hJLFNBQUEsQ0FBVTBCLEtBQUs7SUFDe\
              EIsT0FBT0EsS0FBQSxDQUFNaUgsTUFBQSxDQUFPSixHQUFBLEVBQUtDLEdBQUc7SU\
              FDaEMsTUFBTUksSUFBQSxHQUFPLEVBQUVDLFVBQUEsRUFBWSxHQUFHQyxLQUFBLEV\
              BQU8sR0FBR2pGLEdBQUEsRUFBSyxPQUFVO0lBQ3ZEMkUsR0FBQSxDQUFJNUIsT0FB\
              QSxDQUFReUIsR0FBQSxDQUFJM0csS0FBQSxFQUFPa0gsSUFBSTtJQUMzQkosR0FBQ\
              SxDQUFJTyxRQUFBLEdBQVcsQ0FBQUMsSUFBQSxLQUFPO01BQ2xCSixJQUFBLENBQU\
              svRSxHQUFBLEdBQU1tRixJQUFBO01BQ1gsT0FBT1IsR0FBQSxDQUFJTyxRQUFBO0l\
              BQ2Y7SUFDQSxNQUFNbEYsR0FBQSxHQUFNbkMsS0FBQSxDQUFNaUgsTUFBQSxDQUFP\
              SixHQUFBLEVBQUtDLEdBQUc7SUFDakMsSUFBSUEsR0FBQSxDQUFJTyxRQUFBO0lBQ\
              0pQLEdBQUEsQ0FBSU8sUUFBQSxDQUFTbEYsR0FBRztJQUNwQixPQUFPQSxHQUFBO0\
              VBQ1g7RUFDQSxJQUFJLE9BQU9uQyxLQUFBLEtBQVUsWUFBWSxFQUFDOEcsR0FBQSx\
              vQkFBQUEsR0FBQSxDQUFLUyxJQUFBO0VBQ25DLE9BQU9DLE1BQUEsQ0FBT3hILEtB\
              QUs7RUFDdkIsT0FBT0EsS0FBQTtBQUNYOzs7QUM5QkEsSUFBTXlILFFBQUEsR0FBT\
              ixNQUFlO0VBQ1hoRyxZQUFZaUcsSUFBQSxFQUFNO0lBQ2R6SSxNQUFBLENBQU8wSS\
              xjQUFBLENBQWUsTUFBTXZKLFNBQUEsRUFBVyxFQUFFNEIsS0FBQSxFQUFPMEgsSUF\
              BQSxDQUFLLENBQUM7RUFDMUQ7RUFBQTtFQUVBMUYsTUFBQSxFQUFRO0lBQ0osTUFB\
              TUMsSUFBQSxHQUFPaEQsTUFBQSxDQUFPMkksTUFBQSxDQUFPM0ksTUFBQSxDQUFPN\
              EksY0FBQSxDQUFlLElBQUksR0FBRzVJLE1BQUEsQ0FBTzZJLHlCQUFBLENBQTBCLE\
              lBQUksQ0FBQztJQUM5RixJQUFJLEtBQUtDLEtBQUE7SUFDTDlGLElBQUEsQ0FBSzh\
              GLEtBQUEsR0FBUSxLQUFLQSxLQUFBLENBQU16RSxLQUFBLENBQU07SUFDbEMsT0FB\
              T3JCLElBQUE7RUFDWDtFQUFBO0VBRUEyRSxLQUFLekMsR0FBQSxFQUFLLEVBQUU2R\
              CxRQUFBLEVBQVVDLGFBQUEsRUFBZXRDLFFBQUEsRUFBVUssT0FBQSxDQUFRLElBQU\
              ksQ0FBQyxHQUFHO0lBQzNELElBQUksQ0FBQ2pKLFVBQUEsQ0FBV29ILEdBQUc7SUF\
              DZixNQUFNLElBQUkrRCxTQUFBLENBQVUsaUNBQWlDO0lBQ3pELE1BQU1wQixHQUFB\
              LEdBQU07TUFDUjVCLE9BQUEsRUFBUyxtQkFBSTNFLEdBQUEsQ0FBSTtNQUNqQjREL\
              EdBQUE7TUFDQW9ELElBQUEsRUFBTTtNQUNOUyxRQUFBLEVBQVVBLFFBQUEsS0FBYT\
              tNQUN2QkcsWUFBQSxFQUFjO01BQ2RGLGFBQUEsRUFBZSxPQUFPQSxhQUFBLEtBQWt\
              CLFdBQVdBLGFBQUEsR0FBZ0I7SUFDdkU7SUFDQSxNQUFNOUYsR0FBQSxHQUFNeUUs\
              SUFBQSxDQUFLLE1BQU0sSUFBSUUsR0FBRztJQUM5QixJQUFJLE9BQU9uQixRQUFBL\
              EtBQWE7SUFDcEIsV0FBVyxFQUFFeUIsS0FBQSxFQUFPakYsR0FBQSxFQUFBbUYsSU\
              FBQSxDQUFJLEtBQUtSLEdBQUEsQ0FBSTVCLE9BQUEsQ0FBUWtELE1BQUEsQ0FBTzt\
              JQUM1Q3pDLFFBQUEsQ0FBUzJCLElBQUEsRUFBS0YsS0FBSztJQUMzQixPQUFPLE9B\
              QU9wQixPQUFBLEtBQVksYUFDcEJELFlBQUEsQ0FBYUMsT0FBQSxFQUFTLEVBQUUsS\
              UFBSTdELEdBQUEsQ0FBSSxHQUFHLElBQUlBLEdBQUcsSUFDMUNBLEdBQUE7RUFDVj\
              tBQUNKOzs7QUM3QkEsSUFBTXRHLEtBQUEsR0FBTixjQUFvQjRMLFFBQUEsQ0FBUzt\
              FQUN6QmhHLFlBQVkyQixNQUFBLEVBQVE7SUFDaEIsTUFBTXhGLEtBQUs7SUFDWCxL\
              QUFLd0YsTUFBQSxHQUFTQSxNQUFBO0lBQ2RuRSxNQUFBLENBQU8wSSxjQUFBLENBQ\
              WUsTUFBTSxPQUFPO01BQy9CaEIsSUFBQSxFQUFNO1FBQ0YsTUFBTSxJQUFJMUYsS0\
              FBQSxDQUFNLDhCQUE4QjtNQUNsRDtJQUNKLENBQUM7RUFDTDtFQUFBO0FBQUE7QUF\
              BQTtBQUFBO0VBS0FvSCxRQUFRbEUsR0FBQSxFQUFLO0lBQ1QsSUFBSW1FLEtBQUEs\
              R0FBUTtJQUNaNUssS0FBQSxDQUFNeUcsR0FBQSxFQUFLO01BQ1AvRCxJQUFBLEVBQ\
              U1BLENBQUNtRSxJQUFBLEVBQU1sRyxJQUFBLEtBQVM7UUFDbEIsSUFBSUEsSUFBQS\
              xLQUFTO1FBQ1QsT0FBT1gsS0FBQSxDQUFNYyxLQUFBO1FBQ2pCLElBQUlILElBQUE\
              sQ0FBS0UsTUFBQSxLQUFXLEtBQUs2RSxNQUFBO1FBQ3JCa0YsS0FBQSxHQUFRakss\
              SUFBQTtNQUNoQjtJQUNKLENBQUM7SUFDRCxPQUFPaUssS0FBQTtFQUNYO0VBQ0FyQ\
              ixPQUFPc0IsSUFBQSxFQUFNekIsR0FBQSxFQUFLO0lBQ2QsSUFBSSxDQUFDQSxHQU\
              FBO0lBQ0QsT0FBTyxFQUFFMUQsTUFBQSxFQUFRLEtBQUtBLE1BQUEsQ0FBTztJQUN\
              qQyxNQUFNLEVBQUU4QixPQUFBLEVBQVNmLEdBQUEsRUFBSzhELGFBQUEsQ0FBYyxJ\
              QUFJbkIsR0FBQTtJQUN4QyxNQUFNMUQsTUFBQSxHQUFTLEtBQUtpRixPQUFBLENBQ\
              VFsRSxHQUFHO0lBQy9CLElBQUksQ0FBQ2YsTUFBQSxFQUFRO01BQ1QsTUFBTTJCLE\
              dBQUEsR0FBTSwrREFBK0QsS0FBSzNCLE1BQU07TUFDdEYsTUFBTSxJQUFJb0YsY0F\
              BQSxDQUFlekQsR0FBRztJQUNoQztJQUNBLElBQUltQyxJQUFBLEdBQU9oQyxPQUFB\
              LENBQVFZLEdBQUEsQ0FBSTFDLE1BQU07SUFDN0IsSUFBSSxDQUFDOEQsSUFBQSxFQ\
              UFNO01BRVBOLElBQUEsQ0FBS3hELE1BQUEsRUFBUSxNQUFNMEQsR0FBRztNQUN0Qk\
              ksSUFBQSxHQUFPaEMsT0FBQSxDQUFRWSxHQUFBLENBQUkxQyxNQUFNO0lBQzdCO0l\
              BRUEsSUFBSSxDQUFDOEQsSUFBQSxJQUFRQSxJQUFBLENBQUsvRSxHQUFBLEtBQVEs\
              UUFBVztNQUNqQyxNQUFNNEMsR0FBQSxHQUFNO01BQ1osTUFBTSxJQUFJeUQsY0FBQ\
              SxDQUFlekQsR0FBRztJQUNoQztJQUNBLElBQUlrRCxhQUFBLElBQWlCLEdBQUc7TU\
              FDcEJmLElBQUEsQ0FBS0UsS0FBQSxJQUFTO01BQ2QsSUFBSUYsSUFBQSxDQUFLQyx\
              VQUFBLEtBQWU7TUFDcEJELElBQUEsQ0FBS0MsVUFBQSxHQUFhc0IsYUFBQSxDQUFj\
              dEUsR0FBQSxFQUFLZixNQUFBLEVBQVE4QixPQUFPO01BQ3hELElBQUlnQyxJQUFBL\
              ENBQUtFLEtBQUEsR0FBUUYsSUFBQSxDQUFLQyxVQUFBLEdBQWFjLGFBQUEsRUFBZT\
              tRQUM5QyxNQUFNbEQsR0FBQSxHQUFNO1FBQ1osTUFBTSxJQUFJeUQsY0FBQSxDQUF\
              lekQsR0FBRztNQUNoQztJQUNKO0lBQ0EsT0FBT21DLElBQUEsQ0FBSy9FLEdBQUE7\
              RUFDaEI7RUFDQStCLFNBQVM0QyxHQUFBLEVBQUs0QixVQUFBLEVBQVlDLFlBQUEsR\
              UFBYztJQUNwQyxNQUFNQyxHQUFBLEdBQU0sSUFBSSxLQUFLeEYsTUFBTTtJQUMzQi\
              xJQUFJMEQsR0FBQSxFQUFLO01BQ0xsQyxhQUFBLENBQWMsS0FBS3hCLE1BQU07TUF\
              DekIsSUFBSTBELEdBQUEsQ0FBSStCLE9BQUEsQ0FBUUMsZ0JBQUEsSUFBb0IsQ0FB\
              Q2hDLEdBQUEsQ0FBSTVCLE9BQUEsQ0FBUUksR0FBQSxDQUFJLEtBQUtsQyxNQUFNL\
              EdBQUc7UUFDL0QsTUFBTTJCLEdBQUEsR0FBTSwrREFBK0QsS0FBSzNCLE1BQU07UU\
              FDdEYsTUFBTSxJQUFJbkMsS0FBQSxDQUFNOEQsR0FBRztNQUN2QjtNQUNBLElBQUk\
              rQixHQUFBLENBQUlpQyxXQUFBO01BQ0osT0FBTyxHQUFHSCxHQUFHO0lBQ3JCO0lB\
              Q0EsT0FBT0EsR0FBQTtFQUNYO0FBQ0o7QUFDQSxTQUFTSCxjQUFjdEUsR0FBQSxFQ\
              UFLOUYsSUFBQSxFQUFNNkcsT0FBQSxFQUFTO0VBQ3ZDLElBQUlySSxPQUFBLENBQV\
              F3QixJQUFJLEdBQUc7SUFDZixNQUFNK0UsTUFBQSxHQUFTL0UsSUFBQSxDQUFLZ0s\
              sT0FBQSxDQUFRbEUsR0FBRztJQUMvQixNQUFNNUYsTUFBQSxHQUFTMkcsT0FBQSxJ\
              QUFXOUIsTUFBQSxJQUFVOEIsT0FBQSxDQUFRWSxHQUFBLENBQUkxQyxNQUFNO0lBQ\
              3RELE9BQU83RSxNQUFBLEdBQVNBLE1BQUEsQ0FBTzZJLEtBQUEsR0FBUTdJLE1BQU\
              EsQ0FBTzRJLFVBQUEsR0FBYTtFQUN2RCxXQUNTckssWUFBQSxDQUFhdUIsSUFBSSx\
              HQUFHO0lBQ3pCLElBQUkrSSxLQUFBLEdBQVE7SUFDWixXQUFXNEIsSUFBQSxJQUFR\
              M0ssSUFBQSxDQUFLcUIsS0FBQSxFQUFPO01BQzNCLE1BQU11SixDQUFBLEdBQUlSL\
              GFBQUEsQ0FBY3RFLEdBQUEsRUFBSzZFLElBQUEsRUFBTTlELE9BQU87TUFDMUMsSU\
              FBSStELENBQUEsR0FBSTdCLEtBQUE7TUFDSkEsS0FBQSxHQUFRNkIsQ0FBQTtJQUN\
              oQjtJQUNBLE9BQU83QixLQUFBO0VBQ1gsV0FDU2xLLE1BQUEsQ0FBT21CLElBQUks\
              R0FBRztJQUNuQixNQUFNNkssRUFBQSxHQUFLVCxhQUFBLENBQWN0RSxHQUFBLEVBQ\
              Us5RixJQUFBLENBQUtjLEdBQUEsRUFBSytGLE9BQU87SUFDL0MsTUFBTWlFLEVBQU\
              EsR0FBS1YsYUFBQSxDQUFjdEUsR0FBQSxFQUFLOUYsSUFBQSxDQUFLMkIsS0FBQSx\
              FQUFPa0YsT0FBTztJQUNqRCxPQUFPa0UsSUFBQSxDQUFLQyxHQUFBLENBQUlILEVB\
              QUEsRUFBSUMsRUFBRTtFQUMxQjtFQUNBLE9BQU87QUFDWDs7O0FDOUZBLElBQU1HL\
              GFBQUEsR0FBZ0JBLENBQUN0SixLQUFBLEtBQVUsQ0FBQ0EsS0FBQSxJQUFVLE9BQU\
              9BLEtBQUEsS0FBVSxjQUFjLE9BQU9BLEtBQUEsS0FBVTtBQUM1RixJQUFNMUQsTUF\
              BQSxHQUFOLGNBQXFCbUwsUUFBQSxDQUFTO0VBQzFCaEcsWUFBWXpCLEtBQUEsRUFB\
              TztJQUNmLE1BQU05QixNQUFNO0lBQ1osS0FBSzhCLEtBQUEsR0FBUUEsS0FBQTtFQ\
              UNqQjtFQUNBaUgsT0FBT0osR0FBQSxFQUFLQyxHQUFBLEVBQUs7SUFDYixRQUFPQS\
              xHQUFBLG9CQUFBQSxHQUFBLENBQUtTLElBQUEsSUFBTyxLQUFLdkgsS0FBQSxHQUF\
              RNEcsSUFBQSxDQUFLLEtBQUs1RyxLQUFBLEVBQU82RyxHQUFBLEVBQUtDLEdBQUc7\
              RUFDN0Q7RUFDQTVDLFNBQUEsRUFBVztJQUNQLE9BQU9OLE1BQUEsQ0FBTyxLQUFLN\
              UQsS0FBSztFQUM1QjtBQUNKO0FBQ0ExRCxNQUFBLENBQU9pTixZQUFBLEdBQWU7QU\
              FDdEJqTixNQUFBLENBQU9rTixhQUFBLEdBQWdCO0FBQ3ZCbE4sTUFBQSxDQUFPbU4\
              sS0FBQSxHQUFRO0FBQ2ZuTixNQUFBLENBQU9vTixZQUFBLEdBQWU7QUFDdEJwTixN\
              QUFBLENBQU9xTixZQUFBLEdBQWU7OztBQ2pCdEIsSUFBTUMsZ0JBQUEsR0FBbUI7Q\
              UFDekIsU0FBU0MsY0FBYzdKLEtBQUEsRUFBT21ELE9BQUEsRUFBU3hCLElBQUEsRU\
              FBTTtFQUw3QyxJQUFBbEIsRUFBQTtFQU1JLElBQUkwQyxPQUFBLEVBQVM7SUFDVCx\
              NQUFNSyxLQUFBLEdBQVE3QixJQUFBLENBQUttSSxNQUFBLENBQU8sQ0FBQUMsQ0FB\
              QSxLQUFLQSxDQUFBLENBQUVqRyxHQUFBLEtBQVFYLE9BQU87SUFDaEQsTUFBTTZHL\
              E1BQUEsSUFBU3ZKLEVBQUEsR0FBQStDLEtBQUEsQ0FBTXlHLElBQUEsQ0FBSyxDQU\
              FBRixDQUFBLEtBQUssQ0FBQ0EsQ0FBQSxDQUFFRyxNQUFNLE1BQXpCLE9BQUF6Six\
              FQUFBLEdBQThCK0MsS0FBQSxDQUFNLENBQUM7SUFDcEQsSUFBSSxDQUFDd0csTUFB\
              QTtJQUNELE1BQU0sSUFBSS9JLEtBQUEsQ0FBTSxPQUFPa0MsT0FBTyxZQUFZO0lBQ\
              zlDLE9BQU82RyxNQUFBO0VBQ1g7RUFDQSxPQUFPckksSUFBQSxDQUFLc0ksSUFBQS\
              xDQUFLLENBQUFGLENBQUEsS0FBRTtJQWJ2QixJQUFBSSxHQUFBO0lBYTBCLFNBQUF\
              BLEdBQUEsR0FBQUosQ0FBQSxDQUFFSyxRQUFBLEtBQUYsZ0JBQUFELEdBQUEsQ0FB\
              QXJKLElBQUEsQ0FBQWlKLENBQUEsRUFBYS9KLEtBQUEsTUFBVSxDQUFDK0osQ0FBQ\
              SxDQUFFRyxNQUFBO0VBQUEsQ0FBTTtBQUMxRDtBQUNBLFNBQVNHLFdBQVdySyxLQU\
              FBLEVBQU9tRCxPQUFBLEVBQVMyRCxHQUFBLEVBQUs7RUFmekMsSUFBQXJHLEVBQUE\
              sRUFBQUMsRUFBQSxFQUFBQyxFQUFBO0VBZ0JJLElBQUk1RCxVQUFBLENBQVdpRCxL\
              QUFLO0VBQ2hCQSxLQUFBLEdBQVFBLEtBQUEsQ0FBTWhCLFFBQUE7RUFDbEIsSUFBS\
              S9CLE1BQUEsQ0FBTytDLEtBQUs7RUFDWixPQUFPQSxLQUFBO0VBQ1gsSUFBSTlDLE\
              1BQUEsQ0FBTzhDLEtBQUssR0FBRztJQUNmLE1BQU1zSyxJQUFBLElBQU01SixFQUF\
              BLElBQUFELEVBQUEsR0FBQXFHLEdBQUEsQ0FBSXlELE1BQUEsQ0FBT3ZNLEdBQUcs\
              R0FBRXFNLFVBQUEsS0FBaEIsZ0JBQUEzSixFQUFBLENBQUFJLElBQUEsQ0FBQUwsR\
              UFBQSxFQUE2QnFHLEdBQUEsQ0FBSXlELE1BQUEsRUFBUSxNQUFNekQsR0FBQTtJQU\
              MzRHdELElBQUEsQ0FBSTVLLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSzFFLEtBQUs7SUF\
              DcEIsT0FBT3NLLElBQUE7RUFDWDtFQUNBLElBQUl0SyxLQUFBLFlBQWlCNEQsTUFB\
              QSxJQUNqQjVELEtBQUEsWUFBaUJ3SCxNQUFBLElBQ2pCeEgsS0FBQSxZQUFpQndLL\
              E9BQUEsSUFDaEIsT0FBT0MsTUFBQSxLQUFXLGVBQWV6SyxLQUFBLFlBQWlCeUssTU\
              FBQSxFQUNyRDtJQUVFekssS0FBQSxHQUFRQSxLQUFBLENBQU0wSyxPQUFBLENBQVE\
              7RUFDMUI7RUFDQSxNQUFNLEVBQUVDLHFCQUFBLEVBQXVCaEYsUUFBQSxFQUFVaUYs\
              UUFBQSxFQUFVTCxNQUFBLEVBQUFNLE9BQUEsRUFBUXBGLGFBQUEsQ0FBYyxJQUFJc\
              UIsR0FBQTtFQUc3RSxJQUFJakIsR0FBQSxHQUFNO0VBQ1YsSUFBSThFLHFCQUFBLE\
              lBQXlCM0ssS0FBQSxJQUFTLE9BQU9BLEtBQUEsS0FBVSxVQUFVO0lBQzdENkYsR0F\
              BQSxHQUFNSixhQUFBLENBQWNLLEdBQUEsQ0FBSTlGLEtBQUs7SUFDN0IsSUFBSTZG\
              LEdBQUEsRUFBSztNQUNMLElBQUksQ0FBQ0EsR0FBQSxDQUFJdEgsTUFBQTtNQUNMc\
              0gsR0FBQSxDQUFJdEgsTUFBQSxHQUFTb0gsUUFBQSxDQUFTM0YsS0FBSztNQUMvQi\
              xPQUFPLElBQUluRSxLQUFBLENBQU1nSyxHQUFBLENBQUl0SCxNQUFNO0lBQy9CLE9\
              BQ0s7TUFDRHNILEdBQUEsR0FBTSxFQUFFdEgsTUFBQSxFQUFRLE1BQU1GLElBQUEs\
              RUFBTSxLQUFLO01BQ2pDb0gsYUFBQSxDQUFja0IsR0FBQSxDQUFJM0csS0FBQSxFQ\
              UFPNkYsR0FBRztJQUNoQztFQUNKO0VBQ0EsSUFBSTFDLE9BQUEsb0JBQUFBLE9BQU\
              EsQ0FBU2EsVUFBQSxDQUFXO0VBQ3BCYixPQUFBLEdBQVV5RyxnQkFBQSxHQUFtQnp\
              HLE9BQUEsQ0FBUUcsS0FBQSxDQUFNLENBQUM7RUFDaEQsSUFBSTBHLE1BQUEsR0FB\
              U0gsYUFBQSxDQUFjN0osS0FBQSxFQUFPbUQsT0FBQSxFQUFTMEgsT0FBQSxDQUFPb\
              EosSUFBSTtFQUN0RCxJQUFJLENBQUNxSSxNQUFBLEVBQVE7SUFDVCxJQUFJaEssS0\
              FBQSxJQUFTLE9BQU9BLEtBQUEsQ0FBTWlILE1BQUEsS0FBVyxZQUFZO01BRTdDakg\
              sS0FBQSxHQUFRQSxLQUFBLENBQU1pSCxNQUFBLENBQU87SUFDekI7SUFDQSxJQUFJ\
              LENBQUNqSCxLQUFBLElBQVMsT0FBT0EsS0FBQSxLQUFVLFVBQVU7TUFDckMsTUFBT\
              ThLLEtBQUEsR0FBTyxJQUFJeE8sTUFBQSxDQUFPMEQsS0FBSztNQUM3QixJQUFJNk\
              YsR0FBQTtNQUNBQSxHQUFBLENBQUl4SCxJQUFBLEdBQU95TSxLQUFBO01BQ2YsT0F\
              BT0EsS0FBQTtJQUNYO0lBQ0FkLE1BQUEsR0FDSWhLLEtBQUEsWUFBaUJPLEdBQUEs\
              R0FDWHNLLE9BQUEsQ0FBTzdNLEdBQUcsSUFDVkgsTUFBQSxDQUFPa04sUUFBQSxJQ\
              UFZOUwsTUFBQSxDQUFPZSxLQUFLLElBQzNCNkssT0FBQSxDQUFPMU0sR0FBRyxJQU\
              NWME0sT0FBQSxDQUFPN00sR0FBRztFQUM1QjtFQUNBLElBQUk0TSxRQUFBLEVBQVU\
              7SUFDVkEsUUFBQSxDQUFTWixNQUFNO0lBQ2YsT0FBT2xELEdBQUEsQ0FBSThELFFB\
              QUE7RUFDZjtFQUNBLE1BQU12TSxJQUFBLElBQU8yTCxNQUFBLG9CQUFBQSxNQUFBL\
              ENBQVFLLFVBQUEsSUFDZkwsTUFBQSxDQUFPSyxVQUFBLENBQVd2RCxHQUFBLENBQU\
              l5RCxNQUFBLEVBQVF2SyxLQUFBLEVBQU84RyxHQUFHLElBQ3hDLFNBQU9uRyxFQUF\
              BLEdBQUFxSixNQUFBLG9CQUFBQSxNQUFBLENBQVFnQixTQUFBLEtBQVIsZ0JBQUFy\
              SyxFQUFBLENBQW1COEYsSUFBQSxNQUFTLGFBQy9CdUQsTUFBQSxDQUFPZ0IsU0FBQ\
              SxDQUFVdkUsSUFBQSxDQUFLSyxHQUFBLENBQUl5RCxNQUFBLEVBQVF2SyxLQUFBLE\
              VBQU84RyxHQUFHLElBQzVDLElBQUl4SyxNQUFBLENBQU8wRCxLQUFLO0VBQzFCLEl\
              BQUltRCxPQUFBO0VBQ0E5RSxJQUFBLENBQUt5RixHQUFBLEdBQU1YLE9BQUE7RUFB\
              QSxJQUNOLENBQUM2RyxNQUFBLENBQU9pQixPQUFBO0VBQ2I1TSxJQUFBLENBQUt5R\
              ixHQUFBLEdBQU1rRyxNQUFBLENBQU9sRyxHQUFBO0VBQ3RCLElBQUkrQixHQUFBO0\
              VBQ0FBLEdBQUEsQ0FBSXhILElBQUEsR0FBT0EsSUFBQTtFQUNmLE9BQU9BLElBQUE\
              7QUFDWDs7O0FDbEZBLFNBQVM2TSxtQkFBbUJMLE9BQUEsRUFBUXpMLElBQUEsRUFB\
              TVksS0FBQSxFQUFPO0VBQzdDLElBQUlnSCxDQUFBLEdBQUloSCxLQUFBO0VBQ1IsU\
              0FBU1AsQ0FBQSxHQUFJTCxJQUFBLENBQUtPLE1BQUEsR0FBUyxHQUFHRixDQUFBLE\
              lBQUssR0FBRyxFQUFFQSxDQUFBLEVBQUc7SUFDdkMsTUFBTStHLENBQUEsR0FBSXB\
              ILElBQUEsQ0FBS0ssQ0FBQztJQUNoQixJQUFJLE9BQU8rRyxDQUFBLEtBQU0sWUFB\
              WWdCLE1BQUEsQ0FBTzJELFNBQUEsQ0FBVTNFLENBQUMsS0FBS0EsQ0FBQSxJQUFLL\
              EdBQUc7TUFDeEQsTUFBTTRFLENBQUEsR0FBSSxFQUFDO01BQ1hBLENBQUEsQ0FBRT\
              VFLENBQUMsSUFBSVEsQ0FBQTtNQUNQQSxDQUFBLEdBQUlvRSxDQUFBO0lBQ1IsT0F\
              DSztNQUNEcEUsQ0FBQSxHQUFJLG1CQUFJekcsR0FBQSxDQUFJLENBQUMsQ0FBQ2lH\
              LENBQUEsRUFBR1EsQ0FBQyxDQUFDLENBQUM7SUFDeEI7RUFDSjtFQUNBLE9BQU9xR\
              CxVQUFBLENBQVdyRCxDQUFBLEVBQUcsUUFBVztJQUM1QjJELHFCQUFBLEVBQXVCO0\
              lBQ3ZCVSxhQUFBLEVBQWU7SUFDZjFGLFFBQUEsRUFBVUEsQ0FBQSxLQUFNO01BQ1o\
              sTUFBTSxJQUFJMUUsS0FBQSxDQUFNLDhDQUE4QztJQUNsRTtJQUNBc0osTUFBQSxF\
              QUFBTSxPQUFBO0lBQ0FwRixhQUFBLEVBQWUsbUJBQUlsRixHQUFBLENBQUk7RUFDM\
              0IsQ0FBQztBQUNMO0FBR0EsSUFBTStLLFdBQUEsR0FBY0EsQ0FBQ2xNLElBQUEsS0\
              FBU0EsSUFBQSxJQUFRLFFBQ2pDLE9BQU9BLElBQUEsS0FBUyxZQUFZLENBQUMsQ0F\
              BQ0EsSUFBQSxDQUFLdkIsTUFBQSxDQUFPa04sUUFBUSxFQUFFLEVBQUVRLElBQUEs\
              Q0FBSyxFQUFFQyxJQUFBO0FBQ2xFLElBQU1yTCxVQUFBLEdBQU4sY0FBeUJzSCxRQ\
              UFBLENBQVM7RUFDOUJoRyxZQUFZaUcsSUFBQSxFQUFNbUQsT0FBQSxFQUFRO0lBQ3\
              RCLE1BQU1uRCxJQUFJO0lBQ1Z6SSxNQUFBLENBQU8wSSxjQUFBLENBQWUsTUFBTSx\
              VQUFVO01BQ2xDM0gsS0FBQSxFQUFPNkssT0FBQTtNQUNQWSxZQUFBLEVBQWM7TUFD\
              ZEMsVUFBQSxFQUFZO01BQ1pDLFFBQUEsRUFBVTtJQUNkLENBQUM7RUFDTDtFQUFBO\
              0FBQUE7QUFBQTtBQUFBO0FBQUE7RUFNQTNKLE1BQU02SSxPQUFBLEVBQVE7SUFDVi\
              xNQUFNNUksSUFBQSxHQUFPaEQsTUFBQSxDQUFPMkksTUFBQSxDQUFPM0ksTUFBQSx\
              DQUFPNEksY0FBQSxDQUFlLElBQUksR0FBRzVJLE1BQUEsQ0FBTzZJLHlCQUFBLENB\
              QTBCLElBQUksQ0FBQztJQUM5RixJQUFJK0MsT0FBQTtJQUNBNUksSUFBQSxDQUFLc\
              0ksTUFBQSxHQUFTTSxPQUFBO0lBQ2xCNUksSUFBQSxDQUFLdkMsS0FBQSxHQUFRdU\
              MsSUFBQSxDQUFLdkMsS0FBQSxDQUFNcUgsR0FBQSxDQUFJLENBQUE2RSxFQUFBLEt\
              BQU0zTyxNQUFBLENBQU8yTyxFQUFFLEtBQUsxTyxNQUFBLENBQU8wTyxFQUFFLElB\
              QUlBLEVBQUEsQ0FBRzVKLEtBQUEsQ0FBTTZJLE9BQU0sSUFBSWUsRUFBRTtJQUNsR\
              ixJQUFJLEtBQUs3RCxLQUFBO0lBQ0w5RixJQUFBLENBQUs4RixLQUFBLEdBQVEsS0\
              FBS0EsS0FBQSxDQUFNekUsS0FBQSxDQUFNO0lBQ2xDLE9BQU9yQixJQUFBO0VBQ1g\
              7RUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0VBTUE0SixNQUFNek0sSUFBQSxFQUFN\
              WSxLQUFBLEVBQU87SUFDZixJQUFJc0wsV0FBQSxDQUFZbE0sSUFBSTtJQUNoQixLQ\
              UFLbUQsR0FBQSxDQUFJdkMsS0FBSztJQUNiO01BQ0QsTUFBTSxDQUFDYixHQUFBLE\
              VBQUssR0FBRzJNLElBQUksSUFBSTFNLElBQUE7TUFDdkIsTUFBTWYsSUFBQSxHQUF\
              PLEtBQUt5SCxHQUFBLENBQUkzRyxHQUFBLEVBQUssSUFBSTtNQUMvQixJQUFJckMs\
              WUFBQSxDQUFhdUIsSUFBSTtNQUNqQkEsSUFBQSxDQUFLd04sS0FBQSxDQUFNQyxJQ\
              UFBLEVBQU05TCxLQUFLO01BQUEsSUFDakIzQixJQUFBLEtBQVMsVUFBYSxLQUFLa0\
              0sTUFBQTtNQUNoQyxLQUFLNUQsR0FBQSxDQUFJeEgsR0FBQSxFQUFLK0wsa0JBQUE\
              sQ0FBbUIsS0FBS1gsTUFBQSxFQUFRdUIsSUFBQSxFQUFNOUwsS0FBSyxDQUFDOztN\
              QUUxRCxNQUFNLElBQUlpQixLQUFBLENBQU0sK0JBQStCOUIsR0FBRyxxQkFBcUIyT\
              SxJQUFJLEVBQUU7SUFDckY7RUFDSjtFQUFBO0FBQUE7QUFBQTtBQUFBO0VBS0FDLF\
              NBQVMzTSxJQUFBLEVBQU07SUFDWCxNQUFNLENBQUNELEdBQUEsRUFBSyxHQUFHMk0\
              sSUFBSSxJQUFJMU0sSUFBQTtJQUN2QixJQUFJME0sSUFBQSxDQUFLbk0sTUFBQSxL\
              QUFXO0lBQ2hCLE9BQU8sS0FBSytHLE1BQUEsQ0FBT3ZILEdBQUc7SUFDMUIsTUFBT\
              WQsSUFBQSxHQUFPLEtBQUt5SCxHQUFBLENBQUkzRyxHQUFBLEVBQUssSUFBSTtJQU\
              MvQixJQUFJckMsWUFBQSxDQUFhdUIsSUFBSTtJQUNqQixPQUFPQSxJQUFBLENBQUs\
              wTixRQUFBLENBQVNELElBQUk7O0lBRXpCLE1BQU0sSUFBSTdLLEtBQUEsQ0FBTSwr\
              QkFBK0I5QixHQUFHLHFCQUFxQjJNLElBQUksRUFBRTtFQUNyRjtFQUFBO0FBQUE7Q\
              UFBQTtBQUFBO0FBQUE7RUFNQUUsTUFBTTVNLElBQUEsRUFBTTZNLFVBQUEsRUFBWT\
              tJQUNwQixNQUFNLENBQUM5TSxHQUFBLEVBQUssR0FBRzJNLElBQUksSUFBSTFNLEl\
              BQUE7SUFDdkIsTUFBTWYsSUFBQSxHQUFPLEtBQUt5SCxHQUFBLENBQUkzRyxHQUFB\
              LEVBQUssSUFBSTtJQUMvQixJQUFJMk0sSUFBQSxDQUFLbk0sTUFBQSxLQUFXO0lBQ\
              2hCLE9BQU8sQ0FBQ3NNLFVBQUEsSUFBYzlPLFFBQUEsQ0FBU2tCLElBQUksSUFBSU\
              EsSUFBQSxDQUFLMkIsS0FBQSxHQUFRM0IsSUFBQTs7SUFFcEQsT0FBT3ZCLFlBQUE\
              sQ0FBYXVCLElBQUksSUFBSUEsSUFBQSxDQUFLMk4sS0FBQSxDQUFNRixJQUFBLEVB\
              QU1HLFVBQVUsSUFBSTtFQUNuRTtFQUNBQyxpQkFBaUJDLFdBQUEsRUFBYTtJQUMxQ\
              ixPQUFPLEtBQUt6TSxLQUFBLENBQU0wTSxLQUFBLENBQU0sQ0FBQS9OLElBQUEsS0\
              FBUTtNQUM1QixJQUFJLENBQUNuQixNQUFBLENBQU9tQixJQUFJO01BQ1osT0FBTzt\
              NQUNYLE1BQU1nTyxDQUFBLEdBQUloTyxJQUFBLENBQUsyQixLQUFBO01BQ2YsT0FB\
              UXFNLENBQUEsSUFBSyxRQUNSRixXQUFBLElBQ0doUCxRQUFBLENBQVNrUCxDQUFDL\
              EtBQ1ZBLENBQUEsQ0FBRXJNLEtBQUEsSUFBUyxRQUNYLENBQUNxTSxDQUFBLENBQU\
              VDLGFBQUEsSUFDSCxDQUFDRCxDQUFBLENBQUVFLE9BQUEsSUFDSCxDQUFDRixDQUF\
              BLENBQUV2SSxHQUFBO0lBQ2YsQ0FBQztFQUNMO0VBQUE7QUFBQTtBQUFBO0VBSUEw\
              SSxNQUFNcE4sSUFBQSxFQUFNO0lBQ1IsTUFBTSxDQUFDRCxHQUFBLEVBQUssR0FBR\
              zJNLElBQUksSUFBSTFNLElBQUE7SUFDdkIsSUFBSTBNLElBQUEsQ0FBS25NLE1BQU\
              EsS0FBVztJQUNoQixPQUFPLEtBQUsyRixHQUFBLENBQUluRyxHQUFHO0lBQ3ZCLE1\
              BQU1kLElBQUEsR0FBTyxLQUFLeUgsR0FBQSxDQUFJM0csR0FBQSxFQUFLLElBQUk7\
              SUFDL0IsT0FBT3JDLFlBQUEsQ0FBYXVCLElBQUksSUFBSUEsSUFBQSxDQUFLbU8sS\
              0FBQSxDQUFNVixJQUFJLElBQUk7RUFDbkQ7RUFBQTtBQUFBO0FBQUE7QUFBQTtFQU\
              tBVyxNQUFNck4sSUFBQSxFQUFNWSxLQUFBLEVBQU87SUFDZixNQUFNLENBQUNiLEd\
              BQUEsRUFBSyxHQUFHMk0sSUFBSSxJQUFJMU0sSUFBQTtJQUN2QixJQUFJME0sSUFB\
              QSxDQUFLbk0sTUFBQSxLQUFXLEdBQUc7TUFDbkIsS0FBS2dILEdBQUEsQ0FBSXhIL\
              EdBQUEsRUFBS2EsS0FBSztJQUN2QixPQUNLO01BQ0QsTUFBTTNCLElBQUEsR0FBTy\
              xLQUFLeUgsR0FBQSxDQUFJM0csR0FBQSxFQUFLLElBQUk7TUFDL0IsSUFBSXJDLFl\
              BQUEsQ0FBYXVCLElBQUk7TUFDakJBLElBQUEsQ0FBS29PLEtBQUEsQ0FBTVgsSUFB\
              QSxFQUFNOUwsS0FBSztNQUFBLElBQ2pCM0IsSUFBQSxLQUFTLFVBQWEsS0FBS2tNL\
              E1BQUE7TUFDaEMsS0FBSzVELEdBQUEsQ0FBSXhILEdBQUEsRUFBSytMLGtCQUFBLE\
              NBQW1CLEtBQUtYLE1BQUEsRUFBUXVCLElBQUEsRUFBTTlMLEtBQUssQ0FBQzs7TUF\
              FMUQsTUFBTSxJQUFJaUIsS0FBQSxDQUFNLCtCQUErQjlCLEdBQUcscUJBQXFCMk0s\
              SUFBSSxFQUFFO0lBQ3JGO0VBQ0o7QUFDSjtBQUNBM0wsVUFBQSxDQUFXdU0sNkJBQ\
              UEsR0FBZ0M7OztBQzFJM0MsSUFBTUMsZ0JBQUEsR0FBbUJBLENBQUNDLEdBQUEsS0\
              FBUUEsR0FBQSxDQUFJdkwsT0FBQSxDQUFRLG1CQUFtQixHQUFHO0FBQ3BFLFNBQVN\
              3TCxjQUFjTixPQUFBLEVBQVNPLE1BQUEsRUFBUTtFQUNwQyxJQUFJLFFBQVE1SixJ\
              QUFBLENBQUtxSixPQUFPO0VBQ3BCLE9BQU9BLE9BQUEsQ0FBUXRJLFNBQUEsQ0FBV\
              SxDQUFDO0VBQzlCLE9BQU82SSxNQUFBLEdBQVNQLE9BQUEsQ0FBUWxMLE9BQUEsQ0\
              FBUSxjQUFjeUwsTUFBTSxJQUFJUCxPQUFBO0FBQzVEO0FBQ0EsSUFBTVEsV0FBQSx\
              HQUFjQSxDQUFDSCxHQUFBLEVBQUtFLE1BQUEsRUFBUVAsT0FBQSxLQUFZSyxHQUFB\
              LENBQUlJLFFBQUEsQ0FBUyxJQUFJLElBQ3pESCxhQUFBLENBQWNOLE9BQUEsRUFBU\
              08sTUFBTSxJQUM3QlAsT0FBQSxDQUFRVSxRQUFBLENBQVMsSUFBSSxJQUNqQixPQU\
              FPSixhQUFBLENBQWNOLE9BQUEsRUFBU08sTUFBTSxLQUNuQ0YsR0FBQSxDQUFJSSx\
              RQUFBLENBQVMsR0FBRyxJQUFJLEtBQUssT0FBT1QsT0FBQTs7O0FDakIzQyxJQUFN\
              VyxTQUFBLEdBQVk7QUFDbEIsSUFBTUMsVUFBQSxHQUFhO0FBQ25CLElBQU1DLFdBQ\
              UEsR0FBYztBQU1wQixTQUFTQyxjQUFjQyxJQUFBLEVBQU1SLE1BQUEsRUFBUVMsSU\
              FBQSxHQUFPLFFBQVEsRUFBRUMsYUFBQSxFQUFlQyxTQUFBLEdBQVksSUFBSUMsZUF\
              BQSxHQUFrQixJQUFJQyxNQUFBLEVBQVFDLFVBQUEsQ0FBVyxJQUFJLENBQUMsR0FB\
              RztFQUNsSSxJQUFJLENBQUNILFNBQUEsSUFBYUEsU0FBQSxHQUFZO0VBQzFCLE9BQ\
              U9ILElBQUE7RUFDWCxNQUFNTyxPQUFBLEdBQVV6RSxJQUFBLENBQUtDLEdBQUEsQ0\
              FBSSxJQUFJcUUsZUFBQSxFQUFpQixJQUFJRCxTQUFBLEdBQVlYLE1BQUEsQ0FBT25\
              OLE1BQU07RUFDM0UsSUFBSTJOLElBQUEsQ0FBSzNOLE1BQUEsSUFBVWtPLE9BQUE7\
              RUFDZixPQUFPUCxJQUFBO0VBQ1gsTUFBTVEsS0FBQSxHQUFRLEVBQUM7RUFDZixNQ\
              UFNQyxZQUFBLEdBQWUsQ0FBQztFQUN0QixJQUFJQyxHQUFBLEdBQU1QLFNBQUEsR0\
              FBWVgsTUFBQSxDQUFPbk4sTUFBQTtFQUM3QixJQUFJLE9BQU82TixhQUFBLEtBQWt\
              CLFVBQVU7SUFDbkMsSUFBSUEsYUFBQSxHQUFnQkMsU0FBQSxHQUFZckUsSUFBQSxD\
              QUFLQyxHQUFBLENBQUksR0FBR3FFLGVBQWU7SUFDdkRJLEtBQUEsQ0FBTXBKLElBQ\
              UEsQ0FBSyxDQUFDOztJQUVac0osR0FBQSxHQUFNUCxTQUFBLEdBQVlELGFBQUE7RU\
              FDMUI7RUFDQSxJQUFJNUssS0FBQSxHQUFRO0VBQ1osSUFBSXFMLElBQUEsR0FBTzt\
              FQUNYLElBQUlDLFFBQUEsR0FBVztFQUNmLElBQUl6TyxDQUFBLEdBQUk7RUFDUixJ\
              QUFJME8sUUFBQSxHQUFXO0VBQ2YsSUFBSUMsTUFBQSxHQUFTO0VBQ2IsSUFBSWIsS\
              UFBQSxLQUFTSixVQUFBLEVBQVk7SUFDckIxTixDQUFBLEdBQUk0Tyx3QkFBQSxDQU\
              F5QmYsSUFBQSxFQUFNN04sQ0FBQSxFQUFHcU4sTUFBQSxDQUFPbk4sTUFBTTtJQUN\
              uRCxJQUFJRixDQUFBLEtBQU07SUFDTnVPLEdBQUEsR0FBTXZPLENBQUEsR0FBSW9P\
              LE9BQUE7RUFDbEI7RUFDQSxTQUFTdk0sRUFBQSxFQUFLQSxFQUFBLEdBQUtnTSxJQ\
              UFBLENBQU03TixDQUFBLElBQUssQ0FBRSxJQUFLO0lBQ2pDLElBQUk4TixJQUFBLE\
              tBQVNILFdBQUEsSUFBZTlMLEVBQUEsS0FBTyxNQUFNO01BQ3JDNk0sUUFBQSxHQUF\
              XMU8sQ0FBQTtNQUNYLFFBQVE2TixJQUFBLENBQUs3TixDQUFBLEdBQUksQ0FBQztR\
              QUNkLEtBQUs7VUFDREEsQ0FBQSxJQUFLO1VBQ0w7UUFDSixLQUFLO1VBQ0RBLENBQ\
              UEsSUFBSztVQUNMO1FBQ0osS0FBSztVQUNEQSxDQUFBLElBQUs7VUFDTDtRQUNKO1\
              VBQ0lBLENBQUEsSUFBSztNQUNiO01BQ0EyTyxNQUFBLEdBQVMzTyxDQUFBO0lBQ2I\
              7SUFDQSxJQUFJNkIsRUFBQSxLQUFPLE1BQU07TUFDYixJQUFJaU0sSUFBQSxLQUFT\
              SixVQUFBO01BQ1QxTixDQUFBLEdBQUk0Tyx3QkFBQSxDQUF5QmYsSUFBQSxFQUFNN\
              04sQ0FBQSxFQUFHcU4sTUFBQSxDQUFPbk4sTUFBTTtNQUN2RHFPLEdBQUEsR0FBTX\
              ZPLENBQUEsR0FBSXFOLE1BQUEsQ0FBT25OLE1BQUEsR0FBU2tPLE9BQUE7TUFDMUJ\
              qTCxLQUFBLEdBQVE7SUFDWixPQUNLO01BQ0QsSUFBSXRCLEVBQUEsS0FBTyxPQUNQ\
              Mk0sSUFBQSxJQUNBQSxJQUFBLEtBQVMsT0FDVEEsSUFBQSxLQUFTLFFBQ1RBLElBQ\
              UEsS0FBUyxLQUFNO1FBRWYsTUFBTTFDLElBQUEsR0FBTytCLElBQUEsQ0FBSzdOLE\
              NBQUEsR0FBSSxDQUFDO1FBQ3ZCLElBQUk4TCxJQUFBLElBQVFBLElBQUEsS0FBUyx\
              PQUFPQSxJQUFBLEtBQVMsUUFBUUEsSUFBQSxLQUFTO1FBQ2xEM0ksS0FBQSxHQUFR\
              bkQsQ0FBQTtNQUNoQjtNQUNBLElBQUlBLENBQUEsSUFBS3VPLEdBQUEsRUFBSztRQ\
              UNWLElBQUlwTCxLQUFBLEVBQU87VUFDUGtMLEtBQUEsQ0FBTXBKLElBQUEsQ0FBSz\
              lCLEtBQUs7VUFDaEJvTCxHQUFBLEdBQU1wTCxLQUFBLEdBQVFpTCxPQUFBO1VBQ2R\
              qTCxLQUFBLEdBQVE7UUFDWixXQUNTMkssSUFBQSxLQUFTSCxXQUFBLEVBQWE7VUFF\
              M0IsT0FBT2EsSUFBQSxLQUFTLE9BQU9BLElBQUEsS0FBUyxLQUFNO1lBQ2xDQSxJQ\
              UFBLEdBQU8zTSxFQUFBO1lBQ1BBLEVBQUEsR0FBS2dNLElBQUEsQ0FBTTdOLENBQU\
              EsSUFBSyxDQUFFO1lBQ2xCeU8sUUFBQSxHQUFXO1VBQ2Y7VUFFQSxNQUFNSSxDQUF\
              BLEdBQUk3TyxDQUFBLEdBQUkyTyxNQUFBLEdBQVMsSUFBSTNPLENBQUEsR0FBSSxJ\
              QUFJME8sUUFBQSxHQUFXO1VBRTlDLElBQUlKLFlBQUEsQ0FBYU8sQ0FBQztVQUNkL\
              E9BQU9oQixJQUFBO1VBQ1hRLEtBQUEsQ0FBTXBKLElBQUEsQ0FBSzRKLENBQUM7VU\
              FDWlAsWUFBQSxDQUFhTyxDQUFDLElBQUk7VUFDbEJOLEdBQUEsR0FBTU0sQ0FBQSx\
              HQUFJVCxPQUFBO1VBQ1ZqTCxLQUFBLEdBQVE7UUFDWixPQUNLO1VBQ0RzTCxRQUFB\
              LEdBQVc7UUFDZjtNQUNKO0lBQ0o7SUFDQUQsSUFBQSxHQUFPM00sRUFBQTtFQUNYO\
              0VBQ0EsSUFBSTRNLFFBQUEsSUFBWU4sVUFBQTtFQUNaQSxVQUFBLENBQVc7RUFDZi\
              xJQUFJRSxLQUFBLENBQU1uTyxNQUFBLEtBQVc7RUFDakIsT0FBTzJOLElBQUE7RUF\
              DWCxJQUFJSyxNQUFBO0VBQ0FBLE1BQUEsQ0FBTztFQUNYLElBQUl4TCxHQUFBLEdB\
              QU1tTCxJQUFBLENBQUtoSyxLQUFBLENBQU0sR0FBR3dLLEtBQUEsQ0FBTSxDQUFDL\
              ENBQUM7RUFDaEMsU0FBU1MsRUFBQSxHQUFJLEdBQUdBLEVBQUEsR0FBSVQsS0FBQS\
              xDQUFNbk8sTUFBQSxFQUFRLEVBQUU0TyxFQUFBLEVBQUc7SUFDbkMsTUFBTUMsSUF\
              BQSxHQUFPVixLQUFBLENBQU1TLEVBQUM7SUFDcEIsTUFBTUUsSUFBQSxHQUFNWCxL\
              QUFBLENBQU1TLEVBQUEsR0FBSSxDQUFDLEtBQUtqQixJQUFBLENBQUszTixNQUFBO\
              0lBQ2pDLElBQUk2TyxJQUFBLEtBQVM7SUFDVHJNLEdBQUEsR0FBTTtBQUFBLEVBQU\
              sySyxNQUFNLEdBQUdRLElBQUEsQ0FBS2hLLEtBQUEsQ0FBTSxHQUFHbUwsSUFBRyx\
              DQUFDO0lBQ3JDO01BQ0QsSUFBSWxCLElBQUEsS0FBU0gsV0FBQSxJQUFlVyxZQUFB\
              LENBQWFTLElBQUk7TUFDekNyTSxHQUFBLElBQU8sR0FBR21MLElBQUEsQ0FBS2tCL\
              ElBQUksQ0FBQztNQUN4QnJNLEdBQUEsSUFBTztBQUFBLEVBQUsySyxNQUFNLEdBQU\
              dRLElBQUEsQ0FBS2hLLEtBQUEsQ0FBTWtMLElBQUEsR0FBTyxHQUFHQyxJQUFHLEN\
              BQUM7SUFDbEQ7RUFDSjtFQUNBLE9BQU90TSxHQUFBO0FBQ1g7QUFLQSxTQUFTa00s\
              eUJBQXlCZixJQUFBLEVBQU03TixDQUFBLEVBQUdxTixNQUFBLEVBQVE7RUFDL0MsS\
              UFBSWtCLEdBQUEsR0FBTXZPLENBQUE7RUFDVixJQUFJaVAsS0FBQSxHQUFRalAsQ0\
              FBQSxHQUFJO0VBQ2hCLElBQUk2QixFQUFBLEdBQUtnTSxJQUFBLENBQUtvQixLQUF\
              LO0VBQ25CLE9BQU9wTixFQUFBLEtBQU8sT0FBT0EsRUFBQSxLQUFPLEtBQU07SUFD\
              OUIsSUFBSTdCLENBQUEsR0FBSWlQLEtBQUEsR0FBUTVCLE1BQUEsRUFBUTtNQUNwQ\
              nhMLEVBQUEsR0FBS2dNLElBQUEsQ0FBSyxFQUFFN04sQ0FBQztJQUNqQixPQUNLO0\
              1BQ0QsR0FBRztRQUNDNkIsRUFBQSxHQUFLZ00sSUFBQSxDQUFLLEVBQUU3TixDQUF\
              DO01BQ2pCLFNBQVM2QixFQUFBLElBQU1BLEVBQUEsS0FBTztNQUN0QjBNLEdBQUEs\
              R0FBTXZPLENBQUE7TUFDTmlQLEtBQUEsR0FBUWpQLENBQUEsR0FBSTtNQUNaNkIsR\
              UFBQSxHQUFLZ00sSUFBQSxDQUFLb0IsS0FBSztJQUNuQjtFQUNKO0VBQ0EsT0FBT1\
              YsR0FBQTtBQUNYOzs7QUMxSUEsSUFBTVcsY0FBQSxHQUFpQkEsQ0FBQzdILEdBQUE\
              sRUFBSzhILFFBQUEsTUFBYTtFQUN0Q3BCLGFBQUEsRUFBZW9CLFFBQUEsR0FBVTlI\
              LEdBQUEsQ0FBSWdHLE1BQUEsQ0FBT25OLE1BQUEsR0FBU21ILEdBQUEsQ0FBSTBHL\
              GFBQUE7RUFDakRDLFNBQUEsRUFBVzNHLEdBQUEsQ0FBSStCLE9BQUEsQ0FBUTRFLF\
              NBQUE7RUFDdkJDLGVBQUEsRUFBaUI1RyxHQUFBLENBQUkrQixPQUFBLENBQVE2RTt\
              BQUNqQztBQUdBLElBQU1tQixzQkFBQSxHQUF5QkEsQ0FBQ2pDLEdBQUEsS0FBUSxt\
              QkFBbUIxSixJQUFBLENBQUswSixHQUFHO0FBQ25FLFNBQVNrQyxvQkFBb0JsQyxHQ\
              UFBLEVBQUthLFNBQUEsRUFBV3NCLFlBQUEsRUFBYztFQUN2RCxJQUFJLENBQUN0Qi\
              xTQUFBLElBQWFBLFNBQUEsR0FBWTtFQUMxQixPQUFPO0VBQ1gsTUFBTXVCLEtBQUE\
              sR0FBUXZCLFNBQUEsR0FBWXNCLFlBQUE7RUFDMUIsTUFBTUUsTUFBQSxHQUFTckMs\
              R0FBQSxDQUFJak4sTUFBQTtFQUNuQixJQUFJc1AsTUFBQSxJQUFVRCxLQUFBO0VBQ\
              1YsT0FBTztFQUNYLFNBQVN2UCxDQUFBLEdBQUksR0FBR2lQLEtBQUEsR0FBUSxHQU\
              FHalAsQ0FBQSxHQUFJd1AsTUFBQSxFQUFRLEVBQUV4UCxDQUFBLEVBQUc7SUFDeEM\
              sSUFBSW1OLEdBQUEsQ0FBSW5OLENBQUMsTUFBTSxNQUFNO01BQ2pCLElBQUlBLENB\
              QUEsR0FBSWlQLEtBQUEsR0FBUU0sS0FBQTtNQUNaLE9BQU87TUFDWE4sS0FBQSxHQ\
              UFRalAsQ0FBQSxHQUFJO01BQ1osSUFBSXdQLE1BQUEsR0FBU1AsS0FBQSxJQUFTTS\
              xLQUFBO01BQ2xCLE9BQU87SUFDZjtFQUNKO0VBQ0EsT0FBTztBQUNYO0FBQ0EsU0F\
              BU0UsbUJBQW1CbFAsS0FBQSxFQUFPOEcsR0FBQSxFQUFLO0VBQ3BDLE1BQU1xSSxJ\
              QUFBLEdBQU9ySyxJQUFBLENBQUt0SCxTQUFBLENBQVV3QyxLQUFLO0VBQ2pDLElBQ\
              Uk4RyxHQUFBLENBQUkrQixPQUFBLENBQVF1RyxrQkFBQTtFQUNaLE9BQU9ELElBQU\
              E7RUFDWCxNQUFNLEVBQUVwRyxXQUFBLENBQVksSUFBSWpDLEdBQUE7RUFDeEIsTUF\
              BTXVJLGtCQUFBLEdBQXFCdkksR0FBQSxDQUFJK0IsT0FBQSxDQUFReUcsOEJBQUE7\
              RUFDdkMsTUFBTXhDLE1BQUEsR0FBU2hHLEdBQUEsQ0FBSWdHLE1BQUEsS0FBVytCL\
              HNCQUFBLENBQXVCN08sS0FBSyxJQUFJLE9BQU87RUFDckUsSUFBSTRNLEdBQUEsR0\
              FBTTtFQUNWLElBQUk4QixLQUFBLEdBQVE7RUFDWixTQUFTalAsQ0FBQSxHQUFJLEd\
              BQUc2QixFQUFBLEdBQUs2TixJQUFBLENBQUsxUCxDQUFDLEdBQUc2QixFQUFBLEVB\
              QUlBLEVBQUEsR0FBSzZOLElBQUEsQ0FBSyxFQUFFMVAsQ0FBQyxHQUFHO0lBQzlDL\
              ElBQUk2QixFQUFBLEtBQU8sT0FBTzZOLElBQUEsQ0FBSzFQLENBQUEsR0FBSSxDQU\
              FDLE1BQU0sUUFBUTBQLElBQUEsQ0FBSzFQLENBQUEsR0FBSSxDQUFDLE1BQU0sS0F\
              BSztNQUUzRG1OLEdBQUEsSUFBT3VDLElBQUEsQ0FBSzdMLEtBQUEsQ0FBTW9MLEtB\
              QUEsRUFBT2pQLENBQUMsSUFBSTtNQUM5QkEsQ0FBQSxJQUFLO01BQ0xpUCxLQUFBL\
              EdBQVFqUCxDQUFBO01BQ1I2QixFQUFBLEdBQUs7SUFDVDtJQUNBLElBQUlBLEVBQU\
              EsS0FBTztJQUNQLFFBQVE2TixJQUFBLENBQUsxUCxDQUFBLEdBQUksQ0FBQztNQUN\
              kLEtBQUs7UUFDRDtVQUNJbU4sR0FBQSxJQUFPdUMsSUFBQSxDQUFLN0wsS0FBQSxD\
              QUFNb0wsS0FBQSxFQUFPalAsQ0FBQztVQUMxQixNQUFNOFAsSUFBQSxHQUFPSixJQ\
              UFBLENBQUtLLE1BQUEsQ0FBTy9QLENBQUEsR0FBSSxHQUFHLENBQUM7VUFDakMsUU\
              FBUThQLElBQUE7WUFDSixLQUFLO2NBQ0QzQyxHQUFBLElBQU87Y0FDUDtZQUNKLEt\
              BQUs7Y0FDREEsR0FBQSxJQUFPO2NBQ1A7WUFDSixLQUFLO2NBQ0RBLEdBQUEsSUFB\
              TztjQUNQO1lBQ0osS0FBSztjQUNEQSxHQUFBLElBQU87Y0FDUDtZQUNKLEtBQUs7Y\
              0FDREEsR0FBQSxJQUFPO2NBQ1A7WUFDSixLQUFLO2NBQ0RBLEdBQUEsSUFBTztjQU\
              NQO1lBQ0osS0FBSztjQUNEQSxHQUFBLElBQU87Y0FDUDtZQUNKLEtBQUs7Y0FDREE\
              sR0FBQSxJQUFPO2NBQ1A7WUFDSjtjQUNJLElBQUkyQyxJQUFBLENBQUtDLE1BQUEs\
              Q0FBTyxHQUFHLENBQUMsTUFBTTtjQUN0QjVDLEdBQUEsSUFBTyxRQUFRMkMsSUFBQ\
              SxDQUFLQyxNQUFBLENBQU8sQ0FBQzs7Y0FFNUI1QyxHQUFBLElBQU91QyxJQUFBLE\
              NBQUtLLE1BQUEsQ0FBTy9QLENBQUEsRUFBRyxDQUFDO1VBQ25DO1VBQ0FBLENBQUE\
              sSUFBSztVQUNMaVAsS0FBQSxHQUFRalAsQ0FBQSxHQUFJO1FBQ2hCO1FBQ0E7TUFD\
              SixLQUFLO1FBQ0QsSUFBSXNKLFdBQUEsSUFDQW9HLElBQUEsQ0FBSzFQLENBQUEsR\
              0FBSSxDQUFDLE1BQU0sT0FDaEIwUCxJQUFBLENBQUt4UCxNQUFBLEdBQVMwUCxrQk\
              FBQSxFQUFvQjtVQUNsQzVQLENBQUEsSUFBSztRQUNULE9BQ0s7VUFFRG1OLEdBQUE\
              sSUFBT3VDLElBQUEsQ0FBSzdMLEtBQUEsQ0FBTW9MLEtBQUEsRUFBT2pQLENBQUMs\
              SUFBSTtVQUM5QixPQUFPMFAsSUFBQSxDQUFLMVAsQ0FBQSxHQUFJLENBQUMsTUFBT\
              SxRQUNuQjBQLElBQUEsQ0FBSzFQLENBQUEsR0FBSSxDQUFDLE1BQU0sT0FDaEIwUC\
              xJQUFBLENBQUsxUCxDQUFBLEdBQUksQ0FBQyxNQUFNLEtBQUs7WUFDckJtTixHQUF\
              BLElBQU87WUFDUG5OLENBQUEsSUFBSztVQUNUO1VBQ0FtTixHQUFBLElBQU9FLE1B\
              QUE7VUFFUCxJQUFJcUMsSUFBQSxDQUFLMVAsQ0FBQSxHQUFJLENBQUMsTUFBTTtVQ\
              UNoQm1OLEdBQUEsSUFBTztVQUNYbk4sQ0FBQSxJQUFLO1VBQ0xpUCxLQUFBLEdBQV\
              FqUCxDQUFBLEdBQUk7UUFDaEI7UUFDQTtNQUNKO1FBQ0lBLENBQUEsSUFBSztJQUN\
              iO0VBQ1I7RUFDQW1OLEdBQUEsR0FBTThCLEtBQUEsR0FBUTlCLEdBQUEsR0FBTXVD\
              LElBQUEsQ0FBSzdMLEtBQUEsQ0FBTW9MLEtBQUssSUFBSVMsSUFBQTtFQUN4QyxPQ\
              UFPcEcsV0FBQSxHQUNENkQsR0FBQSxHQUNBUyxhQUFBLENBQWNULEdBQUEsRUFBS0\
              UsTUFBQSxFQUFRTSxXQUFBLEVBQWF1QixjQUFBLENBQWU3SCxHQUFBLEVBQUssS0F\
              BSyxDQUFDO0FBQzVFO0FBQ0EsU0FBUzJJLG1CQUFtQnpQLEtBQUEsRUFBTzhHLEdB\
              QUEsRUFBSztFQUNwQyxJQUFJQSxHQUFBLENBQUkrQixPQUFBLENBQVE2RyxXQUFBL\
              EtBQWdCLFNBQzNCNUksR0FBQSxDQUFJaUMsV0FBQSxJQUFlL0ksS0FBQSxDQUFNaU\
              4sUUFBQSxDQUFTLElBQUksS0FDdkMsa0JBQWtCL0osSUFBQSxDQUFLbEQsS0FBSzt\
              FQUU1QixPQUFPa1Asa0JBQUEsQ0FBbUJsUCxLQUFBLEVBQU84RyxHQUFHO0VBQ3hD\
              LE1BQU1nRyxNQUFBLEdBQVNoRyxHQUFBLENBQUlnRyxNQUFBLEtBQVcrQixzQkFBQ\
              SxDQUF1QjdPLEtBQUssSUFBSSxPQUFPO0VBQ3JFLE1BQU1tQyxHQUFBLEdBQU0sTU\
              FBTW5DLEtBQUEsQ0FBTXFCLE9BQUEsQ0FBUSxNQUFNLElBQUksRUFBRUEsT0FBQSx\
              DQUFRLFFBQVE7QUFBQSxFQUFPeUwsTUFBTSxFQUFFLElBQUk7RUFDL0UsT0FBT2hH\
              LEdBQUEsQ0FBSWlDLFdBQUEsR0FDTDVHLEdBQUEsR0FDQWtMLGFBQUEsQ0FBY2xML\
              EdBQUEsRUFBSzJLLE1BQUEsRUFBUUksU0FBQSxFQUFXeUIsY0FBQSxDQUFlN0gsR0\
              FBQSxFQUFLLEtBQUssQ0FBQztBQUMxRTtBQUNBLFNBQVM2SSxhQUFhM1AsS0FBQSx\
              FQUFPOEcsR0FBQSxFQUFLO0VBQzlCLE1BQU0sRUFBRTRJLFdBQUEsQ0FBWSxJQUFJ\
              NUksR0FBQSxDQUFJK0IsT0FBQTtFQUM1QixJQUFJK0csRUFBQTtFQUNKLElBQUlGL\
              FdBQUEsS0FBZ0I7RUFDaEJFLEVBQUEsR0FBS1Ysa0JBQUE7RUFDSjtJQUNELE1BQU\
              1XLFNBQUEsR0FBWTdQLEtBQUEsQ0FBTWlOLFFBQUEsQ0FBUyxHQUFHO0lBQ3BDLE1\
              BQU02QyxTQUFBLEdBQVk5UCxLQUFBLENBQU1pTixRQUFBLENBQVMsR0FBRztJQUNw\
              QyxJQUFJNEMsU0FBQSxJQUFhLENBQUNDLFNBQUE7SUFDZEYsRUFBQSxHQUFLSCxrQ\
              kFBQTtJQUFBLElBQ0FLLFNBQUEsSUFBYSxDQUFDRCxTQUFBO0lBQ25CRCxFQUFBLE\
              dBQUtWLGtCQUFBOztJQUVMVSxFQUFBLEdBQUtGLFdBQUEsR0FBY0Qsa0JBQUEsR0F\
              BcUJQLGtCQUFBO0VBQ2hEO0VBQ0EsT0FBT1UsRUFBQSxDQUFHNVAsS0FBQSxFQUFP\
              OEcsR0FBRztBQUN4QjtBQUdBLElBQUlpSixnQkFBQTtBQUNKLElBQUk7RUFDQUEsZ\
              0JBQUEsR0FBbUIsSUFBSXRNLE1BQUEsQ0FBTywwQkFBMEIsR0FBRztBQUMvRCxTQU\
              NNdU0sQ0FBQTtFQUNGRCxnQkFBQSxHQUFtQjtBQUN2QjtBQUNBLFNBQVNFLFlBQVk\
              sRUFBRTFELE9BQUEsRUFBUzdFLElBQUEsRUFBTTFILEtBQUEsQ0FBTSxHQUFHOEcs\
              R0FBQSxFQUFLb0osU0FBQSxFQUFXQyxXQUFBLEVBQWE7RUFDeEUsTUFBTSxFQUFFQ\
              yxVQUFBLEVBQVlDLGFBQUEsRUFBZTVDLFNBQUEsQ0FBVSxJQUFJM0csR0FBQSxDQU\
              FJK0IsT0FBQTtFQUdyRCxJQUFJLENBQUN1SCxVQUFBLElBQWMsWUFBWWxOLElBQUE\
              sQ0FBS2xELEtBQUssS0FBSyxRQUFRa0QsSUFBQSxDQUFLbEQsS0FBSyxHQUFHO0lB\
              Qy9ELE9BQU8yUCxZQUFBLENBQWEzUCxLQUFBLEVBQU84RyxHQUFHO0VBQ2xDO0VBQ\
              0EsTUFBTWdHLE1BQUEsR0FBU2hHLEdBQUEsQ0FBSWdHLE1BQUEsS0FDZGhHLEdBQU\
              EsQ0FBSXdKLGdCQUFBLElBQW9CekIsc0JBQUEsQ0FBdUI3TyxLQUFLLElBQUksT0F\
              BTztFQUNwRSxNQUFNdVEsT0FBQSxHQUFVSCxVQUFBLEtBQWUsWUFDekIsT0FDQUEs\
              VUFBQSxLQUFlLFlBQVkxSSxJQUFBLEtBQVNwTCxNQUFBLENBQU9pTixZQUFBLEdBQ\
              3ZDLFFBQ0E3QixJQUFBLEtBQVNwTCxNQUFBLENBQU9rTixhQUFBLEdBQ1osT0FDQS\
              xDQUFDc0YsbUJBQUEsQ0FBb0I5TyxLQUFBLEVBQU95TixTQUFBLEVBQVdYLE1BQUE\
              sQ0FBT25OLE1BQU07RUFDbEUsSUFBSSxDQUFDSyxLQUFBO0VBQ0QsT0FBT3VRLE9B\
              QUEsR0FBVSxRQUFRO0VBRTdCLElBQUlDLEtBQUE7RUFDSixJQUFJQyxRQUFBO0VBQ\
              0osS0FBS0EsUUFBQSxHQUFXelEsS0FBQSxDQUFNTCxNQUFBLEVBQVE4USxRQUFBLE\
              dBQVcsR0FBRyxFQUFFQSxRQUFBLEVBQVU7SUFDcEQsTUFBTW5QLEVBQUEsR0FBS3R\
              CLEtBQUEsQ0FBTXlRLFFBQUEsR0FBVyxDQUFDO0lBQzdCLElBQUluUCxFQUFBLEtB\
              QU8sUUFBUUEsRUFBQSxLQUFPLE9BQVFBLEVBQUEsS0FBTztJQUNyQztFQUNSO0VBQ\
              0EsSUFBSTBNLEdBQUEsR0FBTWhPLEtBQUEsQ0FBTWlFLFNBQUEsQ0FBVXdNLFFBQV\
              E7RUFDbEMsTUFBTUMsUUFBQSxHQUFXMUMsR0FBQSxDQUFJMkMsT0FBQSxDQUFRLEl\
              BQUk7RUFDakMsSUFBSUQsUUFBQSxLQUFhLElBQUk7SUFDakJGLEtBQUEsR0FBUTtF\
              QUNaLFdBQ1N4USxLQUFBLEtBQVVnTyxHQUFBLElBQU8wQyxRQUFBLEtBQWExQyxHQ\
              UFBLENBQUlyTyxNQUFBLEdBQVMsR0FBRztJQUNuRDZRLEtBQUEsR0FBUTtJQUNSLE\
              lBQUlMLFdBQUE7SUFDQUEsV0FBQSxDQUFZO0VBQ3BCLE9BQ0s7SUFDREssS0FBQSx\
              HQUFRO0VBQ1o7RUFDQSxJQUFJeEMsR0FBQSxFQUFLO0lBQ0xoTyxLQUFBLEdBQVFB\
              LEtBQUEsQ0FBTXNELEtBQUEsQ0FBTSxHQUFHLENBQUMwSyxHQUFBLENBQUlyTyxNQ\
              UFNO0lBQ2xDLElBQUlxTyxHQUFBLENBQUlBLEdBQUEsQ0FBSXJPLE1BQUEsR0FBUy\
              xDQUFDLE1BQU07SUFDeEJxTyxHQUFBLEdBQU1BLEdBQUEsQ0FBSTFLLEtBQUEsQ0F\
              BTSxHQUFHLEVBQUU7SUFDekIwSyxHQUFBLEdBQU1BLEdBQUEsQ0FBSTNNLE9BQUEs\
              Q0FBUTBPLGdCQUFBLEVBQWtCLEtBQUtqRCxNQUFNLEVBQUU7RUFDckQ7RUFFQSxJQ\
              UFJOEQsY0FBQSxHQUFpQjtFQUNyQixJQUFJQyxRQUFBO0VBQ0osSUFBSUMsVUFBQS\
              xHQUFhO0VBQ2pCLEtBQUtELFFBQUEsR0FBVyxHQUFHQSxRQUFBLEdBQVc3USxLQUF\
              BLENBQU1MLE1BQUEsRUFBUSxFQUFFa1IsUUFBQSxFQUFVO0lBQ3BELE1BQU12UCxF\
              QUFBLEdBQUt0QixLQUFBLENBQU02USxRQUFRO0lBQ3pCLElBQUl2UCxFQUFBLEtBQ\
              U87SUFDUHNQLGNBQUEsR0FBaUI7SUFBQSxJQUNadFAsRUFBQSxLQUFPO0lBQ1p3UC\
              xVQUFBLEdBQWFELFFBQUE7O0lBRWI7RUFDUjtFQUNBLElBQUluQyxLQUFBLEdBQVE\
              xTyxLQUFBLENBQU1pRSxTQUFBLENBQVUsR0FBRzZNLFVBQUEsR0FBYUQsUUFBQSxH\
              QUFXQyxVQUFBLEdBQWEsSUFBSUQsUUFBUTtFQUNoRixJQUFJbkMsS0FBQSxFQUFPO\
              0lBQ1AxTyxLQUFBLEdBQVFBLEtBQUEsQ0FBTWlFLFNBQUEsQ0FBVXlLLEtBQUEsQ0\
              FBTS9PLE1BQU07SUFDcEMrTyxLQUFBLEdBQVFBLEtBQUEsQ0FBTXJOLE9BQUEsQ0F\
              BUSxRQUFRLEtBQUt5TCxNQUFNLEVBQUU7RUFDL0M7RUFDQSxNQUFNaUUsVUFBQSxH\
              QUFhakUsTUFBQSxHQUFTLE1BQU07RUFDbEMsSUFBSWtFLE1BQUEsSUFBVVQsT0FBQ\
              SxHQUFVLE1BQU0sUUFBUUssY0FBQSxHQUFpQkcsVUFBQSxHQUFhLE1BQU1QLEtBQU\
              E7RUFDMUUsSUFBSWpFLE9BQUEsRUFBUztJQUNUeUUsTUFBQSxJQUFVLE1BQU1YLGF\
              BQUEsQ0FBYzlELE9BQUEsQ0FBUWxMLE9BQUEsQ0FBUSxjQUFjLEdBQUcsQ0FBQztJ\
              QUNoRSxJQUFJNk8sU0FBQTtJQUNBQSxTQUFBLENBQVU7RUFDbEI7RUFDQSxJQUFJS\
              yxPQUFBLEVBQVM7SUFDVHZRLEtBQUEsR0FBUUEsS0FBQSxDQUFNcUIsT0FBQSxDQU\
              FRLFFBQVEsS0FBS3lMLE1BQU0sRUFBRTtJQUMzQyxPQUFPLEdBQUdrRSxNQUFNO0F\
              BQUEsRUFBS2xFLE1BQU0sR0FBRzRCLEtBQUssR0FBRzFPLEtBQUssR0FBR2dPLEdB\
              QUc7RUFDckQ7RUFDQWhPLEtBQUEsR0FBUUEsS0FBQSxDQUNIcUIsT0FBQSxDQUFRL\
              FFBQVEsTUFBTSxFQUN0QkEsT0FBQSxDQUFRLGtEQUFrRCxNQUFNLEVBRWhFQSxPQU\
              FBLENBQVEsUUFBUSxLQUFLeUwsTUFBTSxFQUFFO0VBQ2xDLE1BQU1tRSxJQUFBLEd\
              BQU81RCxhQUFBLENBQWMsR0FBR3FCLEtBQUssR0FBRzFPLEtBQUssR0FBR2dPLEdB\
              QUcsSUFBSWxCLE1BQUEsRUFBUUssVUFBQSxFQUFZd0IsY0FBQSxDQUFlN0gsR0FBQ\
              SxFQUFLLElBQUksQ0FBQztFQUNsRyxPQUFPLEdBQUdrSyxNQUFNO0FBQUEsRUFBS2\
              xFLE1BQU0sR0FBR21FLElBQUk7QUFDdEM7QUFDQSxTQUFTQyxZQUFZbEksSUFBQSx\
              FQUFNbEMsR0FBQSxFQUFLb0osU0FBQSxFQUFXQyxXQUFBLEVBQWE7RUFDcEQsTUFB\
              TSxFQUFFekksSUFBQSxFQUFNMUgsS0FBQSxDQUFNLElBQUlnSixJQUFBO0VBQ3hCL\
              E1BQU0sRUFBRW1JLFlBQUEsRUFBY3BJLFdBQUEsRUFBYStELE1BQUEsRUFBUXNFLF\
              VBQUEsRUFBWUMsTUFBQSxDQUFPLElBQUl2SyxHQUFBO0VBQ2xFLElBQUtpQyxXQUF\
              BLElBQWUvSSxLQUFBLENBQU1pTixRQUFBLENBQVMsSUFBSSxLQUNsQ29FLE1BQUEs\
              SUFBVSxXQUFXbk8sSUFBQSxDQUFLbEQsS0FBSyxHQUFJO0lBQ3BDLE9BQU8yUCxZQ\
              UFBLENBQWEzUCxLQUFBLEVBQU84RyxHQUFHO0VBQ2xDO0VBQ0EsSUFBSSxDQUFDOU\
              csS0FBQSxJQUNELG9GQUFvRmtELElBQUEsQ0FBS2xELEtBQUssR0FBRztJQU9qRyx\
              PQUFPK0ksV0FBQSxJQUFlc0ksTUFBQSxJQUFVLENBQUNyUixLQUFBLENBQU1pTixR\
              QUFBLENBQVMsSUFBSSxJQUM5QzBDLFlBQUEsQ0FBYTNQLEtBQUEsRUFBTzhHLEdBQ\
              UcsSUFDdkJtSixXQUFBLENBQVlqSCxJQUFBLEVBQU1sQyxHQUFBLEVBQUtvSixTQU\
              FBLEVBQVdDLFdBQVc7RUFDdkQ7RUFDQSxJQUFJLENBQUNwSCxXQUFBLElBQ0QsQ0F\
              BQ3NJLE1BQUEsSUFDRDNKLElBQUEsS0FBU3BMLE1BQUEsQ0FBT21OLEtBQUEsSUFD\
              aEJ6SixLQUFBLENBQU1pTixRQUFBLENBQVMsSUFBSSxHQUFHO0lBRXRCLE9BQU9nR\
              CxXQUFBLENBQVlqSCxJQUFBLEVBQU1sQyxHQUFBLEVBQUtvSixTQUFBLEVBQVdDLF\
              dBQVc7RUFDeEQ7RUFDQSxJQUFJdEIsc0JBQUEsQ0FBdUI3TyxLQUFLLEdBQUc7SUF\
              DL0IsSUFBSThNLE1BQUEsS0FBVyxJQUFJO01BQ2ZoRyxHQUFBLENBQUl3SixnQkFB\
              QSxHQUFtQjtNQUN2QixPQUFPTCxXQUFBLENBQVlqSCxJQUFBLEVBQU1sQyxHQUFBL\
              EVBQUtvSixTQUFBLEVBQVdDLFdBQVc7SUFDeEQsV0FDU3BILFdBQUEsSUFBZStELE\
              1BQUEsS0FBV3NFLFVBQUEsRUFBWTtNQUMzQyxPQUFPekIsWUFBQSxDQUFhM1AsS0F\
              BQSxFQUFPOEcsR0FBRztJQUNsQztFQUNKO0VBQ0EsTUFBTThGLEdBQUEsR0FBTTVN\
              LEtBQUEsQ0FBTXFCLE9BQUEsQ0FBUSxRQUFRO0FBQUEsRUFBT3lMLE1BQU0sRUFBR\
              TtFQUlqRCxJQUFJcUUsWUFBQSxFQUFjO0lBQ2QsTUFBTWpPLElBQUEsR0FBT0EsQ0\
              FBQ1ksR0FBQSxLQUFLO01BdlIzQixJQUFBckQsRUFBQTtNQXVSOEIsT0FBQXFELEd\
              BQUEsQ0FBSW1ILE9BQUEsSUFBV25ILEdBQUEsQ0FBSUEsR0FBQSxLQUFRLDZCQUEy\
              QnJELEVBQUEsR0FBQXFELEdBQUEsQ0FBSVosSUFBQSxLQUFKLGdCQUFBekMsRUFBQ\
              SxDQUFVeUMsSUFBQSxDQUFLMEosR0FBQTtJQUFBO0lBQzNGLE1BQU0sRUFBRTBFLE\
              1BQUEsRUFBUTNQLElBQUEsQ0FBSyxJQUFJbUYsR0FBQSxDQUFJM0MsR0FBQSxDQUF\
              Jb0csTUFBQTtJQUNqQyxJQUFJNUksSUFBQSxDQUFLOEMsSUFBQSxDQUFLdkIsSUFB\
              SSxNQUFLb08sTUFBQSxvQkFBQUEsTUFBQSxDQUFRN00sSUFBQSxDQUFLdkIsSUFBQ\
              TtJQUNoQyxPQUFPeU0sWUFBQSxDQUFhM1AsS0FBQSxFQUFPOEcsR0FBRztFQUN0Qz\
              tFQUNBLE9BQU9pQyxXQUFBLEdBQ0Q2RCxHQUFBLEdBQ0FTLGFBQUEsQ0FBY1QsR0F\
              BQSxFQUFLRSxNQUFBLEVBQVFJLFNBQUEsRUFBV3lCLGNBQUEsQ0FBZTdILEdBQUEs\
              RUFBSyxLQUFLLENBQUM7QUFDMUU7QUFDQSxTQUFTeUssZ0JBQWdCdkksSUFBQSxFQ\
              UFNbEMsR0FBQSxFQUFLb0osU0FBQSxFQUFXQyxXQUFBLEVBQWE7RUFDeEQsTUFBTS\
              xFQUFFcEgsV0FBQSxFQUFhc0ksTUFBQSxDQUFPLElBQUl2SyxHQUFBO0VBQ2hDLE1\
              BQU0wSyxFQUFBLEdBQUssT0FBT3hJLElBQUEsQ0FBS2hKLEtBQUEsS0FBVSxXQUMz\
              QmdKLElBQUEsR0FDQS9KLE1BQUEsQ0FBT3FCLE1BQUEsQ0FBTyxDQUFDLEdBQUcwS\
              SxJQUFBLEVBQU0sRUFBRWhKLEtBQUEsRUFBTzRELE1BQUEsQ0FBT29GLElBQUEsQ0\
              FBS2hKLEtBQUssRUFBRSxDQUFDO0VBQzNELElBQUksRUFBRTBILElBQUEsQ0FBSyx\
              JQUFJc0IsSUFBQTtFQUNmLElBQUl0QixJQUFBLEtBQVNwTCxNQUFBLENBQU9vTixZ\
              QUFBLEVBQWM7SUFFOUIsSUFBSSxrREFBa0R4RyxJQUFBLENBQUtzTyxFQUFBLENBQ\
              Ud4UixLQUFLO0lBQy9EMEgsSUFBQSxHQUFPcEwsTUFBQSxDQUFPb04sWUFBQTtFQU\
              N0QjtFQUNBLE1BQU0rSCxVQUFBLEdBQWFBLENBQUNDLEtBQUEsS0FBVTtJQUMxQix\
              RQUFRQSxLQUFBO01BQ0osS0FBS3BWLE1BQUEsQ0FBT2lOLFlBQUE7TUFDWixLQUFL\
              ak4sTUFBQSxDQUFPa04sYUFBQTtRQUNSLE9BQU9ULFdBQUEsSUFBZXNJLE1BQUEsR\
              0FDaEIxQixZQUFBLENBQWE2QixFQUFBLENBQUd4UixLQUFBLEVBQU84RyxHQUFHLE\
              lBQzFCbUosV0FBQSxDQUFZdUIsRUFBQSxFQUFJMUssR0FBQSxFQUFLb0osU0FBQSx\
              FQUFXQyxXQUFXO01BQ3JELEtBQUs3VCxNQUFBLENBQU9vTixZQUFBO1FBQ1IsT0FB\
              T3dGLGtCQUFBLENBQW1Cc0MsRUFBQSxDQUFHeFIsS0FBQSxFQUFPOEcsR0FBRztNQ\
              UMzQyxLQUFLeEssTUFBQSxDQUFPcU4sWUFBQTtRQUNSLE9BQU84RixrQkFBQSxDQU\
              FtQitCLEVBQUEsQ0FBR3hSLEtBQUEsRUFBTzhHLEdBQUc7TUFDM0MsS0FBS3hLLE1\
              BQUEsQ0FBT21OLEtBQUE7UUFDUixPQUFPeUgsV0FBQSxDQUFZTSxFQUFBLEVBQUkx\
              SyxHQUFBLEVBQUtvSixTQUFBLEVBQVdDLFdBQVc7TUFDdEQ7UUFDSSxPQUFPO0lBQ\
              2Y7RUFDSjtFQUNBLElBQUloTyxHQUFBLEdBQU1zUCxVQUFBLENBQVcvSixJQUFJO0\
              VBQ3pCLElBQUl2RixHQUFBLEtBQVEsTUFBTTtJQUNkLE1BQU0sRUFBRXdQLGNBQUE\
              sRUFBZ0JDLGlCQUFBLENBQWtCLElBQUk5SyxHQUFBLENBQUkrQixPQUFBO0lBQ2xE\
              LE1BQU1rQixDQUFBLEdBQUtoQixXQUFBLElBQWU0SSxjQUFBLElBQW1CQyxpQkFBQ\
              TtJQUM3Q3pQLEdBQUEsR0FBTXNQLFVBQUEsQ0FBVzFILENBQUM7SUFDbEIsSUFBST\
              VILEdBQUEsS0FBUTtJQUNSLE1BQU0sSUFBSWxCLEtBQUEsQ0FBTSxtQ0FBbUM4SSx\
              DQUFDLEVBQUU7RUFDOUQ7RUFDQSxPQUFPNUgsR0FBQTtBQUNYOzs7QUNoVUEsU0FB\
              UzBQLHVCQUF1QjFOLEdBQUEsRUFBSzBFLE9BQUEsRUFBUztFQUMxQyxNQUFNaUosR\
              0FBQSxHQUFNN1MsTUFBQSxDQUFPcUIsTUFBQSxDQUFPO0lBQ3RCOFAsVUFBQSxFQU\
              FZO0lBQ1pDLGFBQUEsRUFBZTFELGdCQUFBO0lBQ2ZnRixjQUFBLEVBQWdCO0lBQ2h\
              CQyxpQkFBQSxFQUFtQjtJQUNuQkcsVUFBQSxFQUFZO0lBQ1ozQyxrQkFBQSxFQUFv\
              QjtJQUNwQkUsOEJBQUEsRUFBZ0M7SUFDaEMwQyxRQUFBLEVBQVU7SUFDVkMscUJBQ\
              UEsRUFBdUI7SUFDdkJDLFNBQUEsRUFBVztJQUNYekUsU0FBQSxFQUFXO0lBQ1hDLG\
              VBQUEsRUFBaUI7SUFDakJ5RSxPQUFBLEVBQVM7SUFDVEMsVUFBQSxFQUFZO0lBQ1o\
              xQyxXQUFBLEVBQWE7SUFDYjJDLE9BQUEsRUFBUztJQUNUdkosZ0JBQUEsRUFBa0I7\
              RUFDdEIsR0FBRzNFLEdBQUEsQ0FBSW9HLE1BQUEsQ0FBTytILGVBQUEsRUFBaUJ6S\
              ixPQUFPO0VBQ3RDLElBQUl3SSxNQUFBO0VBQ0osUUFBUVMsR0FBQSxDQUFJUyxlQU\
              FBO0lBQ1IsS0FBSztNQUNEbEIsTUFBQSxHQUFTO01BQ1Q7SUFDSixLQUFLO01BQ0R\
              BLE1BQUEsR0FBUztNQUNUO0lBQ0o7TUFDSUEsTUFBQSxHQUFTO0VBQ2pCO0VBQ0Es\
              T0FBTztJQUNIbk0sT0FBQSxFQUFTLG1CQUFJQyxHQUFBLENBQUk7SUFDakJoQixHQ\
              UFBO0lBQ0E4TixxQkFBQSxFQUF1QkgsR0FBQSxDQUFJRyxxQkFBQSxHQUF3QixNQU\
              FNO0lBQ3pEbkYsTUFBQSxFQUFRO0lBQ1JzRSxVQUFBLEVBQVksT0FBT1UsR0FBQSx\
              DQUFJaEYsTUFBQSxLQUFXLFdBQVcsSUFBSTBGLE1BQUEsQ0FBT1YsR0FBQSxDQUFJ\
              aEYsTUFBTSxJQUFJO0lBQ3RFdUUsTUFBQTtJQUNBeEksT0FBQSxFQUFTaUo7RUFDY\
              jtBQUNKO0FBQ0EsU0FBU1csYUFBYTlRLElBQUEsRUFBTXFILElBQUEsRUFBTTtFQT\
              lDbEMsSUFBQXZJLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUE\
              7RUErQ0ksSUFBSW9JLElBQUEsQ0FBS2xGLEdBQUEsRUFBSztJQUNWLE1BQU1OLEtB\
              QUEsR0FBUTdCLElBQUEsQ0FBS21JLE1BQUEsQ0FBTyxDQUFBQyxDQUFBLEtBQUtBL\
              ENBQUEsQ0FBRWpHLEdBQUEsS0FBUWtGLElBQUEsQ0FBS2xGLEdBQUc7SUFDakQsSU\
              FBSU4sS0FBQSxDQUFNN0QsTUFBQSxHQUFTO0lBQ2YsUUFBT2MsRUFBQSxHQUFBK0M\
              sS0FBQSxDQUFNeUcsSUFBQSxDQUFLLENBQUFGLENBQUEsS0FBS0EsQ0FBQSxDQUFF\
              RyxNQUFBLEtBQVdsQixJQUFBLENBQUtrQixNQUFNLE1BQXhDLE9BQUF6SixFQUFBL\
              EdBQTZDK0MsS0FBQSxDQUFNLENBQUM7RUFDbkU7RUFDQSxJQUFJd0csTUFBQSxHQU\
              FTO0VBQ2IsSUFBSS9ELEdBQUE7RUFDSixJQUFJOUksUUFBQSxDQUFTNkwsSUFBSSx\
              HQUFHO0lBQ2hCL0MsR0FBQSxHQUFNK0MsSUFBQSxDQUFLaEosS0FBQTtJQUNYLE1B\
              QU13RCxLQUFBLEdBQVE3QixJQUFBLENBQUttSSxNQUFBLENBQU8sQ0FBQUMsQ0FBQ\
              SxLQUFFO01BeERwQyxJQUFBSSxHQUFBO01Bd0R1QyxRQUFBQSxHQUFBLEdBQUFKLE\
              NBQUEsQ0FBRUssUUFBQSxLQUFGLGdCQUFBRCxHQUFBLENBQUFySixJQUFBLENBQUF\
              pSixDQUFBLEVBQWE5RCxHQUFBO0lBQUEsQ0FBSTtJQUNoRCtELE1BQUEsSUFDSXRK\
              LEVBQUEsR0FBQThDLEtBQUEsQ0FBTXlHLElBQUEsQ0FBSyxDQUFBRixDQUFBLEtBQ\
              UtBLENBQUEsQ0FBRUcsTUFBQSxLQUFXbEIsSUFBQSxDQUFLa0IsTUFBTSxNQUF4Qy\
              xPQUFBeEosRUFBQSxHQUE2QzhDLEtBQUEsQ0FBTXlHLElBQUEsQ0FBSyxDQUFBRix\
              DQUFBLEtBQUssQ0FBQ0EsQ0FBQSxDQUFFRyxNQUFNO0VBQzlFLE9BQ0s7SUFDRGpF\
              LEdBQUEsR0FBTStDLElBQUE7SUFDTmdCLE1BQUEsR0FBU3JJLElBQUEsQ0FBS3NJL\
              ElBQUEsQ0FBSyxDQUFBRixDQUFBLEtBQUtBLENBQUEsQ0FBRWlCLFNBQUEsSUFBYS\
              9FLEdBQUEsWUFBZThELENBQUEsQ0FBRWlCLFNBQVM7RUFDckU7RUFDQSxJQUFJLEN\
              BQUNoQixNQUFBLEVBQVE7SUFDVCxNQUFNbkgsSUFBQSxJQUFPakMsRUFBQSxJQUFB\
              RCxFQUFBLEdBQUFzRixHQUFBLG9CQUFBQSxHQUFBLENBQUt4RSxXQUFBLEtBQUwsZ\
              0JBQUFkLEVBQUEsQ0FBa0JrQyxJQUFBLEtBQWxCLE9BQUFqQyxFQUFBLEdBQTBCLE\
              9BQU9xRixHQUFBO0lBQzlDLE1BQU0sSUFBSWhGLEtBQUEsQ0FBTSx3QkFBd0I0Qix\
              JQUFJLFFBQVE7RUFDeEQ7RUFDQSxPQUFPbUgsTUFBQTtBQUNYO0FBRUEsU0FBUzBJ\
              LGVBQWVyVSxJQUFBLEVBQU0yTCxNQUFBLEVBQVEsRUFBRTlFLE9BQUEsRUFBU2YsR\
              0FBQSxDQUFJLEdBQUc7RUFDcEQsSUFBSSxDQUFDQSxHQUFBLENBQUk0TixVQUFBO0\
              VBQ0wsT0FBTztFQUNYLE1BQU1ZLEtBQUEsR0FBUSxFQUFDO0VBQ2YsTUFBTXBVLE1\
              BQUEsSUFBVXBCLFFBQUEsQ0FBU2tCLElBQUksS0FBS3ZCLFlBQUEsQ0FBYXVCLElB\
              QUksTUFBTUEsSUFBQSxDQUFLRSxNQUFBO0VBQzlELElBQUlBLE1BQUEsSUFBVXFHL\
              GFBQUEsQ0FBY3JHLE1BQU0sR0FBRztJQUNqQzJHLE9BQUEsQ0FBUTNDLEdBQUEsQ0\
              FBSWhFLE1BQU07SUFDbEJvVSxLQUFBLENBQU1qTyxJQUFBLENBQUssSUFBSW5HLE1\
              BQU0sRUFBRTtFQUMzQjtFQUNBLE1BQU11RixHQUFBLEdBQU16RixJQUFBLENBQUt5\
              RixHQUFBLEdBQU16RixJQUFBLENBQUt5RixHQUFBLEdBQU1rRyxNQUFBLENBQU9pQ\
              ixPQUFBLEdBQVUsT0FBT2pCLE1BQUEsQ0FBT2xHLEdBQUE7RUFDakUsSUFBSUEsR0\
              FBQTtFQUNBNk8sS0FBQSxDQUFNak8sSUFBQSxDQUFLUCxHQUFBLENBQUk0TixVQUF\
              BLENBQVdsTyxTQUFBLENBQVVDLEdBQUcsQ0FBQztFQUM1QyxPQUFPNk8sS0FBQSxD\
              QUFNaE8sSUFBQSxDQUFLLEdBQUc7QUFDekI7QUFDQSxTQUFTbkgsVUFBVXdMLElBQ\
              UEsRUFBTWxDLEdBQUEsRUFBS29KLFNBQUEsRUFBV0MsV0FBQSxFQUFhO0VBckZ0RC\
              xJQUFBMVAsRUFBQSxFQUFBQyxFQUFBO0VBc0ZJLElBQUl4RCxNQUFBLENBQU84TCx\
              JQUFJO0VBQ1gsT0FBT0EsSUFBQSxDQUFLOUUsUUFBQSxDQUFTNEMsR0FBQSxFQUFL\
              b0osU0FBQSxFQUFXQyxXQUFXO0VBQ3BELElBQUl0VCxPQUFBLENBQVFtTSxJQUFJL\
              EdBQUc7SUFDZixJQUFJbEMsR0FBQSxDQUFJM0MsR0FBQSxDQUFJNE4sVUFBQTtJQU\
              NSLE9BQU8vSSxJQUFBLENBQUs5RSxRQUFBLENBQVM0QyxHQUFHO0lBQzVCLEtBQUl\
              yRyxFQUFBLEdBQUFxRyxHQUFBLENBQUk4TCxlQUFBLEtBQUosZ0JBQUFuUyxFQUFB\
              LENBQXFCNkUsR0FBQSxDQUFJMEQsSUFBQSxHQUFPO01BQ2hDLE1BQU0sSUFBSWQsU\
              0FBQSxDQUFVLHlEQUF5RDtJQUNqRixPQUNLO01BQ0QsSUFBSXBCLEdBQUEsQ0FBST\
              hMLGVBQUE7TUFDSjlMLEdBQUEsQ0FBSThMLGVBQUEsQ0FBZ0JyUSxHQUFBLENBQUl\
              5RyxJQUFJOztNQUU1QmxDLEdBQUEsQ0FBSThMLGVBQUEsR0FBa0IsbUJBQUl6TixH\
              QUFBLENBQUksQ0FBQzZELElBQUksQ0FBQztNQUN4Q0EsSUFBQSxHQUFPQSxJQUFBL\
              ENBQUtYLE9BQUEsQ0FBUXZCLEdBQUEsQ0FBSTNDLEdBQUc7SUFDL0I7RUFDSjtFQU\
              NBLElBQUk2RixNQUFBLEdBQVM7RUFDYixNQUFNM0wsSUFBQSxHQUFPcEIsTUFBQSx\
              DQUFPK0wsSUFBSSxJQUNsQkEsSUFBQSxHQUNBbEMsR0FBQSxDQUFJM0MsR0FBQSxD\
              QUFJa0csVUFBQSxDQUFXckIsSUFBQSxFQUFNLEVBQUU0QixRQUFBLEVBQVVBLENBQ\
              UFpSSxDQUFBLEtBQU03SSxNQUFBLEdBQVM2SSxDQUFBLENBQUcsQ0FBQztFQUM5RC\
              xJQUFJLENBQUM3SSxNQUFBO0VBQ0RBLE1BQUEsR0FBU3lJLFlBQUEsQ0FBYTNMLEd\
              BQUEsQ0FBSTNDLEdBQUEsQ0FBSW9HLE1BQUEsQ0FBTzVJLElBQUEsRUFBTXRELElB\
              QUk7RUFDbkQsTUFBTXNVLEtBQUEsR0FBUUQsY0FBQSxDQUFlclUsSUFBQSxFQUFNM\
              kwsTUFBQSxFQUFRbEQsR0FBRztFQUM5QyxJQUFJNkwsS0FBQSxDQUFNaFQsTUFBQS\
              xHQUFTO0VBQ2ZtSCxHQUFBLENBQUkwRyxhQUFBLEtBQWlCOU0sRUFBQSxHQUFBb0c\
              sR0FBQSxDQUFJMEcsYUFBQSxLQUFKLE9BQUE5TSxFQUFBLEdBQXFCLEtBQUtpUyxL\
              QUFBLENBQU1oVCxNQUFBLEdBQVM7RUFDbEUsTUFBTWlOLEdBQUEsR0FBTSxPQUFPN\
              UMsTUFBQSxDQUFPeE0sU0FBQSxLQUFjLGFBQ2xDd00sTUFBQSxDQUFPeE0sU0FBQS\
              xDQUFVYSxJQUFBLEVBQU15SSxHQUFBLEVBQUtvSixTQUFBLEVBQVdDLFdBQVcsSUF\
              DbERoVCxRQUFBLENBQVNrQixJQUFJLElBQ1RrVCxlQUFBLENBQWdCbFQsSUFBQSxF\
              QUFNeUksR0FBQSxFQUFLb0osU0FBQSxFQUFXQyxXQUFXLElBQ2pEOVIsSUFBQSxDQ\
              UFLNkYsUUFBQSxDQUFTNEMsR0FBQSxFQUFLb0osU0FBQSxFQUFXQyxXQUFXO0VBQ2\
              5ELElBQUksQ0FBQ3dDLEtBQUE7RUFDRCxPQUFPL0YsR0FBQTtFQUNYLE9BQU96UCx\
              RQUFBLENBQVNrQixJQUFJLEtBQUt1TyxHQUFBLENBQUksQ0FBQyxNQUFNLE9BQU9B\
              LEdBQUEsQ0FBSSxDQUFDLE1BQU0sTUFDaEQsR0FBRytGLEtBQUssSUFBSS9GLEdBQ\
              UcsS0FDZixHQUFHK0YsS0FBSztBQUFBLEVBQUs3TCxHQUFBLENBQUlnRyxNQUFNLE\
              dBQUdGLEdBQUc7QUFDdkM7OztBQ3BIQSxTQUFTa0csY0FBYyxFQUFFM1QsR0FBQSx\
              FQUFLYSxLQUFBLENBQU0sR0FBRzhHLEdBQUEsRUFBS29KLFNBQUEsRUFBV0MsV0FB\
              QSxFQUFhO0VBTHBFLElBQUExUCxFQUFBLEVBQUFDLEVBQUE7RUFNSSxNQUFNLEVBQ\
              UVxUyxhQUFBLEVBQWU1TyxHQUFBLEVBQUsySSxNQUFBLEVBQVFzRSxVQUFBLEVBQV\
              l2SSxPQUFBLEVBQVMsRUFBRXdILGFBQUEsRUFBZTZCLFNBQUEsRUFBV0UsVUFBQSx\
              DQUFXLEVBQUUsSUFBSXRMLEdBQUE7RUFDdEcsSUFBSWtNLFVBQUEsR0FBYy9WLE1B\
              QUEsQ0FBT2tDLEdBQUcsS0FBS0EsR0FBQSxDQUFJb04sT0FBQSxJQUFZO0VBQ2pEL\
              ElBQUk2RixVQUFBLEVBQVk7SUFDWixJQUFJWSxVQUFBLEVBQVk7TUFDWixNQUFNLE\
              lBQUkvUixLQUFBLENBQU0sa0RBQWtEO0lBQ3RFO0lBQ0EsSUFBSW5FLFlBQUEsQ0F\
              BYXFDLEdBQUcsS0FBTSxDQUFDbEMsTUFBQSxDQUFPa0MsR0FBRyxLQUFLLE9BQU9B\
              LEdBQUEsS0FBUSxVQUFXO01BQ2hFLE1BQU00RixHQUFBLEdBQU07TUFDWixNQUFNL\
              ElBQUk5RCxLQUFBLENBQU04RCxHQUFHO0lBQ3ZCO0VBQ0o7RUFDQSxJQUFJa08sV0\
              FBQSxHQUFjLENBQUNiLFVBQUEsS0FDZCxDQUFDalQsR0FBQSxJQUNHNlQsVUFBQSx\
              JQUFjaFQsS0FBQSxJQUFTLFFBQVEsQ0FBQzhHLEdBQUEsQ0FBSXVLLE1BQUEsSUFD\
              ckN2VSxZQUFBLENBQWFxQyxHQUFHLE1BQ2ZoQyxRQUFBLENBQVNnQyxHQUFHLElBQ\
              1BBLEdBQUEsQ0FBSXVJLElBQUEsS0FBU3BMLE1BQUEsQ0FBT2lOLFlBQUEsSUFBZ0\
              JwSyxHQUFBLENBQUl1SSxJQUFBLEtBQVNwTCxNQUFBLENBQU9rTixhQUFBLEdBQ3h\
              ELE9BQU9ySyxHQUFBLEtBQVE7RUFDN0IySCxHQUFBLEdBQU03SCxNQUFBLENBQU9x\
              QixNQUFBLENBQU8sQ0FBQyxHQUFHd0csR0FBQSxFQUFLO0lBQ3pCaU0sYUFBQSxFQ\
              UFlO0lBQ2ZoSyxXQUFBLEVBQWEsQ0FBQ2tLLFdBQUEsS0FBZ0JiLFVBQUEsSUFBYy\
              xDQUFDVyxhQUFBO0lBQzdDakcsTUFBQSxFQUFRQSxNQUFBLEdBQVNzRTtFQUNyQix\
              DQUFDO0VBQ0QsSUFBSThCLGNBQUEsR0FBaUI7RUFDckIsSUFBSUMsU0FBQSxHQUFZ\
              O0VBQ2hCLElBQUl2RyxHQUFBLEdBQU1wUCxTQUFBLENBQVUyQixHQUFBLEVBQUsyS\
              CxHQUFBLEVBQUssTUFBT29NLGNBQUEsR0FBaUIsTUFBTyxNQUFPQyxTQUFBLEdBQV\
              ksSUFBSztFQUNyRixJQUFJLENBQUNGLFdBQUEsSUFBZSxDQUFDbk0sR0FBQSxDQUF\
              JdUssTUFBQSxJQUFVekUsR0FBQSxDQUFJak4sTUFBQSxHQUFTLE1BQU07SUFDbEQs\
              SUFBSXlTLFVBQUE7SUFDQSxNQUFNLElBQUluUixLQUFBLENBQU0sOEVBQThFO0lBQ\
              2xHZ1MsV0FBQSxHQUFjO0VBQ2xCO0VBQ0EsSUFBSW5NLEdBQUEsQ0FBSXVLLE1BQU\
              EsRUFBUTtJQUNaLElBQUkwQixhQUFBLElBQWlCL1MsS0FBQSxJQUFTLE1BQU07TUF\
              DaEMsSUFBSWtULGNBQUEsSUFBa0JoRCxTQUFBO01BQ2xCQSxTQUFBLENBQVU7TUFD\
              ZCxPQUFPdEQsR0FBQSxLQUFRLEtBQUssTUFBTXFHLFdBQUEsR0FBYyxLQUFLckcsR\
              0FBRyxLQUFLQSxHQUFBO0lBQ3pEO0VBQ0osV0FDVW1HLGFBQUEsSUFBaUIsQ0FBQ1\
              gsVUFBQSxJQUFnQnBTLEtBQUEsSUFBUyxRQUFRaVQsV0FBQSxFQUFjO0lBQ3ZFckc\
              sR0FBQSxHQUFNLEtBQUtBLEdBQUc7SUFDZCxJQUFJb0csVUFBQSxJQUFjLENBQUNF\
              LGNBQUEsRUFBZ0I7TUFDL0J0RyxHQUFBLElBQU9HLFdBQUEsQ0FBWUgsR0FBQSxFQ\
              UFLOUYsR0FBQSxDQUFJZ0csTUFBQSxFQUFRdUQsYUFBQSxDQUFjMkMsVUFBVSxDQU\
              FDO0lBQ2pFLFdBQ1NHLFNBQUEsSUFBYWhELFdBQUE7SUFDbEJBLFdBQUEsQ0FBWTt\
              JQUNoQixPQUFPdkQsR0FBQTtFQUNYO0VBQ0EsSUFBSXNHLGNBQUE7RUFDQUYsVUFB\
              QSxHQUFhO0VBQ2pCLElBQUlDLFdBQUEsRUFBYTtJQUNiLElBQUlELFVBQUE7SUFDQ\
              XBHLEdBQUEsSUFBT0csV0FBQSxDQUFZSCxHQUFBLEVBQUs5RixHQUFBLENBQUlnRy\
              xNQUFBLEVBQVF1RCxhQUFBLENBQWMyQyxVQUFVLENBQUM7SUFDakVwRyxHQUFBLEd\
              BQU0sS0FBS0EsR0FBRztBQUFBLEVBQUtFLE1BQU07RUFDN0IsT0FDSztJQUNERixH\
              QUFBLEdBQU0sR0FBR0EsR0FBRztJQUNaLElBQUlvRyxVQUFBO0lBQ0FwRyxHQUFBL\
              ElBQU9HLFdBQUEsQ0FBWUgsR0FBQSxFQUFLOUYsR0FBQSxDQUFJZ0csTUFBQSxFQU\
              FRdUQsYUFBQSxDQUFjMkMsVUFBVSxDQUFDO0VBQ3JFO0VBQ0EsSUFBSUksR0FBQSx\
              FQUFLQyxHQUFBLEVBQUtDLFlBQUE7RUFDZCxJQUFJclcsTUFBQSxDQUFPK0MsS0FB\
              SyxHQUFHO0lBQ2ZvVCxHQUFBLEdBQU0sQ0FBQyxDQUFDcFQsS0FBQSxDQUFNdVQsV\
              0FBQTtJQUNkRixHQUFBLEdBQU1yVCxLQUFBLENBQU1zTSxhQUFBO0lBQ1pnSCxZQU\
              FBLEdBQWV0VCxLQUFBLENBQU11TSxPQUFBO0VBQ3pCLE9BQ0s7SUFDRDZHLEdBQUE\
              sR0FBTTtJQUNOQyxHQUFBLEdBQU07SUFDTkMsWUFBQSxHQUFlO0lBQ2YsSUFBSXRU\
              LEtBQUEsSUFBUyxPQUFPQSxLQUFBLEtBQVU7SUFDMUJBLEtBQUEsR0FBUW1FLEdBQ\
              UEsQ0FBSWtHLFVBQUEsQ0FBV3JLLEtBQUs7RUFDcEM7RUFDQThHLEdBQUEsQ0FBSW\
              lDLFdBQUEsR0FBYztFQUNsQixJQUFJLENBQUNrSyxXQUFBLElBQWUsQ0FBQ0QsVUF\
              BQSxJQUFjN1YsUUFBQSxDQUFTNkMsS0FBSztFQUM3QzhHLEdBQUEsQ0FBSTBHLGFB\
              QUEsR0FBZ0JaLEdBQUEsQ0FBSWpOLE1BQUEsR0FBUztFQUNyQ3dULFNBQUEsR0FBW\
              TtFQUNaLElBQUksQ0FBQ2pCLFNBQUEsSUFDRGQsVUFBQSxDQUFXelIsTUFBQSxJQU\
              FVLEtBQ3JCLENBQUNtSCxHQUFBLENBQUl1SyxNQUFBLElBQ0wsQ0FBQzRCLFdBQUE\
              sSUFDRDdWLEtBQUEsQ0FBTTRDLEtBQUssS0FDWCxDQUFDQSxLQUFBLENBQU13VCxJ\
              QUFBLElBQ1AsQ0FBQ3hULEtBQUEsQ0FBTThELEdBQUEsSUFDUCxDQUFDOUQsS0FBQ\
              SxDQUFNekIsTUFBQSxFQUFRO0lBRWZ1SSxHQUFBLENBQUlnRyxNQUFBLEdBQVNoRy\
              xHQUFBLENBQUlnRyxNQUFBLENBQU83SSxTQUFBLENBQVUsQ0FBQztFQUN2QztFQUN\
              BLElBQUl3UCxnQkFBQSxHQUFtQjtFQUN2QixNQUFNQyxRQUFBLEdBQVdsVyxTQUFB\
              LENBQVV3QyxLQUFBLEVBQU84RyxHQUFBLEVBQUssTUFBTzJNLGdCQUFBLEdBQW1CL\
              E1BQU8sTUFBT04sU0FBQSxHQUFZLElBQUs7RUFDaEcsSUFBSVEsRUFBQSxHQUFLO0\
              VBQ1QsSUFBSVgsVUFBQSxJQUFjSSxHQUFBLElBQU9DLEdBQUEsRUFBSztJQUMxQk0\
              sRUFBQSxHQUFLUCxHQUFBLEdBQU0sT0FBTztJQUNsQixJQUFJQyxHQUFBLEVBQUs7\
              TUFDTCxNQUFNTyxFQUFBLEdBQUt2RCxhQUFBLENBQWNnRCxHQUFHO01BQzVCTSxFQ\
              UFBLElBQU07QUFBQSxFQUFLOUcsYUFBQSxDQUFjK0csRUFBQSxFQUFJOU0sR0FBQS\
              xDQUFJZ0csTUFBTSxDQUFDO0lBQzVDO0lBQ0EsSUFBSTRHLFFBQUEsS0FBYSxNQUF\
              NLENBQUM1TSxHQUFBLENBQUl1SyxNQUFBLEVBQVE7TUFDaEMsSUFBSXNDLEVBQUEs\
              S0FBTztNQUNQQSxFQUFBLEdBQUs7SUFDYixPQUNLO01BQ0RBLEVBQUEsSUFBTTtBQ\
              UFBLEVBQUs3TSxHQUFBLENBQUlnRyxNQUFNO0lBQ3pCO0VBQ0osV0FDUyxDQUFDbU\
              csV0FBQSxJQUFlblcsWUFBQSxDQUFha0QsS0FBSyxHQUFHO0lBQzFDLE1BQU02VCx\
              HQUFBLEdBQU1ILFFBQUEsQ0FBUyxDQUFDO0lBQ3RCLE1BQU1JLEdBQUEsR0FBTUos\
              UUFBQSxDQUFTL0MsT0FBQSxDQUFRLElBQUk7SUFDakMsTUFBTW9ELFVBQUEsR0FBY\
              UQsR0FBQSxLQUFRO0lBQzNCLE1BQU1OLElBQUEsSUFBTzlTLEVBQUEsSUFBQUQsRU\
              FBQSxHQUFBcUcsR0FBQSxDQUFJdUssTUFBQSxLQUFKLE9BQUE1USxFQUFBLEdBQWN\
              ULEtBQUEsQ0FBTXdULElBQUEsS0FBcEIsT0FBQTlTLEVBQUEsR0FBNEJWLEtBQUEs\
              Q0FBTU4sS0FBQSxDQUFNQyxNQUFBLEtBQVc7SUFDaEUsSUFBSW9VLFVBQUEsSUFBY\
              yxDQUFDUCxJQUFBLEVBQU07TUFDckIsSUFBSVEsWUFBQSxHQUFlO01BQ25CLElBQU\
              lELFVBQUEsS0FBZUYsR0FBQSxLQUFRLE9BQU9BLEdBQUEsS0FBUSxNQUFNO1FBQzV\
              DLElBQUlJLEdBQUEsR0FBTVAsUUFBQSxDQUFTL0MsT0FBQSxDQUFRLEdBQUc7UUFD\
              OUIsSUFBSWtELEdBQUEsS0FBUSxPQUNSSSxHQUFBLEtBQVEsTUFDUkEsR0FBQSxHQ\
              UFNSCxHQUFBLElBQ05KLFFBQUEsQ0FBU08sR0FBQSxHQUFNLENBQUMsTUFBTSxLQU\
              FLO1VBQzNCQSxHQUFBLEdBQU1QLFFBQUEsQ0FBUy9DLE9BQUEsQ0FBUSxLQUFLc0Q\
              sR0FBQSxHQUFNLENBQUM7UUFDdkM7UUFDQSxJQUFJQSxHQUFBLEtBQVEsTUFBTUgs\
              R0FBQSxHQUFNRyxHQUFBO1FBQ3BCRCxZQUFBLEdBQWU7TUFDdkI7TUFDQSxJQUFJL\
              ENBQUNBLFlBQUE7TUFDREwsRUFBQSxHQUFLO0FBQUEsRUFBSzdNLEdBQUEsQ0FBSW\
              dHLE1BQU07SUFDNUI7RUFDSixXQUNTNEcsUUFBQSxLQUFhLE1BQU1BLFFBQUEsQ0F\
              BUyxDQUFDLE1BQU0sTUFBTTtJQUM5Q0MsRUFBQSxHQUFLO0VBQ1Q7RUFDQS9HLEdB\
              QUEsSUFBTytHLEVBQUEsR0FBS0QsUUFBQTtFQUNaLElBQUk1TSxHQUFBLENBQUl1S\
              yxNQUFBLEVBQVE7SUFDWixJQUFJb0MsZ0JBQUEsSUFBb0J2RCxTQUFBO0lBQ3BCQS\
              xTQUFBLENBQVU7RUFDbEIsV0FDU29ELFlBQUEsSUFBZ0IsQ0FBQ0csZ0JBQUEsRUF\
              Ba0I7SUFDeEM3RyxHQUFBLElBQU9HLFdBQUEsQ0FBWUgsR0FBQSxFQUFLOUYsR0FB\
              QSxDQUFJZ0csTUFBQSxFQUFRdUQsYUFBQSxDQUFjaUQsWUFBWSxDQUFDO0VBQ25FL\
              FdBQ1NILFNBQUEsSUFBYWhELFdBQUEsRUFBYTtJQUMvQkEsV0FBQSxDQUFZO0VBQ2\
              hCO0VBQ0EsT0FBT3ZELEdBQUE7QUFDWDs7O0FDL0lBLFNBQVNzSCxLQUFLQyxRQUF\
              BLEVBQVVDLE9BQUEsRUFBUztFQUM3QixJQUFJRCxRQUFBLEtBQWEsV0FBV0EsUUFB\
              QSxLQUFhLFFBQVE7SUFHN0MsSUFBSSxPQUFPRSxPQUFBLEtBQVksZUFBZUEsT0FBQ\
              SxDQUFRQyxXQUFBO0lBQzFDRCxPQUFBLENBQVFDLFdBQUEsQ0FBWUYsT0FBTzs7SU\
              FFM0JHLE9BQUEsQ0FBUUwsSUFBQSxDQUFLRSxPQUFPO0VBQzVCO0FBQ0o7OztBQ1B\
              BLElBQU1JLFNBQUEsR0FBWTtBQUNsQixTQUFTQyxlQUFlM04sR0FBQSxFQUFLd0Qs\
              SUFBQSxFQUFLLEVBQUVuTCxHQUFBLEVBQUthLEtBQUEsQ0FBTSxHQUFHO0VBQzlDL\
              EtBQUk4RyxHQUFBLG9CQUFBQSxHQUFBLENBQUszQyxHQUFBLENBQUlvRyxNQUFBLE\
              NBQU9tSyxLQUFBLEtBQVNDLFVBQUEsQ0FBV3hWLEdBQUcsR0FBRztJQUMxQ2EsS0F\
              BQSxHQUFRbkQsT0FBQSxDQUFRbUQsS0FBSyxJQUFJQSxLQUFBLENBQU1xSSxPQUFB\
              LENBQVF2QixHQUFBLENBQUkzQyxHQUFHLElBQUluRSxLQUFBO0lBQ2xELElBQUk1Q\
              yxLQUFBLENBQU00QyxLQUFLO0lBQ1gsV0FBVzRMLEVBQUEsSUFBTTVMLEtBQUEsQ0\
              FBTU4sS0FBQTtJQUNuQmtWLFlBQUEsQ0FBYTlOLEdBQUEsRUFBS3dELElBQUEsRUF\
              BS3NCLEVBQUU7SUFBQSxJQUN4QnpGLEtBQUEsQ0FBTUMsT0FBQSxDQUFRcEcsS0FB\
              SztJQUN4QixXQUFXNEwsRUFBQSxJQUFNNUwsS0FBQTtJQUNiNFUsWUFBQSxDQUFhO\
              U4sR0FBQSxFQUFLd0QsSUFBQSxFQUFLc0IsRUFBRTs7SUFFN0JnSixZQUFBLENBQW\
              E5TixHQUFBLEVBQUt3RCxJQUFBLEVBQUt0SyxLQUFLO0VBQ3BDLE9BQ0s7SUFDRCx\
              NQUFNNlUsS0FBQSxHQUFRak8sSUFBQSxDQUFLekgsR0FBQSxFQUFLLElBQUkySCxH\
              QUFHO0lBQy9CLElBQUl3RCxJQUFBLFlBQWUvSixHQUFBLEVBQUs7TUFDcEIrSixJQ\
              UFBLENBQUkzRCxHQUFBLENBQUlrTyxLQUFBLEVBQU9qTyxJQUFBLENBQUs1RyxLQU\
              FBLEVBQU82VSxLQUFBLEVBQU8vTixHQUFHLENBQUM7SUFDMUMsV0FDU3dELElBQUE\
              sWUFBZW5GLEdBQUEsRUFBSztNQUN6Qm1GLElBQUEsQ0FBSS9ILEdBQUEsQ0FBSXNT\
              LEtBQUs7SUFDakIsT0FDSztNQUNELE1BQU1DLFNBQUEsR0FBWUMsWUFBQSxDQUFhN\
              VYsR0FBQSxFQUFLMFYsS0FBQSxFQUFPL04sR0FBRztNQUM5QyxNQUFNa08sT0FBQS\
              xHQUFVcE8sSUFBQSxDQUFLNUcsS0FBQSxFQUFPOFUsU0FBQSxFQUFXaE8sR0FBRzt\
              NQUMxQyxJQUFJZ08sU0FBQSxJQUFheEssSUFBQTtNQUNickwsTUFBQSxDQUFPMEks\
              Y0FBQSxDQUFlMkMsSUFBQSxFQUFLd0ssU0FBQSxFQUFXO1FBQ2xDOVUsS0FBQSxFQ\
              UFPZ1YsT0FBQTtRQUNQckosUUFBQSxFQUFVO1FBQ1ZELFVBQUEsRUFBWTtRQUNaRC\
              xZQUFBLEVBQWM7TUFDbEIsQ0FBQzs7TUFFRG5CLElBQUEsQ0FBSXdLLFNBQVMsSUF\
              BSUUsT0FBQTtJQUN6QjtFQUNKO0VBQ0EsT0FBTzFLLElBQUE7QUFDWDtBQUNBLElB\
              QU1xSyxVQUFBLEdBQWFBLENBQUN4VixHQUFBLEtBQVFBLEdBQUEsS0FBUXFWLFNBQ\
              UEsSUFDL0JyWCxRQUFBLENBQVNnQyxHQUFHLEtBQ1RBLEdBQUEsQ0FBSWEsS0FBQS\
              xLQUFVd1UsU0FBQSxLQUNiLENBQUNyVixHQUFBLENBQUl1SSxJQUFBLElBQVF2SSx\
              HQUFBLENBQUl1SSxJQUFBLEtBQVNwTCxNQUFBLENBQU9tTixLQUFBO0FBUTFDLFNB\
              QVNtTCxhQUFhOU4sR0FBQSxFQUFLd0QsSUFBQSxFQUFLdEssS0FBQSxFQUFPO0VBQ\
              25DLE1BQU1vRCxNQUFBLEdBQVMwRCxHQUFBLElBQU9qSyxPQUFBLENBQVFtRCxLQU\
              FLLElBQUlBLEtBQUEsQ0FBTXFJLE9BQUEsQ0FBUXZCLEdBQUEsQ0FBSTNDLEdBQUc\
              sSUFBSW5FLEtBQUE7RUFDaEUsSUFBSSxDQUFDaEQsS0FBQSxDQUFNb0csTUFBTTtF\
              QUNiLE1BQU0sSUFBSW5DLEtBQUEsQ0FBTSwyQ0FBMkM7RUFDL0QsTUFBTWdVLE1BQ\
              UEsR0FBUzdSLE1BQUEsQ0FBTzZELE1BQUEsQ0FBTyxNQUFNSCxHQUFBLEVBQUt2Ry\
              xHQUFHO0VBQzNDLFdBQVcsQ0FBQ3BCLEdBQUEsRUFBSytWLE1BQUssS0FBS0QsTUF\
              BQSxFQUFRO0lBQy9CLElBQUkzSyxJQUFBLFlBQWUvSixHQUFBLEVBQUs7TUFDcEIs\
              SUFBSSxDQUFDK0osSUFBQSxDQUFJaEYsR0FBQSxDQUFJbkcsR0FBRztNQUNabUwsS\
              UFBQSxDQUFJM0QsR0FBQSxDQUFJeEgsR0FBQSxFQUFLK1YsTUFBSztJQUMxQixXQU\
              NTNUssSUFBQSxZQUFlbkYsR0FBQSxFQUFLO01BQ3pCbUYsSUFBQSxDQUFJL0gsR0F\
              BQSxDQUFJcEQsR0FBRztJQUNmLFdBQ1MsQ0FBQ0YsTUFBQSxDQUFPa1csU0FBQSxD\
              QUFVQyxjQUFBLENBQWV0VSxJQUFBLENBQUt3SixJQUFBLEVBQUtuTCxHQUFHLEdBQ\
              Uc7TUFDdERGLE1BQUEsQ0FBTzBJLGNBQUEsQ0FBZTJDLElBQUEsRUFBS25MLEdBQU\
              EsRUFBSztRQUM1QmEsS0FBQSxFQUFBa1YsTUFBQTtRQUNBdkosUUFBQSxFQUFVO1F\
              BQ1ZELFVBQUEsRUFBWTtRQUNaRCxZQUFBLEVBQWM7TUFDbEIsQ0FBQztJQUNMO0VB\
              Q0o7RUFDQSxPQUFPbkIsSUFBQTtBQUNYO0FBQ0EsU0FBU3lLLGFBQWE1VixHQUFBL\
              EVBQUswVixLQUFBLEVBQU8vTixHQUFBLEVBQUs7RUFDbkMsSUFBSStOLEtBQUEsS0\
              FBVTtFQUNWLE9BQU87RUFDWCxJQUFJLE9BQU9BLEtBQUEsS0FBVTtFQUNqQixPQUF\
              PalIsTUFBQSxDQUFPaVIsS0FBSztFQUN2QixJQUFJNVgsTUFBQSxDQUFPa0MsR0FB\
              RyxNQUFLMkgsR0FBQSxvQkFBQUEsR0FBQSxDQUFLM0MsR0FBQSxHQUFLO0lBQ3pCL\
              E1BQU1rUixNQUFBLEdBQVN4RCxzQkFBQSxDQUF1Qi9LLEdBQUEsQ0FBSTNDLEdBQU\
              EsRUFBSyxDQUFDLENBQUM7SUFDakRrUixNQUFBLENBQU9uUSxPQUFBLEdBQVUsbUJ\
              BQUlDLEdBQUEsQ0FBSTtJQUN6QixXQUFXOUcsSUFBQSxJQUFReUksR0FBQSxDQUFJ\
              NUIsT0FBQSxDQUFRVixJQUFBLENBQUs7SUFDaEM2USxNQUFBLENBQU9uUSxPQUFBL\
              ENBQVEzQyxHQUFBLENBQUlsRSxJQUFBLENBQUtFLE1BQU07SUFDbEM4VyxNQUFBLE\
              NBQU9oRSxNQUFBLEdBQVM7SUFDaEJnRSxNQUFBLENBQU9DLGNBQUEsR0FBaUI7SUF\
              DeEIsTUFBTUMsTUFBQSxHQUFTcFcsR0FBQSxDQUFJK0UsUUFBQSxDQUFTbVIsTUFB\
              TTtJQUNsQyxJQUFJLENBQUN2TyxHQUFBLENBQUlxQixZQUFBLEVBQWM7TUFDbkIsS\
              UFBSXFOLE9BQUEsR0FBVTFRLElBQUEsQ0FBS3RILFNBQUEsQ0FBVStYLE1BQU07TU\
              FDbkMsSUFBSUMsT0FBQSxDQUFRN1YsTUFBQSxHQUFTO01BQ2pCNlYsT0FBQSxHQUF\
              VQSxPQUFBLENBQVF2UixTQUFBLENBQVUsR0FBRyxFQUFFLElBQUk7TUFDekNpUSxJ\
              QUFBLENBQUtwTixHQUFBLENBQUkzQyxHQUFBLENBQUkwRSxPQUFBLENBQVFzTCxRQ\
              UFBLEVBQVUsa0ZBQWtGcUIsT0FBTywwQ0FBMEM7TUFDbEsxTyxHQUFBLENBQUlxQi\
              xZQUFBLEdBQWU7SUFDdkI7SUFDQSxPQUFPb04sTUFBQTtFQUNYO0VBQ0EsT0FBT3p\
              RLElBQUEsQ0FBS3RILFNBQUEsQ0FBVXFYLEtBQUs7QUFDL0I7OztBQ2hHQSxTQUFT\
              WSxXQUFXdFcsR0FBQSxFQUFLYSxLQUFBLEVBQU84RyxHQUFBLEVBQUs7RUFDakMsT\
              UFBTU4sQ0FBQSxHQUFJNkQsVUFBQSxDQUFXbEwsR0FBQSxFQUFLLFFBQVcySCxHQU\
              FHO0VBQ3hDLE1BQU1FLENBQUEsR0FBSXFELFVBQUEsQ0FBV3JLLEtBQUEsRUFBTyx\
              RQUFXOEcsR0FBRztFQUMxQyxPQUFPLElBQUkxSyxJQUFBLENBQUtvSyxDQUFBLEVB\
              QUdRLENBQUM7QUFDeEI7QUFDQSxJQUFNNUssSUFBQSxHQUFOLE1BQU1zWixLQUFBL\
              ENBQUs7RUFDUGpVLFlBQVl0QyxHQUFBLEVBQUthLEtBQUEsR0FBUSxNQUFNO0lBQz\
              NCZixNQUFBLENBQU8wSSxjQUFBLENBQWUsTUFBTXZKLFNBQUEsRUFBVyxFQUFFNEI\
              sS0FBQSxFQUFPL0IsSUFBQSxDQUFLLENBQUM7SUFDdEQsS0FBS2tCLEdBQUEsR0FB\
              TUEsR0FBQTtJQUNYLEtBQUthLEtBQUEsR0FBUUEsS0FBQTtFQUNqQjtFQUNBZ0MsT\
              UFBTTZJLE9BQUEsRUFBUTtJQUNWLElBQUksRUFBRTFMLEdBQUEsRUFBS2EsS0FBQS\
              xDQUFNLElBQUk7SUFDckIsSUFBSS9DLE1BQUEsQ0FBT2tDLEdBQUc7SUFDVkEsR0F\
              BQSxHQUFNQSxHQUFBLENBQUk2QyxLQUFBLENBQU02SSxPQUFNO0lBQzFCLElBQUk1\
              TixNQUFBLENBQU8rQyxLQUFLO0lBQ1pBLEtBQUEsR0FBUUEsS0FBQSxDQUFNZ0MsS\
              0FBQSxDQUFNNkksT0FBTTtJQUM5QixPQUFPLElBQUk2SyxLQUFBLENBQUt2VyxHQU\
              FBLEVBQUthLEtBQUs7RUFDOUI7RUFDQWlILE9BQU8wTyxDQUFBLEVBQUc3TyxHQUF\
              BLEVBQUs7SUFDWCxNQUFNOE8sSUFBQSxJQUFPOU8sR0FBQSxvQkFBQUEsR0FBQSxD\
              QUFLa0IsUUFBQSxJQUFXLG1CQUFJekgsR0FBQSxDQUFJLElBQUksQ0FBQztJQUMxQ\
              yxPQUFPa1UsY0FBQSxDQUFlM04sR0FBQSxFQUFLOE8sSUFBQSxFQUFNLElBQUk7RU\
              FDekM7RUFDQTFSLFNBQVM0QyxHQUFBLEVBQUtvSixTQUFBLEVBQVdDLFdBQUEsRUF\
              BYTtJQUNsQyxRQUFPckosR0FBQSxvQkFBQUEsR0FBQSxDQUFLM0MsR0FBQSxJQUNO\
              Mk8sYUFBQSxDQUFjLE1BQU1oTSxHQUFBLEVBQUtvSixTQUFBLEVBQVdDLFdBQVcsS\
              UFDL0NyTCxJQUFBLENBQUt0SCxTQUFBLENBQVUsSUFBSTtFQUM3QjtBQUNKOzs7QU\
              M3QkEsU0FBU3FZLG9CQUFvQkMsVUFBQSxFQUFZaFAsR0FBQSxFQUFLK0IsT0FBQSx\
              FQUFTO0VBSnZELElBQUFwSSxFQUFBO0VBS0ksTUFBTStTLElBQUEsSUFBTy9TLEVB\
              QUEsR0FBQXFHLEdBQUEsQ0FBSXVLLE1BQUEsS0FBSixPQUFBNVEsRUFBQSxHQUFjc\
              VYsVUFBQSxDQUFXdEMsSUFBQTtFQUN0QyxNQUFNdUMsVUFBQSxHQUFZdkMsSUFBQS\
              xHQUFPd0MsdUJBQUEsR0FBMEJDLHdCQUFBO0VBQ25ELE9BQU9GLFVBQUEsQ0FBVUQ\
              sVUFBQSxFQUFZaFAsR0FBQSxFQUFLK0IsT0FBTztBQUM3QztBQUNBLFNBQVNvTix5\
              QkFBeUIsRUFBRTFKLE9BQUEsRUFBUzdNLEtBQUEsQ0FBTSxHQUFHb0gsR0FBQSxFQ\
              UFLLEVBQUVvUCxlQUFBLEVBQWlCQyxTQUFBLEVBQVdDLFVBQUEsRUFBWWpHLFdBQU\
              EsRUFBYUQsU0FBQSxDQUFVLEdBQUc7RUFDM0gsTUFBTSxFQUFFcEQsTUFBQSxFQUF\
              RakUsT0FBQSxFQUFTLEVBQUV3SCxhQUFBLENBQWMsRUFBRSxJQUFJdkosR0FBQTtF\
              QUMvQyxNQUFNdVAsT0FBQSxHQUFVcFgsTUFBQSxDQUFPcUIsTUFBQSxDQUFPLENBQ\
              UMsR0FBR3dHLEdBQUEsRUFBSyxFQUFFZ0csTUFBQSxFQUFRc0osVUFBQSxFQUFZMU\
              8sSUFBQSxFQUFNLEtBQUssQ0FBQztFQUN6RSxJQUFJeUwsU0FBQSxHQUFZO0VBQ2h\
              CLE1BQU0vTyxLQUFBLEdBQVEsRUFBQztFQUNmLFNBQVMzRSxDQUFBLEdBQUksR0FB\
              R0EsQ0FBQSxHQUFJQyxLQUFBLENBQU1DLE1BQUEsRUFBUSxFQUFFRixDQUFBLEVBQ\
              Uc7SUFDbkMsTUFBTXVKLElBQUEsR0FBT3RKLEtBQUEsQ0FBTUQsQ0FBQztJQUNwQi\
              xJQUFJNlcsUUFBQSxHQUFVO0lBQ2QsSUFBSXJaLE1BQUEsQ0FBTytMLElBQUksR0F\
              BRztNQUNkLElBQUksQ0FBQ21LLFNBQUEsSUFBYW5LLElBQUEsQ0FBS3VLLFdBQUE7\
              TUFDbkJuUCxLQUFBLENBQU1NLElBQUEsQ0FBSyxFQUFFO01BQ2pCNlIsZ0JBQUEsQ\
              0FBaUJ6UCxHQUFBLEVBQUsxQyxLQUFBLEVBQU80RSxJQUFBLENBQUtzRCxhQUFBLE\
              VBQWU2RyxTQUFTO01BQzFELElBQUluSyxJQUFBLENBQUt1RCxPQUFBO01BQ0wrSix\
              RQUFBLEdBQVV0TixJQUFBLENBQUt1RCxPQUFBO0lBQ3ZCLFdBQ1NyUCxNQUFBLENB\
              QU84TCxJQUFJLEdBQUc7TUFDbkIsTUFBTXdOLEVBQUEsR0FBS3ZaLE1BQUEsQ0FBT\
              ytMLElBQUEsQ0FBSzdKLEdBQUcsSUFBSTZKLElBQUEsQ0FBSzdKLEdBQUEsR0FBTT\
              tNQUN6QyxJQUFJcVgsRUFBQSxFQUFJO1FBQ0osSUFBSSxDQUFDckQsU0FBQSxJQUF\
              hcUQsRUFBQSxDQUFHakQsV0FBQTtRQUNqQm5QLEtBQUEsQ0FBTU0sSUFBQSxDQUFL\
              LEVBQUU7UUFDakI2UixnQkFBQSxDQUFpQnpQLEdBQUEsRUFBSzFDLEtBQUEsRUFBT\
              29TLEVBQUEsQ0FBR2xLLGFBQUEsRUFBZTZHLFNBQVM7TUFDNUQ7SUFDSjtJQUNBQS\
              xTQUFBLEdBQVk7SUFDWixJQUFJc0QsSUFBQSxHQUFNalosU0FBQSxDQUFVd0wsSUF\
              BQSxFQUFNcU4sT0FBQSxFQUFTLE1BQU9DLFFBQUEsR0FBVSxNQUFPLE1BQU9uRCxT\
              QUFBLEdBQVksSUFBSztJQUNuRixJQUFJbUQsUUFBQTtJQUNBRyxJQUFBLElBQU8xS\
              ixXQUFBLENBQVkwSixJQUFBLEVBQUtMLFVBQUEsRUFBWS9GLGFBQUEsQ0FBY2lHLF\
              FBQU8sQ0FBQztJQUM5RCxJQUFJbkQsU0FBQSxJQUFhbUQsUUFBQTtJQUNibkQsU0F\
              BQSxHQUFZO0lBQ2hCL08sS0FBQSxDQUFNTSxJQUFBLENBQUt3UixlQUFBLEdBQWtC\
              TyxJQUFHO0VBQ3BDO0VBQ0EsSUFBSTdKLEdBQUE7RUFDSixJQUFJeEksS0FBQSxDQ\
              UFNekUsTUFBQSxLQUFXLEdBQUc7SUFDcEJpTixHQUFBLEdBQU11SixTQUFBLENBQV\
              V6SCxLQUFBLEdBQVF5SCxTQUFBLENBQVVuSSxHQUFBO0VBQ3RDLE9BQ0s7SUFDRHB\
              CLEdBQUEsR0FBTXhJLEtBQUEsQ0FBTSxDQUFDO0lBQ2IsU0FBUzNFLENBQUEsR0FB\
              SSxHQUFHQSxDQUFBLEdBQUkyRSxLQUFBLENBQU16RSxNQUFBLEVBQVEsRUFBRUYsQ\
              0FBQSxFQUFHO01BQ25DLE1BQU0rQyxJQUFBLEdBQU80QixLQUFBLENBQU0zRSxDQU\
              FDO01BQ3BCbU4sR0FBQSxJQUFPcEssSUFBQSxHQUFPO0FBQUEsRUFBS3NLLE1BQU0\
              sR0FBR3RLLElBQUksS0FBSztJQUN6QztFQUNKO0VBQ0EsSUFBSStKLE9BQUEsRUFB\
              UztJQUNUSyxHQUFBLElBQU8sT0FBT0MsYUFBQSxDQUFjd0QsYUFBQSxDQUFjOUQsT\
              0FBTyxHQUFHTyxNQUFNO0lBQzFELElBQUlvRCxTQUFBO0lBQ0FBLFNBQUEsQ0FBVT\
              tFQUNsQixXQUNTaUQsU0FBQSxJQUFhaEQsV0FBQTtFQUNsQkEsV0FBQSxDQUFZO0V\
              BQ2hCLE9BQU92RCxHQUFBO0FBQ1g7QUFDQSxTQUFTb0osd0JBQXdCLEVBQUV0VyxL\
              QUFBLENBQU0sR0FBR29ILEdBQUEsRUFBSyxFQUFFcVAsU0FBQSxFQUFXQyxVQUFBL\
              ENBQVcsR0FBRztFQUN4RSxNQUFNLEVBQUV0SixNQUFBLEVBQVFzRSxVQUFBLEVBQV\
              lhLHFCQUFBLEVBQXVCeUUsU0FBQSxFQUFXN04sT0FBQSxFQUFTLEVBQUV3SCxhQUF\
              BLENBQWMsRUFBRSxJQUFJdkosR0FBQTtFQUM3RnNQLFVBQUEsSUFBY2hGLFVBQUE7\
              RUFDZCxNQUFNaUYsT0FBQSxHQUFVcFgsTUFBQSxDQUFPcUIsTUFBQSxDQUFPLENBQ\
              UMsR0FBR3dHLEdBQUEsRUFBSztJQUNuQ2dHLE1BQUEsRUFBUXNKLFVBQUE7SUFDUi\
              9FLE1BQUEsRUFBUTtJQUNSM0osSUFBQSxFQUFNO0VBQ1YsQ0FBQztFQUNELElBQUl\
              pUCxVQUFBLEdBQWE7RUFDakIsSUFBSUMsWUFBQSxHQUFlO0VBQ25CLE1BQU14UyxL\
              QUFBLEdBQVEsRUFBQztFQUNmLFNBQVMzRSxDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQ\
              UFJQyxLQUFBLENBQU1DLE1BQUEsRUFBUSxFQUFFRixDQUFBLEVBQUc7SUFDbkMsTU\
              FBTXVKLElBQUEsR0FBT3RKLEtBQUEsQ0FBTUQsQ0FBQztJQUNwQixJQUFJOE0sT0F\
              BQSxHQUFVO0lBQ2QsSUFBSXRQLE1BQUEsQ0FBTytMLElBQUksR0FBRztNQUNkLElB\
              QUlBLElBQUEsQ0FBS3VLLFdBQUE7TUFDTG5QLEtBQUEsQ0FBTU0sSUFBQSxDQUFLL\
              EVBQUU7TUFDakI2UixnQkFBQSxDQUFpQnpQLEdBQUEsRUFBSzFDLEtBQUEsRUFBTz\
              RFLElBQUEsQ0FBS3NELGFBQUEsRUFBZSxLQUFLO01BQ3RELElBQUl0RCxJQUFBLEN\
              BQUt1RCxPQUFBO01BQ0xBLE9BQUEsR0FBVXZELElBQUEsQ0FBS3VELE9BQUE7SUFD\
              dkIsV0FDU3JQLE1BQUEsQ0FBTzhMLElBQUksR0FBRztNQUNuQixNQUFNd04sRUFBQ\
              SxHQUFLdlosTUFBQSxDQUFPK0wsSUFBQSxDQUFLN0osR0FBRyxJQUFJNkosSUFBQS\
              xDQUFLN0osR0FBQSxHQUFNO01BQ3pDLElBQUlxWCxFQUFBLEVBQUk7UUFDSixJQUF\
              JQSxFQUFBLENBQUdqRCxXQUFBO1FBQ0huUCxLQUFBLENBQU1NLElBQUEsQ0FBSyxF\
              QUFFO1FBQ2pCNlIsZ0JBQUEsQ0FBaUJ6UCxHQUFBLEVBQUsxQyxLQUFBLEVBQU9vU\
              yxFQUFBLENBQUdsSyxhQUFBLEVBQWUsS0FBSztRQUNwRCxJQUFJa0ssRUFBQSxDQU\
              FHakssT0FBQTtRQUNIb0ssVUFBQSxHQUFhO01BQ3JCO01BQ0EsTUFBTUUsRUFBQSx\
              HQUFLNVosTUFBQSxDQUFPK0wsSUFBQSxDQUFLaEosS0FBSyxJQUFJZ0osSUFBQSxD\
              QUFLaEosS0FBQSxHQUFRO01BQzdDLElBQUk2VyxFQUFBLEVBQUk7UUFDSixJQUFJQ\
              SxFQUFBLENBQUd0SyxPQUFBO1FBQ0hBLE9BQUEsR0FBVXNLLEVBQUEsQ0FBR3RLLE\
              9BQUE7UUFDakIsSUFBSXNLLEVBQUEsQ0FBR3ZLLGFBQUE7UUFDSHFLLFVBQUEsR0F\
              BYTtNQUNyQixXQUNTM04sSUFBQSxDQUFLaEosS0FBQSxJQUFTLFNBQVF3VyxFQUFB\
              LG9CQUFBQSxFQUFBLENBQUlqSyxPQUFBLEdBQVM7UUFDeENBLE9BQUEsR0FBVWlLL\
              EVBQUEsQ0FBR2pLLE9BQUE7TUFDakI7SUFDSjtJQUNBLElBQUlBLE9BQUE7SUFDQW\
              9LLFVBQUEsR0FBYTtJQUNqQixJQUFJL0osR0FBQSxHQUFNcFAsU0FBQSxDQUFVd0w\
              sSUFBQSxFQUFNcU4sT0FBQSxFQUFTLE1BQU85SixPQUFBLEdBQVUsSUFBSztJQUN6\
              RCxJQUFJOU0sQ0FBQSxHQUFJQyxLQUFBLENBQU1DLE1BQUEsR0FBUztJQUNuQmlOL\
              EdBQUEsSUFBTztJQUNYLElBQUlMLE9BQUE7SUFDQUssR0FBQSxJQUFPRyxXQUFBLE\
              NBQVlILEdBQUEsRUFBS3dKLFVBQUEsRUFBWS9GLGFBQUEsQ0FBYzlELE9BQU8sQ0F\
              BQztJQUM5RCxJQUFJLENBQUNvSyxVQUFBLEtBQWV2UyxLQUFBLENBQU16RSxNQUFB\
              LEdBQVNpWCxZQUFBLElBQWdCaEssR0FBQSxDQUFJSyxRQUFBLENBQVMsSUFBSTtJQ\
              UNoRTBKLFVBQUEsR0FBYTtJQUNqQnZTLEtBQUEsQ0FBTU0sSUFBQSxDQUFLa0ksR0\
              FBRztJQUNkZ0ssWUFBQSxHQUFleFMsS0FBQSxDQUFNekUsTUFBQTtFQUN6QjtFQUN\
              BLE1BQU0sRUFBRStPLEtBQUEsRUFBT1YsR0FBQSxDQUFJLElBQUltSSxTQUFBO0VB\
              Q3ZCLElBQUkvUixLQUFBLENBQU16RSxNQUFBLEtBQVcsR0FBRztJQUNwQixPQUFPK\
              08sS0FBQSxHQUFRVixHQUFBO0VBQ25CLE9BQ0s7SUFDRCxJQUFJLENBQUMySSxVQU\
              FBLEVBQVk7TUFDYixNQUFNdFEsR0FBQSxHQUFNakMsS0FBQSxDQUFNMFMsTUFBQSx\
              DQUFPLENBQUNDLEdBQUEsRUFBS3ZVLElBQUEsS0FBU3VVLEdBQUEsR0FBTXZVLElB\
              QUEsQ0FBSzdDLE1BQUEsR0FBUyxHQUFHLENBQUM7TUFDaEVnWCxVQUFBLEdBQWE3U\
              CxHQUFBLENBQUkrQixPQUFBLENBQVE0RSxTQUFBLEdBQVksS0FBS3BILEdBQUEsR0\
              FBTVMsR0FBQSxDQUFJK0IsT0FBQSxDQUFRNEUsU0FBQTtJQUNoRTtJQUNBLElBQUl\
              rSixVQUFBLEVBQVk7TUFDWixJQUFJL0osR0FBQSxHQUFNOEIsS0FBQTtNQUNWLFdB\
              QVdsTSxJQUFBLElBQVE0QixLQUFBO01BQ2Z3SSxHQUFBLElBQU9wSyxJQUFBLEdBQ\
              U87QUFBQSxFQUFLNE8sVUFBVSxHQUFHdEUsTUFBTSxHQUFHdEssSUFBSSxLQUFLO0\
              1BQ3RELE9BQU8sR0FBR29LLEdBQUc7QUFBQSxFQUFLRSxNQUFNLEdBQUdrQixHQUF\
              HO0lBQ2xDLE9BQ0s7TUFDRCxPQUFPLEdBQUdVLEtBQUssR0FBR2dJLFNBQVMsR0FB\
              R3RTLEtBQUEsQ0FBTU8sSUFBQSxDQUFLLEdBQUcsQ0FBQyxHQUFHK1IsU0FBUyxHQ\
              UFHMUksR0FBRztJQUNuRTtFQUNKO0FBQ0o7QUFDQSxTQUFTdUksaUJBQWlCLEVBQU\
              V6SixNQUFBLEVBQVFqRSxPQUFBLEVBQVMsRUFBRXdILGFBQUEsQ0FBYyxFQUFFLEd\
              BQUdqTSxLQUFBLEVBQU9tSSxPQUFBLEVBQVM0RyxTQUFBLEVBQVc7RUFDekYsSUFB\
              STVHLE9BQUEsSUFBVzRHLFNBQUE7RUFDWDVHLE9BQUEsR0FBVUEsT0FBQSxDQUFRb\
              EwsT0FBQSxDQUFRLFFBQVEsRUFBRTtFQUN4QyxJQUFJa0wsT0FBQSxFQUFTO0lBQ1\
              QsTUFBTXlLLEVBQUEsR0FBS25LLGFBQUEsQ0FBY3dELGFBQUEsQ0FBYzlELE9BQU8\
              sR0FBR08sTUFBTTtJQUN2RDFJLEtBQUEsQ0FBTU0sSUFBQSxDQUFLc1MsRUFBQSxD\
              QUFHQyxTQUFBLENBQVUsQ0FBQztFQUM3QjtBQUNKOzs7QUNySUEsU0FBU0MsU0FBU\
              3hYLEtBQUEsRUFBT1AsR0FBQSxFQUFLO0VBQzFCLE1BQU1xSCxDQUFBLEdBQUlySi\
              xRQUFBLENBQVNnQyxHQUFHLElBQUlBLEdBQUEsQ0FBSWEsS0FBQSxHQUFRYixHQUF\
              BO0VBQ3RDLFdBQVd5TSxFQUFBLElBQU1sTSxLQUFBLEVBQU87SUFDcEIsSUFBSXhD\
              LE1BQUEsQ0FBTzBPLEVBQUUsR0FBRztNQUNaLElBQUlBLEVBQUEsQ0FBR3pNLEdBQ\
              UEsS0FBUUEsR0FBQSxJQUFPeU0sRUFBQSxDQUFHek0sR0FBQSxLQUFRcUgsQ0FBQT\
              tNQUM3QixPQUFPb0YsRUFBQTtNQUNYLElBQUl6TyxRQUFBLENBQVN5TyxFQUFBLEN\
              BQUd6TSxHQUFHLEtBQUt5TSxFQUFBLENBQUd6TSxHQUFBLENBQUlhLEtBQUEsS0FB\
              VXdHLENBQUE7TUFDckMsT0FBT29GLEVBQUE7SUFDZjtFQUNKO0VBQ0EsT0FBTztBQ\
              UNYO0FBQ0EsSUFBTW5QLE9BQUEsR0FBTixjQUFzQjBELFVBQUEsQ0FBVztFQUM3Qi\
              xXQUFXZ0QsUUFBQSxFQUFVO0lBQ2pCLE9BQU87RUFDWDtFQUNBMUIsWUFBWW9KLE9\
              BQUEsRUFBUTtJQUNoQixNQUFNN00sR0FBQSxFQUFLNk0sT0FBTTtJQUNqQixLQUFL\
              bkwsS0FBQSxHQUFRLEVBQUM7RUFDbEI7RUFBQTtBQUFBO0FBQUE7QUFBQTtFQUtBL\
              E9BQU8rRyxLQUFLb0UsT0FBQSxFQUFRNUUsR0FBQSxFQUFLYSxHQUFBLEVBQUs7SU\
              FDMUIsTUFBTSxFQUFFdUUsYUFBQSxFQUFlOEwsUUFBQSxDQUFTLElBQUlyUSxHQUF\
              BO0lBQ3BDLE1BQU13RCxJQUFBLEdBQU0sSUFBSSxLQUFLTyxPQUFNO0lBQzNCLE1B\
              QU10SSxHQUFBLEdBQU1BLENBQUNwRCxHQUFBLEVBQUthLEtBQUEsS0FBVTtNQUN4Q\
              ixJQUFJLE9BQU9tWCxRQUFBLEtBQWE7TUFDcEJuWCxLQUFBLEdBQVFtWCxRQUFBLE\
              NBQVNyVyxJQUFBLENBQUttRixHQUFBLEVBQUs5RyxHQUFBLEVBQUthLEtBQUs7TUF\
              BQSxJQUNoQ21HLEtBQUEsQ0FBTUMsT0FBQSxDQUFRK1EsUUFBUSxLQUFLLENBQUNB\
              LFFBQUEsQ0FBU2xLLFFBQUEsQ0FBUzlOLEdBQUc7TUFDdEQ7TUFDSixJQUFJYSxLQ\
              UFBLEtBQVUsVUFBYXFMLGFBQUE7TUFDdkJmLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTW\
              dGLElBQUEsQ0FBSytRLFVBQUEsQ0FBV3RXLEdBQUEsRUFBS2EsS0FBQSxFQUFPOEc\
              sR0FBRyxDQUFDO0lBQ2xEO0lBQ0EsSUFBSWIsR0FBQSxZQUFlMUYsR0FBQSxFQUFL\
              O01BQ3BCLFdBQVcsQ0FBQ3BCLEdBQUEsRUFBS2EsS0FBSyxLQUFLaUcsR0FBQTtNQ\
              UN2QjFELEdBQUEsQ0FBSXBELEdBQUEsRUFBS2EsS0FBSztJQUN0QixXQUNTaUcsR0\
              FBQSxJQUFPLE9BQU9BLEdBQUEsS0FBUSxVQUFVO01BQ3JDLFdBQVc5RyxHQUFBLEl\
              BQU9GLE1BQUEsQ0FBT3VGLElBQUEsQ0FBS3lCLEdBQUc7TUFDN0IxRCxHQUFBLENB\
              QUlwRCxHQUFBLEVBQUs4RyxHQUFBLENBQUk5RyxHQUFHLENBQUM7SUFDekI7SUFDQ\
              SxJQUFJLE9BQU8wTCxPQUFBLENBQU91TSxjQUFBLEtBQW1CLFlBQVk7TUFDN0M5TS\
              xJQUFBLENBQUk1SyxLQUFBLENBQU0yWCxJQUFBLENBQUt4TSxPQUFBLENBQU91TSx\
              jQUFjO0lBQ3hDO0lBQ0EsT0FBTzlNLElBQUE7RUFDWDtFQUFBO0FBQUE7QUFBQTtB\
              QUFBO0FBQUE7QUFBQTtFQU9BL0gsSUFBSXFULElBQUEsRUFBTTBCLFNBQUEsRUFBV\
              ztJQTdEekIsSUFBQTdXLEVBQUE7SUE4RFEsSUFBSThXLEtBQUE7SUFDSixJQUFJcm\
              EsTUFBQSxDQUFPMFksSUFBSTtJQUNYMkIsS0FBQSxHQUFRM0IsSUFBQTtJQUFBLEl\
              BQ0gsQ0FBQ0EsSUFBQSxJQUFRLE9BQU9BLElBQUEsS0FBUyxZQUFZLEVBQUUsU0FB\
              U0EsSUFBQSxHQUFPO01BRTVEMkIsS0FBQSxHQUFRLElBQUluYixJQUFBLENBQUt3W\
              ixJQUFBLEVBQU1BLElBQUEsb0JBQUFBLElBQUEsQ0FBTTVWLEtBQUs7SUFDdEM7SU\
              FFSXVYLEtBQUEsR0FBUSxJQUFJbmIsSUFBQSxDQUFLd1osSUFBQSxDQUFLelcsR0F\
              BQSxFQUFLeVcsSUFBQSxDQUFLNVYsS0FBSztJQUN6QyxNQUFNaU8sSUFBQSxHQUFP\
              aUosUUFBQSxDQUFTLEtBQUt4WCxLQUFBLEVBQU82WCxLQUFBLENBQU1wWSxHQUFHO\
              0lBQzNDLE1BQU1xWSxXQUFBLElBQWMvVyxFQUFBLFFBQUs4SixNQUFBLEtBQUwsZ0\
              JBQUE5SixFQUFBLENBQWEyVyxjQUFBO0lBQ2pDLElBQUluSixJQUFBLEVBQU07TUF\
              DTixJQUFJLENBQUNxSixTQUFBO01BQ0QsTUFBTSxJQUFJclcsS0FBQSxDQUFNLE9B\
              QU9zVyxLQUFBLENBQU1wWSxHQUFHLGNBQWM7TUFFbEQsSUFBSWhDLFFBQUEsQ0FBU\
              zhRLElBQUEsQ0FBS2pPLEtBQUssS0FBS3NKLGFBQUEsQ0FBY2lPLEtBQUEsQ0FBTX\
              ZYLEtBQUs7TUFDakRpTyxJQUFBLENBQUtqTyxLQUFBLENBQU1BLEtBQUEsR0FBUXV\
              YLEtBQUEsQ0FBTXZYLEtBQUE7O01BRXpCaU8sSUFBQSxDQUFLak8sS0FBQSxHQUFR\
              dVgsS0FBQSxDQUFNdlgsS0FBQTtJQUMzQixXQUNTd1gsV0FBQSxFQUFhO01BQ2xCL\
              E1BQU0vWCxDQUFBLEdBQUksS0FBS0MsS0FBQSxDQUFNK1gsU0FBQSxDQUFVLENBQU\
              F6TyxJQUFBLEtBQVF3TyxXQUFBLENBQVlELEtBQUEsRUFBT3ZPLElBQUksSUFBSSx\
              DQUFDO01BQ25FLElBQUl2SixDQUFBLEtBQU07TUFDTixLQUFLQyxLQUFBLENBQU1n\
              RixJQUFBLENBQUs2UyxLQUFLOztNQUVyQixLQUFLN1gsS0FBQSxDQUFNRyxNQUFBL\
              ENBQU9KLENBQUEsRUFBRyxHQUFHOFgsS0FBSztJQUNyQyxPQUNLO01BQ0QsS0FBSz\
              dYLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSzZTLEtBQUs7SUFDekI7RUFDSjtFQUNBN1E\
              sT0FBT3ZILEdBQUEsRUFBSztJQUNSLE1BQU15TSxFQUFBLEdBQUtzTCxRQUFBLENB\
              QVMsS0FBS3hYLEtBQUEsRUFBT1AsR0FBRztJQUNuQyxJQUFJLENBQUN5TSxFQUFBO\
              0lBQ0QsT0FBTztJQUNYLE1BQU04TCxHQUFBLEdBQU0sS0FBS2hZLEtBQUEsQ0FBTU\
              csTUFBQSxDQUFPLEtBQUtILEtBQUEsQ0FBTWlSLE9BQUEsQ0FBUS9FLEVBQUUsR0F\
              BRyxDQUFDO0lBQ3ZELE9BQU84TCxHQUFBLENBQUkvWCxNQUFBLEdBQVM7RUFDeEI7\
              RUFDQW1HLElBQUkzRyxHQUFBLEVBQUs4TSxVQUFBLEVBQVk7SUFwR3pCLElBQUF4T\
              CxFQUFBO0lBcUdRLE1BQU1tTCxFQUFBLEdBQUtzTCxRQUFBLENBQVMsS0FBS3hYLE\
              tBQUEsRUFBT1AsR0FBRztJQUNuQyxNQUFNZCxJQUFBLEdBQU91TixFQUFBLG9CQUF\
              BQSxFQUFBLENBQUk1TCxLQUFBO0lBQ2pCLFFBQVFTLEVBQUEsSUFBQ3dMLFVBQUEs\
              SUFBYzlPLFFBQUEsQ0FBU2tCLElBQUksSUFBSUEsSUFBQSxDQUFLMkIsS0FBQSxHQ\
              UFRM0IsSUFBQSxLQUE3QyxPQUFBb0MsRUFBQSxHQUFzRDtFQUNsRTtFQUNBNkUsSU\
              FBSW5HLEdBQUEsRUFBSztJQUNMLE9BQU8sQ0FBQyxDQUFDK1gsUUFBQSxDQUFTLEt\
              BQUt4WCxLQUFBLEVBQU9QLEdBQUc7RUFDckM7RUFDQXdILElBQUl4SCxHQUFBLEVB\
              QUthLEtBQUEsRUFBTztJQUNaLEtBQUt1QyxHQUFBLENBQUksSUFBSW5HLElBQUEsQ\
              0FBSytDLEdBQUEsRUFBS2EsS0FBSyxHQUFHLElBQUk7RUFDdkM7RUFBQTtBQUFBO0\
              FBQUE7QUFBQTtBQUFBO0VBTUFpSCxPQUFPME8sQ0FBQSxFQUFHN08sR0FBQSxFQUF\
              LNlEsSUFBQSxFQUFNO0lBQ2pCLE1BQU1yTixJQUFBLEdBQU1xTixJQUFBLEdBQU8s\
              SUFBSUEsSUFBQSxDQUFLLEtBQUk3USxHQUFBLG9CQUFBQSxHQUFBLENBQUtrQixRQ\
              UFBLElBQVcsbUJBQUl6SCxHQUFBLENBQUksSUFBSSxDQUFDO0lBQzdELElBQUl1Ry\
              xHQUFBLG9CQUFBQSxHQUFBLENBQUtPLFFBQUE7SUFDTFAsR0FBQSxDQUFJTyxRQUF\
              BLENBQVNpRCxJQUFHO0lBQ3BCLFdBQVd0QixJQUFBLElBQVEsS0FBS3RKLEtBQUE7\
              SUFDcEIrVSxjQUFBLENBQWUzTixHQUFBLEVBQUt3RCxJQUFBLEVBQUt0QixJQUFJO\
              0lBQ2pDLE9BQU9zQixJQUFBO0VBQ1g7RUFDQXBHLFNBQVM0QyxHQUFBLEVBQUtvSi\
              xTQUFBLEVBQVdDLFdBQUEsRUFBYTtJQUNsQyxJQUFJLENBQUNySixHQUFBO0lBQ0Q\
              sT0FBT2hDLElBQUEsQ0FBS3RILFNBQUEsQ0FBVSxJQUFJO0lBQzlCLFdBQVd3TCxJ\
              QUFBLElBQVEsS0FBS3RKLEtBQUEsRUFBTztNQUMzQixJQUFJLENBQUN4QyxNQUFBL\
              ENBQU84TCxJQUFJO01BQ1osTUFBTSxJQUFJL0gsS0FBQSxDQUFNLHNDQUFzQzZELE\
              lBQUEsQ0FBS3RILFNBQUEsQ0FBVXdMLElBQUksQ0FBQyxVQUFVO0lBQzVGO0lBQ0E\
              sSUFBSSxDQUFDbEMsR0FBQSxDQUFJaU0sYUFBQSxJQUFpQixLQUFLN0csZ0JBQUEs\
              Q0FBaUIsS0FBSztJQUNqRHBGLEdBQUEsR0FBTTdILE1BQUEsQ0FBT3FCLE1BQUEsQ\
              0FBTyxDQUFDLEdBQUd3RyxHQUFBLEVBQUssRUFBRWlNLGFBQUEsRUFBZSxLQUFLLE\
              NBQUM7SUFDeEQsT0FBTzhDLG1CQUFBLENBQW9CLE1BQU0vTyxHQUFBLEVBQUs7TUF\
              DbENvUCxlQUFBLEVBQWlCO01BQ2pCQyxTQUFBLEVBQVcsRUFBRXpILEtBQUEsRUFB\
              TyxLQUFLVixHQUFBLEVBQUssSUFBSTtNQUNsQ29JLFVBQUEsRUFBWXRQLEdBQUEsQ\
              0FBSWdHLE1BQUEsSUFBVTtNQUMxQnFELFdBQUE7TUFDQUQ7SUFDSixDQUFDO0VBQ0\
              w7QUFDSjs7O0FDMUlBLElBQU1uSixHQUFBLEdBQU07RUFDUitPLFVBQUEsRUFBWTt\
              FQUNaN0ssT0FBQSxFQUFTO0VBQ1RELFNBQUEsRUFBV3ZPLE9BQUE7RUFDWHFILEdB\
              QUEsRUFBSztFQUNMdUUsUUFBUWlDLElBQUEsRUFBSzdILE9BQUEsRUFBUztJQUNsQ\
              ixJQUFJLENBQUN6RixLQUFBLENBQU1zTixJQUFHO0lBQ1Y3SCxPQUFBLENBQVEsaU\
              NBQWlDO0lBQzdDLE9BQU82SCxJQUFBO0VBQ1g7RUFDQUQsVUFBQSxFQUFZQSxDQUF\
              DUSxPQUFBLEVBQVE1RSxHQUFBLEVBQUthLEdBQUEsS0FBUXJLLE9BQUEsQ0FBUWdL\
              LElBQUEsQ0FBS29FLE9BQUEsRUFBUTVFLEdBQUEsRUFBS2EsR0FBRztBQUNuRTs7O\
              0FDUEEsSUFBTW5LLE9BQUEsR0FBTixjQUFzQndELFVBQUEsQ0FBVztFQUM3QixXQU\
              FXZ0QsUUFBQSxFQUFVO0lBQ2pCLE9BQU87RUFDWDtFQUNBMUIsWUFBWW9KLE9BQUE\
              sRUFBUTtJQUNoQixNQUFNMU0sR0FBQSxFQUFLME0sT0FBTTtJQUNqQixLQUFLbkws\
              S0FBQSxHQUFRLEVBQUM7RUFDbEI7RUFDQTZDLElBQUl2QyxLQUFBLEVBQU87SUFDU\
              CxLQUFLTixLQUFBLENBQU1nRixJQUFBLENBQUsxRSxLQUFLO0VBQ3pCO0VBQUE7QU\
              FBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtFQVNBMEcsT0FBT3ZILEd\
              BQUEsRUFBSztJQUNSLE1BQU15WSxHQUFBLEdBQU1DLFdBQUEsQ0FBWTFZLEdBQUc7\
              SUFDM0IsSUFBSSxPQUFPeVksR0FBQSxLQUFRO0lBQ2YsT0FBTztJQUNYLE1BQU1GL\
              EdBQUEsR0FBTSxLQUFLaFksS0FBQSxDQUFNRyxNQUFBLENBQU8rWCxHQUFBLEVBQU\
              ssQ0FBQztJQUNwQyxPQUFPRixHQUFBLENBQUkvWCxNQUFBLEdBQVM7RUFDeEI7RUF\
              DQW1HLElBQUkzRyxHQUFBLEVBQUs4TSxVQUFBLEVBQVk7SUFDakIsTUFBTTJMLEdB\
              QUEsR0FBTUMsV0FBQSxDQUFZMVksR0FBRztJQUMzQixJQUFJLE9BQU95WSxHQUFBL\
              EtBQVE7SUFDZixPQUFPO0lBQ1gsTUFBTWhNLEVBQUEsR0FBSyxLQUFLbE0sS0FBQS\
              xDQUFNa1ksR0FBRztJQUN6QixPQUFPLENBQUMzTCxVQUFBLElBQWM5TyxRQUFBLEN\
              BQVN5TyxFQUFFLElBQUlBLEVBQUEsQ0FBRzVMLEtBQUEsR0FBUTRMLEVBQUE7RUFD\
              cEQ7RUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7RUFPQXRHLElBQUluRyxHQ\
              UFBLEVBQUs7SUFDTCxNQUFNeVksR0FBQSxHQUFNQyxXQUFBLENBQVkxWSxHQUFHO0\
              lBQzNCLE9BQU8sT0FBT3lZLEdBQUEsS0FBUSxZQUFZQSxHQUFBLEdBQU0sS0FBS2x\
              ZLEtBQUEsQ0FBTUMsTUFBQTtFQUN2RDtFQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7\
              QUFBQTtBQUFBO0VBUUFnSCxJQUFJeEgsR0FBQSxFQUFLYSxLQUFBLEVBQU87SUFDW\
              ixNQUFNNFgsR0FBQSxHQUFNQyxXQUFBLENBQVkxWSxHQUFHO0lBQzNCLElBQUksT0\
              FBT3lZLEdBQUEsS0FBUTtJQUNmLE1BQU0sSUFBSTNXLEtBQUEsQ0FBTSwrQkFBK0I\
              5QixHQUFHLEdBQUc7SUFDekQsTUFBTThPLElBQUEsR0FBTyxLQUFLdk8sS0FBQSxD\
              QUFNa1ksR0FBRztJQUMzQixJQUFJemEsUUFBQSxDQUFTOFEsSUFBSSxLQUFLM0UsY\
              UFBQSxDQUFjdEosS0FBSztJQUNyQ2lPLElBQUEsQ0FBS2pPLEtBQUEsR0FBUUEsS0\
              FBQTs7SUFFYixLQUFLTixLQUFBLENBQU1rWSxHQUFHLElBQUk1WCxLQUFBO0VBQzF\
              CO0VBQ0FpSCxPQUFPME8sQ0FBQSxFQUFHN08sR0FBQSxFQUFLO0lBQ1gsTUFBTWdS\
              LElBQUEsR0FBTSxFQUFDO0lBQ2IsSUFBSWhSLEdBQUEsb0JBQUFBLEdBQUEsQ0FBS\
              08sUUFBQTtJQUNMUCxHQUFBLENBQUlPLFFBQUEsQ0FBU3lRLElBQUc7SUFDcEIsSU\
              FBSXJZLENBQUEsR0FBSTtJQUNSLFdBQVd1SixJQUFBLElBQVEsS0FBS3RKLEtBQUE\
              7SUFDcEJvWSxJQUFBLENBQUlwVCxJQUFBLENBQUtrQyxJQUFBLENBQUtvQyxJQUFB\
              LEVBQU1wRixNQUFBLENBQU9uRSxDQUFBLEVBQUcsR0FBR3FILEdBQUcsQ0FBQztJQ\
              UN6QyxPQUFPZ1IsSUFBQTtFQUNYO0VBQ0E1VCxTQUFTNEMsR0FBQSxFQUFLb0osU0\
              FBQSxFQUFXQyxXQUFBLEVBQWE7SUFDbEMsSUFBSSxDQUFDckosR0FBQTtJQUNELE9\
              BQU9oQyxJQUFBLENBQUt0SCxTQUFBLENBQVUsSUFBSTtJQUM5QixPQUFPcVksbUJB\
              QUEsQ0FBb0IsTUFBTS9PLEdBQUEsRUFBSztNQUNsQ29QLGVBQUEsRUFBaUI7TUFDa\
              kJDLFNBQUEsRUFBVyxFQUFFekgsS0FBQSxFQUFPLEtBQUtWLEdBQUEsRUFBSyxJQU\
              FJO01BQ2xDb0ksVUFBQSxHQUFhdFAsR0FBQSxDQUFJZ0csTUFBQSxJQUFVLE1BQU0\
              7TUFDakNxRCxXQUFBO01BQ0FEO0lBQ0osQ0FBQztFQUNMO0VBQ0EsT0FBT3pKLEtB\
              QUtvRSxPQUFBLEVBQVE1RSxHQUFBLEVBQUthLEdBQUEsRUFBSztJQUMxQixNQUFNL\
              EVBQUVxUSxRQUFBLENBQVMsSUFBSXJRLEdBQUE7SUFDckIsTUFBTWdSLElBQUEsR0\
              FBTSxJQUFJLEtBQUtqTixPQUFNO0lBQzNCLElBQUk1RSxHQUFBLElBQU9wSSxNQUF\
              BLENBQU9rTixRQUFBLElBQVk5TCxNQUFBLENBQU9nSCxHQUFHLEdBQUc7TUFDdkMs\
              SUFBSXhHLENBQUEsR0FBSTtNQUNSLFNBQVNtTSxFQUFBLElBQU0zRixHQUFBLEVBQ\
              Us7UUFDaEIsSUFBSSxPQUFPa1IsUUFBQSxLQUFhLFlBQVk7VUFDaEMsTUFBTWhZLE\
              dBQUEsR0FBTThHLEdBQUEsWUFBZWQsR0FBQSxHQUFNeUcsRUFBQSxHQUFLaEksTUF\
              BQSxDQUFPbkUsQ0FBQSxFQUFHO1VBQ2hEbU0sRUFBQSxHQUFLdUwsUUFBQSxDQUFT\
              clcsSUFBQSxDQUFLbUYsR0FBQSxFQUFLOUcsR0FBQSxFQUFLeU0sRUFBRTtRQUNuQ\
              ztRQUNBa00sSUFBQSxDQUFJcFksS0FBQSxDQUFNZ0YsSUFBQSxDQUFLMkYsVUFBQS\
              xDQUFXdUIsRUFBQSxFQUFJLFFBQVc5RSxHQUFHLENBQUM7TUFDakQ7SUFDSjtJQUN\
              BLE9BQU9nUixJQUFBO0VBQ1g7QUFDSjtBQUNBLFNBQVNELFlBQVkxWSxHQUFBLEVB\
              QUs7RUFDdEIsSUFBSXlZLEdBQUEsR0FBTXphLFFBQUEsQ0FBU2dDLEdBQUcsSUFBS\
              UEsR0FBQSxDQUFJYSxLQUFBLEdBQVFiLEdBQUE7RUFDdEMsSUFBSXlZLEdBQUEsSU\
              FBTyxPQUFPQSxHQUFBLEtBQVE7RUFDdEJBLEdBQUEsR0FBTXBRLE1BQUEsQ0FBT29\
              RLEdBQUc7RUFDcEIsT0FBTyxPQUFPQSxHQUFBLEtBQVEsWUFBWXBRLE1BQUEsQ0FB\
              TzJELFNBQUEsQ0FBVXlNLEdBQUcsS0FBS0EsR0FBQSxJQUFPLElBQzVEQSxHQUFBL\
              EdBQ0E7QUFDVjs7O0FDM0dBLElBQU1HLEdBQUEsR0FBTTtFQUNSakMsVUFBQSxFQU\
              FZO0VBQ1o3SyxPQUFBLEVBQVM7RUFDVEQsU0FBQSxFQUFXck8sT0FBQTtFQUNYbUg\
              sR0FBQSxFQUFLO0VBQ0x1RSxRQUFReVAsSUFBQSxFQUFLclYsT0FBQSxFQUFTO0lB\
              Q2xCLElBQUksQ0FBQ3JGLEtBQUEsQ0FBTTBhLElBQUc7SUFDVnJWLE9BQUEsQ0FBU\
              SxrQ0FBa0M7SUFDOUMsT0FBT3FWLElBQUE7RUFDWDtFQUNBek4sVUFBQSxFQUFZQS\
              xDQUFDUSxPQUFBLEVBQVE1RSxHQUFBLEVBQUthLEdBQUEsS0FBUW5LLE9BQUEsQ0F\
              BUThKLElBQUEsQ0FBS29FLE9BQUEsRUFBUTVFLEdBQUEsRUFBS2EsR0FBRztBQUNu\
              RTs7O0FDWkEsSUFBTWtSLE1BQUEsR0FBUztFQUNYNU4sUUFBQSxFQUFVQSxDQUFBc\
              EssS0FBQSxLQUFTLE9BQU9BLEtBQUEsS0FBVTtFQUNwQ2lMLE9BQUEsRUFBUztFQU\
              NUbkgsR0FBQSxFQUFLO0VBQ0x1RSxPQUFBLEVBQVNBLENBQUF1RSxHQUFBLEtBQU9\
              BLEdBQUE7RUFDaEJwUCxVQUFVd0wsSUFBQSxFQUFNbEMsR0FBQSxFQUFLb0osU0FB\
              QSxFQUFXQyxXQUFBLEVBQWE7SUFDekNySixHQUFBLEdBQU03SCxNQUFBLENBQU9xQ\
              ixNQUFBLENBQU8sRUFBRTZRLFlBQUEsRUFBYyxLQUFLLEdBQUdySyxHQUFHO0lBQy\
              9DLE9BQU95SyxlQUFBLENBQWdCdkksSUFBQSxFQUFNbEMsR0FBQSxFQUFLb0osU0F\
              BQSxFQUFXQyxXQUFXO0VBQzVEO0FBQ0o7OztBQ1RBLElBQU04SCxPQUFBLEdBQVU7\
              RUFDWjdOLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBU0EsS0FBQSxJQUFTO0VBQ\
              zVCcUssVUFBQSxFQUFZQSxDQUFBLEtBQU0sSUFBSS9OLE1BQUEsQ0FBTyxJQUFJO0\
              VBQ2pDMk8sT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTFosSUFBQSxFQUF\
              NO0VBQ05tRixPQUFBLEVBQVNBLENBQUEsS0FBTSxJQUFJL0wsTUFBQSxDQUFPLElB\
              QUk7RUFDOUJrQixTQUFBLEVBQVdBLENBQUMsRUFBRTRGLE1BQUEsQ0FBTyxHQUFHM\
              EQsR0FBQSxLQUFRLE9BQU8xRCxNQUFBLEtBQVcsWUFBWTZVLE9BQUEsQ0FBUS9VLE\
              lBQUEsQ0FBS0EsSUFBQSxDQUFLRSxNQUFNLElBQ2hGQSxNQUFBLEdBQ0EwRCxHQUF\
              BLENBQUkrQixPQUFBLENBQVFzSjtBQUN0Qjs7O0FDVkEsSUFBTStGLE9BQUEsR0FB\
              VTtFQUNaOU4sUUFBQSxFQUFVQSxDQUFBcEssS0FBQSxLQUFTLE9BQU9BLEtBQUEsS\
              0FBVTtFQUNwQ2lMLE9BQUEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VBQ0xaLElBQU\
              EsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFBdUUsR0FBQSxLQUFPLElBQUl0USx\
              NQUFBLENBQU9zUSxHQUFBLENBQUksQ0FBQyxNQUFNLE9BQU9BLEdBQUEsQ0FBSSxD\
              QUFDLE1BQU0sR0FBRztFQUMzRHBQLFVBQVUsRUFBRTRGLE1BQUEsRUFBUXBELEtBQ\
              UEsQ0FBTSxHQUFHOEcsR0FBQSxFQUFLO0lBQzlCLElBQUkxRCxNQUFBLElBQVU4VS\
              xPQUFBLENBQVFoVixJQUFBLENBQUtBLElBQUEsQ0FBS0UsTUFBTSxHQUFHO01BQ3J\
              DLE1BQU0rVSxFQUFBLEdBQUsvVSxNQUFBLENBQU8sQ0FBQyxNQUFNLE9BQU9BLE1B\
              QUEsQ0FBTyxDQUFDLE1BQU07TUFDOUMsSUFBSXBELEtBQUEsS0FBVW1ZLEVBQUE7T\
              UFDVixPQUFPL1UsTUFBQTtJQUNmO0lBQ0EsT0FBT3BELEtBQUEsR0FBUThHLEdBQU\
              EsQ0FBSStCLE9BQUEsQ0FBUXdKLE9BQUEsR0FBVXZMLEdBQUEsQ0FBSStCLE9BQUE\
              sQ0FBUW1KLFFBQUE7RUFDckQ7QUFDSjs7O0FDaEJBLFNBQVNvRyxnQkFBZ0IsRUFB\
              RWxPLE1BQUEsRUFBUW1PLGlCQUFBLEVBQW1CdlUsR0FBQSxFQUFLOUQsS0FBQSxDQ\
              UFNLEdBQUc7RUFDaEUsSUFBSSxPQUFPQSxLQUFBLEtBQVU7RUFDakIsT0FBTzRELE\
              1BQUEsQ0FBTzVELEtBQUs7RUFDdkIsTUFBTXNZLEdBQUEsR0FBTSxPQUFPdFksS0F\
              BQSxLQUFVLFdBQVdBLEtBQUEsR0FBUXdILE1BQUEsQ0FBT3hILEtBQUs7RUFDNUQs\
              SUFBSSxDQUFDdVksUUFBQSxDQUFTRCxHQUFHO0VBQ2IsT0FBT0UsS0FBQSxDQUFNR\
              ixHQUFHLElBQUksU0FBU0EsR0FBQSxHQUFNLElBQUksVUFBVTtFQUNyRCxJQUFJak\
              0sQ0FBQSxHQUFJdkgsSUFBQSxDQUFLdEgsU0FBQSxDQUFVd0MsS0FBSztFQUM1Qix\
              JQUFJLENBQUNrSyxNQUFBLElBQ0RtTyxpQkFBQSxLQUNDLENBQUN2VSxHQUFBLElB\
              QU9BLEdBQUEsS0FBUSw4QkFDakIsTUFBTVosSUFBQSxDQUFLbUosQ0FBQyxHQUFHO\
              0lBQ2YsSUFBSTVNLENBQUEsR0FBSTRNLENBQUEsQ0FBRXNFLE9BQUEsQ0FBUSxHQU\
              FHO0lBQ3JCLElBQUlsUixDQUFBLEdBQUksR0FBRztNQUNQQSxDQUFBLEdBQUk0TSx\
              DQUFBLENBQUUxTSxNQUFBO01BQ04wTSxDQUFBLElBQUs7SUFDVDtJQUNBLElBQUlv\
              TSxDQUFBLEdBQUlKLGlCQUFBLElBQXFCaE0sQ0FBQSxDQUFFMU0sTUFBQSxHQUFTR\
              ixDQUFBLEdBQUk7SUFDNUMsT0FBT2daLENBQUEsS0FBTTtJQUNUcE0sQ0FBQSxJQU\
              FLO0VBQ2I7RUFDQSxPQUFPQSxDQUFBO0FBQ1g7OztBQ2xCQSxJQUFNcU0sUUFBQSx\
              HQUFXO0VBQ2J0TyxRQUFBLEVBQVVBLENBQUFwSyxLQUFBLEtBQVMsT0FBT0EsS0FB\
              QSxLQUFVO0VBQ3BDaUwsT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTFosS\
              UFBQSxFQUFNO0VBQ05tRixPQUFBLEVBQVNBLENBQUF1RSxHQUFBLEtBQU9BLEdBQU\
              EsQ0FBSXRKLEtBQUEsQ0FBTSxFQUFFLEVBQUVxVixXQUFBLENBQVksTUFBTSxRQUM\
              xQ0MsR0FBQSxHQUNBaE0sR0FBQSxDQUFJLENBQUMsTUFBTSxNQUNQcEYsTUFBQSxD\
              QUFPcVIsaUJBQUEsR0FDUHJSLE1BQUEsQ0FBT3NSLGlCQUFBO0VBQ2pCdGIsU0FBQ\
              SxFQUFXNGE7QUFDZjtBQUNBLElBQU1XLFFBQUEsR0FBVztFQUNiM08sUUFBQSxFQU\
              FVQSxDQUFBcEssS0FBQSxLQUFTLE9BQU9BLEtBQUEsS0FBVTtFQUNwQ2lMLE9BQUE\
              sRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VBQ0xvRyxNQUFBLEVBQVE7RUFDUmhILElB\
              QUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFBdUUsR0FBQSxLQUFPb00sVUFBQ\
              SxDQUFXcE0sR0FBRztFQUM5QnBQLFVBQVVhLElBQUEsRUFBTTtJQUNaLE1BQU1pYS\
              xHQUFBLEdBQU05USxNQUFBLENBQU9uSixJQUFBLENBQUsyQixLQUFLO0lBQzdCLE9\
              BQU91WSxRQUFBLENBQVNELEdBQUcsSUFBSUEsR0FBQSxDQUFJVyxhQUFBLENBQWMs\
              SUFBSWIsZUFBQSxDQUFnQi9aLElBQUk7RUFDckU7QUFDSjtBQUNBLElBQU02YSxLQ\
              UFBLEdBQVE7RUFDVjlPLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBUyxPQUFPQS\
              xLQUFBLEtBQVU7RUFDcENpTCxPQUFBLEVBQVM7RUFDVG5ILEdBQUEsRUFBSztFQUN\
              MWixJQUFBLEVBQU07RUFDTm1GLFFBQVF1RSxHQUFBLEVBQUs7SUFDVCxNQUFNdk8s\
              SUFBQSxHQUFPLElBQUkvQixNQUFBLENBQU8wYyxVQUFBLENBQVdwTSxHQUFHLENBQ\
              UM7SUFDdkMsTUFBTXVNLEdBQUEsR0FBTXZNLEdBQUEsQ0FBSStELE9BQUEsQ0FBUS\
              xHQUFHO0lBQzNCLElBQUl3SSxHQUFBLEtBQVEsTUFBTXZNLEdBQUEsQ0FBSUEsR0F\
              BQSxDQUFJak4sTUFBQSxHQUFTLENBQUMsTUFBTTtJQUN0Q3RCLElBQUEsQ0FBS2dh\
              LGlCQUFBLEdBQW9CekwsR0FBQSxDQUFJak4sTUFBQSxHQUFTd1osR0FBQSxHQUFNO\
              0lBQ2hELE9BQU85YSxJQUFBO0VBQ1g7RUFDQWIsU0FBQSxFQUFXNGE7QUFDZjs7O0\
              FDdENBLElBQU1nQixXQUFBLEdBQWNBLENBQUNwWixLQUFBLEtBQVUsT0FBT0EsS0F\
              BQSxLQUFVLFlBQVl3SCxNQUFBLENBQU8yRCxTQUFBLENBQVVuTCxLQUFLO0FBQ2xG\
              LElBQU1xWixVQUFBLEdBQWFBLENBQUN6TSxHQUFBLEVBQUswTSxNQUFBLEVBQVFDL\
              EtBQUEsRUFBTyxFQUFFQyxXQUFBLENBQVksTUFBT0EsV0FBQSxHQUFjL08sTUFBQS\
              xDQUFPbUMsR0FBRyxJQUFJNk0sUUFBQSxDQUFTN00sR0FBQSxDQUFJM0ksU0FBQSx\
              DQUFVcVYsTUFBTSxHQUFHQyxLQUFLO0FBQzlILFNBQVNHLGFBQWFyYixJQUFBLEVB\
              QU1rYixLQUFBLEVBQU92VyxNQUFBLEVBQVE7RUFDdkMsTUFBTSxFQUFFaEQsS0FBQ\
              SxDQUFNLElBQUkzQixJQUFBO0VBQ2xCLElBQUkrYSxXQUFBLENBQVlwWixLQUFLLE\
              tBQUtBLEtBQUEsSUFBUztFQUMvQixPQUFPZ0QsTUFBQSxHQUFTaEQsS0FBQSxDQUF\
              Na0UsUUFBQSxDQUFTcVYsS0FBSztFQUN4QyxPQUFPbkIsZUFBQSxDQUFnQi9aLElB\
              QUk7QUFDL0I7QUFDQSxJQUFNc2IsTUFBQSxHQUFTO0VBQ1h2UCxRQUFBLEVBQVVBL\
              ENBQUFwSyxLQUFBLEtBQVNvWixXQUFBLENBQVlwWixLQUFLLEtBQUtBLEtBQUEsSU\
              FBUztFQUNsRGlMLE9BQUEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VBQ0xvRyxNQUF\
              BLEVBQVE7RUFDUmhILElBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFDdUUs\
              R0FBQSxFQUFLZ04sUUFBQSxFQUFVOUgsR0FBQSxLQUFRdUgsVUFBQSxDQUFXek0sR\
              0FBQSxFQUFLLEdBQUcsR0FBR2tGLEdBQUc7RUFDMUR0VSxTQUFBLEVBQVdBLENBQU\
              FhLElBQUEsS0FBUXFiLFlBQUEsQ0FBYXJiLElBQUEsRUFBTSxHQUFHLElBQUk7QUF\
              DakQ7QUFDQSxJQUFNd2IsR0FBQSxHQUFNO0VBQ1J6UCxRQUFBLEVBQVVnUCxXQUFB\
              O0VBQ1ZuTyxPQUFBLEVBQVM7RUFDVG5ILEdBQUEsRUFBSztFQUNMWixJQUFBLEVBQ\
              U07RUFDTm1GLE9BQUEsRUFBU0EsQ0FBQ3VFLEdBQUEsRUFBS2dOLFFBQUEsRUFBVT\
              lILEdBQUEsS0FBUXVILFVBQUEsQ0FBV3pNLEdBQUEsRUFBSyxHQUFHLElBQUlrRix\
              HQUFHO0VBQzNEdFUsU0FBQSxFQUFXNGE7QUFDZjtBQUNBLElBQU0wQixNQUFBLEdB\
              QVM7RUFDWDFQLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBU29aLFdBQUEsQ0FBW\
              XBaLEtBQUssS0FBS0EsS0FBQSxJQUFTO0VBQ2xEaUwsT0FBQSxFQUFTO0VBQ1RuSC\
              xHQUFBLEVBQUs7RUFDTG9HLE1BQUEsRUFBUTtFQUNSaEgsSUFBQSxFQUFNO0VBQ05\
              tRixPQUFBLEVBQVNBLENBQUN1RSxHQUFBLEVBQUtnTixRQUFBLEVBQVU5SCxHQUFB\
              LEtBQVF1SCxVQUFBLENBQVd6TSxHQUFBLEVBQUssR0FBRyxJQUFJa0YsR0FBRztFQ\
              UMzRHRVLFNBQUEsRUFBV0EsQ0FBQWEsSUFBQSxLQUFRcWIsWUFBQSxDQUFhcmIsSU\
              FBQSxFQUFNLElBQUksSUFBSTtBQUNsRDs7O0FDM0JBLElBQU1rTSxNQUFBLEdBQVM\
              7QUFDWHhELEdBQUE7QUFDQWdSLEdBQUE7QUFDQUMsTUFBQTtBQUNBQyxPQUFBO0FB\
              Q0FDLE9BQUE7QUFDQXlCLE1BQUE7QUFDQUUsR0FBQTtBQUNBQyxNQUFBO0FBQ0FwQ\
              ixRQUFBO0FBQ0FLLFFBQUE7QUFDQUcsS0FBQSxDQUNKOzs7O0FDaEJBLFNBQVNhLG\
              FBQVkvWixLQUFBLEVBQU87RUFDeEIsT0FBTyxPQUFPQSxLQUFBLEtBQVUsWUFBWXd\
              ILE1BQUEsQ0FBTzJELFNBQUEsQ0FBVW5MLEtBQUs7QUFDOUQ7QUFDQSxJQUFNZ2Es\
              YUFBQSxHQUFnQkEsQ0FBQyxFQUFFaGEsS0FBQSxDQUFNLE1BQU04RSxJQUFBLENBQ\
              Ut0SCxTQUFBLENBQVV3QyxLQUFLO0FBQ3pELElBQU1pYSxXQUFBLEdBQWM7QUFDaE\
              I7RUFDSTdQLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBUyxPQUFPQSxLQUFBLEt\
              BQVU7RUFDcENpTCxPQUFBLEVBQVM7RUFDVG5ILEdBQUEsRUFBSztFQUNMdUUsT0FB\
              QSxFQUFTQSxDQUFBdUUsR0FBQSxLQUFPQSxHQUFBO0VBQ2hCcFAsU0FBQSxFQUFXd\
              2M7QUFDZjtBQUNBO0VBQ0k1UCxRQUFBLEVBQVVBLENBQUFwSyxLQUFBLEtBQVNBLE\
              tBQUEsSUFBUztFQUM1QnFLLFVBQUEsRUFBWUEsQ0FBQSxLQUFNLElBQUkvTixNQUF\
              BLENBQU8sSUFBSTtFQUNqQzJPLE9BQUEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VB\
              Q0xaLElBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFBLEtBQU07RUFDZjdLL\
              FNBQUEsRUFBV3djO0FBQ2Y7QUFDQTtFQUNJNVAsUUFBQSxFQUFVQSxDQUFBcEssS0\
              FBQSxLQUFTLE9BQU9BLEtBQUEsS0FBVTtFQUNwQ2lMLE9BQUEsRUFBUztFQUNUbkg\
              sR0FBQSxFQUFLO0VBQ0xaLElBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFB\
              dUUsR0FBQSxLQUFPQSxHQUFBLEtBQVE7RUFDeEJwUCxTQUFBLEVBQVd3YztBQUNmO\
              0FBQ0E7RUFDSTVQLFFBQUEsRUFBVTJQLFlBQUE7RUFDVjlPLE9BQUEsRUFBUztFQU\
              NUbkgsR0FBQSxFQUFLO0VBQ0xaLElBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSx\
              DQUFDdUUsR0FBQSxFQUFLZ04sUUFBQSxFQUFVLEVBQUVKLFdBQUEsQ0FBWSxNQUFN\
              QSxXQUFBLEdBQWMvTyxNQUFBLENBQU9tQyxHQUFHLElBQUk2TSxRQUFBLENBQVM3T\
              SxHQUFBLEVBQUssRUFBRTtFQUN6RnBQLFNBQUEsRUFBV0EsQ0FBQyxFQUFFd0MsS0\
              FBQSxDQUFNLE1BQU0rWixZQUFBLENBQVkvWixLQUFLLElBQUlBLEtBQUEsQ0FBTWt\
              FLFFBQUEsQ0FBUyxJQUFJWSxJQUFBLENBQUt0SCxTQUFBLENBQVV3QyxLQUFLO0FB\
              QzFGO0FBQ0E7RUFDSW9LLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBUyxPQUFPQ\
              SxLQUFBLEtBQVU7RUFDcENpTCxPQUFBLEVBQVM7RUFDVG5ILEdBQUEsRUFBSztFQU\
              NMWixJQUFBLEVBQU07RUFDTm1GLE9BQUEsRUFBU0EsQ0FBQXVFLEdBQUEsS0FBT29\
              NLFVBQUEsQ0FBV3BNLEdBQUc7RUFDOUJwUCxTQUFBLEVBQVd3YztBQUNmLEVBQ0o7\
              O0FBQ0EsSUFBTUUsU0FBQSxHQUFZO0VBQ2RqUCxPQUFBLEVBQVM7RUFDVG5ILEdBQ\
              UEsRUFBSztFQUNMWixJQUFBLEVBQU07RUFDTm1GLFFBQVF1RSxHQUFBLEVBQUtuSy\
              xPQUFBLEVBQVM7SUFDbEJBLE9BQUEsQ0FBUSwyQkFBMkJxQyxJQUFBLENBQUt0SCx\
              TQUFBLENBQVVvUCxHQUFHLENBQUMsRUFBRTtJQUN4RCxPQUFPQSxHQUFBO0VBQ1g7\
              QUFDSjtBQUNBLElBQU11TixPQUFBLEdBQVMsQ0FBQ3BULEdBQUEsRUFBS2dSLEdBQ\
              UcsRUFBRXZZLE1BQUEsQ0FBT3lhLFdBQUEsRUFBYUMsU0FBUzs7O0FDeER2RCxJQU\
              FNRSxNQUFBLEdBQVM7RUFDWGhRLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBU0E\
              sS0FBQSxZQUFpQnFhLFVBQUE7RUFBQTtFQUNwQ3BQLE9BQUEsRUFBUztFQUNUbkgs\
              R0FBQSxFQUFLO0VBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQ\
              TtFQVNMdUUsUUFBUU8sR0FBQSxFQUFLbkcsT0FBQSxFQUFTO0lBQ2xCLElBQUksT0\
              FBTzZYLE1BQUEsS0FBVyxZQUFZO01BQzlCLE9BQU9BLE1BQUEsQ0FBTzdULElBQUE\
              sQ0FBS21DLEdBQUEsRUFBSyxRQUFRO0lBQ3BDLFdBQ1MsT0FBTzJSLElBQUEsS0FB\
              UyxZQUFZO01BRWpDLE1BQU0zTixHQUFBLEdBQU0yTixJQUFBLENBQUszUixHQUFBL\
              ENBQUl2SCxPQUFBLENBQVEsV0FBVyxFQUFFLENBQUM7TUFDM0MsTUFBTW1aLE1BQU\
              EsR0FBUyxJQUFJSCxVQUFBLENBQVd6TixHQUFBLENBQUlqTixNQUFNO01BQ3hDLFN\
              BQVNGLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUltTixHQUFBLENBQUlqTixNQUFB\
              LEVBQVEsRUFBRUYsQ0FBQTtNQUM5QithLE1BQUEsQ0FBTy9hLENBQUMsSUFBSW1OL\
              EdBQUEsQ0FBSTZOLFVBQUEsQ0FBV2hiLENBQUM7TUFDaEMsT0FBTythLE1BQUE7SU\
              FDWCxPQUNLO01BQ0QvWCxPQUFBLENBQVEsMEZBQTBGO01BQ2xHLE9BQU9tRyxHQUF\
              BO0lBQ1g7RUFDSjtFQUNBcEwsVUFBVSxFQUFFK08sT0FBQSxFQUFTN0UsSUFBQSxF\
              QUFNMUgsS0FBQSxDQUFNLEdBQUc4RyxHQUFBLEVBQUtvSixTQUFBLEVBQVdDLFdBQ\
              UEsRUFBYTtJQUM3RCxNQUFNdUssR0FBQSxHQUFNMWEsS0FBQTtJQUNaLElBQUk0TS\
              xHQUFBO0lBQ0osSUFBSSxPQUFPME4sTUFBQSxLQUFXLFlBQVk7TUFDOUIxTixHQUF\
              BLEdBQ0k4TixHQUFBLFlBQWVKLE1BQUEsR0FDVEksR0FBQSxDQUFJeFcsUUFBQSxD\
              QUFTLFFBQVEsSUFDckJvVyxNQUFBLENBQU83VCxJQUFBLENBQUtpVSxHQUFBLENBQ\
              UlGLE1BQU0sRUFBRXRXLFFBQUEsQ0FBUyxRQUFRO0lBQ3ZELFdBQ1MsT0FBT3lXLE\
              lBQUEsS0FBUyxZQUFZO01BQ2pDLElBQUlDLENBQUEsR0FBSTtNQUNSLFNBQVNuYix\
              DQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJaWIsR0FBQSxDQUFJL2EsTUFBQSxFQUFR\
              LEVBQUVGLENBQUE7TUFDOUJtYixDQUFBLElBQUtoWCxNQUFBLENBQU9pWCxZQUFBL\
              ENBQWFILEdBQUEsQ0FBSWpiLENBQUMsQ0FBQztNQUNuQ21OLEdBQUEsR0FBTStOLE\
              lBQUEsQ0FBS0MsQ0FBQztJQUNoQixPQUNLO01BQ0QsTUFBTSxJQUFJM1osS0FBQSx\
              DQUFNLDBGQUEwRjtJQUM5RztJQUNBLElBQUksQ0FBQ3lHLElBQUE7SUFDREEsSUFB\
              QSxHQUFPcEwsTUFBQSxDQUFPa04sYUFBQTtJQUNsQixJQUFJOUIsSUFBQSxLQUFTc\
              EwsTUFBQSxDQUFPb04sWUFBQSxFQUFjO01BQzlCLE1BQU0rRCxTQUFBLEdBQVlyRS\
              xJQUFBLENBQUtDLEdBQUEsQ0FBSXZDLEdBQUEsQ0FBSStCLE9BQUEsQ0FBUTRFLFN\
              BQUEsR0FBWTNHLEdBQUEsQ0FBSWdHLE1BQUEsQ0FBT25OLE1BQUEsRUFBUW1ILEdB\
              QUEsQ0FBSStCLE9BQUEsQ0FBUTZFLGVBQWU7TUFDakcsTUFBTXJCLENBQUEsR0FBS\
              WpELElBQUEsQ0FBSzBSLElBQUEsQ0FBS2xPLEdBQUEsQ0FBSWpOLE1BQUEsR0FBUz\
              hOLFNBQVM7TUFDMUMsTUFBTXJKLEtBQUEsR0FBUSxJQUFJK0IsS0FBQSxDQUFNa0c\
              sQ0FBQztNQUN6QixTQUFTNU0sQ0FBQSxHQUFJLEdBQUdvVCxDQUFBLEdBQUksR0FB\
              R3BULENBQUEsR0FBSTRNLENBQUEsRUFBRyxFQUFFNU0sQ0FBQSxFQUFHb1QsQ0FBQ\
              SxJQUFLcEYsU0FBQSxFQUFXO1FBQy9DckosS0FBQSxDQUFNM0UsQ0FBQyxJQUFJbU\
              4sR0FBQSxDQUFJNEMsTUFBQSxDQUFPcUQsQ0FBQSxFQUFHcEYsU0FBUztNQUN0Qzt\
              NQUNBYixHQUFBLEdBQU14SSxLQUFBLENBQU1PLElBQUEsQ0FBSytDLElBQUEsS0FB\
              U3BMLE1BQUEsQ0FBT2tOLGFBQUEsR0FBZ0IsT0FBTyxHQUFHO0lBQy9EO0lBQ0EsT\
              0FBTytILGVBQUEsQ0FBZ0IsRUFBRWhGLE9BQUEsRUFBUzdFLElBQUEsRUFBTTFILE\
              tBQUEsRUFBTzRNLEdBQUEsQ0FBSSxHQUFHOUYsR0FBQSxFQUFLb0osU0FBQSxFQUF\
              XQyxXQUFXO0VBQ3JGO0FBQ0o7OztBQzFEQSxTQUFTNEssYUFBYWpELElBQUEsRUFB\
              S3JWLE9BQUEsRUFBUztFQUxwQyxJQUFBaEMsRUFBQTtFQU1JLElBQUlyRCxLQUFBL\
              ENBQU0wYSxJQUFHLEdBQUc7SUFDWixTQUFTclksQ0FBQSxHQUFJLEdBQUdBLENBQU\
              EsR0FBSXFZLElBQUEsQ0FBSXBZLEtBQUEsQ0FBTUMsTUFBQSxFQUFRLEVBQUVGLEN\
              BQUEsRUFBRztNQUN2QyxJQUFJdUosSUFBQSxHQUFPOE8sSUFBQSxDQUFJcFksS0FB\
              QSxDQUFNRCxDQUFDO01BQ3RCLElBQUl2QyxNQUFBLENBQU84TCxJQUFJO01BQ1g7T\
              UFBQSxJQUNLaE0sS0FBQSxDQUFNZ00sSUFBSSxHQUFHO1FBQ2xCLElBQUlBLElBQU\
              EsQ0FBS3RKLEtBQUEsQ0FBTUMsTUFBQSxHQUFTO1FBQ3BCOEMsT0FBQSxDQUFRLGd\
              EQUFnRDtRQUM1RCxNQUFNbVQsSUFBQSxHQUFPNU0sSUFBQSxDQUFLdEosS0FBQSxD\
              QUFNLENBQUMsS0FBSyxJQUFJdEQsSUFBQSxDQUFLLElBQUlFLE1BQUEsQ0FBTyxJQ\
              UFJLENBQUM7UUFDdkQsSUFBSTBNLElBQUEsQ0FBS3NELGFBQUE7UUFDTHNKLElBQU\
              EsQ0FBS3pXLEdBQUEsQ0FBSW1OLGFBQUEsR0FBZ0JzSixJQUFBLENBQUt6VyxHQUF\
              BLENBQUltTixhQUFBLEdBQzVCLEdBQUd0RCxJQUFBLENBQUtzRCxhQUFhO0FBQUEs\
              RUFBS3NKLElBQUEsQ0FBS3pXLEdBQUEsQ0FBSW1OLGFBQWEsS0FDaER0RCxJQUFBL\
              ENBQUtzRCxhQUFBO1FBQ2YsSUFBSXRELElBQUEsQ0FBS3VELE9BQUEsRUFBUztVQU\
              NkLE1BQU15TyxFQUFBLElBQUt2YSxFQUFBLEdBQUFtVixJQUFBLENBQUs1VixLQUF\
              BLEtBQUwsT0FBQVMsRUFBQSxHQUFjbVYsSUFBQSxDQUFLelcsR0FBQTtVQUM5QjZi\
              LEVBQUEsQ0FBR3pPLE9BQUEsR0FBVXlPLEVBQUEsQ0FBR3pPLE9BQUEsR0FDVixHQ\
              UFHdkQsSUFBQSxDQUFLdUQsT0FBTztBQUFBLEVBQUt5TyxFQUFBLENBQUd6TyxPQU\
              FPLEtBQzlCdkQsSUFBQSxDQUFLdUQsT0FBQTtRQUNmO1FBQ0F2RCxJQUFBLEdBQU8\
              0TSxJQUFBO01BQ1g7TUFDQWtDLElBQUEsQ0FBSXBZLEtBQUEsQ0FBTUQsQ0FBQyxJ\
              QUFJdkMsTUFBQSxDQUFPOEwsSUFBSSxJQUFJQSxJQUFBLEdBQU8sSUFBSTVNLElBQ\
              UEsQ0FBSzRNLElBQUk7SUFDdEQ7RUFDSjtFQUVJdkcsT0FBQSxDQUFRLGtDQUFrQz\
              tFQUM5QyxPQUFPcVYsSUFBQTtBQUNYO0FBQ0EsU0FBU21ELFlBQVlwUSxPQUFBLEV\
              BQVFxUSxRQUFBLEVBQVVwVSxHQUFBLEVBQUs7RUFDeEMsTUFBTSxFQUFFcVEsUUFB\
              QSxDQUFTLElBQUlyUSxHQUFBO0VBQ3JCLE1BQU1xVSxNQUFBLEdBQVEsSUFBSXhlL\
              E9BQUEsQ0FBUWtPLE9BQU07RUFDaENzUSxNQUFBLENBQU1yWCxHQUFBLEdBQU07RU\
              FDWixJQUFJckUsQ0FBQSxHQUFJO0VBQ1IsSUFBSXliLFFBQUEsSUFBWXJkLE1BQUE\
              sQ0FBT2tOLFFBQUEsSUFBWTlMLE1BQUEsQ0FBT2ljLFFBQVE7RUFDOUMsU0FBU3RQ\
              LEVBQUEsSUFBTXNQLFFBQUEsRUFBVTtJQUNyQixJQUFJLE9BQU8vRCxRQUFBLEtBQ\
              WE7SUFDcEJ2TCxFQUFBLEdBQUt1TCxRQUFBLENBQVNyVyxJQUFBLENBQUtvYSxRQU\
              FBLEVBQVV0WCxNQUFBLENBQU9uRSxDQUFBLEVBQUcsR0FBR21NLEVBQUU7SUFDaEQ\
              sSUFBSXpNLEdBQUEsRUFBS2EsS0FBQTtJQUNULElBQUltRyxLQUFBLENBQU1DLE9B\
              QUEsQ0FBUXdGLEVBQUUsR0FBRztNQUNuQixJQUFJQSxFQUFBLENBQUdqTSxNQUFBL\
              EtBQVcsR0FBRztRQUNqQlIsR0FBQSxHQUFNeU0sRUFBQSxDQUFHLENBQUM7UUFDVj\
              VMLEtBQUEsR0FBUTRMLEVBQUEsQ0FBRyxDQUFDO01BQ2hCO01BRUksTUFBTSxJQUF\
              JMUQsU0FBQSxDQUFVLGdDQUFnQzBELEVBQUUsRUFBRTtJQUNoRSxXQUNTQSxFQUFB\
              LElBQU1BLEVBQUEsWUFBYzNNLE1BQUEsRUFBUTtNQUNqQyxNQUFNdUYsSUFBQSxHQ\
              UFPdkYsTUFBQSxDQUFPdUYsSUFBQSxDQUFLb0gsRUFBRTtNQUMzQixJQUFJcEgsSU\
              FBQSxDQUFLN0UsTUFBQSxLQUFXLEdBQUc7UUFDbkJSLEdBQUEsR0FBTXFGLElBQUE\
              sQ0FBSyxDQUFDO1FBQ1p4RSxLQUFBLEdBQVE0TCxFQUFBLENBQUd6TSxHQUFHO01B\
              Q2xCLE9BQ0s7UUFDRCxNQUFNLElBQUkrSSxTQUFBLENBQVUsb0NBQW9DMUQsSUFBQ\
              SxDQUFLN0UsTUFBTSxPQUFPO01BQzlFO0lBQ0osT0FDSztNQUNEUixHQUFBLEdBQU\
              15TSxFQUFBO0lBQ1Y7SUFDQXVQLE1BQUEsQ0FBTXpiLEtBQUEsQ0FBTWdGLElBQUE\
              sQ0FBSytRLFVBQUEsQ0FBV3RXLEdBQUEsRUFBS2EsS0FBQSxFQUFPOEcsR0FBRyxD\
              QUFDO0VBQ2hEO0VBQ0osT0FBT3FVLE1BQUE7QUFDWDtBQUNBLElBQU1DLEtBQUEsR\
              0FBUTtFQUNWdEYsVUFBQSxFQUFZO0VBQ1o3SyxPQUFBLEVBQVM7RUFDVG5ILEdBQU\
              EsRUFBSztFQUNMdUUsT0FBQSxFQUFTMFMsWUFBQTtFQUNUMVEsVUFBQSxFQUFZNFE\
              7QUFDaEI7OztBQ3JFQSxJQUFNSSxRQUFBLEdBQU4sTUFBTUMsU0FBQSxTQUFpQjNl\
              LE9BQUEsQ0FBUTtFQUMzQjhFLFlBQUEsRUFBYztJQUNWLE1BQU07SUFDTixLQUFLY\
              yxHQUFBLEdBQU05RixPQUFBLENBQVEwWSxTQUFBLENBQVU1UyxHQUFBLENBQUlnWi\
              xJQUFBLENBQUssSUFBSTtJQUMxQyxLQUFLN1UsTUFBQSxHQUFTakssT0FBQSxDQUF\
              RMFksU0FBQSxDQUFVek8sTUFBQSxDQUFPNlUsSUFBQSxDQUFLLElBQUk7SUFDaEQs\
              S0FBS3pWLEdBQUEsR0FBTXJKLE9BQUEsQ0FBUTBZLFNBQUEsQ0FBVXJQLEdBQUEsQ\
              0FBSXlWLElBQUEsQ0FBSyxJQUFJO0lBQzFDLEtBQUtqVyxHQUFBLEdBQU03SSxPQU\
              FBLENBQVEwWSxTQUFBLENBQVU3UCxHQUFBLENBQUlpVyxJQUFBLENBQUssSUFBSTt\
              JQUMxQyxLQUFLNVUsR0FBQSxHQUFNbEssT0FBQSxDQUFRMFksU0FBQSxDQUFVeE8s\
              R0FBQSxDQUFJNFUsSUFBQSxDQUFLLElBQUk7SUFDMUMsS0FBS3pYLEdBQUEsR0FBT\
              XdYLFNBQUEsQ0FBU3hYLEdBQUE7RUFDeEI7RUFBQTtBQUFBO0FBQUE7QUFBQTtFQU\
              tBbUQsT0FBTzBPLENBQUEsRUFBRzdPLEdBQUEsRUFBSztJQUNYLElBQUksQ0FBQ0E\
              sR0FBQTtJQUNELE9BQU8sTUFBTUcsTUFBQSxDQUFPME8sQ0FBQztJQUN6QixNQUFN\
              ckwsSUFBQSxHQUFNLG1CQUFJL0osR0FBQSxDQUFJO0lBQ3BCLElBQUl1RyxHQUFBL\
              G9CQUFBQSxHQUFBLENBQUtPLFFBQUE7SUFDTFAsR0FBQSxDQUFJTyxRQUFBLENBQV\
              NpRCxJQUFHO0lBQ3BCLFdBQVdzTCxJQUFBLElBQVEsS0FBS2xXLEtBQUEsRUFBTzt\
              NQUMzQixJQUFJUCxHQUFBLEVBQUthLEtBQUE7TUFDVCxJQUFJOUMsTUFBQSxDQUFP\
              MFksSUFBSSxHQUFHO1FBQ2R6VyxHQUFBLEdBQU15SCxJQUFBLENBQUtnUCxJQUFBL\
              ENBQUt6VyxHQUFBLEVBQUssSUFBSTJILEdBQUc7UUFDNUI5RyxLQUFBLEdBQVE0Ry\
              xJQUFBLENBQUtnUCxJQUFBLENBQUs1VixLQUFBLEVBQU9iLEdBQUEsRUFBSzJILEd\
              BQUc7TUFDckMsT0FDSztRQUNEM0gsR0FBQSxHQUFNeUgsSUFBQSxDQUFLZ1AsSUFB\
              QSxFQUFNLElBQUk5TyxHQUFHO01BQzVCO01BQ0EsSUFBSXdELElBQUEsQ0FBSWhGL\
              EdBQUEsQ0FBSW5HLEdBQUc7TUFDWCxNQUFNLElBQUk4QixLQUFBLENBQU0sOENBQT\
              hDO01BQ2xFcUosSUFBQSxDQUFJM0QsR0FBQSxDQUFJeEgsR0FBQSxFQUFLYSxLQUF\
              LO0lBQ3RCO0lBQ0EsT0FBT3NLLElBQUE7RUFDWDtFQUNBLE9BQU83RCxLQUFLb0Us\
              T0FBQSxFQUFRcVEsUUFBQSxFQUFVcFUsR0FBQSxFQUFLO0lBQy9CLE1BQU1xVSxNQ\
              UFBLEdBQVFGLFdBQUEsQ0FBWXBRLE9BQUEsRUFBUXFRLFFBQUEsRUFBVXBVLEdBQU\
              c7SUFDL0MsTUFBTTBVLEtBQUEsR0FBTyxJQUFJLEtBQUs7SUFDdEJBLEtBQUEsQ0F\
              BSzliLEtBQUEsR0FBUXliLE1BQUEsQ0FBTXpiLEtBQUE7SUFDbkIsT0FBTzhiLEtB\
              QUE7RUFDWDtBQUNKO0FBQ0FILFFBQUEsQ0FBU3ZYLEdBQUEsR0FBTTtBQUNmLElBQ\
              U0yWCxJQUFBLEdBQU87RUFDVDNGLFVBQUEsRUFBWTtFQUNaMUwsUUFBQSxFQUFVQS\
              xDQUFBcEssS0FBQSxLQUFTQSxLQUFBLFlBQWlCTyxHQUFBO0VBQ3BDeUssU0FBQSx\
              FQUFXcVEsUUFBQTtFQUNYcFEsT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFD\
              THVFLFFBQVF5UCxJQUFBLEVBQUtyVixPQUFBLEVBQVM7SUFDbEIsTUFBTTBZLE1BQ\
              UEsR0FBUUosWUFBQSxDQUFhakQsSUFBQSxFQUFLclYsT0FBTztJQUN2QyxNQUFNaV\
              osUUFBQSxHQUFXLEVBQUM7SUFDbEIsV0FBVyxFQUFFdmMsR0FBQSxDQUFJLEtBQUt\
              nYyxNQUFBLENBQU16YixLQUFBLEVBQU87TUFDL0IsSUFBSXZDLFFBQUEsQ0FBU2dD\
              LEdBQUcsR0FBRztRQUNmLElBQUl1YyxRQUFBLENBQVN6TyxRQUFBLENBQVM5TixHQ\
              UFBLENBQUlhLEtBQUssR0FBRztVQUM5QnlDLE9BQUEsQ0FBUSxpREFBaUR0RCxHQU\
              FBLENBQUlhLEtBQUssRUFBRTtRQUN4RSxPQUNLO1VBQ0QwYixRQUFBLENBQVNoWCx\
              JQUFBLENBQUt2RixHQUFBLENBQUlhLEtBQUs7UUFDM0I7TUFDSjtJQUNKO0lBQ0Es\
              T0FBT2YsTUFBQSxDQUFPcUIsTUFBQSxDQUFPLElBQUkrYSxRQUFBLENBQVMsR0FBR\
              0YsTUFBSztFQUM5QztFQUNBOVEsVUFBQSxFQUFZQSxDQUFDUSxPQUFBLEVBQVFxUS\
              xRQUFBLEVBQVVwVSxHQUFBLEtBQVF1VSxRQUFBLENBQVM1VSxJQUFBLENBQUtvRSx\
              PQUFBLEVBQVFxUSxRQUFBLEVBQVVwVSxHQUFHO0FBQzlFOzs7QUNyRUEsU0FBUzZV\
              LGNBQWMsRUFBRTNiLEtBQUEsRUFBT29ELE1BQUEsQ0FBTyxHQUFHMEQsR0FBQSxFQ\
              UFLO0VBQzNDLE1BQU04VSxPQUFBLEdBQVU1YixLQUFBLEdBQVE2YixPQUFBLEdBQV\
              VDLFFBQUE7RUFDbEMsSUFBSTFZLE1BQUEsSUFBVXdZLE9BQUEsQ0FBUTFZLElBQUE\
              sQ0FBS0EsSUFBQSxDQUFLRSxNQUFNO0VBQ2xDLE9BQU9BLE1BQUE7RUFDWCxPQUFP\
              cEQsS0FBQSxHQUFROEcsR0FBQSxDQUFJK0IsT0FBQSxDQUFRd0osT0FBQSxHQUFVd\
              kwsR0FBQSxDQUFJK0IsT0FBQSxDQUFRbUosUUFBQTtBQUNyRDtBQUNBLElBQU02Si\
              xPQUFBLEdBQVU7RUFDWnpSLFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBU0EsS0F\
              BQSxLQUFVO0VBQzdCaUwsT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTFos\
              SUFBQSxFQUFNO0VBQ05tRixPQUFBLEVBQVNBLENBQUEsS0FBTSxJQUFJL0wsTUFBQ\
              SxDQUFPLElBQUk7RUFDOUJrQixTQUFBLEVBQVdtZTtBQUNmO0FBQ0EsSUFBTUcsUU\
              FBQSxHQUFXO0VBQ2IxUixRQUFBLEVBQVVBLENBQUFwSyxLQUFBLEtBQVNBLEtBQUE\
              sS0FBVTtFQUM3QmlMLE9BQUEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VBQ0xaLElB\
              QUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFBLEtBQU0sSUFBSS9MLE1BQUEsQ\
              0FBTyxLQUFLO0VBQy9Ca0IsU0FBQSxFQUFXbWU7QUFDZjs7O0FDcEJBLElBQU1JLF\
              NBQUEsR0FBVztFQUNiM1IsUUFBQSxFQUFVQSxDQUFBcEssS0FBQSxLQUFTLE9BQU9\
              BLEtBQUEsS0FBVTtFQUNwQ2lMLE9BQUEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VB\
              Q0xaLElBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFDdUUsR0FBQSxLQUFRQ\
              SxHQUFBLENBQUl0SixLQUFBLENBQU0sRUFBRSxFQUFFcVYsV0FBQSxDQUFZLE1BQU\
              0sUUFDNUNDLEdBQUEsR0FDQWhNLEdBQUEsQ0FBSSxDQUFDLE1BQU0sTUFDUHBGLE1\
              BQUEsQ0FBT3FSLGlCQUFBLEdBQ1ByUixNQUFBLENBQU9zUixpQkFBQTtFQUNqQnRi\
              LFNBQUEsRUFBVzRhO0FBQ2Y7QUFDQSxJQUFNNEQsU0FBQSxHQUFXO0VBQ2I1UixRQ\
              UFBLEVBQVVBLENBQUFwSyxLQUFBLEtBQVMsT0FBT0EsS0FBQSxLQUFVO0VBQ3BDaU\
              wsT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTG9HLE1BQUEsRUFBUTtFQUN\
              SaEgsSUFBQSxFQUFNO0VBQ05tRixPQUFBLEVBQVNBLENBQUN1RSxHQUFBLEtBQVFv\
              TSxVQUFBLENBQVdwTSxHQUFBLENBQUl2TCxPQUFBLENBQVEsTUFBTSxFQUFFLENBQ\
              UM7RUFDbEQ3RCxVQUFVYSxJQUFBLEVBQU07SUFDWixNQUFNaWEsR0FBQSxHQUFNOV\
              EsTUFBQSxDQUFPbkosSUFBQSxDQUFLMkIsS0FBSztJQUM3QixPQUFPdVksUUFBQSx\
              DQUFTRCxHQUFHLElBQUlBLEdBQUEsQ0FBSVcsYUFBQSxDQUFjLElBQUliLGVBQUEs\
              Q0FBZ0IvWixJQUFJO0VBQ3JFO0FBQ0o7QUFDQSxJQUFNNGQsTUFBQSxHQUFRO0VBQ\
              1Y3UixRQUFBLEVBQVVBLENBQUFwSyxLQUFBLEtBQVMsT0FBT0EsS0FBQSxLQUFVO0\
              VBQ3BDaUwsT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTFosSUFBQSxFQUF\
              NO0VBQ05tRixRQUFRdUUsR0FBQSxFQUFLO0lBQ1QsTUFBTXZPLElBQUEsR0FBTyxJ\
              QUFJL0IsTUFBQSxDQUFPMGMsVUFBQSxDQUFXcE0sR0FBQSxDQUFJdkwsT0FBQSxDQ\
              UFRLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTThYLEdBQUEsR0FBTXZNLE\
              dBQUEsQ0FBSStELE9BQUEsQ0FBUSxHQUFHO0lBQzNCLElBQUl3SSxHQUFBLEtBQVE\
              sSUFBSTtNQUNaLE1BQU0rQyxDQUFBLEdBQUl0UCxHQUFBLENBQUkzSSxTQUFBLENB\
              QVVrVixHQUFBLEdBQU0sQ0FBQyxFQUFFOVgsT0FBQSxDQUFRLE1BQU0sRUFBRTtNQ\
              UNqRCxJQUFJNmEsQ0FBQSxDQUFFQSxDQUFBLENBQUV2YyxNQUFBLEdBQVMsQ0FBQy\
              xNQUFNO01BQ3BCdEIsSUFBQSxDQUFLZ2EsaUJBQUEsR0FBb0I2RCxDQUFBLENBQUV\
              2YyxNQUFBO0lBQ25DO0lBQ0EsT0FBT3RCLElBQUE7RUFDWDtFQUNBYixTQUFBLEVB\
              QVc0YTtBQUNmOzs7QUN6Q0EsSUFBTStELFlBQUEsR0FBYy9DLENBQUNwWixLQUFBL\
              EtBQVUsT0FBT0EsS0FBQSxLQUFVLFlBQVl3SCxNQUFBLENBQU8yRCxTQUFBLENBQV\
              VuTCxLQUFLO0FBQ2xGLFNBQVNvYyxZQUFXeFAsR0FBQSxFQUFLME0sTUFBQSxFQUF\
              RQyxLQUFBLEVBQU8sRUFBRUMsV0FBQSxDQUFZLEdBQUc7RUFDckQsTUFBTTZDLElB\
              QUEsR0FBT3pQLEdBQUEsQ0FBSSxDQUFDO0VBQ2xCLElBQUl5UCxJQUFBLEtBQVMsT\
              0FBT0EsSUFBQSxLQUFTO0VBQ3pCL0MsTUFBQSxJQUFVO0VBQ2QxTSxHQUFBLEdBQU\
              1BLEdBQUEsQ0FBSTNJLFNBQUEsQ0FBVXFWLE1BQU0sRUFBRWpZLE9BQUEsQ0FBUSx\
              NQUFNLEVBQUU7RUFDNUMsSUFBSW1ZLFdBQUEsRUFBYTtJQUNiLFFBQVFELEtBQUE7\
              TUFDSixLQUFLO1FBQ0QzTSxHQUFBLEdBQU0sS0FBS0EsR0FBRztRQUNkO01BQ0osS\
              0FBSztRQUNEQSxHQUFBLEdBQU0sS0FBS0EsR0FBRztRQUNkO01BQ0osS0FBSztRQU\
              NEQSxHQUFBLEdBQU0sS0FBS0EsR0FBRztRQUNkO0lBQ1I7SUFDQSxNQUFNMFAsRUF\
              BQSxHQUFJN1IsTUFBQSxDQUFPbUMsR0FBRztJQUNwQixPQUFPeVAsSUFBQSxLQUFT\
              LE1BQU01UixNQUFBLENBQU8sRUFBRSxJQUFJNlIsRUFBQSxHQUFJQSxFQUFBO0VBQ\
              zNDO0VBQ0EsTUFBTWpRLENBQUEsR0FBSW9OLFFBQUEsQ0FBUzdNLEdBQUEsRUFBSz\
              JNLEtBQUs7RUFDN0IsT0FBTzhDLElBQUEsS0FBUyxNQUFNLEtBQUtoUSxDQUFBLEd\
              BQUlBLENBQUE7QUFDbkM7QUFDQSxTQUFTa1EsY0FBYWxlLElBQUEsRUFBTWtiLEtB\
              QUEsRUFBT3ZXLE1BQUEsRUFBUTtFQUN2QyxNQUFNLEVBQUVoRCxLQUFBLENBQU0sS\
              UFBSTNCLElBQUE7RUFDbEIsSUFBSThkLFlBQUEsQ0FBWW5jLEtBQUssR0FBRztJQU\
              NwQixNQUFNNE0sR0FBQSxHQUFNNU0sS0FBQSxDQUFNa0UsUUFBQSxDQUFTcVYsS0F\
              BSztJQUNoQyxPQUFPdlosS0FBQSxHQUFRLElBQUksTUFBTWdELE1BQUEsR0FBUzRK\
              LEdBQUEsQ0FBSTRDLE1BQUEsQ0FBTyxDQUFDLElBQUl4TSxNQUFBLEdBQVM0SixHQ\
              UFBO0VBQy9EO0VBQ0EsT0FBT3dMLGVBQUEsQ0FBZ0IvWixJQUFJO0FBQy9CO0FBQ0\
              EsSUFBTW1lLE1BQUEsR0FBUztFQUNYcFMsUUFBQSxFQUFVK1IsWUFBQTtFQUNWbFI\
              sT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTG9HLE1BQUEsRUFBUTtFQUNS\
              aEgsSUFBQSxFQUFNO0VBQ05tRixPQUFBLEVBQVNBLENBQUN1RSxHQUFBLEVBQUtnT\
              ixRQUFBLEVBQVU5SCxHQUFBLEtBQVFzSyxXQUFBLENBQVd4UCxHQUFBLEVBQUssR0\
              FBRyxHQUFHa0YsR0FBRztFQUMxRHRVLFNBQUEsRUFBV0EsQ0FBQWEsSUFBQSxLQUF\
              Ra2UsYUFBQSxDQUFhbGUsSUFBQSxFQUFNLEdBQUcsSUFBSTtBQUNqRDtBQUNBLElB\
              QU1vZSxPQUFBLEdBQVM7RUFDWHJTLFFBQUEsRUFBVStSLFlBQUE7RUFDVmxSLE9BQ\
              UEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VBQ0xvRyxNQUFBLEVBQVE7RUFDUmhILE\
              lBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQSxDQUFDdUUsR0FBQSxFQUFLZ04sUUF\
              BQSxFQUFVOUgsR0FBQSxLQUFRc0ssV0FBQSxDQUFXeFAsR0FBQSxFQUFLLEdBQUcs\
              R0FBR2tGLEdBQUc7RUFDMUR0VSxTQUFBLEVBQVdBLENBQUFhLElBQUEsS0FBUWtlL\
              GFBQUEsQ0FBYWxlLElBQUEsRUFBTSxHQUFHLEdBQUc7QUFDaEQ7QUFDQSxJQUFNcW\
              UsSUFBQSxHQUFNO0VBQ1J0UyxRQUFBLEVBQVUrUixZQUFBO0VBQ1ZsUixPQUFBLEV\
              BQVM7RUFDVG5ILEdBQUEsRUFBSztFQUNMWixJQUFBLEVBQU07RUFDTm1GLE9BQUEs\
              RUFBU0EsQ0FBQ3VFLEdBQUEsRUFBS2dOLFFBQUEsRUFBVTlILEdBQUEsS0FBUXNLL\
              FdBQUEsQ0FBV3hQLEdBQUEsRUFBSyxHQUFHLElBQUlrRixHQUFHO0VBQzNEdFUsU0\
              FBQSxFQUFXNGE7QUFDZjtBQUNBLElBQU11RSxPQUFBLEdBQVM7RUFDWHZTLFFBQUE\
              sRUFBVStSLFlBQUE7RUFDVmxSLE9BQUEsRUFBUztFQUNUbkgsR0FBQSxFQUFLO0VB\
              Q0xvRyxNQUFBLEVBQVE7RUFDUmhILElBQUEsRUFBTTtFQUNObUYsT0FBQSxFQUFTQ\
              SxDQUFDdUUsR0FBQSxFQUFLZ04sUUFBQSxFQUFVOUgsR0FBQSxLQUFRc0ssV0FBQS\
              xDQUFXeFAsR0FBQSxFQUFLLEdBQUcsSUFBSWtGLEdBQUc7RUFDM0R0VSxTQUFBLEV\
              BQVdBLENBQUFhLElBQUEsS0FBUWtlLGFBQUEsQ0FBYWxlLElBQUEsRUFBTSxJQUFJ\
              LElBQUk7QUFDbEQ7OztBQ2hFQSxJQUFNdWUsT0FBQSxHQUFOLE1BQU1DLFFBQUEsU\
              0FBZ0JwZ0IsT0FBQSxDQUFRO0VBQzFCZ0YsWUFBWW9KLE9BQUEsRUFBUTtJQUNoQi\
              xNQUFNQSxPQUFNO0lBQ1osS0FBSy9HLEdBQUEsR0FBTStZLFFBQUEsQ0FBUS9ZLEd\
              BQUE7RUFDdkI7RUFDQXZCLElBQUlwRCxHQUFBLEVBQUs7SUFDTCxJQUFJeVcsSUFB\
              QTtJQUNKLElBQUkxWSxNQUFBLENBQU9pQyxHQUFHO0lBQ1Z5VyxJQUFBLEdBQU96V\
              yxHQUFBO0lBQUEsSUFDRkEsR0FBQSxJQUNMLE9BQU9BLEdBQUEsS0FBUSxZQUNmLF\
              NBQVNBLEdBQUEsSUFDVCxXQUFXQSxHQUFBLElBQ1hBLEdBQUEsQ0FBSWEsS0FBQSx\
              LQUFVO0lBQ2Q0VixJQUFBLEdBQU8sSUFBSXhaLElBQUEsQ0FBSytDLEdBQUEsQ0FB\
              SUEsR0FBQSxFQUFLLElBQUk7O0lBRTdCeVcsSUFBQSxHQUFPLElBQUl4WixJQUFBL\
              ENBQUsrQyxHQUFBLEVBQUssSUFBSTtJQUM3QixNQUFNOE8sSUFBQSxHQUFPaUosUU\
              FBQSxDQUFTLEtBQUt4WCxLQUFBLEVBQU9rVyxJQUFBLENBQUt6VyxHQUFHO0lBQzF\
              DLElBQUksQ0FBQzhPLElBQUE7SUFDRCxLQUFLdk8sS0FBQSxDQUFNZ0YsSUFBQSxD\
              QUFLa1IsSUFBSTtFQUM1QjtFQUFBO0FBQUE7QUFBQTtBQUFBO0VBS0E5UCxJQUFJM\
              0csR0FBQSxFQUFLMmQsUUFBQSxFQUFVO0lBQ2YsTUFBTWxILElBQUEsR0FBT3NCLF\
              FBQUEsQ0FBUyxLQUFLeFgsS0FBQSxFQUFPUCxHQUFHO0lBQ3JDLE9BQU8sQ0FBQzJ\
              kLFFBQUEsSUFBWTVmLE1BQUEsQ0FBTzBZLElBQUksSUFDekJ6WSxRQUFBLENBQVN5\
              WSxJQUFBLENBQUt6VyxHQUFHLElBQ2J5VyxJQUFBLENBQUt6VyxHQUFBLENBQUlhL\
              EtBQUEsR0FDVDRWLElBQUEsQ0FBS3pXLEdBQUEsR0FDVHlXLElBQUE7RUFDVjtFQU\
              NBalAsSUFBSXhILEdBQUEsRUFBS2EsS0FBQSxFQUFPO0lBQ1osSUFBSSxPQUFPQSx\
              LQUFBLEtBQVU7SUFDakIsTUFBTSxJQUFJaUIsS0FBQSxDQUFNLGlFQUFpRSxPQUFP\
              akIsS0FBSyxFQUFFO0lBQ25HLE1BQU1pTyxJQUFBLEdBQU9pSixRQUFBLENBQVMsS\
              0FBS3hYLEtBQUEsRUFBT1AsR0FBRztJQUNyQyxJQUFJOE8sSUFBQSxJQUFRLENBQU\
              NqTyxLQUFBLEVBQU87TUFDaEIsS0FBS04sS0FBQSxDQUFNRyxNQUFBLENBQU8sS0F\
              BS0gsS0FBQSxDQUFNaVIsT0FBQSxDQUFRMUMsSUFBSSxHQUFHLENBQUM7SUFDakQs\
              V0FDUyxDQUFDQSxJQUFBLElBQVFqTyxLQUFBLEVBQU87TUFDckIsS0FBS04sS0FBQ\
              SxDQUFNZ0YsSUFBQSxDQUFLLElBQUl0SSxJQUFBLENBQUsrQyxHQUFHLENBQUM7SU\
              FDakM7RUFDSjtFQUNBOEgsT0FBTzBPLENBQUEsRUFBRzdPLEdBQUEsRUFBSztJQUN\
              YLE9BQU8sTUFBTUcsTUFBQSxDQUFPME8sQ0FBQSxFQUFHN08sR0FBQSxFQUFLM0Is\
              R0FBRztFQUNuQztFQUNBakIsU0FBUzRDLEdBQUEsRUFBS29KLFNBQUEsRUFBV0MsV\
              0FBQSxFQUFhO0lBQ2xDLElBQUksQ0FBQ3JKLEdBQUE7SUFDRCxPQUFPaEMsSUFBQS\
              xDQUFLdEgsU0FBQSxDQUFVLElBQUk7SUFDOUIsSUFBSSxLQUFLME8sZ0JBQUEsQ0F\
              BaUIsSUFBSTtJQUMxQixPQUFPLE1BQU1oSSxRQUFBLENBQVNqRixNQUFBLENBQU9x\
              QixNQUFBLENBQU8sQ0FBQyxHQUFHd0csR0FBQSxFQUFLLEVBQUVpTSxhQUFBLEVBQ\
              WUsS0FBSyxDQUFDLEdBQUc3QyxTQUFBLEVBQVdDLFdBQVc7O0lBRTdGLE1BQU0sSU\
              FBSWxQLEtBQUEsQ0FBTSxxQ0FBcUM7RUFDN0Q7RUFDQSxPQUFPd0YsS0FBS29FLE9\
              BQUEsRUFBUXFRLFFBQUEsRUFBVXBVLEdBQUEsRUFBSztJQUMvQixNQUFNLEVBQUVx\
              USxRQUFBLENBQVMsSUFBSXJRLEdBQUE7SUFDckIsTUFBTWlXLElBQUEsR0FBTSxJQ\
              UFJLEtBQUtsUyxPQUFNO0lBQzNCLElBQUlxUSxRQUFBLElBQVlyZCxNQUFBLENBQU\
              9rTixRQUFBLElBQVk5TCxNQUFBLENBQU9pYyxRQUFRO0lBQzlDLFNBQVNsYixLQUF\
              BLElBQVNrYixRQUFBLEVBQVU7TUFDeEIsSUFBSSxPQUFPL0QsUUFBQSxLQUFhO01B\
              Q3BCblgsS0FBQSxHQUFRbVgsUUFBQSxDQUFTclcsSUFBQSxDQUFLb2EsUUFBQSxFQ\
              UFVbGIsS0FBQSxFQUFPQSxLQUFLO01BQ2hEK2MsSUFBQSxDQUFJcmQsS0FBQSxDQU\
              FNZ0YsSUFBQSxDQUFLK1EsVUFBQSxDQUFXelYsS0FBQSxFQUFPLE1BQU04RyxHQUF\
              HLENBQUM7SUFDL0M7SUFDSixPQUFPaVcsSUFBQTtFQUNYO0FBQ0o7QUFDQUgsT0FB\
              QSxDQUFROVksR0FBQSxHQUFNO0FBQ2QsSUFBTTZDLEdBQUEsR0FBTTtFQUNSbVAsV\
              UFBQSxFQUFZO0VBQ1oxTCxRQUFBLEVBQVVBLENBQUFwSyxLQUFBLEtBQVNBLEtBQU\
              EsWUFBaUJtRixHQUFBO0VBQ3BDNkYsU0FBQSxFQUFXNFIsT0FBQTtFQUNYM1IsT0F\
              BQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFDTHVHLFVBQUEsRUFBWUEsQ0FBQ1Es\
              T0FBQSxFQUFRcVEsUUFBQSxFQUFVcFUsR0FBQSxLQUFROFYsT0FBQSxDQUFRblcsS\
              UFBQSxDQUFLb0UsT0FBQSxFQUFRcVEsUUFBQSxFQUFVcFUsR0FBRztFQUN6RXVCLF\
              FBQVFpQyxJQUFBLEVBQUs3SCxPQUFBLEVBQVM7SUFDbEIsSUFBSXpGLEtBQUEsQ0F\
              BTXNOLElBQUcsR0FBRztNQUNaLElBQUlBLElBQUEsQ0FBSTRCLGdCQUFBLENBQWlC\
              LElBQUk7TUFDekIsT0FBT2pOLE1BQUEsQ0FBT3FCLE1BQUEsQ0FBTyxJQUFJc2MsT\
              0FBQSxDQUFRLEdBQUd0UyxJQUFHOztNQUV2QzdILE9BQUEsQ0FBUSxxQ0FBcUM7SU\
              FDckQ7SUFFSUEsT0FBQSxDQUFRLGlDQUFpQztJQUM3QyxPQUFPNkgsSUFBQTtFQUN\
              YO0FBQ0o7OztBQ3ZGQSxTQUFTMFMsaUJBQWlCcFEsR0FBQSxFQUFLcVEsUUFBQSxF\
              QUFVO0VBQ3JDLE1BQU1aLElBQUEsR0FBT3pQLEdBQUEsQ0FBSSxDQUFDO0VBQ2xCL\
              E1BQU1sSyxLQUFBLEdBQVEyWixJQUFBLEtBQVMsT0FBT0EsSUFBQSxLQUFTLE1BQU\
              16UCxHQUFBLENBQUkzSSxTQUFBLENBQVUsQ0FBQyxJQUFJMkksR0FBQTtFQUNoRSx\
              NQUFNMEwsR0FBQSxHQUFNQSxDQUFDak0sQ0FBQSxLQUFNNFEsUUFBQSxHQUFXeFMs\
              TUFBQSxDQUFPNEIsQ0FBQyxJQUFJN0UsTUFBQSxDQUFPNkUsQ0FBQztFQUNsRCxNQ\
              UFNbEssR0FBQSxHQUFNTyxLQUFBLENBQ1ByQixPQUFBLENBQVEsTUFBTSxFQUFFLE\
              VBQ2hCdUIsS0FBQSxDQUFNLEdBQUcsRUFDVGtVLE1BQUEsQ0FBTyxDQUFDeFAsSUF\
              BQSxFQUFLNFYsQ0FBQSxLQUFNNVYsSUFBQSxHQUFNZ1IsR0FBQSxDQUFJLEVBQUUs\
              SUFBSUEsR0FBQSxDQUFJNEUsQ0FBQyxHQUFHNUUsR0FBQSxDQUFJLENBQUMsQ0FBQ\
              ztFQUN0RCxPQUFRK0QsSUFBQSxLQUFTLE1BQU0vRCxHQUFBLENBQUksRUFBRSxJQU\
              FJblcsR0FBQSxHQUFNQSxHQUFBO0FBQzNDO0FBTUEsU0FBU2diLHFCQUFxQjllLEl\
              BQUEsRUFBTTtFQUNoQyxJQUFJLEVBQUUyQixLQUFBLENBQU0sSUFBSTNCLElBQUE7\
              RUFDaEIsSUFBSWlhLEdBQUEsR0FBTUEsQ0FBQ2pNLENBQUEsS0FBTUEsQ0FBQTtFQ\
              UNqQixJQUFJLE9BQU9yTSxLQUFBLEtBQVU7RUFDakJzWSxHQUFBLEdBQU1BLENBQU\
              FqTSxDQUFBLEtBQUs1QixNQUFBLENBQU80QixDQUFDO0VBQUEsSUFDZG1NLEtBQUE\
              sQ0FBTXhZLEtBQUssS0FBSyxDQUFDdVksUUFBQSxDQUFTdlksS0FBSztFQUNwQyxP\
              QUFPb1ksZUFBQSxDQUFnQi9aLElBQUk7RUFDL0IsSUFBSWdlLElBQUEsR0FBTztFQ\
              UNYLElBQUlyYyxLQUFBLEdBQVEsR0FBRztJQUNYcWMsSUFBQSxHQUFPO0lBQ1ByYy\
              xLQUFBLElBQVNzWSxHQUFBLENBQUksRUFBRTtFQUNuQjtFQUNBLE1BQU04RSxHQUF\
              BLEdBQU05RSxHQUFBLENBQUksRUFBRTtFQUNsQixNQUFNNVYsS0FBQSxHQUFRLENB\
              QUMxQyxLQUFBLEdBQVFvZCxHQUFHO0VBQzFCLElBQUlwZCxLQUFBLEdBQVEsSUFBS\
              TtJQUNaMEMsS0FBQSxDQUFNMmEsT0FBQSxDQUFRLENBQUM7RUFDbkIsT0FDSztJQU\
              NEcmQsS0FBQSxJQUFTQSxLQUFBLEdBQVEwQyxLQUFBLENBQU0sQ0FBQyxLQUFLMGE\
              sR0FBQTtJQUM3QjFhLEtBQUEsQ0FBTTJhLE9BQUEsQ0FBUXJkLEtBQUEsR0FBUW9k\
              LEdBQUc7SUFDekIsSUFBSXBkLEtBQUEsSUFBUyxJQUFJO01BQ2JBLEtBQUEsSUFBU\
              0EsS0FBQSxHQUFRMEMsS0FBQSxDQUFNLENBQUMsS0FBSzBhLEdBQUE7TUFDN0IxYS\
              xLQUFBLENBQU0yYSxPQUFBLENBQVFyZCxLQUFLO0lBQ3ZCO0VBQ0o7RUFDQSxPQUF\
              RcWMsSUFBQSxHQUNKM1osS0FBQSxDQUNLcUUsR0FBQSxDQUFJLENBQUFzRixDQUFB\
              LEtBQUt6SSxNQUFBLENBQU95SSxDQUFDLEVBQUVpUixRQUFBLENBQVMsR0FBRyxHQ\
              UFHLENBQUMsRUFDbkMzWSxJQUFBLENBQUssR0FBRyxFQUNSdEQsT0FBQSxDQUFRLG\
              NBQWMsRUFBRTtBQUVyQztBQUNBLElBQU1rYyxPQUFBLEdBQVU7RUFDWm5ULFFBQUE\
              sRUFBVUEsQ0FBQXBLLEtBQUEsS0FBUyxPQUFPQSxLQUFBLEtBQVUsWUFBWXdILE1B\
              QUEsQ0FBTzJELFNBQUEsQ0FBVW5MLEtBQUs7RUFDdEVpTCxPQUFBLEVBQVM7RUFDV\
              G5ILEdBQUEsRUFBSztFQUNMb0csTUFBQSxFQUFRO0VBQ1JoSCxJQUFBLEVBQU07RU\
              FDTm1GLE9BQUEsRUFBU0EsQ0FBQ3VFLEdBQUEsRUFBS2dOLFFBQUEsRUFBVSxFQUF\
              FSixXQUFBLENBQVksTUFBTXdELGdCQUFBLENBQWlCcFEsR0FBQSxFQUFLNE0sV0FB\
              VztFQUM5RWhjLFNBQUEsRUFBVzJmO0FBQ2Y7QUFDQSxJQUFNSyxTQUFBLEdBQVk7R\
              UFDZHBULFFBQUEsRUFBVUEsQ0FBQXBLLEtBQUEsS0FBUyxPQUFPQSxLQUFBLEtBQV\
              U7RUFDcENpTCxPQUFBLEVBQVM7RUFDVG5ILEdBQUEsRUFBSztFQUNMb0csTUFBQSx\
              FQUFRO0VBQ1JoSCxJQUFBLEVBQU07RUFDTm1GLE9BQUEsRUFBU0EsQ0FBQXVFLEdB\
              QUEsS0FBT29RLGdCQUFBLENBQWlCcFEsR0FBQSxFQUFLLEtBQUs7RUFDM0NwUCxTQ\
              UFBLEVBQVcyZjtBQUNmO0FBQ0EsSUFBTU0sU0FBQSxHQUFZO0VBQ2RyVCxRQUFBLE\
              VBQVVBLENBQUFwSyxLQUFBLEtBQVNBLEtBQUEsWUFBaUIwZCxJQUFBO0VBQ3BDelM\
              sT0FBQSxFQUFTO0VBQ1RuSCxHQUFBLEVBQUs7RUFBQTtFQUFBO0VBQUE7RUFJTFos\
              SUFBQSxFQUFNTyxNQUFBLENBQU8sMkpBS0o7RUFDVDRFLFFBQVF1RSxHQUFBLEVBQ\
              Us7SUFDVCxNQUFNcEosS0FBQSxHQUFRb0osR0FBQSxDQUFJcEosS0FBQSxDQUFNaW\
              EsU0FBQSxDQUFVdmEsSUFBSTtJQUN0QyxJQUFJLENBQUNNLEtBQUE7SUFDRCxNQUF\
              NLElBQUl2QyxLQUFBLENBQU0sc0RBQXNEO0lBQzFFLE1BQU0sR0FBRzBjLElBQUEs\
              RUFBTUMsS0FBQSxFQUFPQyxHQUFBLEVBQUtDLElBQUEsRUFBTUMsTUFBQSxFQUFRQ\
              yxNQUFNLElBQUl4YSxLQUFBLENBQU11RCxHQUFBLENBQUlTLE1BQU07SUFDbkUsTU\
              FBTXlXLFFBQUEsR0FBV3phLEtBQUEsQ0FBTSxDQUFDLElBQUlnRSxNQUFBLEVBQVF\
              oRSxLQUFBLENBQU0sQ0FBQyxJQUFJLE1BQU1nTSxNQUFBLENBQU8sR0FBRyxDQUFD\
              LENBQUMsSUFBSTtJQUNyRSxJQUFJME8sSUFBQSxHQUFPUixJQUFBLENBQUtTLEdBQ\
              UEsQ0FBSVIsSUFBQSxFQUFNQyxLQUFBLEdBQVEsR0FBR0MsR0FBQSxFQUFLQyxJQU\
              FBLElBQVEsR0FBR0MsTUFBQSxJQUFVLEdBQUdDLE1BQUEsSUFBVSxHQUFHQyxRQUF\
              RO0lBQ3ZGLE1BQU1HLEVBQUEsR0FBSzVhLEtBQUEsQ0FBTSxDQUFDO0lBQ2xCLElB\
              QUk0YSxFQUFBLElBQU1BLEVBQUEsS0FBTyxLQUFLO01BQ2xCLElBQUkzRixDQUFBL\
              EdBQUl1RSxnQkFBQSxDQUFpQm9CLEVBQUEsRUFBSSxLQUFLO01BQ2xDLElBQUloVi\
              xJQUFBLENBQUtpVixHQUFBLENBQUk1RixDQUFDLElBQUk7TUFDZEEsQ0FBQSxJQUF\
              LO01BQ1R5RixJQUFBLElBQVEsTUFBUXpGLENBQUE7SUFDcEI7SUFDQSxPQUFPLElB\
              QUlpRixJQUFBLENBQUtRLElBQUk7RUFDeEI7RUFDQTFnQixTQUFBLEVBQVdBLENBQ\
              UMsRUFBRXdDLEtBQUEsQ0FBTSxNQUFNQSxLQUFBLENBQU1zZSxXQUFBLENBQVksRU\
              FBRWpkLE9BQUEsQ0FBUSwwQkFBMEIsRUFBRTtBQUN0Rjs7O0FDckZBLElBQU1rZCx\
              PQUFBLEdBQVM7QUFDWHhYLEdBQUE7QUFDQWdSLEdBQUE7QUFDQUMsTUFBQTtBQUNB\
              QyxPQUFBO0FBQ0E0RCxPQUFBO0FBQ0FDLFFBQUE7QUFDQVUsTUFBQTtBQUNBQyxPQ\
              UFBO0FBQ0FDLElBQUE7QUFDQUMsT0FBQTtBQUNBWixTQUFBO0FBQ0FDLFNBQUE7QU\
              FDQUMsTUFBQTtBQUNBN0IsTUFBQTtBQUNBcUIsSUFBQTtBQUNBTCxLQUFBO0FBQ0F\
              6VSxHQUFBO0FBQ0E0VyxPQUFBO0FBQ0FDLFNBQUE7QUFDQUMsU0FBQSxDQUNKOzs7\
              O0FDbEJBLElBQU1lLE9BQUEsR0FBVSxtQkFBSWplLEdBQUEsQ0FBSTtBQUNwQixDQ\
              UFDLFFBQVFnSyxNQUFNO0FBQ2YsQ0FBQyxZQUFZLENBQUN4RCxHQUFBLEVBQUtnUi\
              xHQUFBLEVBQUtDLE1BQU0sQ0FBQztBQUMvQixDQUFDLFFBQVFtQyxPQUFRO0FBQ2p\
              CLENBQUMsVUFBVW9FLE9BQVE7QUFDbkIsQ0FBQyxZQUFZQSxPQUFRO0FBQ3hCO0FB\
              Q0QsSUFBTUUsVUFBQSxHQUFhO0VBQ2ZyRSxNQUFBO0VBQ0FzRSxJQUFBLEVBQU14R\
              yxPQUFBO0VBQ05nQixLQUFBO0VBQ0FILFFBQUE7RUFDQUwsUUFBQTtFQUNBOEUsU0\
              FBQTtFQUNBM0QsR0FBQTtFQUNBQyxNQUFBO0VBQ0FILE1BQUE7RUFDQTRELE9BQUE\
              7RUFDQXhXLEdBQUE7RUFDQTRYLElBQUEsRUFBTTFHLE9BQUE7RUFDTndELElBQUE7\
              RUFDQUwsS0FBQTtFQUNBckQsR0FBQTtFQUNBcFIsR0FBQTtFQUNBOFc7QUFDSjtBQ\
              UNBLElBQU1tQixhQUFBLEdBQWdCO0VBQ2xCLDRCQUE0QnhFLE1BQUE7RUFDNUIsME\
              JBQTBCcUIsSUFBQTtFQUMxQiwyQkFBMkJMLEtBQUE7RUFDM0IseUJBQXlCelUsR0F\
              BQTtFQUN6QiwrQkFBK0I4VztBQUNuQztBQUNBLFNBQVNvQixRQUFRQyxVQUFBLEVB\
              QVlDLFVBQUEsRUFBWTtFQUNyQyxJQUFJcGQsSUFBQSxHQUFPNmMsT0FBQSxDQUFRM\
              VksR0FBQSxDQUFJaVosVUFBVTtFQUNqQyxJQUFJLENBQUNwZCxJQUFBLEVBQU07SU\
              FDUCxJQUFJd0UsS0FBQSxDQUFNQyxPQUFBLENBQVEwWSxVQUFVO0lBQ3hCbmQsSUF\
              BQSxHQUFPLEVBQUM7SUFDUDtNQUNELE1BQU02QyxJQUFBLEdBQU8yQixLQUFBLENB\
              QU1NLElBQUEsQ0FBSytYLE9BQUEsQ0FBUWhhLElBQUEsQ0FBSyxDQUFDLEVBQ2pDc\
              0YsTUFBQSxDQUFPLENBQUEzSyxHQUFBLEtBQU9BLEdBQUEsS0FBUSxRQUFRLEVBQz\
              lCNEgsR0FBQSxDQUFJLENBQUE1SCxHQUFBLEtBQU8yRixJQUFBLENBQUt0SCxTQUF\
              BLENBQVUyQixHQUFHLENBQUMsRUFDOUJ3RixJQUFBLENBQUssSUFBSTtNQUNkLE1B\
              QU0sSUFBSTFELEtBQUEsQ0FBTSxtQkFBbUI4ZCxVQUFVLGlCQUFpQnZhLElBQUksN\
              kJBQTZCO0lBQ25HO0VBQ0o7RUFDQSxJQUFJMkIsS0FBQSxDQUFNQyxPQUFBLENBQV\
              EwWSxVQUFVLEdBQUc7SUFDM0IsV0FBV2hiLEdBQUEsSUFBT2diLFVBQUE7SUFDZG5\
              kLElBQUEsR0FBT0EsSUFBQSxDQUFLbkMsTUFBQSxDQUFPc0UsR0FBRztFQUM5QixX\
              QUNTLE9BQU9nYixVQUFBLEtBQWUsWUFBWTtJQUN2Q25kLElBQUEsR0FBT21kLFVBQ\
              UEsQ0FBV25kLElBQUEsQ0FBSzJCLEtBQUEsQ0FBTSxDQUFDO0VBQ2xDO0VBQ0EsT0\
              FBTzNCLElBQUEsQ0FBS29GLEdBQUEsQ0FBSSxDQUFBakQsR0FBQSxLQUFPO0lBQ25\
              CLElBQUksT0FBT0EsR0FBQSxLQUFRO0lBQ2YsT0FBT0EsR0FBQTtJQUNYLE1BQU1r\
              RyxNQUFBLEdBQVN5VSxVQUFBLENBQVczYSxHQUFHO0lBQzdCLElBQUlrRyxNQUFBO\
              0lBQ0EsT0FBT0EsTUFBQTtJQUNYLE1BQU14RixJQUFBLEdBQU92RixNQUFBLENBQU\
              91RixJQUFBLENBQUtpYSxVQUFVLEVBQzlCMVgsR0FBQSxDQUFJLENBQUE1SCxHQUF\
              BLEtBQU8yRixJQUFBLENBQUt0SCxTQUFBLENBQVUyQixHQUFHLENBQUMsRUFDOUJ3\
              RixJQUFBLENBQUssSUFBSTtJQUNkLE1BQU0sSUFBSTFELEtBQUEsQ0FBTSx1QkFBd\
              UI2QyxHQUFHLGlCQUFpQlUsSUFBSSxFQUFFO0VBQ3JFLENBQUM7QUFDTDs7O0FDMU\
              VBLElBQU13YSxtQkFBQSxHQUFzQkEsQ0FBQzVULENBQUEsRUFBRzZULENBQUEsS0F\
              BTTdULENBQUEsQ0FBRWpNLEdBQUEsR0FBTThmLENBQUEsQ0FBRTlmLEdBQUEsR0FB\
              TSxLQUFLaU0sQ0FBQSxDQUFFak0sR0FBQSxHQUFNOGYsQ0FBQSxDQUFFOWYsR0FBQ\
              SxHQUFNLElBQUk7QUFDL0UsSUFBTTVDLE1BQUEsR0FBTixNQUFNMmlCLE9BQUEsQ0\
              FBTztFQUNUemQsWUFBWSxFQUFFNlAsTUFBQSxFQUFRd04sVUFBQSxFQUFZcEssS0F\
              BQSxFQUFPeUssZ0JBQUEsRUFBa0I1VSxNQUFBLEVBQUFNLE9BQUEsRUFBUXVNLGNB\
              QUEsRUFBZ0JnSSxnQkFBQSxDQUFpQixHQUFHO0lBQ25HLEtBQUs5TixNQUFBLEdBQ\
              VNuTCxLQUFBLENBQU1DLE9BQUEsQ0FBUWtMLE1BQU0sSUFDNUJ1TixPQUFBLENBQV\
              F2TixNQUFBLEVBQVEsUUFBUSxJQUN4QkEsTUFBQSxHQUNJdU4sT0FBQSxDQUFRLE1\
              BQU12TixNQUFNLElBQ3BCO0lBQ1YsS0FBS29ELEtBQUEsR0FBUSxDQUFDLENBQUNB\
              LEtBQUE7SUFDZixLQUFLN1IsSUFBQSxHQUFRLE9BQU9nSSxPQUFBLEtBQVcsWUFBW\
              UEsT0FBQSxJQUFXO0lBQ3RELEtBQUt3VSxTQUFBLEdBQVlGLGdCQUFBLEdBQW1CUC\
              xhQUFBLEdBQWdCLENBQUM7SUFDckQsS0FBS2pkLElBQUEsR0FBT2tkLE9BQUEsQ0F\
              BUUMsVUFBQSxFQUFZLEtBQUtqYyxJQUFJO0lBQ3pDLEtBQUt5UCxlQUFBLEdBQWtC\
              OE0sZ0JBQUEsV0FBQUEsZ0JBQUEsR0FBb0I7SUFDM0NuZ0IsTUFBQSxDQUFPMEksY\
              0FBQSxDQUFlLE1BQU0zSixHQUFBLEVBQUssRUFBRWdDLEtBQUEsRUFBTytHLEdBQU\
              EsQ0FBSSxDQUFDO0lBQy9DOUgsTUFBQSxDQUFPMEksY0FBQSxDQUFlLE1BQU16Six\
              NQUFBLEVBQVEsRUFBRThCLEtBQUEsRUFBT2dZLE1BQUEsQ0FBTyxDQUFDO0lBQ3JE\
              L1ksTUFBQSxDQUFPMEksY0FBQSxDQUFlLE1BQU14SixHQUFBLEVBQUssRUFBRTZCL\
              EtBQUEsRUFBTytYLEdBQUEsQ0FBSSxDQUFDO0lBRS9DLEtBQUtYLGNBQUEsR0FDRC\
              xPQUFPQSxjQUFBLEtBQW1CLGFBQ3BCQSxjQUFBLEdBQ0FBLGNBQUEsS0FBbUIsT0F\
              DZjRILG1CQUFBLEdBQ0E7RUFDbEI7RUFDQWhkLE1BQUEsRUFBUTtJQUNKLE1BQU1D\
              LElBQUEsR0FBT2hELE1BQUEsQ0FBTzJJLE1BQUEsQ0FBT3NYLE9BQUEsQ0FBTy9KL\
              FNBQUEsRUFBV2xXLE1BQUEsQ0FBTzZJLHlCQUFBLENBQTBCLElBQUksQ0FBQztJQU\
              NuRjdGLElBQUEsQ0FBS04sSUFBQSxHQUFPLEtBQUtBLElBQUEsQ0FBSzJCLEtBQUE\
              sQ0FBTTtJQUM1QixPQUFPckIsSUFBQTtFQUNYO0FBQ0o7OztBQy9CQSxTQUFTcWQs\
              a0JBQWtCbmIsR0FBQSxFQUFLMEUsT0FBQSxFQUFTO0VBSnpDLElBQUFwSSxFQUFBO\
              0VBS0ksTUFBTTJELEtBQUEsR0FBUSxFQUFDO0VBQ2YsSUFBSW1iLGFBQUEsR0FBZ0\
              IxVyxPQUFBLENBQVFrSixVQUFBLEtBQWU7RUFDM0MsSUFBSWxKLE9BQUEsQ0FBUWt\
              KLFVBQUEsS0FBZSxTQUFTNU4sR0FBQSxDQUFJNE4sVUFBQSxFQUFZO0lBQ2hELE1B\
              QU15TixHQUFBLEdBQU1yYixHQUFBLENBQUk0TixVQUFBLENBQVc3TixRQUFBLENBQ\
              VNDLEdBQUc7SUFDdkMsSUFBSXFiLEdBQUEsRUFBSztNQUNMcGIsS0FBQSxDQUFNTS\
              xJQUFBLENBQUs4YSxHQUFHO01BQ2RELGFBQUEsR0FBZ0I7SUFDcEIsV0FDU3BiLEd\
              BQUEsQ0FBSTROLFVBQUEsQ0FBV25RLFFBQUE7SUFDcEIyZCxhQUFBLEdBQWdCO0VB\
              Q3hCO0VBQ0EsSUFBSUEsYUFBQTtFQUNBbmIsS0FBQSxDQUFNTSxJQUFBLENBQUssS\
              0FBSztFQUNwQixNQUFNb0MsR0FBQSxHQUFNK0ssc0JBQUEsQ0FBdUIxTixHQUFBLE\
              VBQUswRSxPQUFPO0VBQy9DLE1BQU0sRUFBRXdILGFBQUEsQ0FBYyxJQUFJdkosR0F\
              BQSxDQUFJK0IsT0FBQTtFQUM5QixJQUFJMUUsR0FBQSxDQUFJbUksYUFBQSxFQUFl\
              O0lBQ25CLElBQUlsSSxLQUFBLENBQU16RSxNQUFBLEtBQVc7SUFDakJ5RSxLQUFBL\
              ENBQU1pWixPQUFBLENBQVEsRUFBRTtJQUNwQixNQUFNekosRUFBQSxHQUFLdkQsYU\
              FBQSxDQUFjbE0sR0FBQSxDQUFJbUksYUFBYTtJQUMxQ2xJLEtBQUEsQ0FBTWlaLE9\
              BQUEsQ0FBUXhRLGFBQUEsQ0FBYytHLEVBQUEsRUFBSSxFQUFFLENBQUM7RUFDdkM7\
              RUFDQSxJQUFJVCxTQUFBLEdBQVk7RUFDaEIsSUFBSXNNLGNBQUEsR0FBaUI7RUFDc\
              kIsSUFBSXRiLEdBQUEsQ0FBSW5GLFFBQUEsRUFBVTtJQUNkLElBQUkvQixNQUFBLE\
              NBQU9rSCxHQUFBLENBQUluRixRQUFRLEdBQUc7TUFDdEIsSUFBSW1GLEdBQUEsQ0F\
              BSW5GLFFBQUEsQ0FBU3VVLFdBQUEsSUFBZWdNLGFBQUE7TUFDNUJuYixLQUFBLENB\
              QU1NLElBQUEsQ0FBSyxFQUFFO01BQ2pCLElBQUlQLEdBQUEsQ0FBSW5GLFFBQUEsQ\
              0FBU3NOLGFBQUEsRUFBZTtRQUM1QixNQUFNc0gsRUFBQSxHQUFLdkQsYUFBQSxDQU\
              FjbE0sR0FBQSxDQUFJbkYsUUFBQSxDQUFTc04sYUFBYTtRQUNuRGxJLEtBQUEsQ0F\
              BTU0sSUFBQSxDQUFLbUksYUFBQSxDQUFjK0csRUFBQSxFQUFJLEVBQUUsQ0FBQztN\
              QUNwQztNQUVBOU0sR0FBQSxDQUFJd0osZ0JBQUEsR0FBbUIsQ0FBQyxDQUFDbk0sR\
              0FBQSxDQUFJb0ksT0FBQTtNQUM3QmtULGNBQUEsR0FBaUJ0YixHQUFBLENBQUluRi\
              xRQUFBLENBQVN1TixPQUFBO0lBQ2xDO0lBQ0EsTUFBTTRELFdBQUEsR0FBY3NQLGN\
              BQUEsR0FBaUIsU0FBWSxNQUFPdE0sU0FBQSxHQUFZO0lBQ3BFLElBQUlsQyxJQUFB\
              LEdBQU96VCxTQUFBLENBQVUyRyxHQUFBLENBQUluRixRQUFBLEVBQVU4SCxHQUFBL\
              EVBQUssTUFBTzJZLGNBQUEsR0FBaUIsTUFBT3RQLFdBQVc7SUFDbEYsSUFBSXNQLG\
              NBQUE7SUFDQXhPLElBQUEsSUFBUWxFLFdBQUEsQ0FBWWtFLElBQUEsRUFBTSxJQUF\
              JWixhQUFBLENBQWNvUCxjQUFjLENBQUM7SUFDL0QsS0FBS3hPLElBQUEsQ0FBSyxD\
              QUFDLE1BQU0sT0FBT0EsSUFBQSxDQUFLLENBQUMsTUFBTSxRQUNoQzdNLEtBQUEsQ\
              0FBTUEsS0FBQSxDQUFNekUsTUFBQSxHQUFTLENBQUMsTUFBTSxPQUFPO01BR25DeU\
              UsS0FBQSxDQUFNQSxLQUFBLENBQU16RSxNQUFBLEdBQVMsQ0FBQyxJQUFJLE9BQU9\
              zUixJQUFJO0lBQ3pDO0lBRUk3TSxLQUFBLENBQU1NLElBQUEsQ0FBS3VNLElBQUk7\
              RUFDdkIsT0FDSztJQUNEN00sS0FBQSxDQUFNTSxJQUFBLENBQUtsSCxTQUFBLENBQ\
              VUyRyxHQUFBLENBQUluRixRQUFBLEVBQVU4SCxHQUFHLENBQUM7RUFDM0M7RUFDQS\
              xLQUFJckcsRUFBQSxHQUFBMEQsR0FBQSxDQUFJNE4sVUFBQSxLQUFKLGdCQUFBdFI\
              sRUFBQSxDQUFnQm9CLE1BQUEsRUFBUTtJQUN4QixJQUFJc0MsR0FBQSxDQUFJb0ks\
              T0FBQSxFQUFTO01BQ2IsTUFBTXFILEVBQUEsR0FBS3ZELGFBQUEsQ0FBY2xNLEdBQ\
              UEsQ0FBSW9JLE9BQU87TUFDcEMsSUFBSXFILEVBQUEsQ0FBRzNHLFFBQUEsQ0FBUy\
              xJQUFJLEdBQUc7UUFDbkI3SSxLQUFBLENBQU1NLElBQUEsQ0FBSyxLQUFLO1FBQ2h\
              CTixLQUFBLENBQU1NLElBQUEsQ0FBS21JLGFBQUEsQ0FBYytHLEVBQUEsRUFBSSxF\
              QUFFLENBQUM7TUFDcEMsT0FDSztRQUNEeFAsS0FBQSxDQUFNTSxJQUFBLENBQUssT\
              0FBT2tQLEVBQUUsRUFBRTtNQUMxQjtJQUNKLE9BQ0s7TUFDRHhQLEtBQUEsQ0FBTU\
              0sSUFBQSxDQUFLLEtBQUs7SUFDcEI7RUFDSixPQUNLO0lBQ0QsSUFBSWdiLEVBQUE\
              sR0FBS3ZiLEdBQUEsQ0FBSW9JLE9BQUE7SUFDYixJQUFJbVQsRUFBQSxJQUFNdk0s\
              U0FBQTtJQUNOdU0sRUFBQSxHQUFLQSxFQUFBLENBQUdyZSxPQUFBLENBQVEsUUFBU\
              SxFQUFFO0lBQzlCLElBQUlxZSxFQUFBLEVBQUk7TUFDSixLQUFLLENBQUN2TSxTQU\
              FBLElBQWFzTSxjQUFBLEtBQW1CcmIsS0FBQSxDQUFNQSxLQUFBLENBQU16RSxNQUF\
              BLEdBQVMsQ0FBQyxNQUFNO01BQzlEeUUsS0FBQSxDQUFNTSxJQUFBLENBQUssRUFB\
              RTtNQUNqQk4sS0FBQSxDQUFNTSxJQUFBLENBQUttSSxhQUFBLENBQWN3RCxhQUFBL\
              ENBQWNxUCxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ25EO0VBQ0o7RUFDQSxPQUFPdG\
              IsS0FBQSxDQUFNTyxJQUFBLENBQUssSUFBSSxJQUFJO0FBQzlCOzs7QUN0RUEsSUF\
              BTTFJLFFBQUEsR0FBTixNQUFNMGpCLFNBQUEsQ0FBUztFQUNYbGUsWUFBWXpCLEtB\
              QUEsRUFBT21YLFFBQUEsRUFBVXRPLE9BQUEsRUFBUztJQUVsQyxLQUFLeUQsYUFBQ\
              SxHQUFnQjtJQUVyQixLQUFLQyxPQUFBLEdBQVU7SUFFZixLQUFLcVQsTUFBQSxHQU\
              FTLEVBQUM7SUFFZixLQUFLQyxRQUFBLEdBQVcsRUFBQztJQUNqQjVnQixNQUFBLEN\
              BQU8wSSxjQUFBLENBQWUsTUFBTXZKLFNBQUEsRUFBVyxFQUFFNEIsS0FBQSxFQUFP\
              akMsR0FBQSxDQUFJLENBQUM7SUFDckQsSUFBSStoQixTQUFBLEdBQVk7SUFDaEIsS\
              UFBSSxPQUFPM0ksUUFBQSxLQUFhLGNBQWNoUixLQUFBLENBQU1DLE9BQUEsQ0FBUS\
              tRLFFBQVEsR0FBRztNQUMzRDJJLFNBQUEsR0FBWTNJLFFBQUE7SUFDaEIsV0FDU3R\
              PLE9BQUEsS0FBWSxVQUFhc08sUUFBQSxFQUFVO01BQ3hDdE8sT0FBQSxHQUFVc08s\
              UUFBQTtNQUNWQSxRQUFBLEdBQVc7SUFDZjtJQUNBLE1BQU1yRixHQUFBLEdBQU03U\
              yxNQUFBLENBQU9xQixNQUFBLENBQU87TUFDdEJrWixXQUFBLEVBQWE7TUFDYnVHLG\
              dCQUFBLEVBQWtCO01BQ2xCNUwsUUFBQSxFQUFVO01BQ1Y2TCxZQUFBLEVBQWM7TUF\
              DZEMsTUFBQSxFQUFRO01BQ1JDLFVBQUEsRUFBWTtNQUNaOWQsT0FBQSxFQUFTO0lB\
              Q2IsR0FBR3lHLE9BQU87SUFDVixLQUFLQSxPQUFBLEdBQVVpSixHQUFBO0lBQ2YsS\
              UFBSSxFQUFFMVAsT0FBQSxDQUFRLElBQUkwUCxHQUFBO0lBQ2xCLElBQUlqSixPQU\
              FBLG9CQUFBQSxPQUFBLENBQVNzWCxXQUFBLEVBQWE7TUFDdEIsS0FBS3BPLFVBQUE\
              sR0FBYWxKLE9BQUEsQ0FBUXNYLFdBQUEsQ0FBWWplLFVBQUEsQ0FBVztNQUNqRCxJ\
              QUFJLEtBQUs2UCxVQUFBLENBQVdyUSxJQUFBLENBQUtZLFFBQUE7TUFDckJGLE9BQ\
              UEsR0FBVSxLQUFLMlAsVUFBQSxDQUFXclEsSUFBQSxDQUFLVSxPQUFBO0lBQ3ZDO0\
              lBRUksS0FBSzJQLFVBQUEsR0FBYSxJQUFJeFEsVUFBQSxDQUFXLEVBQUVhLE9BQUE\
              sQ0FBUSxDQUFDO0lBQ2hELEtBQUtnZSxTQUFBLENBQVVoZSxPQUFBLEVBQVN5RyxP\
              QUFPO0lBRS9CLEtBQUs3SixRQUFBLEdBQ0RnQixLQUFBLEtBQVUsU0FBWSxPQUFPL\
              EtBQUtxSyxVQUFBLENBQVdySyxLQUFBLEVBQU84ZixTQUFBLEVBQVdqWCxPQUFPO0\
              VBQzlFO0VBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtFQU1BN0csTUFBQSxFQUFRO0l\
              BQ0osTUFBTUMsSUFBQSxHQUFPaEQsTUFBQSxDQUFPMkksTUFBQSxDQUFPK1gsU0FB\
              QSxDQUFTeEssU0FBQSxFQUFXO01BQzNDLENBQUMvVyxTQUFTLEdBQUcsRUFBRTRCL\
              EtBQUEsRUFBT2pDLEdBQUEsQ0FBSTtJQUM5QixDQUFDO0lBQ0RrRSxJQUFBLENBQU\
              txSyxhQUFBLEdBQWdCLEtBQUtBLGFBQUE7SUFDMUJySyxJQUFBLENBQUtzSyxPQUF\
              BLEdBQVUsS0FBS0EsT0FBQTtJQUNwQnRLLElBQUEsQ0FBSzJkLE1BQUEsR0FBUyxL\
              QUFLQSxNQUFBLENBQU90YyxLQUFBLENBQU07SUFDaENyQixJQUFBLENBQUs0ZCxRQ\
              UFBLEdBQVcsS0FBS0EsUUFBQSxDQUFTdmMsS0FBQSxDQUFNO0lBQ3BDckIsSUFBQS\
              xDQUFLNEcsT0FBQSxHQUFVNUosTUFBQSxDQUFPcUIsTUFBQSxDQUFPLENBQUMsR0F\
              BRyxLQUFLdUksT0FBTztJQUM3QyxJQUFJLEtBQUtrSixVQUFBO0lBQ0w5UCxJQUFB\
              LENBQUs4UCxVQUFBLEdBQWEsS0FBS0EsVUFBQSxDQUFXL1AsS0FBQSxDQUFNO0lBQ\
              zVDQyxJQUFBLENBQUtzSSxNQUFBLEdBQVMsS0FBS0EsTUFBQSxDQUFPdkksS0FBQS\
              xDQUFNO0lBRWhDQyxJQUFBLENBQUtqRCxRQUFBLEdBQVcvQixNQUFBLENBQU8sS0F\
              BSytCLFFBQVEsSUFDOUIsS0FBS0EsUUFBQSxDQUFTZ0QsS0FBQSxDQUFNQyxJQUFB\
              LENBQUtzSSxNQUFNLElBQy9CLEtBQUt2TCxRQUFBO0lBQ1gsSUFBSSxLQUFLK0ksS\
              0FBQTtJQUNMOUYsSUFBQSxDQUFLOEYsS0FBQSxHQUFRLEtBQUtBLEtBQUEsQ0FBTX\
              pFLEtBQUEsQ0FBTTtJQUNsQyxPQUFPckIsSUFBQTtFQUNYO0VBQUE7RUFFQU0sSUF\
              BSXZDLEtBQUEsRUFBTztJQUNQLElBQUlxZ0IsZ0JBQUEsQ0FBaUIsS0FBS3JoQixR\
              QUFRO0lBQzlCLEtBQUtBLFFBQUEsQ0FBU3VELEdBQUEsQ0FBSXZDLEtBQUs7RUFDL\
              0I7RUFBQTtFQUVBNkwsTUFBTXpNLElBQUEsRUFBTVksS0FBQSxFQUFPO0lBQ2YsSU\
              FBSXFnQixnQkFBQSxDQUFpQixLQUFLcmhCLFFBQVE7SUFDOUIsS0FBS0EsUUFBQSx\
              DQUFTNk0sS0FBQSxDQUFNek0sSUFBQSxFQUFNWSxLQUFLO0VBQ3ZDO0VBQUE7QUFB\
              QTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0VBVUFzZ0IsWUFBW\
              WppQixJQUFBLEVBQU13RSxJQUFBLEVBQU07SUFDcEIsSUFBSSxDQUFDeEUsSUFBQS\
              xDQUFLRSxNQUFBLEVBQVE7TUFDZCxNQUFNMFAsSUFBQSxHQUFPakosV0FBQSxDQUF\
              ZLElBQUk7TUFDN0IzRyxJQUFBLENBQUtFLE1BQUE7TUFFRCxDQUFDc0UsSUFBQSxJ\
              QUFRb0wsSUFBQSxDQUFLM0ksR0FBQSxDQUFJekMsSUFBSSxJQUFJdUMsYUFBQSxDQ\
              UFjdkMsSUFBQSxJQUFRLEtBQUtvTCxJQUFJLElBQUlwTCxJQUFBO0lBQ3JFO0lBQ0\
              EsT0FBTyxJQUFJaEgsS0FBQSxDQUFNd0MsSUFBQSxDQUFLRSxNQUFNO0VBQ2hDO0V\
              BQ0E4TCxXQUFXckssS0FBQSxFQUFPbVgsUUFBQSxFQUFVdE8sT0FBQSxFQUFTO0lB\
              Q2pDLElBQUlpWCxTQUFBLEdBQVk7SUFDaEIsSUFBSSxPQUFPM0ksUUFBQSxLQUFhL\
              FlBQVk7TUFDaENuWCxLQUFBLEdBQVFtWCxRQUFBLENBQVNyVyxJQUFBLENBQUssRU\
              FBRSxJQUFJZCxLQUFBLENBQU0sR0FBRyxJQUFJQSxLQUFLO01BQzlDOGYsU0FBQSx\
              HQUFZM0ksUUFBQTtJQUNoQixXQUNTaFIsS0FBQSxDQUFNQyxPQUFBLENBQVErUSxR\
              QUFRLEdBQUc7TUFDOUIsTUFBTW9KLFFBQUEsR0FBV0EsQ0FBQ3ZaLENBQUEsS0FBT\
              SxPQUFPQSxDQUFBLEtBQU0sWUFBWUEsQ0FBQSxZQUFhcEQsTUFBQSxJQUFVb0QsQ0\
              FBQSxZQUFhUSxNQUFBO01BQ3JGLE1BQU1nWixLQUFBLEdBQVFySixRQUFBLENBQVN\
              yTixNQUFBLENBQU95VyxRQUFRLEVBQUV4WixHQUFBLENBQUluRCxNQUFNO01BQ2xE\
              LElBQUk0YyxLQUFBLENBQU03Z0IsTUFBQSxHQUFTO01BQ2Z3WCxRQUFBLEdBQVdBL\
              FFBQUEsQ0FBUzNYLE1BQUEsQ0FBT2doQixLQUFLO01BQ3BDVixTQUFBLEdBQVkzSS\
              xRQUFBO0lBQ2hCLFdBQ1N0TyxPQUFBLEtBQVksVUFBYXNPLFFBQUEsRUFBVTtNQUN\
              4Q3RPLE9BQUEsR0FBVXNPLFFBQUE7TUFDVkEsUUFBQSxHQUFXO0lBQ2Y7SUFDQSxN\
              QUFNLEVBQUV4TSxxQkFBQSxFQUF1QjhWLFlBQUEsRUFBY2pOLElBQUEsRUFBTW5JL\
              GFBQUEsRUFBZVQsUUFBQSxFQUFVOUcsR0FBQSxDQUFJLElBQUkrRSxPQUFBLFdBQU\
              FBLE9BQUEsR0FBVyxDQUFDO0lBQ2hHLE1BQU0sRUFBRWxELFFBQUEsRUFBVUMsVUF\
              BQSxFQUFZSCxhQUFBLENBQWMsSUFBSUYsaUJBQUE7TUFBa0I7TUFBQTtNQUVsRWti\
              LFlBQUEsSUFBZ0I7SUFBRztJQUNuQixNQUFNM1osR0FBQSxHQUFNO01BQ1I2RCxxQ\
              kFBQSxFQUF1QkEscUJBQUEsV0FBQUEscUJBQUEsR0FBeUI7TUFDaERVLGFBQUEsRU\
              FBZUEsYUFBQSxXQUFBQSxhQUFBLEdBQWlCO01BQ2hDMUYsUUFBQTtNQUNBaUYsUUF\
              BQTtNQUNBdU0sUUFBQSxFQUFVMkksU0FBQTtNQUNWdlYsTUFBQSxFQUFRLEtBQUtB\
              LE1BQUE7TUFDYjlFO0lBQ0o7SUFDQSxNQUFNcEgsSUFBQSxHQUFPZ00sVUFBQSxDQ\
              UFXckssS0FBQSxFQUFPOEQsR0FBQSxFQUFLZ0QsR0FBRztJQUN2QyxJQUFJME0sSU\
              FBQSxJQUFRMVcsWUFBQSxDQUFhdUIsSUFBSTtJQUN6QkEsSUFBQSxDQUFLbVYsSUF\
              BQSxHQUFPO0lBQ2hCNU4sVUFBQSxDQUFXO0lBQ1gsT0FBT3ZILElBQUE7RUFDWDtF\
              QUFBO0FBQUE7QUFBQTtBQUFBO0VBS0FvWCxXQUFXdFcsR0FBQSxFQUFLYSxLQUFBL\
              EVBQU82SSxPQUFBLEdBQVUsQ0FBQyxHQUFHO0lBQ2pDLE1BQU1yQyxDQUFBLEdBQU\
              ksS0FBSzZELFVBQUEsQ0FBV2xMLEdBQUEsRUFBSyxNQUFNMEosT0FBTztJQUM1Qyx\
              NQUFNN0IsQ0FBQSxHQUFJLEtBQUtxRCxVQUFBLENBQVdySyxLQUFBLEVBQU8sTUFB\
              TTZJLE9BQU87SUFDOUMsT0FBTyxJQUFJek0sSUFBQSxDQUFLb0ssQ0FBQSxFQUFHU\
              SxDQUFDO0VBQ3hCO0VBQUE7QUFBQTtBQUFBO0FBQUE7RUFLQU4sT0FBT3ZILEdBQU\
              EsRUFBSztJQUNSLE9BQU9raEIsZ0JBQUEsQ0FBaUIsS0FBS3JoQixRQUFRLElBQUk\
              sS0FBS0EsUUFBQSxDQUFTMEgsTUFBQSxDQUFPdkgsR0FBRyxJQUFJO0VBQ3pFO0VB\
              QUE7QUFBQTtBQUFBO0FBQUE7RUFLQTRNLFNBQVMzTSxJQUFBLEVBQU07SUFDWCxJQ\
              UFJa00sV0FBQSxDQUFZbE0sSUFBSSxHQUFHO01BQ25CLElBQUksS0FBS0osUUFBQS\
              xJQUFZO01BQ2pCLE9BQU87TUFFWCxLQUFLQSxRQUFBLEdBQVc7TUFDaEIsT0FBTzt\
              JQUNYO0lBQ0EsT0FBT3FoQixnQkFBQSxDQUFpQixLQUFLcmhCLFFBQVEsSUFDL0Is\
              S0FBS0EsUUFBQSxDQUFTK00sUUFBQSxDQUFTM00sSUFBSSxJQUMzQjtFQUNWO0VBQ\
              UE7QUFBQTtBQUFBO0FBQUE7QUFBQTtFQU1BMEcsSUFBSTNHLEdBQUEsRUFBSzhNLF\
              VBQUEsRUFBWTtJQUNqQixPQUFPblAsWUFBQSxDQUFhLEtBQUtrQyxRQUFRLElBQzN\
              CLEtBQUtBLFFBQUEsQ0FBUzhHLEdBQUEsQ0FBSTNHLEdBQUEsRUFBSzhNLFVBQVUs\
              SUFDakM7RUFDVjtFQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7RUFNQUQsTUFBTTVNL\
              ElBQUEsRUFBTTZNLFVBQUEsRUFBWTtJQUNwQixJQUFJWCxXQUFBLENBQVlsTSxJQU\
              FJO0lBQ2hCLE9BQU8sQ0FBQzZNLFVBQUEsSUFBYzlPLFFBQUEsQ0FBUyxLQUFLNkI\
              sUUFBUSxJQUN0QyxLQUFLQSxRQUFBLENBQVNnQixLQUFBLEdBQ2QsS0FBS2hCLFFB\
              QUE7SUFDZixPQUFPbEMsWUFBQSxDQUFhLEtBQUtrQyxRQUFRLElBQzNCLEtBQUtBL\
              FFBQUEsQ0FBU2dOLEtBQUEsQ0FBTTVNLElBQUEsRUFBTTZNLFVBQVUsSUFDcEM7RU\
              FDVjtFQUFBO0FBQUE7QUFBQTtFQUlBM0csSUFBSW5HLEdBQUEsRUFBSztJQUNMLE9\
              BQU9yQyxZQUFBLENBQWEsS0FBS2tDLFFBQVEsSUFBSSxLQUFLQSxRQUFBLENBQVNz\
              RyxHQUFBLENBQUluRyxHQUFHLElBQUk7RUFDbEU7RUFBQTtBQUFBO0FBQUE7RUFJQ\
              XFOLE1BQU1wTixJQUFBLEVBQU07SUFDUixJQUFJa00sV0FBQSxDQUFZbE0sSUFBST\
              tJQUNoQixPQUFPLEtBQUtKLFFBQUEsS0FBYTtJQUM3QixPQUFPbEMsWUFBQSxDQUF\
              hLEtBQUtrQyxRQUFRLElBQUksS0FBS0EsUUFBQSxDQUFTd04sS0FBQSxDQUFNcE4s\
              SUFBSSxJQUFJO0VBQ3JFO0VBQUE7QUFBQTtBQUFBO0FBQUE7RUFLQXVILElBQUl4S\
              CxHQUFBLEVBQUthLEtBQUEsRUFBTztJQUNaLElBQUksS0FBS2hCLFFBQUEsSUFBWS\
              xNQUFNO01BRXZCLEtBQUtBLFFBQUEsR0FBV2tNLGtCQUFBLENBQW1CLEtBQUtYLE1\
              BQUEsRUFBUSxDQUFDcEwsR0FBRyxHQUFHYSxLQUFLO0lBQ2hFLFdBQ1NxZ0IsZ0JB\
              QUEsQ0FBaUIsS0FBS3JoQixRQUFRLEdBQUc7TUFDdEMsS0FBS0EsUUFBQSxDQUFTM\
              kgsR0FBQSxDQUFJeEgsR0FBQSxFQUFLYSxLQUFLO0lBQ2hDO0VBQ0o7RUFBQTtBQU\
              FBO0FBQUE7QUFBQTtFQUtBeU0sTUFBTXJOLElBQUEsRUFBTVksS0FBQSxFQUFPO0l\
              BQ2YsSUFBSXNMLFdBQUEsQ0FBWWxNLElBQUksR0FBRztNQUVuQixLQUFLSixRQUFB\
              LEdBQVdnQixLQUFBO0lBQ3BCLFdBQ1MsS0FBS2hCLFFBQUEsSUFBWSxNQUFNO01BR\
              TVCLEtBQUtBLFFBQUEsR0FBV2tNLGtCQUFBLENBQW1CLEtBQUtYLE1BQUEsRUFBUX\
              BFLEtBQUEsQ0FBTU0sSUFBQSxDQUFLckgsSUFBSSxHQUFHWSxLQUFLO0lBQzNFLFd\
              BQ1NxZ0IsZ0JBQUEsQ0FBaUIsS0FBS3JoQixRQUFRLEdBQUc7TUFDdEMsS0FBS0Es\
              UUFBQSxDQUFTeU4sS0FBQSxDQUFNck4sSUFBQSxFQUFNWSxLQUFLO0lBQ25DO0VBQ\
              0o7RUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtFQVFBb2dCLFVBQV\
              VoZSxPQUFBLEVBQVN5RyxPQUFBLEdBQVUsQ0FBQyxHQUFHO0lBQzdCLElBQUksT0F\
              BT3pHLE9BQUEsS0FBWTtJQUNuQkEsT0FBQSxHQUFVd0IsTUFBQSxDQUFPeEIsT0FB\
              TztJQUM1QixJQUFJMFAsR0FBQTtJQUNKLFFBQVExUCxPQUFBO01BQ0osS0FBSztRQ\
              UNELElBQUksS0FBSzJQLFVBQUE7UUFDTCxLQUFLQSxVQUFBLENBQVdyUSxJQUFBLE\
              NBQUtVLE9BQUEsR0FBVTs7UUFFL0IsS0FBSzJQLFVBQUEsR0FBYSxJQUFJeFEsVUF\
              BQSxDQUFXLEVBQUVhLE9BQUEsRUFBUyxNQUFNLENBQUM7UUFDdkQwUCxHQUFBLEdB\
              QU0sRUFBRTRDLEtBQUEsRUFBTyxNQUFNeUssZ0JBQUEsRUFBa0IsT0FBTzVVLE1BQ\
              UEsRUFBUSxXQUFXO1FBQ2pFO01BQ0osS0FBSztNQUNMLEtBQUs7UUFDRCxJQUFJLE\
              tBQUt3SCxVQUFBO1FBQ0wsS0FBS0EsVUFBQSxDQUFXclEsSUFBQSxDQUFLVSxPQUF\
              BLEdBQVVBLE9BQUE7O1FBRS9CLEtBQUsyUCxVQUFBLEdBQWEsSUFBSXhRLFVBQUEs\
              Q0FBVyxFQUFFYSxPQUFBLENBQVEsQ0FBQztRQUNoRDBQLEdBQUEsR0FBTSxFQUFFN\
              EMsS0FBQSxFQUFPLE9BQU95SyxnQkFBQSxFQUFrQixNQUFNNVUsTUFBQSxFQUFRLE\
              9BQU87UUFDN0Q7TUFDSixLQUFLO1FBQ0QsSUFBSSxLQUFLd0gsVUFBQTtRQUNMLE9\
              BQU8sS0FBS0EsVUFBQTtRQUNoQkQsR0FBQSxHQUFNO1FBQ047TUFDSixRQUFTO1VB\
              Q0wsTUFBTXFHLEVBQUEsR0FBS3JULElBQUEsQ0FBS3RILFNBQUEsQ0FBVTRFLE9BQ\
              U87VUFDakMsTUFBTSxJQUFJbkIsS0FBQSxDQUFNLCtEQUErRGtYLEVBQUUsRUFBRT\
              tRQUN2RjtJQUNKO0lBRUEsSUFBSXRQLE9BQUEsQ0FBUTBCLE1BQUEsWUFBa0J0TCx\
              NQUFBO0lBQzFCLEtBQUtzTCxNQUFBLEdBQVMxQixPQUFBLENBQVEwQixNQUFBO0lB\
              QUEsSUFDakJ1SCxHQUFBO0lBQ0wsS0FBS3ZILE1BQUEsR0FBUyxJQUFJaE8sTUFBQ\
              SxDQUFPMEMsTUFBQSxDQUFPcUIsTUFBQSxDQUFPd1IsR0FBQSxFQUFLakosT0FBTy\
              xDQUFDOztJQUVwRCxNQUFNLElBQUk1SCxLQUFBLENBQU0scUVBQXFFO0VBQzdGO0V\
              BQUE7RUFFQTJGLEtBQUssRUFBRXVJLElBQUEsRUFBTXVSLE9BQUEsRUFBUzFZLFFB\
              QUEsRUFBVUMsYUFBQSxFQUFldEMsUUFBQSxFQUFVSyxPQUFBLENBQVEsSUFBSSxDQ\
              UFDLEdBQUc7SUFDckUsTUFBTWMsR0FBQSxHQUFNO01BQ1I1QixPQUFBLEVBQVMsbU\
              JBQUkzRSxHQUFBLENBQUk7TUFDakI0RCxHQUFBLEVBQUs7TUFDTG9ELElBQUEsRUF\
              BTSxDQUFDNEgsSUFBQTtNQUNQbkgsUUFBQSxFQUFVQSxRQUFBLEtBQWE7TUFDdkJH\
              LFlBQUEsRUFBYztNQUNkRixhQUFBLEVBQWUsT0FBT0EsYUFBQSxLQUFrQixXQUFXQ\
              SxhQUFBLEdBQWdCO0lBQ3ZFO0lBQ0EsTUFBTTlGLEdBQUEsR0FBTXlFLElBQUEsQ0\
              FBSyxLQUFLNUgsUUFBQSxFQUFVMGhCLE9BQUEsV0FBQUEsT0FBQSxHQUFXLElBQUk\
              1WixHQUFHO0lBQ2xELElBQUksT0FBT25CLFFBQUEsS0FBYTtJQUNwQixXQUFXLEVB\
              QUV5QixLQUFBLEVBQU9qRixHQUFBLEVBQUFtRixJQUFBLENBQUksS0FBS1IsR0FBQ\
              SxDQUFJNUIsT0FBQSxDQUFRa0QsTUFBQSxDQUFPO0lBQzVDekMsUUFBQSxDQUFTMk\
              IsSUFBQSxFQUFLRixLQUFLO0lBQzNCLE9BQU8sT0FBT3BCLE9BQUEsS0FBWSxhQUN\
              wQkQsWUFBQSxDQUFhQyxPQUFBLEVBQVMsRUFBRSxJQUFJN0QsR0FBQSxDQUFJLEdB\
              QUcsSUFBSUEsR0FBRyxJQUMxQ0EsR0FBQTtFQUNWO0VBQUE7QUFBQTtBQUFBO0FBQ\
              UE7QUFBQTtBQUFBO0VBT0E4RSxPQUFPeVosT0FBQSxFQUFTL2EsUUFBQSxFQUFVO0\
              lBQ3RCLE9BQU8sS0FBS2lCLElBQUEsQ0FBSyxFQUFFdUksSUFBQSxFQUFNLE1BQU1\
              1UixPQUFBLEVBQVMxWSxRQUFBLEVBQVUsT0FBT3JDLFFBQUEsQ0FBUyxDQUFDO0VB\
              Q3ZFO0VBQUE7RUFFQXpCLFNBQVMyRSxPQUFBLEdBQVUsQ0FBQyxHQUFHO0lBQ25CL\
              ElBQUksS0FBSytXLE1BQUEsQ0FBT2pnQixNQUFBLEdBQVM7SUFDckIsTUFBTSxJQU\
              FJc0IsS0FBQSxDQUFNLDRDQUE0QztJQUNoRSxJQUFJLFlBQVk0SCxPQUFBLEtBQ1g\
              sQ0FBQ3JCLE1BQUEsQ0FBTzJELFNBQUEsQ0FBVXRDLE9BQUEsQ0FBUWlFLE1BQU0s\
              S0FBS3RGLE1BQUEsQ0FBT3FCLE9BQUEsQ0FBUWlFLE1BQU0sS0FBSyxJQUFJO01BQ\
              3BFLE1BQU04TixDQUFBLEdBQUk5VixJQUFBLENBQUt0SCxTQUFBLENBQVVxTCxPQU\
              FBLENBQVFpRSxNQUFNO01BQ3ZDLE1BQU0sSUFBSTdMLEtBQUEsQ0FBTSxtREFBbUQ\
              yWixDQUFDLEVBQUU7SUFDMUU7SUFDQSxPQUFPMEUsaUJBQUEsQ0FBa0IsTUFBTXpX\
              LE9BQU87RUFDMUM7QUFDSjtBQUNBLFNBQVN3WCxpQkFBaUJyaEIsUUFBQSxFQUFVO\
              0VBQ2hDLElBQUlsQyxZQUFBLENBQWFrQyxRQUFRO0VBQ3JCLE9BQU87RUFDWCxNQU\
              FNLElBQUlpQyxLQUFBLENBQU0saURBQWlEO0FBQ3JFOzs7QUMzVUEsSUFBTXpFLFN\
              BQUEsR0FBTixjQUF3QnlFLEtBQUEsQ0FBTTtFQUMxQlEsWUFBWW9CLElBQUEsRUFB\
              TThkLEdBQUEsRUFBS3BSLElBQUEsRUFBTXFSLE9BQUEsRUFBUztJQUNsQyxNQUFNO\
              0lBQ04sS0FBSy9kLElBQUEsR0FBT0EsSUFBQTtJQUNaLEtBQUswTSxJQUFBLEdBQU\
              9BLElBQUE7SUFDWixLQUFLcVIsT0FBQSxHQUFVQSxPQUFBO0lBQ2YsS0FBS0QsR0F\
              BQSxHQUFNQSxHQUFBO0VBQ2Y7QUFDSjtBQUNBLElBQU1qa0IsY0FBQSxHQUFOLGNB\
              QTZCRixTQUFBLENBQVU7RUFDbkNpRixZQUFZa2YsR0FBQSxFQUFLcFIsSUFBQSxFQ\
              UFNcVIsT0FBQSxFQUFTO0lBQzVCLE1BQU0sa0JBQWtCRCxHQUFBLEVBQUtwUixJQU\
              FBLEVBQU1xUixPQUFPO0VBQzlDO0FBQ0o7QUFDQSxJQUFNaGtCLFdBQUEsR0FBTix\
              jQUEwQkosU0FBQSxDQUFVO0VBQ2hDaUYsWUFBWWtmLEdBQUEsRUFBS3BSLElBQUEs\
              RUFBTXFSLE9BQUEsRUFBUztJQUM1QixNQUFNLGVBQWVELEdBQUEsRUFBS3BSLElBQ\
              UEsRUFBTXFSLE9BQU87RUFDM0M7QUFDSjtBQUNBLElBQU1DLGFBQUEsR0FBZ0JBLE\
              NBQUNqWSxHQUFBLEVBQUtrWSxFQUFBLEtBQU8sQ0FBQ25kLEtBQUEsS0FBVTtFQUM\
              xQyxJQUFJQSxLQUFBLENBQU1nZCxHQUFBLENBQUksQ0FBQyxNQUFNO0VBQ2pCO0VB\
              Q0poZCxLQUFBLENBQU1vZCxPQUFBLEdBQVVwZCxLQUFBLENBQU1nZCxHQUFBLENBQ\
              Uk1WixHQUFBLENBQUksQ0FBQTRaLEdBQUEsS0FBT0csRUFBQSxDQUFHQyxPQUFBLE\
              NBQVFKLEdBQUcsQ0FBQztFQUNwRCxNQUFNLEVBQUVuZSxJQUFBLEVBQU13ZSxHQUF\
              BLENBQUksSUFBSXJkLEtBQUEsQ0FBTW9kLE9BQUEsQ0FBUSxDQUFDO0VBQ3JDcGQs\
              S0FBQSxDQUFNaWQsT0FBQSxJQUFXLFlBQVlwZSxJQUFJLFlBQVl3ZSxHQUFHO0VBQ\
              2hELElBQUlwaEIsRUFBQSxHQUFLb2hCLEdBQUEsR0FBTTtFQUNmLElBQUlDLE9BQU\
              EsR0FBVXJZLEdBQUEsQ0FDVDNFLFNBQUEsQ0FBVTZjLEVBQUEsQ0FBR0ksVUFBQSx\
              DQUFXMWUsSUFBQSxHQUFPLENBQUMsR0FBR3NlLEVBQUEsQ0FBR0ksVUFBQSxDQUFX\
              MWUsSUFBSSxDQUFDLEVBQ3REbkIsT0FBQSxDQUFRLFlBQVksRUFBRTtFQUUzQixJQ\
              UFJekIsRUFBQSxJQUFNLE1BQU1xaEIsT0FBQSxDQUFRdGhCLE1BQUEsR0FBUyxJQU\
              FJO0lBQ2pDLE1BQU1zWCxTQUFBLEdBQVk3TixJQUFBLENBQUsrWCxHQUFBLENBQUl\
              2aEIsRUFBQSxHQUFLLElBQUlxaEIsT0FBQSxDQUFRdGhCLE1BQUEsR0FBUyxFQUFF\
              O0lBQ3ZEc2hCLE9BQUEsR0FBVSxXQUFNQSxPQUFBLENBQVFoZCxTQUFBLENBQVVnV\
              CxTQUFTO0lBQzNDclgsRUFBQSxJQUFNcVgsU0FBQSxHQUFZO0VBQ3RCO0VBQ0EsSU\
              FBSWdLLE9BQUEsQ0FBUXRoQixNQUFBLEdBQVM7RUFDakJzaEIsT0FBQSxHQUFVQSx\
              PQUFBLENBQVFoZCxTQUFBLENBQVUsR0FBRyxFQUFFLElBQUk7RUFFekMsSUFBSXpC\
              LElBQUEsR0FBTyxLQUFLLE9BQU9VLElBQUEsQ0FBSytkLE9BQUEsQ0FBUWhkLFNBQ\
              UEsQ0FBVSxHQUFHckUsRUFBRSxDQUFDLEdBQUc7SUFFbkQsSUFBSXFPLElBQUEsR0\
              FBT3JGLEdBQUEsQ0FBSTNFLFNBQUEsQ0FBVTZjLEVBQUEsQ0FBR0ksVUFBQSxDQUF\
              XMWUsSUFBQSxHQUFPLENBQUMsR0FBR3NlLEVBQUEsQ0FBR0ksVUFBQSxDQUFXMWUs\
              SUFBQSxHQUFPLENBQUMsQ0FBQztJQUN6RSxJQUFJeUwsSUFBQSxDQUFLdE8sTUFBQ\
              SxHQUFTO0lBQ2RzTyxJQUFBLEdBQU9BLElBQUEsQ0FBS2hLLFNBQUEsQ0FBVSxHQU\
              FHLEVBQUUsSUFBSTtJQUNuQ2dkLE9BQUEsR0FBVWhULElBQUEsR0FBT2dULE9BQUE\
              7RUFDckI7RUFDQSxJQUFJLE9BQU8vZCxJQUFBLENBQUsrZCxPQUFPLEdBQUc7SUFD\
              dEIsSUFBSTdaLEtBQUEsR0FBUTtJQUNaLE1BQU00RyxHQUFBLEdBQU1ySyxLQUFBL\
              ENBQU1vZCxPQUFBLENBQVEsQ0FBQztJQUMzQixJQUFJL1MsR0FBQSxJQUFPQSxHQU\
              FBLENBQUl4TCxJQUFBLEtBQVNBLElBQUEsSUFBUXdMLEdBQUEsQ0FBSWdULEdBQUE\
              sR0FBTUEsR0FBQSxFQUFLO01BQzNDNVosS0FBQSxHQUFRZ0MsSUFBQSxDQUFLQyxH\
              QUFBLENBQUksR0FBR0QsSUFBQSxDQUFLK1gsR0FBQSxDQUFJblQsR0FBQSxDQUFJZ\
              1QsR0FBQSxHQUFNQSxHQUFBLEVBQUssS0FBS3BoQixFQUFFLENBQUM7SUFDeEQ7SU\
              FDQSxNQUFNd2hCLE9BQUEsR0FBVSxJQUFJNU8sTUFBQSxDQUFPNVMsRUFBRSxJQUF\
              JLElBQUk0UyxNQUFBLENBQU9wTCxLQUFLO0lBQ2pEekQsS0FBQSxDQUFNaWQsT0FB\
              QSxJQUFXO0FBQUE7QUFBQSxFQUFRSyxPQUFPO0FBQUEsRUFBS0csT0FBTztBQUFBO\
              0VBQ2hEO0FBQ0o7OztBQ3REQSxTQUFTQyxhQUFhQyxNQUFBLEVBQVEsRUFBRTlOLE\
              lBQUEsRUFBTStOLFNBQUEsRUFBV2hXLElBQUEsRUFBTStOLE1BQUEsRUFBUTdXLE9\
              BQUEsRUFBUytlLFlBQUEsRUFBY0MsY0FBQSxDQUFlLEdBQUc7RUFDcEcsSUFBSWxP\
              LFdBQUEsR0FBYztFQUNsQixJQUFJbU8sU0FBQSxHQUFZRCxjQUFBO0VBQ2hCLElBQ\
              UlFLFFBQUEsR0FBV0YsY0FBQTtFQUNmLElBQUlsVixPQUFBLEdBQVU7RUFDZCxJQU\
              FJcVYsVUFBQSxHQUFhO0VBQ2pCLElBQUk3TixVQUFBLEdBQWE7RUFDakIsSUFBSTh\
              OLG1CQUFBLEdBQXNCO0VBQzFCLElBQUlDLFFBQUEsR0FBVztFQUNmLElBQUlDLEdB\
              QUEsR0FBTTtFQUNWLElBQUl4akIsTUFBQSxHQUFTO0VBQ2IsSUFBSXVGLEdBQUEsR\
              0FBTTtFQUNWLElBQUlrZSxLQUFBLEdBQVE7RUFDWixJQUFJMVosS0FBQSxHQUFRO0\
              VBQ1osSUFBSW9HLEtBQUEsR0FBUTtFQUNaLFdBQVd1VCxLQUFBLElBQVNYLE1BQUE\
              sRUFBUTtJQUN4QixJQUFJUSxRQUFBLEVBQVU7TUFDVixJQUFJRyxLQUFBLENBQU12\
              YSxJQUFBLEtBQVMsV0FDZnVhLEtBQUEsQ0FBTXZhLElBQUEsS0FBUyxhQUNmdWEsS\
              0FBQSxDQUFNdmEsSUFBQSxLQUFTO01BQ2ZqRixPQUFBLENBQVF3ZixLQUFBLENBQU\
              0zSSxNQUFBLEVBQVEsZ0JBQWdCLHVFQUF1RTtNQUNqSHdJLFFBQUEsR0FBVztJQUN\
              mO0lBQ0EsSUFBSUMsR0FBQSxFQUFLO01BQ0wsSUFBSUwsU0FBQSxJQUFhTyxLQUFB\
              LENBQU12YSxJQUFBLEtBQVMsYUFBYXVhLEtBQUEsQ0FBTXZhLElBQUEsS0FBUyxXQ\
              UFXO1FBQ25FakYsT0FBQSxDQUFRc2YsR0FBQSxFQUFLLGlCQUFpQixxQ0FBcUM7TU\
              FDdkU7TUFDQUEsR0FBQSxHQUFNO0lBQ1Y7SUFDQSxRQUFRRSxLQUFBLENBQU12YSx\
              JQUFBO01BQ1YsS0FBSztRQUlELElBQUksQ0FBQzhMLElBQUEsS0FDQStOLFNBQUEs\
              S0FBYyxnQkFBZWhXLElBQUEsb0JBQUFBLElBQUEsQ0FBTTdELElBQUEsTUFBUyxzQ\
              kFDN0N1YSxLQUFBLENBQU03ZSxNQUFBLENBQU82SixRQUFBLENBQVMsR0FBSSxHQU\
              FHO1VBQzdCOFUsR0FBQSxHQUFNRSxLQUFBO1FBQ1Y7UUFDQU4sUUFBQSxHQUFXO1F\
              BQ1g7TUFDSixLQUFLLFVBQVc7VUFDWixJQUFJLENBQUNBLFFBQUE7VUFDRGxmLE9B\
              QUEsQ0FBUXdmLEtBQUEsRUFBTyxnQkFBZ0Isd0VBQXdFO1VBQzNHLE1BQU1DLEVBQ\
              UEsR0FBS0QsS0FBQSxDQUFNN2UsTUFBQSxDQUFPYSxTQUFBLENBQVUsQ0FBQyxLQU\
              FLO1VBQ3hDLElBQUksQ0FBQ3NJLE9BQUE7VUFDREEsT0FBQSxHQUFVMlYsRUFBQTs\
              7VUFFVjNWLE9BQUEsSUFBV3FWLFVBQUEsR0FBYU0sRUFBQTtVQUM1Qk4sVUFBQSxH\
              QUFhO1VBQ2JGLFNBQUEsR0FBWTtVQUNaO1FBQ0o7TUFDQSxLQUFLO1FBQ0QsSUFBS\
              UEsU0FBQSxFQUFXO1VBQ1gsSUFBSW5WLE9BQUE7VUFDQUEsT0FBQSxJQUFXMFYsS0\
              FBQSxDQUFNN2UsTUFBQTs7VUFFakJtUSxXQUFBLEdBQWM7UUFDdEI7UUFFSXFPLFV\
              BQUEsSUFBY0ssS0FBQSxDQUFNN2UsTUFBQTtRQUN4QnNlLFNBQUEsR0FBWTtRQUNa\
              M04sVUFBQSxHQUFhO1FBQ2IsSUFBSXhWLE1BQUEsSUFBVXVGLEdBQUE7UUFDVitkL\
              G1CQUFBLEdBQXNCO1FBQzFCRixRQUFBLEdBQVc7UUFDWDtNQUNKLEtBQUs7UUFDRC\
              xJQUFJcGpCLE1BQUE7UUFDQWtFLE9BQUEsQ0FBUXdmLEtBQUEsRUFBTyxvQkFBb0I\
              sb0NBQW9DO1FBQzNFLElBQUlBLEtBQUEsQ0FBTTdlLE1BQUEsQ0FBTzRKLFFBQUEs\
              Q0FBUyxHQUFHO1FBQ3pCdkssT0FBQSxDQUFRd2YsS0FBQSxDQUFNM0ksTUFBQSxHQ\
              UFTMkksS0FBQSxDQUFNN2UsTUFBQSxDQUFPekQsTUFBQSxHQUFTLEdBQUcsYUFBYS\
              xtQ0FBbUMsSUFBSTtRQUN4R3BCLE1BQUEsR0FBUzBqQixLQUFBO1FBQ1QsSUFBSXZ\
              ULEtBQUEsS0FBVTtRQUNWQSxLQUFBLEdBQVF1VCxLQUFBLENBQU0zSSxNQUFBO1FB\
              Q2xCb0ksU0FBQSxHQUFZO1FBQ1pDLFFBQUEsR0FBVztRQUNYRyxRQUFBLEdBQVc7U\
              UFDWDtNQUNKLEtBQUssTUFBTztVQUNSLElBQUloZSxHQUFBO1VBQ0FyQixPQUFBLE\
              NBQVF3ZixLQUFBLEVBQU8saUJBQWlCLGlDQUFpQztVQUNyRW5lLEdBQUEsR0FBTW1\
              lLEtBQUE7VUFDTixJQUFJdlQsS0FBQSxLQUFVO1VBQ1ZBLEtBQUEsR0FBUXVULEtB\
              QUEsQ0FBTTNJLE1BQUE7VUFDbEJvSSxTQUFBLEdBQVk7VUFDWkMsUUFBQSxHQUFXO\
              1VBQ1hHLFFBQUEsR0FBVztVQUNYO1FBQ0o7TUFDQSxLQUFLUCxTQUFBO1FBRUQsSU\
              FBSWhqQixNQUFBLElBQVV1RixHQUFBO1FBQ1ZyQixPQUFBLENBQVF3ZixLQUFBLEV\
              BQU8sa0JBQWtCLHNDQUFzQ0EsS0FBQSxDQUFNN2UsTUFBTSxZQUFZO1FBQ25HLElB\
              QUlrRixLQUFBO1FBQ0E3RixPQUFBLENBQVF3ZixLQUFBLEVBQU8sb0JBQW9CLGNBQ\
              WNBLEtBQUEsQ0FBTTdlLE1BQU0sT0FBT29RLElBQUEsV0FBQUEsSUFBQSxHQUFRLF\
              lBQVksRUFBRTtRQUM5RmxMLEtBQUEsR0FBUTJaLEtBQUE7UUFDUlAsU0FBQSxHQUN\
              JSCxTQUFBLEtBQWMsa0JBQWtCQSxTQUFBLEtBQWM7UUFDbERJLFFBQUEsR0FBVztR\
              QUNYO01BQ0osS0FBSztRQUNELElBQUluTyxJQUFBLEVBQU07VUFDTixJQUFJd08sS\
              0FBQTtVQUNBdmYsT0FBQSxDQUFRd2YsS0FBQSxFQUFPLG9CQUFvQixtQkFBbUJ6Ty\
              xJQUFJLEVBQUU7VUFDaEV3TyxLQUFBLEdBQVFDLEtBQUE7VUFDUlAsU0FBQSxHQUF\
              ZO1VBQ1pDLFFBQUEsR0FBVztVQUNYO1FBQ0o7TUFFSjtRQUNJbGYsT0FBQSxDQUFR\
              d2YsS0FBQSxFQUFPLG9CQUFvQixjQUFjQSxLQUFBLENBQU12YSxJQUFJLFFBQVE7U\
              UFDbkVnYSxTQUFBLEdBQVk7UUFDWkMsUUFBQSxHQUFXO0lBQ25CO0VBQ0o7RUFDQS\
              xNQUFNUSxJQUFBLEdBQU9iLE1BQUEsQ0FBT0EsTUFBQSxDQUFPM2hCLE1BQUEsR0F\
              BUyxDQUFDO0VBQ3JDLE1BQU1xTyxHQUFBLEdBQU1tVSxJQUFBLEdBQU9BLElBQUEs\
              Q0FBSzdJLE1BQUEsR0FBUzZJLElBQUEsQ0FBSy9lLE1BQUEsQ0FBT3pELE1BQUEsR\
              0FBUzJaLE1BQUE7RUFDdEQsSUFBSXdJLFFBQUEsSUFDQXZXLElBQUEsSUFDQUEsSU\
              FBQSxDQUFLN0QsSUFBQSxLQUFTLFdBQ2Q2RCxJQUFBLENBQUs3RCxJQUFBLEtBQVM\
              sYUFDZDZELElBQUEsQ0FBSzdELElBQUEsS0FBUyxZQUNiNkQsSUFBQSxDQUFLN0Qs\
              SUFBQSxLQUFTLFlBQVk2RCxJQUFBLENBQUtuSSxNQUFBLEtBQVcsS0FBSztJQUNoR\
              FgsT0FBQSxDQUFROEksSUFBQSxDQUFLK04sTUFBQSxFQUFRLGdCQUFnQix1RUFBdU\
              U7RUFDaEg7RUFDQSxJQUFJeUksR0FBQSxLQUNFTCxTQUFBLElBQWFLLEdBQUEsQ0F\
              BSWpWLE1BQUEsSUFBVTBVLFlBQUEsS0FDekJqVyxJQUFBLG9CQUFBQSxJQUFBLENB\
              QU03RCxJQUFBLE1BQVMsZ0JBQ2Y2RCxJQUFBLG9CQUFBQSxJQUFBLENBQU03RCxJQ\
              UFBLE1BQVM7RUFDbkJqRixPQUFBLENBQVFzZixHQUFBLEVBQUssaUJBQWlCLHFDQU\
              FxQztFQUN2RSxPQUFPO0lBQ0hDLEtBQUE7SUFDQTFaLEtBQUE7SUFDQWlMLFdBQUE\
              7SUFDQWhILE9BQUE7SUFDQXdILFVBQUE7SUFDQThOLG1CQUFBO0lBQ0F0akIsTUFB\
              QTtJQUNBdUYsR0FBQTtJQUNBa0ssR0FBQTtJQUNBVSxLQUFBLEVBQU9BLEtBQUEsV\
              0FBQUEsS0FBQSxHQUFTVjtFQUNwQjtBQUNKOzs7QUNqSkEsU0FBU29VLGdCQUFnQm\
              pqQixHQUFBLEVBQUs7RUFDMUIsSUFBSSxDQUFDQSxHQUFBO0VBQ0QsT0FBTztFQUN\
              YLFFBQVFBLEdBQUEsQ0FBSXVJLElBQUE7SUFDUixLQUFLO0lBQ0wsS0FBSztJQUNM\
              LEtBQUs7SUFDTCxLQUFLO01BQ0QsSUFBSXZJLEdBQUEsQ0FBSWlFLE1BQUEsQ0FBT\
              zZKLFFBQUEsQ0FBUyxJQUFJO01BQ3hCLE9BQU87TUFDWCxJQUFJOU4sR0FBQSxDQU\
              FJNk8sR0FBQTtRQUNKLFdBQVdxVSxFQUFBLElBQU1sakIsR0FBQSxDQUFJNk8sR0F\
              BQTtRQUNqQixJQUFJcVUsRUFBQSxDQUFHM2EsSUFBQSxLQUFTO1FBQ1osT0FBTztN\
              QUFBO01BQ25CLE9BQU87SUFDWCxLQUFLO01BQ0QsV0FBV2tFLEVBQUEsSUFBTXpNL\
              EdBQUEsQ0FBSU8sS0FBQSxFQUFPO1FBQ3hCLFdBQVcyaUIsRUFBQSxJQUFNelcsRU\
              FBQSxDQUFHOEMsS0FBQTtRQUNoQixJQUFJMlQsRUFBQSxDQUFHM2EsSUFBQSxLQUF\
              TO1FBQ1osT0FBTztRQUNmLElBQUlrRSxFQUFBLENBQUcwVyxHQUFBO1VBQ0gsV0FB\
              V0QsRUFBQSxJQUFNelcsRUFBQSxDQUFHMFcsR0FBQTtVQUNoQixJQUFJRCxFQUFBL\
              ENBQUczYSxJQUFBLEtBQVM7VUFDWixPQUFPO1FBQUE7UUFDbkIsSUFBSTBhLGVBQU\
              EsQ0FBZ0J4VyxFQUFBLENBQUd6TSxHQUFHLEtBQUtpakIsZUFBQSxDQUFnQnhXLEV\
              BQUEsQ0FBRzVMLEtBQUs7UUFDbkQsT0FBTztNQUNmO01BQ0EsT0FBTztJQUNYO01B\
              Q0ksT0FBTztFQUNmO0FBQ0o7OztBQzdCQSxTQUFTdWlCLGdCQUFnQnpWLE1BQUEsR\
              UFBUTBWLEVBQUEsRUFBSS9mLE9BQUEsRUFBUztFQUMxQyxLQUFJK2YsRUFBQSxvQk\
              FBQUEsRUFBQSxDQUFJOWEsSUFBQSxNQUFTLG1CQUFtQjtJQUNoQyxNQUFNc0csR0F\
              BQSxHQUFNd1UsRUFBQSxDQUFHeFUsR0FBQSxDQUFJLENBQUM7SUFDcEIsSUFBSUEs\
              R0FBQSxDQUFJbEIsTUFBQSxLQUFXQSxNQUFBLEtBQ2RrQixHQUFBLENBQUk1SyxNQ\
              UFBLEtBQVcsT0FBTzRLLEdBQUEsQ0FBSTVLLE1BQUEsS0FBVyxRQUN0Q2dmLGVBQU\
              EsQ0FBZ0JJLEVBQUUsR0FBRztNQUNyQixNQUFNemQsR0FBQSxHQUFNO01BQ1p0Qyx\
              PQUFBLENBQVF1TCxHQUFBLEVBQUssY0FBY2pKLEdBQUEsRUFBSyxJQUFJO0lBQ3hD\
              O0VBQ0o7QUFDSjs7O0FDVkEsU0FBUzBkLFlBQVkzYixHQUFBLEVBQUtwSCxLQUFBL\
              EVBQU9nakIsTUFBQSxFQUFRO0VBQ3JDLE1BQU0sRUFBRXhDLFVBQUEsQ0FBVyxJQU\
              FJcFosR0FBQSxDQUFJK0IsT0FBQTtFQUMzQixJQUFJcVgsVUFBQSxLQUFlO0VBQ2Y\
              sT0FBTztFQUNYLE1BQU15QyxPQUFBLEdBQVUsT0FBT3pDLFVBQUEsS0FBZSxhQUNo\
              Q0EsVUFBQSxHQUNBLENBQUM5VSxDQUFBLEVBQUc2VCxDQUFBLEtBQU03VCxDQUFBL\
              EtBQU02VCxDQUFBLElBQ2I5aEIsUUFBQSxDQUFTaU8sQ0FBQyxLQUNQak8sUUFBQS\
              xDQUFTOGhCLENBQUMsS0FDVjdULENBQUEsQ0FBRXBMLEtBQUEsS0FBVWlmLENBQUE\
              sQ0FBRWpmLEtBQUEsSUFDZCxFQUFFb0wsQ0FBQSxDQUFFcEwsS0FBQSxLQUFVLFFB\
              QVE4RyxHQUFBLENBQUl5RCxNQUFBLENBQU9tSyxLQUFBO0VBQzdDLE9BQU9oVixLQ\
              UFBLENBQU0rRSxJQUFBLENBQUssQ0FBQW1SLElBQUEsS0FBUStNLE9BQUEsQ0FBUS\
              9NLElBQUEsQ0FBS3pXLEdBQUEsRUFBS3VqQixNQUFNLENBQUM7QUFDdkQ7OztBQ1B\
              BLElBQU1FLFdBQUEsR0FBYztBQUNwQixTQUFTQyxnQkFBZ0IsRUFBRUMsV0FBQSxF\
              QUFBQyxZQUFBLEVBQWFDLGdCQUFBLEVBQUFDLGlCQUFBLENBQWlCLEdBQUduYyxHQ\
              UFBLEVBQUtvYyxFQUFBLEVBQUl6Z0IsT0FBQSxFQUFTcUIsR0FBQSxFQUFLO0VBUm\
              5GLElBQUFyRCxFQUFBLEVBQUFDLEVBQUE7RUFTSSxNQUFNeWlCLFNBQUEsSUFBWTF\
              pQixFQUFBLEdBQUFxRCxHQUFBLG9CQUFBQSxHQUFBLENBQUtrSCxTQUFBLEtBQUws\
              T0FBQXZLLEVBQUEsR0FBa0JoRSxPQUFBO0VBQ3BDLE1BQU02TixJQUFBLEdBQU0sS\
              UFBSTZZLFNBQUEsQ0FBVXJjLEdBQUEsQ0FBSXlELE1BQU07RUFDcEMsSUFBSXpELE\
              dBQUEsQ0FBSXNjLE1BQUE7RUFDSnRjLEdBQUEsQ0FBSXNjLE1BQUEsR0FBUztFQUN\
              qQixJQUFJOUosTUFBQSxHQUFTNEosRUFBQSxDQUFHNUosTUFBQTtFQUNoQixJQUFJ\
              K0osVUFBQSxHQUFhO0VBQ2pCLFdBQVdDLFFBQUEsSUFBWUosRUFBQSxDQUFHeGpCL\
              EtBQUEsRUFBTztJQUM3QixNQUFNLEVBQUVnUCxLQUFBLEVBQU92UCxHQUFBLEVBQU\
              ttakIsR0FBQSxFQUFLdGlCLEtBQUEsQ0FBTSxJQUFJc2pCLFFBQUE7SUFFbkMsTUF\
              BTUMsUUFBQSxHQUFXbEMsWUFBQSxDQUFhM1MsS0FBQSxFQUFPO01BQ2pDNlMsU0FB\
              QSxFQUFXO01BQ1hoVyxJQUFBLEVBQU1wTSxHQUFBLFdBQUFBLEdBQUEsR0FBT21qQ\
              ixHQUFBLG9CQUFBQSxHQUFBLENBQU07TUFDbkJoSixNQUFBO01BQ0E3VyxPQUFBO0\
              1BQ0ErZSxZQUFBLEVBQWMwQixFQUFBLENBQUdwVyxNQUFBO01BQ2pCMlUsY0FBQSx\
              FQUFnQjtJQUNwQixDQUFDO0lBQ0QsTUFBTTFZLFdBQUEsR0FBYyxDQUFDd2EsUUFB\
              QSxDQUFTamIsS0FBQTtJQUM5QixJQUFJUyxXQUFBLEVBQWE7TUFDYixJQUFJNUosR\
              0FBQSxFQUFLO1FBQ0wsSUFBSUEsR0FBQSxDQUFJdUksSUFBQSxLQUFTO1FBQ2JqRi\
              xPQUFBLENBQVE2VyxNQUFBLEVBQVEseUJBQXlCLHlEQUF5RDtRQUFBLElBQzdGLFl\
              BQVluYSxHQUFBLElBQU9BLEdBQUEsQ0FBSTJOLE1BQUEsS0FBV29XLEVBQUEsQ0FB\
              R3BXLE1BQUE7UUFDMUNySyxPQUFBLENBQVE2VyxNQUFBLEVBQVEsY0FBY3NKLFdBQ\
              Vc7TUFDakQ7TUFDQSxJQUFJLENBQUNXLFFBQUEsQ0FBU2hsQixNQUFBLElBQVUsQ0\
              FBQ2dsQixRQUFBLENBQVN6ZixHQUFBLElBQU8sQ0FBQ3dlLEdBQUEsRUFBSztRQUM\
              zQ2UsVUFBQSxHQUFhRSxRQUFBLENBQVN2VixHQUFBO1FBQ3RCLElBQUl1VixRQUFB\
              LENBQVNoWCxPQUFBLEVBQVM7VUFDbEIsSUFBSWpDLElBQUEsQ0FBSWlDLE9BQUE7V\
              UFDSmpDLElBQUEsQ0FBSWlDLE9BQUEsSUFBVyxPQUFPZ1gsUUFBQSxDQUFTaFgsT0\
              FBQTs7VUFFL0JqQyxJQUFBLENBQUlpQyxPQUFBLEdBQVVnWCxRQUFBLENBQVNoWCx\
              PQUFBO1FBQy9CO1FBQ0E7TUFDSjtNQUNBLElBQUlnWCxRQUFBLENBQVMxQixtQkFB\
              QSxJQUF1Qk8sZUFBQSxDQUFnQmpqQixHQUFHLEdBQUc7UUFDdERzRCxPQUFBLENBQ\
              VF0RCxHQUFBLFdBQUFBLEdBQUEsR0FBT3VQLEtBQUEsQ0FBTUEsS0FBQSxDQUFNL0\
              8sTUFBQSxHQUFTLENBQUMsR0FBRywwQkFBMEIsMkNBQTJDO01BQ2pIO0lBQ0osYUF\
              DU2UsRUFBQSxHQUFBNmlCLFFBQUEsQ0FBU2piLEtBQUEsS0FBVCxnQkFBQTVILEVB\
              QUEsQ0FBZ0JvTSxNQUFBLE1BQVdvVyxFQUFBLENBQUdwVyxNQUFBLEVBQVE7TUFDM\
              0NySyxPQUFBLENBQVE2VyxNQUFBLEVBQVEsY0FBY3NKLFdBQVc7SUFDN0M7SUFFQS\
              xNQUFNWSxRQUFBLEdBQVdELFFBQUEsQ0FBU3ZWLEdBQUE7SUFDMUIsTUFBTXlWLE9\
              BQUEsR0FBVXRrQixHQUFBLEdBQ1Y0akIsWUFBQSxDQUFZamMsR0FBQSxFQUFLM0gs\
              R0FBQSxFQUFLb2tCLFFBQUEsRUFBVTlnQixPQUFPLElBQ3ZDd2dCLGlCQUFBLENBQ\
              WlCbmMsR0FBQSxFQUFLMGMsUUFBQSxFQUFVOVUsS0FBQSxFQUFPLE1BQU02VSxRQU\
              FBLEVBQVU5Z0IsT0FBTztJQUNwRSxJQUFJcUUsR0FBQSxDQUFJeUQsTUFBQSxDQUF\
              PK0csTUFBQTtJQUNYaVIsZUFBQSxDQUFnQlcsRUFBQSxDQUFHcFcsTUFBQSxFQUFR\
              M04sR0FBQSxFQUFLc0QsT0FBTztJQUMzQyxJQUFJZ2dCLFdBQUEsQ0FBWTNiLEdBQ\
              UEsRUFBS3dELElBQUEsQ0FBSTVLLEtBQUEsRUFBTytqQixPQUFPO0lBQ25DaGhCLE\
              9BQUEsQ0FBUStnQixRQUFBLEVBQVUsaUJBQWlCLHlCQUF5QjtJQUVoRSxNQUFNRSx\
              VQUFBLEdBQWFyQyxZQUFBLENBQWFpQixHQUFBLFdBQUFBLEdBQUEsR0FBTyxFQUFD\
              LEVBQUc7TUFDdkNmLFNBQUEsRUFBVztNQUNYaFcsSUFBQSxFQUFNdkwsS0FBQTtNQ\
              UNOc1osTUFBQSxFQUFRbUssT0FBQSxDQUFRMWIsS0FBQSxDQUFNLENBQUM7TUFDdk\
              J0RixPQUFBO01BQ0ErZSxZQUFBLEVBQWMwQixFQUFBLENBQUdwVyxNQUFBO01BQ2p\
              CMlUsY0FBQSxFQUFnQixDQUFDdGlCLEdBQUEsSUFBT0EsR0FBQSxDQUFJdUksSUFB\
              QSxLQUFTO0lBQ3pDLENBQUM7SUFDRDRSLE1BQUEsR0FBU29LLFVBQUEsQ0FBVzFWL\
              EdBQUE7SUFDcEIsSUFBSTBWLFVBQUEsQ0FBV3BiLEtBQUEsRUFBTztNQUNsQixJQU\
              FJUyxXQUFBLEVBQWE7UUFDYixLQUFJL0ksS0FBQSxvQkFBQUEsS0FBQSxDQUFPMEg\
              sSUFBQSxNQUFTLGVBQWUsQ0FBQ2djLFVBQUEsQ0FBVzNQLFVBQUE7UUFDM0N0UixP\
              QUFBLENBQVE2VyxNQUFBLEVBQVEseUJBQXlCLHFEQUFxRDtRQUNsRyxJQUFJeFMsR\
              0FBQSxDQUFJK0IsT0FBQSxDQUFRb1gsTUFBQSxJQUNac0QsUUFBQSxDQUFTN1UsS0\
              FBQSxHQUFRZ1YsVUFBQSxDQUFXcGIsS0FBQSxDQUFNZ1IsTUFBQSxHQUFTO1FBQzN\
              DN1csT0FBQSxDQUFRZ2hCLE9BQUEsQ0FBUTFiLEtBQUEsRUFBTyx1QkFBdUIsNkZB\
              QTZGO01BQ25KO01BRUEsTUFBTTRiLFNBQUEsR0FBWTNqQixLQUFBLEdBQ1oraUIsW\
              UFBQSxDQUFZamMsR0FBQSxFQUFLOUcsS0FBQSxFQUFPMGpCLFVBQUEsRUFBWWpoQi\
              xPQUFPLElBQzNDd2dCLGlCQUFBLENBQWlCbmMsR0FBQSxFQUFLd1MsTUFBQSxFQUF\
              RZ0osR0FBQSxFQUFLLE1BQU1vQixVQUFBLEVBQVlqaEIsT0FBTztNQUNsRSxJQUFJ\
              cUUsR0FBQSxDQUFJeUQsTUFBQSxDQUFPK0csTUFBQTtNQUNYaVIsZUFBQSxDQUFnQ\
              lcsRUFBQSxDQUFHcFcsTUFBQSxFQUFROU0sS0FBQSxFQUFPeUMsT0FBTztNQUM3Qz\
              ZXLE1BQUEsR0FBU3FLLFNBQUEsQ0FBVTViLEtBQUEsQ0FBTSxDQUFDO01BQzFCLE1\
              BQU02TixJQUFBLEdBQU8sSUFBSXhaLElBQUEsQ0FBS3FuQixPQUFBLEVBQVNFLFNB\
              QVM7TUFDeEMsSUFBSTdjLEdBQUEsQ0FBSStCLE9BQUEsQ0FBUWtYLGdCQUFBO01BQ\
              1puSyxJQUFBLENBQUtnTyxRQUFBLEdBQVdOLFFBQUE7TUFDcEJoWixJQUFBLENBQU\
              k1SyxLQUFBLENBQU1nRixJQUFBLENBQUtrUixJQUFJO0lBQ3ZCLE9BQ0s7TUFFRCx\
              JQUFJN00sV0FBQTtNQUNBdEcsT0FBQSxDQUFRZ2hCLE9BQUEsQ0FBUTFiLEtBQUEs\
              RUFBTyxnQkFBZ0IscURBQXFEO01BQ2hHLElBQUkyYixVQUFBLENBQVduWCxPQUFBL\
              EVBQVM7UUFDcEIsSUFBSWtYLE9BQUEsQ0FBUWxYLE9BQUE7UUFDUmtYLE9BQUEsQ0\
              FBUWxYLE9BQUEsSUFBVyxPQUFPbVgsVUFBQSxDQUFXblgsT0FBQTs7UUFFckNrWCx\
              PQUFBLENBQVFsWCxPQUFBLEdBQVVtWCxVQUFBLENBQVduWCxPQUFBO01BQ3JDO01B\
              Q0EsTUFBTXFKLElBQUEsR0FBTyxJQUFJeFosSUFBQSxDQUFLcW5CLE9BQU87TUFDN\
              0IsSUFBSTNjLEdBQUEsQ0FBSStCLE9BQUEsQ0FBUWtYLGdCQUFBO01BQ1puSyxJQU\
              FBLENBQUtnTyxRQUFBLEdBQVdOLFFBQUE7TUFDcEJoWixJQUFBLENBQUk1SyxLQUF\
              BLENBQU1nRixJQUFBLENBQUtrUixJQUFJO0lBQ3ZCO0VBQ0o7RUFDQSxJQUFJeU4s\
              VUFBQSxJQUFjQSxVQUFBLEdBQWEvSixNQUFBO0VBQzNCN1csT0FBQSxDQUFRNGdCL\
              FVBQUEsRUFBWSxjQUFjLG1DQUFtQztFQUN6RS9ZLElBQUEsQ0FBSXZDLEtBQUEsR0\
              FBUSxDQUFDbWIsRUFBQSxDQUFHNUosTUFBQSxFQUFRQSxNQUFBLEVBQVErSixVQUF\
              BLFdBQUFBLFVBQUEsR0FBYy9KLE1BQU07RUFDcEQsT0FBT2hQLElBQUE7QUFDWDs7\
              O0FDMUdBLFNBQVN1WixnQkFBZ0IsRUFBRWYsV0FBQSxFQUFBQyxZQUFBLEVBQWFDL\
              GdCQUFBLEVBQUFDLGlCQUFBLENBQWlCLEdBQUduYyxHQUFBLEVBQUtnZCxFQUFBLE\
              VBQUlyaEIsT0FBQSxFQUFTcUIsR0FBQSxFQUFLO0VBSm5GLElBQUFyRCxFQUFBO0V\
              BS0ksTUFBTTBpQixTQUFBLElBQVkxaUIsRUFBQSxHQUFBcUQsR0FBQSxvQkFBQUEs\
              R0FBQSxDQUFLa0gsU0FBQSxLQUFMLE9BQUF2SyxFQUFBLEdBQWtCOUQsT0FBQTtFQ\
              UNwQyxNQUFNbWIsSUFBQSxHQUFNLElBQUlxTCxTQUFBLENBQVVyYyxHQUFBLENBQU\
              l5RCxNQUFNO0VBQ3BDLElBQUl6RCxHQUFBLENBQUlzYyxNQUFBO0VBQ0p0YyxHQUF\
              BLENBQUlzYyxNQUFBLEdBQVM7RUFDakIsSUFBSTlKLE1BQUEsR0FBU3dLLEVBQUEs\
              Q0FBR3hLLE1BQUE7RUFDaEIsSUFBSStKLFVBQUEsR0FBYTtFQUNqQixXQUFXLEVBQ\
              UUzVSxLQUFBLEVBQU8xTyxLQUFBLENBQU0sS0FBSzhqQixFQUFBLENBQUdwa0IsS0\
              FBQSxFQUFPO0lBQ3JDLE1BQU1pVCxLQUFBLEdBQVEwTyxZQUFBLENBQWEzUyxLQUF\
              BLEVBQU87TUFDOUI2UyxTQUFBLEVBQVc7TUFDWGhXLElBQUEsRUFBTXZMLEtBQUE7\
              TUFDTnNaLE1BQUE7TUFDQTdXLE9BQUE7TUFDQStlLFlBQUEsRUFBY3NDLEVBQUEsQ\
              0FBR2hYLE1BQUE7TUFDakIyVSxjQUFBLEVBQWdCO0lBQ3BCLENBQUM7SUFDRCxJQU\
              FJLENBQUM5TyxLQUFBLENBQU1ySyxLQUFBLEVBQU87TUFDZCxJQUFJcUssS0FBQSx\
              DQUFNcFUsTUFBQSxJQUFVb1UsS0FBQSxDQUFNN08sR0FBQSxJQUFPOUQsS0FBQSxF\
              QUFPO1FBQ3BDLElBQUlBLEtBQUEsSUFBU0EsS0FBQSxDQUFNMEgsSUFBQSxLQUFTO\
              1FBQ3hCakYsT0FBQSxDQUFRa1EsS0FBQSxDQUFNM0UsR0FBQSxFQUFLLGNBQWMsa0\
              RBQWtEOztRQUVuRnZMLE9BQUEsQ0FBUTZXLE1BQUEsRUFBUSxnQkFBZ0IsbUNBQW1\
              DO01BQzNFLE9BQ0s7UUFDRCtKLFVBQUEsR0FBYTFRLEtBQUEsQ0FBTTNFLEdBQUE7\
              UUFDbkIsSUFBSTJFLEtBQUEsQ0FBTXBHLE9BQUE7UUFDTnVMLElBQUEsQ0FBSXZML\
              E9BQUEsR0FBVW9HLEtBQUEsQ0FBTXBHLE9BQUE7UUFDeEI7TUFDSjtJQUNKO0lBQ0\
              EsTUFBTWxPLElBQUEsR0FBTzJCLEtBQUEsR0FDUCtpQixZQUFBLENBQVlqYyxHQUF\
              BLEVBQUs5RyxLQUFBLEVBQU8yUyxLQUFBLEVBQU9sUSxPQUFPLElBQ3RDd2dCLGlC\
              QUFBLENBQWlCbmMsR0FBQSxFQUFLNkwsS0FBQSxDQUFNM0UsR0FBQSxFQUFLVSxLQ\
              UFBLEVBQU8sTUFBTWlFLEtBQUEsRUFBT2xRLE9BQU87SUFDbEUsSUFBSXFFLEdBQU\
              EsQ0FBSXlELE1BQUEsQ0FBTytHLE1BQUE7SUFDWGlSLGVBQUEsQ0FBZ0J1QixFQUF\
              BLENBQUdoWCxNQUFBLEVBQVE5TSxLQUFBLEVBQU95QyxPQUFPO0lBQzdDNlcsTUFB\
              QSxHQUFTamIsSUFBQSxDQUFLMEosS0FBQSxDQUFNLENBQUM7SUFDckIrUCxJQUFBL\
              ENBQUlwWSxLQUFBLENBQU1nRixJQUFBLENBQUtyRyxJQUFJO0VBQ3ZCO0VBQ0F5Wi\
              xJQUFBLENBQUkvUCxLQUFBLEdBQVEsQ0FBQytiLEVBQUEsQ0FBR3hLLE1BQUEsRUF\
              BUUEsTUFBQSxFQUFRK0osVUFBQSxXQUFBQSxVQUFBLEdBQWMvSixNQUFNO0VBQ3BE\
              LE9BQU94QixJQUFBO0FBQ1g7OztBQzVDQSxTQUFTaU0sV0FBVy9WLEdBQUEsRUFBS\
              3NMLE1BQUEsRUFBUXdJLFFBQUEsRUFBVXJmLE9BQUEsRUFBUztFQUNoRCxJQUFJOE\
              osT0FBQSxHQUFVO0VBQ2QsSUFBSXlCLEdBQUEsRUFBSztJQUNMLElBQUkyVCxRQUF\
              BLEdBQVc7SUFDZixJQUFJVyxHQUFBLEdBQU07SUFDVixXQUFXTCxLQUFBLElBQVNq\
              VSxHQUFBLEVBQUs7TUFDckIsTUFBTSxFQUFFNUssTUFBQSxFQUFRc0UsSUFBQSxDQ\
              UFLLElBQUl1YSxLQUFBO01BQ3pCLFFBQVF2YSxJQUFBO1FBQ0osS0FBSztVQUNEaW\
              EsUUFBQSxHQUFXO1VBQ1g7UUFDSixLQUFLLFVBQVc7WUFDWixJQUFJRyxRQUFBLEl\
              BQVksQ0FBQ0gsUUFBQTtZQUNibGYsT0FBQSxDQUFRd2YsS0FBQSxFQUFPLGdCQUFn\
              Qix3RUFBd0U7WUFDM0csTUFBTUMsRUFBQSxHQUFLOWUsTUFBQSxDQUFPYSxTQUFBL\
              ENBQVUsQ0FBQyxLQUFLO1lBQ2xDLElBQUksQ0FBQ3NJLE9BQUE7WUFDREEsT0FBQS\
              xHQUFVMlYsRUFBQTs7WUFFVjNWLE9BQUEsSUFBVytWLEdBQUEsR0FBTUosRUFBQTt\
              ZQUNyQkksR0FBQSxHQUFNO1lBQ047VUFDSjtRQUNBLEtBQUs7VUFDRCxJQUFJL1Ys\
              T0FBQTtVQUNBK1YsR0FBQSxJQUFPbGYsTUFBQTtVQUNYdWUsUUFBQSxHQUFXO1VBQ\
              1g7UUFDSjtVQUNJbGYsT0FBQSxDQUFRd2YsS0FBQSxFQUFPLG9CQUFvQixjQUFjdm\
              EsSUFBSSxjQUFjO01BQzNFO01BQ0E0UixNQUFBLElBQVVsVyxNQUFBLENBQU96RCx\
              NQUFBO0lBQ3JCO0VBQ0o7RUFDQSxPQUFPLEVBQUU0TSxPQUFBLEVBQVMrTSxNQUFB\
              LENBQU87QUFDN0I7OztBQ3pCQSxJQUFNMEssUUFBQSxHQUFXO0FBQ2pCLElBQU1DL\
              E9BQUEsR0FBVUEsQ0FBQ2hDLEtBQUEsS0FBVUEsS0FBQSxLQUFVQSxLQUFBLENBQU\
              12YSxJQUFBLEtBQVMsZUFBZXVhLEtBQUEsQ0FBTXZhLElBQUEsS0FBUztBQUNsRix\
              TQUFTd2Msc0JBQXNCLEVBQUVwQixXQUFBLEVBQUFDLFlBQUEsRUFBYUMsZ0JBQUEs\
              RUFBQUMsaUJBQUEsQ0FBaUIsR0FBR25jLEdBQUEsRUFBSzBiLEVBQUEsRUFBSS9mL\
              E9BQUEsRUFBU3FCLEdBQUEsRUFBSztFQVh6RixJQUFBckQsRUFBQSxFQUFBQyxFQU\
              FBO0VBWUksTUFBTXlqQixNQUFBLEdBQVEzQixFQUFBLENBQUc5VCxLQUFBLENBQU1\
              0TCxNQUFBLEtBQVc7RUFDbEMsTUFBTWdoQixNQUFBLEdBQVNELE1BQUEsR0FBUSxh\
              QUFhO0VBQ3BDLE1BQU1oQixTQUFBLElBQWExaUIsRUFBQSxHQUFBcUQsR0FBQSxvQ\
              kFBQUEsR0FBQSxDQUFLa0gsU0FBQSxLQUFMLE9BQUF2SyxFQUFBLEdBQW1CMGpCLE\
              1BQUEsR0FBUTFuQixPQUFBLEdBQVVFLE9BQUE7RUFDeEQsTUFBTTBuQixJQUFBLEd\
              BQU8sSUFBSWxCLFNBQUEsQ0FBVXJjLEdBQUEsQ0FBSXlELE1BQU07RUFDckM4WixJ\
              QUFBLENBQUs3USxJQUFBLEdBQU87RUFDWixNQUFNNFAsTUFBQSxHQUFTdGMsR0FBQ\
              SxDQUFJc2MsTUFBQTtFQUNuQixJQUFJQSxNQUFBO0VBQ0F0YyxHQUFBLENBQUlzYy\
              xNQUFBLEdBQVM7RUFDakIsSUFBSTlKLE1BQUEsR0FBU2tKLEVBQUEsQ0FBR2xKLE1\
              BQUEsR0FBU2tKLEVBQUEsQ0FBRzlULEtBQUEsQ0FBTXRMLE1BQUEsQ0FBT3pELE1B\
              QUE7RUFDekMsU0FBU0YsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSStpQixFQUFBL\
              ENBQUc5aUIsS0FBQSxDQUFNQyxNQUFBLEVBQVEsRUFBRUYsQ0FBQSxFQUFHO0lBQ3\
              RDLE1BQU02akIsUUFBQSxHQUFXZCxFQUFBLENBQUc5aUIsS0FBQSxDQUFNRCxDQUF\
              DO0lBQzNCLE1BQU0sRUFBRWlQLEtBQUEsRUFBT3ZQLEdBQUEsRUFBS21qQixHQUFB\
              LEVBQUt0aUIsS0FBQSxDQUFNLElBQUlzakIsUUFBQTtJQUNuQyxNQUFNM1EsS0FBQ\
              SxHQUFRME8sWUFBQSxDQUFhM1MsS0FBQSxFQUFPO01BQzlCOEUsSUFBQSxFQUFNNF\
              EsTUFBQTtNQUNON0MsU0FBQSxFQUFXO01BQ1hoVyxJQUFBLEVBQU1wTSxHQUFBLFd\
              BQUFBLEdBQUEsR0FBT21qQixHQUFBLG9CQUFBQSxHQUFBLENBQU07TUFDbkJoSixN\
              QUFBO01BQ0E3VyxPQUFBO01BQ0ErZSxZQUFBLEVBQWNnQixFQUFBLENBQUcxVixNQ\
              UFBO01BQ2pCMlUsY0FBQSxFQUFnQjtJQUNwQixDQUFDO0lBQ0QsSUFBSSxDQUFDOU\
              8sS0FBQSxDQUFNckssS0FBQSxFQUFPO01BQ2QsSUFBSSxDQUFDcUssS0FBQSxDQUF\
              NcFUsTUFBQSxJQUFVLENBQUNvVSxLQUFBLENBQU03TyxHQUFBLElBQU8sQ0FBQ3dl\
              LEdBQUEsSUFBTyxDQUFDdGlCLEtBQUEsRUFBTztRQUMvQyxJQUFJUCxDQUFBLEtBQ\
              U0sS0FBS2tULEtBQUEsQ0FBTXFQLEtBQUE7UUFDakJ2ZixPQUFBLENBQVFrUSxLQU\
              FBLENBQU1xUCxLQUFBLEVBQU8sb0JBQW9CLG1CQUFtQm9DLE1BQU0sRUFBRTtRQUF\
              BLElBQy9EM2tCLENBQUEsR0FBSStpQixFQUFBLENBQUc5aUIsS0FBQSxDQUFNQyxN\
              QUFBLEdBQVM7UUFDM0I4QyxPQUFBLENBQVFrUSxLQUFBLENBQU1qRSxLQUFBLEVBQ\
              U8sb0JBQW9CLDRCQUE0QjBWLE1BQU0sRUFBRTtRQUNqRixJQUFJelIsS0FBQSxDQU\
              FNcEcsT0FBQSxFQUFTO1VBQ2YsSUFBSThYLElBQUEsQ0FBSzlYLE9BQUE7VUFDTDh\
              YLElBQUEsQ0FBSzlYLE9BQUEsSUFBVyxPQUFPb0csS0FBQSxDQUFNcEcsT0FBQTs7\
              VUFFN0I4WCxJQUFBLENBQUs5WCxPQUFBLEdBQVVvRyxLQUFBLENBQU1wRyxPQUFBO\
              1FBQzdCO1FBQ0ErTSxNQUFBLEdBQVMzRyxLQUFBLENBQU0zRSxHQUFBO1FBQ2Y7TU\
              FDSjtNQUNBLElBQUksQ0FBQ21XLE1BQUEsSUFBU3JkLEdBQUEsQ0FBSStCLE9BQUE\
              sQ0FBUW9YLE1BQUEsSUFBVW1DLGVBQUEsQ0FBZ0JqakIsR0FBRztNQUNuRHNELE9B\
              QUE7UUFBUXRELEdBQUE7UUFBQTtRQUNSO1FBQTBCO01BQWtFO0lBQ3BHO0lBQ0EsS\
              UFBSU0sQ0FBQSxLQUFNLEdBQUc7TUFDVCxJQUFJa1QsS0FBQSxDQUFNcVAsS0FBQT\
              tNQUNOdmYsT0FBQSxDQUFRa1EsS0FBQSxDQUFNcVAsS0FBQSxFQUFPLG9CQUFvQix\
              tQkFBbUJvQyxNQUFNLEVBQUU7SUFDNUUsT0FDSztNQUNELElBQUksQ0FBQ3pSLEtB\
              QUEsQ0FBTXFQLEtBQUE7TUFDUHZmLE9BQUEsQ0FBUWtRLEtBQUEsQ0FBTWpFLEtBQ\
              UEsRUFBTyxnQkFBZ0IscUJBQXFCMFYsTUFBTSxRQUFRO01BQzVFLElBQUl6UixLQU\
              FBLENBQU1wRyxPQUFBLEVBQVM7UUFDZixJQUFJK1gsZUFBQSxHQUFrQjtRQUN0QkM\
              sSUFBQSxFQUFNLFdBQVdsQyxFQUFBLElBQU0zVCxLQUFBLEVBQU87VUFDMUIsUUFB\
              UTJULEVBQUEsQ0FBRzNhLElBQUE7WUFDUCxLQUFLO1lBQ0wsS0FBSztjQUNEO1lBQ\
              0osS0FBSztjQUNENGMsZUFBQSxHQUFrQmpDLEVBQUEsQ0FBR2pmLE1BQUEsQ0FBT2\
              EsU0FBQSxDQUFVLENBQUM7Y0FDdkMsTUFBTXNnQixJQUFBO1lBQ1Y7Y0FDSSxNQUF\
              NQSxJQUFBO1VBQ2Q7UUFDSjtRQUNBLElBQUlELGVBQUEsRUFBaUI7VUFDakIsSUFB\
              SXJXLElBQUEsR0FBT29XLElBQUEsQ0FBSzNrQixLQUFBLENBQU0ya0IsSUFBQSxDQ\
              UFLM2tCLEtBQUEsQ0FBTUMsTUFBQSxHQUFTLENBQUM7VUFDM0MsSUFBSXpDLE1BQU\
              EsQ0FBTytRLElBQUk7VUFDWEEsSUFBQSxJQUFPdk4sRUFBQSxHQUFBdU4sSUFBQSx\
              DQUFLak8sS0FBQSxLQUFMLE9BQUFVLEVBQUEsR0FBY3VOLElBQUEsQ0FBSzlPLEdB\
              QUE7VUFDOUIsSUFBSThPLElBQUEsQ0FBSzFCLE9BQUE7VUFDTDBCLElBQUEsQ0FBS\
              zFCLE9BQUEsSUFBVyxPQUFPK1gsZUFBQTs7VUFFdkJyVyxJQUFBLENBQUsxQixPQU\
              FBLEdBQVUrWCxlQUFBO1VBQ25CM1IsS0FBQSxDQUFNcEcsT0FBQSxHQUFVb0csS0F\
              BQSxDQUFNcEcsT0FBQSxDQUFRdEksU0FBQSxDQUFVcWdCLGVBQUEsQ0FBZ0Iza0Is\
              TUFBQSxHQUFTLENBQUM7UUFDdEU7TUFDSjtJQUNKO0lBQ0EsSUFBSSxDQUFDd2tCL\
              E1BQUEsSUFBUyxDQUFDN0IsR0FBQSxJQUFPLENBQUMzUCxLQUFBLENBQU1ySyxLQU\
              FBLEVBQU87TUFHaEMsTUFBTXFiLFNBQUEsR0FBWTNqQixLQUFBLEdBQ1oraUIsWUF\
              BQSxDQUFZamMsR0FBQSxFQUFLOUcsS0FBQSxFQUFPMlMsS0FBQSxFQUFPbFEsT0FB\
              TyxJQUN0Q3dnQixpQkFBQSxDQUFpQm5jLEdBQUEsRUFBSzZMLEtBQUEsQ0FBTTNFL\
              EdBQUEsRUFBS3NVLEdBQUEsRUFBSyxNQUFNM1AsS0FBQSxFQUFPbFEsT0FBTztNQU\
              NoRTRoQixJQUFBLENBQUsza0IsS0FBQSxDQUFNZ0YsSUFBQSxDQUFLaWYsU0FBUzt\
              NQUN6QnJLLE1BQUEsR0FBU3FLLFNBQUEsQ0FBVTViLEtBQUEsQ0FBTSxDQUFDO01B\
              QzFCLElBQUlrYyxPQUFBLENBQVFqa0IsS0FBSztNQUNieUMsT0FBQSxDQUFRa2hCL\
              FNBQUEsQ0FBVTViLEtBQUEsRUFBTyxpQkFBaUJpYyxRQUFRO0lBQzFELE9BQ0s7TU\
              FHRCxNQUFNUixRQUFBLEdBQVc3USxLQUFBLENBQU0zRSxHQUFBO01BQ3ZCLE1BQU1\
              5VixPQUFBLEdBQVV0a0IsR0FBQSxHQUNWNGpCLFlBQUEsQ0FBWWpjLEdBQUEsRUFB\
              SzNILEdBQUEsRUFBS3dULEtBQUEsRUFBT2xRLE9BQU8sSUFDcEN3Z0IsaUJBQUEsQ\
              0FBaUJuYyxHQUFBLEVBQUswYyxRQUFBLEVBQVU5VSxLQUFBLEVBQU8sTUFBTWlFLE\
              tBQUEsRUFBT2xRLE9BQU87TUFDakUsSUFBSXdoQixPQUFBLENBQVE5a0IsR0FBRzt\
              NQUNYc0QsT0FBQSxDQUFRZ2hCLE9BQUEsQ0FBUTFiLEtBQUEsRUFBTyxpQkFBaUJp\
              YyxRQUFRO01BRXBELE1BQU1OLFVBQUEsR0FBYXJDLFlBQUEsQ0FBYWlCLEdBQUEsV\
              0FBQUEsR0FBQSxHQUFPLEVBQUMsRUFBRztRQUN2QzlPLElBQUEsRUFBTTRRLE1BQU\
              E7UUFDTjdDLFNBQUEsRUFBVztRQUNYaFcsSUFBQSxFQUFNdkwsS0FBQTtRQUNOc1o\
              sTUFBQSxFQUFRbUssT0FBQSxDQUFRMWIsS0FBQSxDQUFNLENBQUM7UUFDdkJ0RixP\
              QUFBO1FBQ0ErZSxZQUFBLEVBQWNnQixFQUFBLENBQUcxVixNQUFBO1FBQ2pCMlUsY\
              0FBQSxFQUFnQjtNQUNwQixDQUFDO01BQ0QsSUFBSWlDLFVBQUEsQ0FBV3BiLEtBQU\
              EsRUFBTztRQUNsQixJQUFJLENBQUM2YixNQUFBLElBQVMsQ0FBQ3hSLEtBQUEsQ0F\
              BTXJLLEtBQUEsSUFBU3hCLEdBQUEsQ0FBSStCLE9BQUEsQ0FBUW9YLE1BQUEsRUFB\
              UTtVQUM5QyxJQUFJcUMsR0FBQTtVQUNBLFdBQVdELEVBQUEsSUFBTUMsR0FBQSxFQ\
              UFLO1lBQ2xCLElBQUlELEVBQUEsS0FBT3FCLFVBQUEsQ0FBV3BiLEtBQUE7WUFDbE\
              I7WUFDSixJQUFJK1osRUFBQSxDQUFHM2EsSUFBQSxLQUFTLFdBQVc7Y0FDdkJqRix\
              PQUFBLENBQVE0ZixFQUFBLEVBQUksMEJBQTBCLGtFQUFrRTtjQUN4RztZQUNKO1VB\
              Q0o7VUFDSixJQUFJMVAsS0FBQSxDQUFNakUsS0FBQSxHQUFRZ1YsVUFBQSxDQUFXc\
              GIsS0FBQSxDQUFNZ1IsTUFBQSxHQUFTO1VBQ3hDN1csT0FBQSxDQUFRaWhCLFVBQU\
              EsQ0FBV3BiLEtBQUEsRUFBTyx1QkFBdUIsNkZBQTZGO1FBQ3RKO01BQ0osV0FDU3R\
              JLEtBQUEsRUFBTztRQUNaLElBQUksWUFBWUEsS0FBQSxJQUFTQSxLQUFBLENBQU1v\
              RCxNQUFBLElBQVVwRCxLQUFBLENBQU1vRCxNQUFBLENBQU8sQ0FBQyxNQUFNO1FBQ\
              3pEWCxPQUFBLENBQVF6QyxLQUFBLEVBQU8sZ0JBQWdCLDRCQUE0Qm9rQixNQUFNLE\
              VBQUU7O1FBRW5FM2hCLE9BQUEsQ0FBUWloQixVQUFBLENBQVdoVixLQUFBLEVBQU8\
              sZ0JBQWdCLDBCQUEwQjBWLE1BQU0sUUFBUTtNQUMxRjtNQUVBLE1BQU1ULFNBQUEs\
              R0FBWTNqQixLQUFBLEdBQ1oraUIsWUFBQSxDQUFZamMsR0FBQSxFQUFLOUcsS0FBQ\
              SxFQUFPMGpCLFVBQUEsRUFBWWpoQixPQUFPLElBQzNDaWhCLFVBQUEsQ0FBV3BiLE\
              tBQUEsR0FDUDJhLGlCQUFBLENBQWlCbmMsR0FBQSxFQUFLNGMsVUFBQSxDQUFXMVY\
              sR0FBQSxFQUFLc1UsR0FBQSxFQUFLLE1BQU1vQixVQUFBLEVBQVlqaEIsT0FBTyxJ\
              QUNwRTtNQUNWLElBQUlraEIsU0FBQSxFQUFXO1FBQ1gsSUFBSU0sT0FBQSxDQUFRa\
              mtCLEtBQUs7UUFDYnlDLE9BQUEsQ0FBUWtoQixTQUFBLENBQVU1YixLQUFBLEVBQU\
              8saUJBQWlCaWMsUUFBUTtNQUMxRCxXQUNTTixVQUFBLENBQVduWCxPQUFBLEVBQVM\
              7UUFDekIsSUFBSWtYLE9BQUEsQ0FBUWxYLE9BQUE7UUFDUmtYLE9BQUEsQ0FBUWxY\
              LE9BQUEsSUFBVyxPQUFPbVgsVUFBQSxDQUFXblgsT0FBQTs7UUFFckNrWCxPQUFBL\
              ENBQVFsWCxPQUFBLEdBQVVtWCxVQUFBLENBQVduWCxPQUFBO01BQ3JDO01BQ0EsTU\
              FBTXFKLElBQUEsR0FBTyxJQUFJeFosSUFBQSxDQUFLcW5CLE9BQUEsRUFBU0UsU0F\
              BUztNQUN4QyxJQUFJN2MsR0FBQSxDQUFJK0IsT0FBQSxDQUFRa1gsZ0JBQUE7TUFD\
              Wm5LLElBQUEsQ0FBS2dPLFFBQUEsR0FBV04sUUFBQTtNQUNwQixJQUFJYSxNQUFBL\
              EVBQU87UUFDUCxNQUFNN1osSUFBQSxHQUFNK1osSUFBQTtRQUNaLElBQUk1QixXQU\
              FBLENBQVkzYixHQUFBLEVBQUt3RCxJQUFBLENBQUk1SyxLQUFBLEVBQU8rakIsT0F\
              BTztRQUNuQ2hoQixPQUFBLENBQVErZ0IsUUFBQSxFQUFVLGlCQUFpQix5QkFBeUI7\
              UUFDaEVsWixJQUFBLENBQUk1SyxLQUFBLENBQU1nRixJQUFBLENBQUtrUixJQUFJO\
              01BQ3ZCLE9BQ0s7UUFDRCxNQUFNdEwsSUFBQSxHQUFNLElBQUk3TixPQUFBLENBQV\
              FxSyxHQUFBLENBQUl5RCxNQUFNO1FBQ2xDRCxJQUFBLENBQUlrSixJQUFBLEdBQU8\
              7UUFDWGxKLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTWdGLElBQUEsQ0FBS2tSLElBQUk7\
              UUFDbkJ5TyxJQUFBLENBQUsza0IsS0FBQSxDQUFNZ0YsSUFBQSxDQUFLNEYsSUFBR\
              ztNQUN2QjtNQUNBZ1AsTUFBQSxHQUFTcUssU0FBQSxHQUFZQSxTQUFBLENBQVU1Yi\
              xLQUFBLENBQU0sQ0FBQyxJQUFJMmIsVUFBQSxDQUFXMVYsR0FBQTtJQUN6RDtFQUN\
              KO0VBQ0EsTUFBTXdXLFdBQUEsR0FBY0wsTUFBQSxHQUFRLE1BQU07RUFDbEMsTUFB\
              TSxDQUFDTSxFQUFBLEVBQUksR0FBR0MsRUFBRSxJQUFJbEMsRUFBQSxDQUFHeFUsR\
              0FBQTtFQUN2QixJQUFJMlcsS0FBQSxHQUFRckwsTUFBQTtFQUNaLElBQUltTCxFQU\
              FBLElBQU1BLEVBQUEsQ0FBR3JoQixNQUFBLEtBQVdvaEIsV0FBQTtFQUNwQkcsS0F\
              BQSxHQUFRRixFQUFBLENBQUduTCxNQUFBLEdBQVNtTCxFQUFBLENBQUdyaEIsTUFB\
              QSxDQUFPekQsTUFBQTtFQUM3QjtJQUNELE1BQU1rRCxJQUFBLEdBQU91aEIsTUFBQ\
              SxDQUFPLENBQUMsRUFBRVEsV0FBQSxDQUFZLElBQUlSLE1BQUEsQ0FBT25nQixTQU\
              FBLENBQVUsQ0FBQztJQUN6RCxNQUFNYyxHQUFBLEdBQU1xZSxNQUFBLEdBQ04sR0F\
              BR3ZnQixJQUFJLG9CQUFvQjJoQixXQUFXLEtBQ3RDLEdBQUczaEIsSUFBSSxxRUFB\
              cUUyaEIsV0FBVztJQUM3Ri9oQixPQUFBLENBQVE2VyxNQUFBLEVBQVE4SixNQUFBL\
              EdBQVMsaUJBQWlCLGNBQWNyZSxHQUFHO0lBQzNELElBQUkwZixFQUFBLElBQU1BLE\
              VBQUEsQ0FBR3JoQixNQUFBLENBQU96RCxNQUFBLEtBQVc7SUFDM0Ira0IsRUFBQSx\
              DQUFHckgsT0FBQSxDQUFRb0gsRUFBRTtFQUNyQjtFQUNBLElBQUlDLEVBQUEsQ0FB\
              Ry9rQixNQUFBLEdBQVMsR0FBRztJQUNmLE1BQU1xTyxHQUFBLEdBQU0rVixVQUFBL\
              ENBQVdXLEVBQUEsRUFBSUMsS0FBQSxFQUFPN2QsR0FBQSxDQUFJK0IsT0FBQSxDQU\
              FRb1gsTUFBQSxFQUFReGQsT0FBTztJQUM3RCxJQUFJdUwsR0FBQSxDQUFJekIsT0F\
              BQSxFQUFTO01BQ2IsSUFBSThYLElBQUEsQ0FBSzlYLE9BQUE7TUFDTDhYLElBQUEs\
              Q0FBSzlYLE9BQUEsSUFBVyxPQUFPeUIsR0FBQSxDQUFJekIsT0FBQTs7TUFFM0I4W\
              CxJQUFBLENBQUs5WCxPQUFBLEdBQVV5QixHQUFBLENBQUl6QixPQUFBO0lBQzNCO0\
              lBQ0E4WCxJQUFBLENBQUt0YyxLQUFBLEdBQVEsQ0FBQ3lhLEVBQUEsQ0FBR2xKLE1\
              BQUEsRUFBUXFMLEtBQUEsRUFBTzNXLEdBQUEsQ0FBSXNMLE1BQU07RUFDOUMsT0FD\
              SztJQUNEK0ssSUFBQSxDQUFLdGMsS0FBQSxHQUFRLENBQUN5YSxFQUFBLENBQUdsS\
              ixNQUFBLEVBQVFxTCxLQUFBLEVBQU9BLEtBQUs7RUFDekM7RUFDQSxPQUFPTixJQU\
              FBO0FBQ1g7OztBQzlMQSxTQUFTUSxrQkFBa0JDLEdBQUEsRUFBSWhlLEdBQUEsRUF\
              BS21iLEtBQUEsRUFBT3hmLE9BQUEsRUFBU1UsT0FBQSxFQUFTVyxHQUFBLEVBQUs7\
              RUFDOUQsTUFBTXVnQixJQUFBLEdBQU9wQyxLQUFBLENBQU12YSxJQUFBLEtBQVMsY\
              0FDdEJtYixlQUFBLENBQWdCaUMsR0FBQSxFQUFJaGUsR0FBQSxFQUFLbWIsS0FBQS\
              xFQUFPeGYsT0FBQSxFQUFTcUIsR0FBRyxJQUM1Q21lLEtBQUEsQ0FBTXZhLElBQUE\
              sS0FBUyxjQUNYbWMsZUFBQSxDQUFnQmlCLEdBQUEsRUFBSWhlLEdBQUEsRUFBS21i\
              LEtBQUEsRUFBT3hmLE9BQUEsRUFBU3FCLEdBQUcsSUFDNUNvZ0IscUJBQUEsQ0FBc\
              0JZLEdBQUEsRUFBSWhlLEdBQUEsRUFBS21iLEtBQUEsRUFBT3hmLE9BQUEsRUFBU3\
              FCLEdBQUc7RUFDNUQsTUFBTWloQixJQUFBLEdBQU9WLElBQUEsQ0FBSzVpQixXQUF\
              BO0VBR2xCLElBQUkwQixPQUFBLEtBQVksT0FBT0EsT0FBQSxLQUFZNGhCLElBQUEs\
              Q0FBSzVoQixPQUFBLEVBQVM7SUFDN0NraEIsSUFBQSxDQUFLdmdCLEdBQUEsR0FBT\
              WloQixJQUFBLENBQUs1aEIsT0FBQTtJQUNoQixPQUFPa2hCLElBQUE7RUFDWDtFQU\
              NBLElBQUlsaEIsT0FBQTtFQUNBa2hCLElBQUEsQ0FBS3ZnQixHQUFBLEdBQU1YLE9\
              BQUE7RUFDZixPQUFPa2hCLElBQUE7QUFDWDtBQUNBLFNBQVNXLGtCQUFrQkYsR0FB\
              QSxFQUFJaGUsR0FBQSxFQUFLbWIsS0FBQSxFQUFPZ0QsUUFBQSxFQUFVeGlCLE9BQ\
              UEsRUFBUztFQXpCOUQsSUFBQWhDLEVBQUEsRUFBQUMsRUFBQTtFQTBCSSxNQUFNeU\
              MsT0FBQSxHQUFVLENBQUM4aEIsUUFBQSxHQUNYLE9BQ0FuZSxHQUFBLENBQUlpTCx\
              VQUFBLENBQVc1TyxPQUFBLENBQVE4aEIsUUFBQSxDQUFTN2hCLE1BQUEsRUFBUSxD\
              QUFBMkIsR0FBQSxLQUFPdEMsT0FBQSxDQUFRd2lCLFFBQUEsRUFBVSxzQkFBc0JsZ\
              0IsR0FBRyxDQUFDO0VBQ2pHLE1BQU1tZ0IsT0FBQSxHQUFVakQsS0FBQSxDQUFNdm\
              EsSUFBQSxLQUFTLGNBQ3pCLFFBQ0F1YSxLQUFBLENBQU12YSxJQUFBLEtBQVMsY0F\
              DWCxRQUNBdWEsS0FBQSxDQUFNdlQsS0FBQSxDQUFNdEwsTUFBQSxLQUFXLE1BQ25C\
              LFFBQ0E7RUFHZCxJQUFJLENBQUM2aEIsUUFBQSxJQUNELENBQUM5aEIsT0FBQSxJQ\
              UNEQSxPQUFBLEtBQVksT0FDWEEsT0FBQSxLQUFZMUcsT0FBQSxDQUFRMEcsT0FBQS\
              xJQUFXK2hCLE9BQUEsS0FBWSxTQUMzQy9oQixPQUFBLEtBQVl4RyxPQUFBLENBQVF\
              3RyxPQUFBLElBQVcraEIsT0FBQSxLQUFZLFNBQzVDLENBQUNBLE9BQUEsRUFBUztJ\
              QUNWLE9BQU9MLGlCQUFBLENBQWtCQyxHQUFBLEVBQUloZSxHQUFBLEVBQUttYixLQ\
              UFBLEVBQU94ZixPQUFBLEVBQVNVLE9BQU87RUFDN0Q7RUFDQSxJQUFJVyxHQUFBLE\
              dBQU1nRCxHQUFBLENBQUl5RCxNQUFBLENBQU81SSxJQUFBLENBQUtzSSxJQUFBLEN\
              BQUssQ0FBQUYsQ0FBQSxLQUFLQSxDQUFBLENBQUVqRyxHQUFBLEtBQVFYLE9BQUEs\
              SUFBVzRHLENBQUEsQ0FBRStMLFVBQUEsS0FBZW9QLE9BQU87RUFDakYsSUFBSSxDQ\
              UFDcGhCLEdBQUEsRUFBSztJQUNOLE1BQU1xaEIsRUFBQSxHQUFLcmUsR0FBQSxDQU\
              FJeUQsTUFBQSxDQUFPOFUsU0FBQSxDQUFVbGMsT0FBTztJQUN2QyxJQUFJZ2lCLEV\
              BQUEsSUFBTUEsRUFBQSxDQUFHclAsVUFBQSxLQUFlb1AsT0FBQSxFQUFTO01BQ2pD\
              cGUsR0FBQSxDQUFJeUQsTUFBQSxDQUFPNUksSUFBQSxDQUFLK0MsSUFBQSxDQUFLe\
              kYsTUFBQSxDQUFPcUIsTUFBQSxDQUFPLENBQUMsR0FBRzZrQixFQUFBLEVBQUksRU\
              FBRWxhLE9BQUEsRUFBUyxNQUFNLENBQUMsQ0FBQztNQUM5RG5ILEdBQUEsR0FBTXF\
              oQixFQUFBO0lBQ1YsT0FDSztNQUNELElBQUlBLEVBQUEsb0JBQUFBLEVBQUEsQ0FB\
              SXJQLFVBQUEsRUFBWTtRQUNoQnJULE9BQUEsQ0FBUXdpQixRQUFBLEVBQVUsdUJBQ\
              XVCLEdBQUdFLEVBQUEsQ0FBR3JoQixHQUFHLGFBQWFvaEIsT0FBTyw0QkFBNEJDLE\
              VBQUEsQ0FBR3JQLFVBQVUsSUFBSSxJQUFJO01BQzNILE9BQ0s7UUFDRHJULE9BQUE\
              sQ0FBUXdpQixRQUFBLEVBQVUsc0JBQXNCLG1CQUFtQjloQixPQUFPLElBQUksSUFB\
              STtNQUM5RTtNQUNBLE9BQU8waEIsaUJBQUEsQ0FBa0JDLEdBQUEsRUFBSWhlLEdBQ\
              UEsRUFBS21iLEtBQUEsRUFBT3hmLE9BQUEsRUFBU1UsT0FBTztJQUM3RDtFQUNKO0\
              VBQ0EsTUFBTWtoQixJQUFBLEdBQU9RLGlCQUFBLENBQWtCQyxHQUFBLEVBQUloZSx\
              HQUFBLEVBQUttYixLQUFBLEVBQU94ZixPQUFBLEVBQVNVLE9BQUEsRUFBU1csR0FB\
              RztFQUNwRSxNQUFNM0IsR0FBQSxJQUFNekIsRUFBQSxJQUFBRCxFQUFBLEdBQUFxR\
              CxHQUFBLENBQUl1RSxPQUFBLEtBQUosZ0JBQUE1SCxFQUFBLENBQUFLLElBQUEsQ0\
              FBQWdELEdBQUEsRUFBY3VnQixJQUFBLEVBQU0sQ0FBQXRmLEdBQUEsS0FBT3RDLE9\
              BQUEsQ0FBUXdpQixRQUFBLEVBQVUsc0JBQXNCbGdCLEdBQUcsR0FBRytCLEdBQUEs\
              Q0FBSStCLE9BQUEsTUFBN0UsT0FBQW5JLEVBQUEsR0FBeUYyakIsSUFBQTtFQUNyR\
              yxNQUFNaG1CLElBQUEsR0FBT3BCLE1BQUEsQ0FBT2tGLEdBQUcsSUFDakJBLEdBQU\
              EsR0FDQSxJQUFJN0YsTUFBQSxDQUFPNkYsR0FBRztFQUNwQjlELElBQUEsQ0FBSzB\
              KLEtBQUEsR0FBUXNjLElBQUEsQ0FBS3RjLEtBQUE7RUFDbEIxSixJQUFBLENBQUt5\
              RixHQUFBLEdBQU1YLE9BQUE7RUFDWCxJQUFJVyxHQUFBLG9CQUFBQSxHQUFBLENBQ\
              UtvRyxNQUFBO0VBQ0w3TCxJQUFBLENBQUs2TCxNQUFBLEdBQVNwRyxHQUFBLENBQU\
              lvRyxNQUFBO0VBQ3RCLE9BQU83TCxJQUFBO0FBQ1g7OztBQ3ZFQSxTQUFTK21CLG1\
              CQUFtQnRlLEdBQUEsRUFBS3VlLE1BQUEsRUFBUTVpQixPQUFBLEVBQVM7RUFDOUMs\
              TUFBTWlNLEtBQUEsR0FBUTJXLE1BQUEsQ0FBTy9MLE1BQUE7RUFDckIsTUFBTXRJL\
              E1BQUEsR0FBU3NVLHNCQUFBLENBQXVCRCxNQUFBLEVBQVF2ZSxHQUFBLENBQUkrQi\
              xPQUFBLENBQVFvWCxNQUFBLEVBQVF4ZCxPQUFPO0VBQ3pFLElBQUksQ0FBQ3VPLE1\
              BQUE7RUFDRCxPQUFPLEVBQUVoUixLQUFBLEVBQU8sSUFBSTBILElBQUEsRUFBTSxN\
              QUFNNkUsT0FBQSxFQUFTLElBQUl4RSxLQUFBLEVBQU8sQ0FBQzJHLEtBQUEsRUFBT\
              0EsS0FBQSxFQUFPQSxLQUFLLEVBQUU7RUFDOUUsTUFBTWhILElBQUEsR0FBT3NKLE\
              1BQUEsQ0FBT3pELElBQUEsS0FBUyxNQUFNalIsTUFBQSxDQUFPaU4sWUFBQSxHQUF\
              lak4sTUFBQSxDQUFPa04sYUFBQTtFQUNoRSxNQUFNcEYsS0FBQSxHQUFRaWhCLE1B\
              QUEsQ0FBT2ppQixNQUFBLEdBQVNtaUIsVUFBQSxDQUFXRixNQUFBLENBQU9qaUIsT\
              UFBTSxJQUFJLEVBQUM7RUFFM0QsSUFBSW9pQixVQUFBLEdBQWFwaEIsS0FBQSxDQU\
              FNekUsTUFBQTtFQUN2QixTQUFTRixDQUFBLEdBQUkyRSxLQUFBLENBQU16RSxNQUF\
              BLEdBQVMsR0FBR0YsQ0FBQSxJQUFLLEdBQUcsRUFBRUEsQ0FBQSxFQUFHO0lBQ3hD\
              LE1BQU1nbUIsT0FBQSxHQUFVcmhCLEtBQUEsQ0FBTTNFLENBQUMsRUFBRSxDQUFDO\
              0lBQzFCLElBQUlnbUIsT0FBQSxLQUFZLE1BQU1BLE9BQUEsS0FBWTtJQUM5QkQsVU\
              FBQSxHQUFhL2xCLENBQUE7O0lBRWI7RUFDUjtFQUVBLElBQUkrbEIsVUFBQSxLQUF\
              lLEdBQUc7SUFDbEIsTUFBTXRRLE1BQUEsR0FBUWxFLE1BQUEsQ0FBT1IsS0FBQSxL\
              QUFVLE9BQU9wTSxLQUFBLENBQU16RSxNQUFBLEdBQVMsSUFDL0MsS0FBSzZTLE1BQ\
              UEsQ0FBT3BKLElBQUEsQ0FBS0MsR0FBQSxDQUFJLEdBQUdqRixLQUFBLENBQU16RS\
              xNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQ3pDO0lBQ04sSUFBSThPLElBQUEsR0FBTUM\
              sS0FBQSxHQUFRc0MsTUFBQSxDQUFPclIsTUFBQTtJQUN6QixJQUFJMGxCLE1BQUEs\
              Q0FBT2ppQixNQUFBO0lBQ1BxTCxJQUFBLElBQU80VyxNQUFBLENBQU9qaUIsTUFBQ\
              SxDQUFPekQsTUFBQTtJQUN6QixPQUFPLEVBQUVLLEtBQUEsRUFBQWtWLE1BQUEsRU\
              FBT3hOLElBQUEsRUFBTTZFLE9BQUEsRUFBU3lFLE1BQUEsQ0FBT3pFLE9BQUEsRUF\
              BU3hFLEtBQUEsRUFBTyxDQUFDMkcsS0FBQSxFQUFPRCxJQUFBLEVBQUtBLElBQUcs\
              RUFBRTtFQUM1RTtFQUVBLElBQUlpWCxVQUFBLEdBQWFMLE1BQUEsQ0FBT3ZZLE1BQ\
              UEsR0FBU2tFLE1BQUEsQ0FBT2xFLE1BQUE7RUFDeEMsSUFBSXdNLE1BQUEsR0FBUy\
              tMLE1BQUEsQ0FBTy9MLE1BQUEsR0FBU3RJLE1BQUEsQ0FBT3JSLE1BQUE7RUFDcEM\
              sSUFBSWdtQixZQUFBLEdBQWU7RUFDbkIsU0FBU2xtQixDQUFBLEdBQUksR0FBR0Es\
              Q0FBQSxHQUFJK2xCLFVBQUEsRUFBWSxFQUFFL2xCLENBQUEsRUFBRztJQUNqQyxNQ\
              UFNLENBQUNxTixNQUFBLEVBQVEyWSxPQUFPLElBQUlyaEIsS0FBQSxDQUFNM0UsQ0\
              FBQztJQUNqQyxJQUFJZ21CLE9BQUEsS0FBWSxNQUFNQSxPQUFBLEtBQVksTUFBTTt\
              NQUNwQyxJQUFJelUsTUFBQSxDQUFPbEUsTUFBQSxLQUFXLEtBQUtBLE1BQUEsQ0FB\
              T25OLE1BQUEsR0FBUytsQixVQUFBO01BQ3ZDQSxVQUFBLEdBQWE1WSxNQUFBLENBQ\
              U9uTixNQUFBO0lBQzVCLE9BQ0s7TUFDRCxJQUFJbU4sTUFBQSxDQUFPbk4sTUFBQS\
              xHQUFTK2xCLFVBQUEsRUFBWTtRQUM1QixNQUFNOUUsT0FBQSxHQUFVO1FBQ2hCbmU\
              sT0FBQSxDQUFRNlcsTUFBQSxHQUFTeE0sTUFBQSxDQUFPbk4sTUFBQSxFQUFRLGdC\
              QUFnQmloQixPQUFPO01BQzNEO01BQ0EsSUFBSTVQLE1BQUEsQ0FBT2xFLE1BQUEsS\
              0FBVztNQUNsQjRZLFVBQUEsR0FBYTVZLE1BQUEsQ0FBT25OLE1BQUE7TUFDeEJnbU\
              IsWUFBQSxHQUFlbG1CLENBQUE7TUFDZixJQUFJaW1CLFVBQUEsS0FBZSxLQUFLLEN\
              BQUM1ZSxHQUFBLENBQUlzYyxNQUFBLEVBQVE7UUFDakMsTUFBTXhDLE9BQUEsR0FB\
              VTtRQUNoQm5lLE9BQUEsQ0FBUTZXLE1BQUEsRUFBUSxjQUFjc0gsT0FBTztNQUN6Q\
              ztNQUNBO0lBQ0o7SUFDQXRILE1BQUEsSUFBVXhNLE1BQUEsQ0FBT25OLE1BQUEsR0\
              FBUzhsQixPQUFBLENBQVE5bEIsTUFBQSxHQUFTO0VBQy9DO0VBRUEsU0FBU0YsQ0F\
              BQSxHQUFJMkUsS0FBQSxDQUFNekUsTUFBQSxHQUFTLEdBQUdGLENBQUEsSUFBSyts\
              QixVQUFBLEVBQVksRUFBRS9sQixDQUFBLEVBQUc7SUFDakQsSUFBSTJFLEtBQUEsQ\
              0FBTTNFLENBQUMsRUFBRSxDQUFDLEVBQUVFLE1BQUEsR0FBUytsQixVQUFBO0lBQ3\
              JCRixVQUFBLEdBQWEvbEIsQ0FBQSxHQUFJO0VBQ3pCO0VBQ0EsSUFBSU8sS0FBQSx\
              HQUFRO0VBQ1osSUFBSXNpQixHQUFBLEdBQU07RUFDVixJQUFJc0QsZ0JBQUEsR0FB\
              bUI7RUFFdkIsU0FBU25tQixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJa21CLFlBQ\
              UEsRUFBYyxFQUFFbG1CLENBQUE7RUFDaENPLEtBQUEsSUFBU29FLEtBQUEsQ0FBTT\
              NFLENBQUMsRUFBRSxDQUFDLEVBQUU2RCxLQUFBLENBQU1vaUIsVUFBVSxJQUFJO0V\
              BQzdDLFNBQVNqbUIsQ0FBQSxHQUFJa21CLFlBQUEsRUFBY2xtQixDQUFBLEdBQUkr\
              bEIsVUFBQSxFQUFZLEVBQUUvbEIsQ0FBQSxFQUFHO0lBQzVDLElBQUksQ0FBQ3FOL\
              E1BQUEsRUFBUTJZLE9BQU8sSUFBSXJoQixLQUFBLENBQU0zRSxDQUFDO0lBQy9CNl\
              osTUFBQSxJQUFVeE0sTUFBQSxDQUFPbk4sTUFBQSxHQUFTOGxCLE9BQUEsQ0FBUTl\
              sQixNQUFBLEdBQVM7SUFDM0MsTUFBTWttQixJQUFBLEdBQU9KLE9BQUEsQ0FBUUEs\
              T0FBQSxDQUFROWxCLE1BQUEsR0FBUyxDQUFDLE1BQU07SUFDN0MsSUFBSWttQixJQ\
              UFBO0lBQ0FKLE9BQUEsR0FBVUEsT0FBQSxDQUFRbmlCLEtBQUEsQ0FBTSxHQUFHLE\
              VBQUU7SUFFakMsSUFBSW1pQixPQUFBLElBQVczWSxNQUFBLENBQU9uTixNQUFBLEd\
              BQVMrbEIsVUFBQSxFQUFZO01BQ3ZDLE1BQU05YyxHQUFBLEdBQU1vSSxNQUFBLENB\
              QU9sRSxNQUFBLEdBQ2IsbUNBQ0E7TUFDTixNQUFNOFQsT0FBQSxHQUFVLDJEQUEyR\
              GhZLEdBQUc7TUFDOUVuRyxPQUFBLENBQVE2VyxNQUFBLEdBQVNtTSxPQUFBLENBQV\
              E5bEIsTUFBQSxJQUFVa21CLElBQUEsR0FBTyxJQUFJLElBQUksY0FBY2pGLE9BQU8\
              7TUFDdkU5VCxNQUFBLEdBQVM7SUFDYjtJQUNBLElBQUlwRixJQUFBLEtBQVNwTCxN\
              QUFBLENBQU9rTixhQUFBLEVBQWU7TUFDL0J4SixLQUFBLElBQVNzaUIsR0FBQSxHQ\
              UFNeFYsTUFBQSxDQUFPeEosS0FBQSxDQUFNb2lCLFVBQVUsSUFBSUQsT0FBQTtNQU\
              MxQ25ELEdBQUEsR0FBTTtJQUNWLFdBQ1N4VixNQUFBLENBQU9uTixNQUFBLEdBQVM\
              rbEIsVUFBQSxJQUFjRCxPQUFBLENBQVEsQ0FBQyxNQUFNLEtBQU07TUFFeEQsSUFB\
              SW5ELEdBQUEsS0FBUTtNQUNSQSxHQUFBLEdBQU07TUFBQSxJQUNELENBQUNzRCxnQ\
              kFBQSxJQUFvQnRELEdBQUEsS0FBUTtNQUNsQ0EsR0FBQSxHQUFNO01BQ1Z0aUIsS0\
              FBQSxJQUFTc2lCLEdBQUEsR0FBTXhWLE1BQUEsQ0FBT3hKLEtBQUEsQ0FBTW9pQix\
              VQUFVLElBQUlELE9BQUE7TUFDMUNuRCxHQUFBLEdBQU07TUFDTnNELGdCQUFBLEdB\
              QW1CO0lBQ3ZCLFdBQ1NILE9BQUEsS0FBWSxJQUFJO01BRXJCLElBQUluRCxHQUFBL\
              EtBQVE7TUFDUnRpQixLQUFBLElBQVM7O01BRVRzaUIsR0FBQSxHQUFNO0lBQ2QsT0\
              FDSztNQUNEdGlCLEtBQUEsSUFBU3NpQixHQUFBLEdBQU1tRCxPQUFBO01BQ2ZuRCx\
              HQUFBLEdBQU07TUFDTnNELGdCQUFBLEdBQW1CO0lBQ3ZCO0VBQ0o7RUFDQSxRQUFR\
              NVUsTUFBQSxDQUFPUixLQUFBO0lBQ1gsS0FBSztNQUNEO0lBQ0osS0FBSztNQUNEL\
              FNBQVMvUSxDQUFBLEdBQUkrbEIsVUFBQSxFQUFZL2xCLENBQUEsR0FBSTJFLEtBQU\
              EsQ0FBTXpFLE1BQUEsRUFBUSxFQUFFRixDQUFBO01BQ3pDTyxLQUFBLElBQVMsT0F\
              BT29FLEtBQUEsQ0FBTTNFLENBQUMsRUFBRSxDQUFDLEVBQUU2RCxLQUFBLENBQU1v\
              aUIsVUFBVTtNQUNoRCxJQUFJMWxCLEtBQUEsQ0FBTUEsS0FBQSxDQUFNTCxNQUFBL\
              EdBQVMsQ0FBQyxNQUFNO01BQzVCSyxLQUFBLElBQVM7TUFDYjtJQUNKO01BQ0lBLE\
              tBQUEsSUFBUztFQUNqQjtFQUNBLE1BQU1nTyxHQUFBLEdBQU1VLEtBQUEsR0FBUXN\
              DLE1BQUEsQ0FBT3JSLE1BQUEsR0FBUzBsQixNQUFBLENBQU9qaUIsTUFBQSxDQUFP\
              ekQsTUFBQTtFQUNsRCxPQUFPLEVBQUVLLEtBQUEsRUFBTzBILElBQUEsRUFBTTZFL\
              E9BQUEsRUFBU3lFLE1BQUEsQ0FBT3pFLE9BQUEsRUFBU3hFLEtBQUEsRUFBTyxDQU\
              FDMkcsS0FBQSxFQUFPVixHQUFBLEVBQUtBLEdBQUcsRUFBRTtBQUM1RTtBQUNBLFN\
              BQVNzWCx1QkFBdUIsRUFBRWhNLE1BQUEsRUFBUTNHLEtBQUEsQ0FBTSxHQUFHc04s\
              TUFBQSxFQUFReGQsT0FBQSxFQUFTO0VBRWhFLElBQUlrUSxLQUFBLENBQU0sQ0FBQ\
              yxFQUFFakwsSUFBQSxLQUFTLHVCQUF1QjtJQUN6Q2pGLE9BQUEsQ0FBUWtRLEtBQU\
              EsQ0FBTSxDQUFDLEdBQUcsY0FBYywrQkFBK0I7SUFDL0QsT0FBTztFQUNYO0VBQ0E\
              sTUFBTSxFQUFFdlAsTUFBQSxDQUFPLElBQUl1UCxLQUFBLENBQU0sQ0FBQztFQUMx\
              QixNQUFNcEYsSUFBQSxHQUFPbkssTUFBQSxDQUFPLENBQUM7RUFDckIsSUFBSTBKL\
              E1BQUEsR0FBUztFQUNiLElBQUkwRCxLQUFBLEdBQVE7RUFDWixJQUFJN00sS0FBQS\
              xHQUFRO0VBQ1osU0FBU2xFLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUkyRCxNQUF\
              BLENBQU96RCxNQUFBLEVBQVEsRUFBRUYsQ0FBQSxFQUFHO0lBQ3BDLE1BQU02QixF\
              QUFBLEdBQUs4QixNQUFBLENBQU8zRCxDQUFDO0lBQ25CLElBQUksQ0FBQytRLEtBQ\
              UEsS0FBVWxQLEVBQUEsS0FBTyxPQUFPQSxFQUFBLEtBQU87SUFDaENrUCxLQUFBLE\
              dBQVFsUCxFQUFBO0lBQ1A7TUFDRCxNQUFNK0ssQ0FBQSxHQUFJN0UsTUFBQSxDQUF\
              PbEcsRUFBRTtNQUNuQixJQUFJLENBQUN3TCxNQUFBLElBQVVULENBQUE7TUFDWFMs\
              TUFBQSxHQUFTVCxDQUFBO01BQUEsSUFDSjFJLEtBQUEsS0FBVTtNQUNmQSxLQUFBL\
              EdBQVEyVixNQUFBLEdBQVM3WixDQUFBO0lBQ3pCO0VBQ0o7RUFDQSxJQUFJa0UsS0\
              FBQSxLQUFVO0VBQ1ZsQixPQUFBLENBQVFrQixLQUFBLEVBQU8sb0JBQW9CLGtEQUF\
              rRFAsTUFBTSxFQUFFO0VBQ2pHLElBQUl1ZSxRQUFBLEdBQVc7RUFDZixJQUFJcFYs\
              T0FBQSxHQUFVO0VBQ2QsSUFBSTVNLE1BQUEsR0FBU3lELE1BQUEsQ0FBT3pELE1BQ\
              UE7RUFDcEIsU0FBU0YsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSWtULEtBQUEsQ0\
              FBTWhULE1BQUEsRUFBUSxFQUFFRixDQUFBLEVBQUc7SUFDbkMsTUFBTXdpQixLQUF\
              BLEdBQVF0UCxLQUFBLENBQU1sVCxDQUFDO0lBQ3JCLFFBQVF3aUIsS0FBQSxDQUFN\
              dmEsSUFBQTtNQUNWLEtBQUs7UUFDRGlhLFFBQUEsR0FBVztNQUVmLEtBQUs7UUFDR\
              GhpQixNQUFBLElBQVVzaUIsS0FBQSxDQUFNN2UsTUFBQSxDQUFPekQsTUFBQTtRQU\
              N2QjtNQUNKLEtBQUs7UUFDRCxJQUFJc2dCLE1BQUEsSUFBVSxDQUFDMEIsUUFBQSx\
              FQUFVO1VBQ3JCLE1BQU1mLE9BQUEsR0FBVTtVQUNoQm5lLE9BQUEsQ0FBUXdmLEtB\
              QUEsRUFBTyxnQkFBZ0JyQixPQUFPO1FBQzFDO1FBQ0FqaEIsTUFBQSxJQUFVc2lCL\
              EtBQUEsQ0FBTTdlLE1BQUEsQ0FBT3pELE1BQUE7UUFDdkI0TSxPQUFBLEdBQVUwVi\
              xLQUFBLENBQU03ZSxNQUFBLENBQU9hLFNBQUEsQ0FBVSxDQUFDO1FBQ2xDO01BQ0o\
              sS0FBSztRQUNEeEIsT0FBQSxDQUFRd2YsS0FBQSxFQUFPLG9CQUFvQkEsS0FBQSxD\
              QUFNckIsT0FBTztRQUNoRGpoQixNQUFBLElBQVVzaUIsS0FBQSxDQUFNN2UsTUFBQ\
              SxDQUFPekQsTUFBQTtRQUN2QjtNQUVKLFFBQVM7VUFDTCxNQUFNaWhCLE9BQUEsR0\
              FBVSw0Q0FBNENxQixLQUFBLENBQU12YSxJQUFJO1VBQ3RFakYsT0FBQSxDQUFRd2Y\
              sS0FBQSxFQUFPLG9CQUFvQnJCLE9BQU87VUFDMUMsTUFBTWtGLEVBQUEsR0FBSzdE\
              LEtBQUEsQ0FBTTdlLE1BQUE7VUFDakIsSUFBSTBpQixFQUFBLElBQU0sT0FBT0EsR\
              UFBQSxLQUFPO1VBQ3BCbm1CLE1BQUEsSUFBVW1tQixFQUFBLENBQUdubUIsTUFBQT\
              tRQUNyQjtJQUNKO0VBQ0o7RUFDQSxPQUFPLEVBQUU0TixJQUFBLEVBQU1ULE1BQUE\
              sRUFBUTBELEtBQUEsRUFBT2pFLE9BQUEsRUFBUzVNLE1BQUEsQ0FBTztBQUNsRDtB\
              QUVBLFNBQVM0bEIsV0FBV25pQixNQUFBLEVBQVE7RUFDeEIsTUFBTVIsS0FBQSxHQ\
              UFRUSxNQUFBLENBQU9SLEtBQUEsQ0FBTSxRQUFRO0VBQ25DLE1BQU1takIsS0FBQS\
              xHQUFRbmpCLEtBQUEsQ0FBTSxDQUFDO0VBQ3JCLE1BQU1vakIsQ0FBQSxHQUFJRCx\
              LQUFBLENBQU12aUIsS0FBQSxDQUFNLE9BQU87RUFDN0IsTUFBTXlpQixLQUFBLElB\
              QVFELENBQUEsb0JBQUFBLENBQUEsQ0FBSSxNQUNaLENBQUNBLENBQUEsQ0FBRSxDQ\
              UFDLEdBQUdELEtBQUEsQ0FBTXppQixLQUFBLENBQU0waUIsQ0FBQSxDQUFFLENBQU\
              MsRUFBRXJtQixNQUFNLENBQUMsSUFDL0IsQ0FBQyxJQUFJb21CLEtBQUs7RUFDaEI\
              sTUFBTTNoQixLQUFBLEdBQVEsQ0FBQzZoQixLQUFLO0VBQ3BCLFNBQVN4bUIsQ0FB\
              QSxHQUFJLEdBQUdBLENBQUEsR0FBSW1ELEtBQUEsQ0FBTWpELE1BQUEsRUFBUUYsQ\
              0FBQSxJQUFLO0VBQ25DMkUsS0FBQSxDQUFNTSxJQUFBLENBQUssQ0FBQzlCLEtBQU\
              EsQ0FBTW5ELENBQUMsR0FBR21ELEtBQUEsQ0FBTW5ELENBQUEsR0FBSSxDQUFDLEN\
              BQUMsQ0FBQztFQUN2QyxPQUFPMkUsS0FBQTtBQUNYOzs7QUNoTUEsU0FBUzhoQixr\
              QkFBa0JiLE1BQUEsRUFBUXBGLE1BQUEsRUFBUXhkLE9BQUEsRUFBUztFQUNoRCxNQ\
              UFNLEVBQUU2VyxNQUFBLEVBQVE1UixJQUFBLEVBQU10RSxNQUFBLEVBQVE0SyxHQU\
              FBLENBQUksSUFBSXFYLE1BQUE7RUFDdEMsSUFBSTNULEtBQUE7RUFDSixJQUFJMVI\
              sS0FBQTtFQUNKLE1BQU00WixRQUFBLEdBQVdBLENBQUN1TSxHQUFBLEVBQUs1VyxJ\
              QUFBLEVBQU14SyxHQUFBLEtBQVF0QyxPQUFBLENBQVE2VyxNQUFBLEdBQVM2TSxHQ\
              UFBLEVBQUs1VyxJQUFBLEVBQU14SyxHQUFHO0VBQ3BFLFFBQVEyQyxJQUFBO0lBQ0\
              osS0FBSztNQUNEZ0ssS0FBQSxHQUFRcFYsTUFBQSxDQUFPbU4sS0FBQTtNQUNmeko\
              sS0FBQSxHQUFRb21CLFVBQUEsQ0FBV2hqQixNQUFBLEVBQVF3VyxRQUFRO01BQ25D\
              O0lBQ0osS0FBSztNQUNEbEksS0FBQSxHQUFRcFYsTUFBQSxDQUFPcU4sWUFBQTtNQ\
              UNmM0osS0FBQSxHQUFRcW1CLGlCQUFBLENBQWtCampCLE1BQUEsRUFBUXdXLFFBQV\
              E7TUFDMUM7SUFDSixLQUFLO01BQ0RsSSxLQUFBLEdBQVFwVixNQUFBLENBQU9vTix\
              ZQUFBO01BQ2YxSixLQUFBLEdBQVFzbUIsaUJBQUEsQ0FBa0JsakIsTUFBQSxFQUFR\
              d1csUUFBUTtNQUMxQztJQUVKO01BQ0luWCxPQUFBLENBQVE0aUIsTUFBQSxFQUFRL\
              G9CQUFvQiw0Q0FBNEMzZCxJQUFJLEVBQUU7TUFDdEYsT0FBTztRQUNIMUgsS0FBQS\
              xFQUFPO1FBQ1AwSCxJQUFBLEVBQU07UUFDTjZFLE9BQUEsRUFBUztRQUNUeEUsS0F\
              BQSxFQUFPLENBQUN1UixNQUFBLEVBQVFBLE1BQUEsR0FBU2xXLE1BQUEsQ0FBT3pE\
              LE1BQUEsRUFBUTJaLE1BQUEsR0FBU2xXLE1BQUEsQ0FBT3pELE1BQU07TUFDbEU7R\
              UFDUjtFQUNBLE1BQU00bUIsUUFBQSxHQUFXak4sTUFBQSxHQUFTbFcsTUFBQSxDQU\
              FPekQsTUFBQTtFQUNqQyxNQUFNNm1CLEVBQUEsR0FBS3pDLFVBQUEsQ0FBVy9WLEd\
              BQUEsRUFBS3VZLFFBQUEsRUFBVXRHLE1BQUEsRUFBUXhkLE9BQU87RUFDcEQsT0FB\
              TztJQUNIekMsS0FBQTtJQUNBMEgsSUFBQSxFQUFNZ0ssS0FBQTtJQUNObkYsT0FBQ\
              SxFQUFTaWEsRUFBQSxDQUFHamEsT0FBQTtJQUNaeEUsS0FBQSxFQUFPLENBQUN1Ui\
              xNQUFBLEVBQVFpTixRQUFBLEVBQVVDLEVBQUEsQ0FBR2xOLE1BQU07RUFDdkM7QUF\
              DSjtBQUNBLFNBQVM4TSxXQUFXaGpCLE1BQUEsRUFBUVgsT0FBQSxFQUFTO0VBQ2pD\
              LElBQUlna0IsT0FBQSxHQUFVO0VBQ2QsUUFBUXJqQixNQUFBLENBQU8sQ0FBQztJQ\
              UVaLEtBQUs7TUFDRHFqQixPQUFBLEdBQVU7TUFDVjtJQUNKLEtBQUs7TUFDREEsT0\
              FBQSxHQUFVO01BQ1Y7SUFDSixLQUFLO01BQ0RBLE9BQUEsR0FBVTtNQUNWO0lBQ0o\
              sS0FBSztJQUNMLEtBQUssSUFBSztRQUNOQSxPQUFBLEdBQVUsMEJBQTBCcmpCLE1B\
              QUEsQ0FBTyxDQUFDLENBQUM7UUFDN0M7TUFDSjtJQUNBLEtBQUs7SUFDTCxLQUFLL\
              ElBQUs7UUFDTnFqQixPQUFBLEdBQVUsc0JBQXNCcmpCLE1BQUEsQ0FBTyxDQUFDLE\
              NBQUM7UUFDekM7TUFDSjtFQUNKO0VBQ0EsSUFBSXFqQixPQUFBO0VBQ0Foa0IsT0F\
              BQSxDQUFRLEdBQUcsb0JBQW9CLGlDQUFpQ2drQixPQUFPLEVBQUU7RUFDN0UsT0FB\
              T0MsU0FBQSxDQUFVdGpCLE1BQU07QUFDM0I7QUFDQSxTQUFTaWpCLGtCQUFrQmpqQ\
              ixNQUFBLEVBQVFYLE9BQUEsRUFBUztFQUN4QyxJQUFJVyxNQUFBLENBQU9BLE1BQU\
              EsQ0FBT3pELE1BQUEsR0FBUyxDQUFDLE1BQU0sT0FBT3lELE1BQUEsQ0FBT3pELE1\
              BQUEsS0FBVztFQUN2RDhDLE9BQUEsQ0FBUVcsTUFBQSxDQUFPekQsTUFBQSxFQUFR\
              LGdCQUFnQix3QkFBd0I7RUFDbkUsT0FBTyttQixTQUFBLENBQVV0akIsTUFBQSxDQ\
              UFPRSxLQUFBLENBQU0sR0FBRyxFQUFFLENBQUMsRUFBRWpDLE9BQUEsQ0FBUSxPQU\
              FPLEdBQUc7QUFDNUQ7QUFDQSxTQUFTcWxCLFVBQVV0akIsTUFBQSxFQUFRO0VBekU\
              zQixJQUFBM0MsRUFBQTtFQWlGSSxJQUFJc2xCLEtBQUEsRUFBT3ZqQixJQUFBO0VB\
              Q1gsSUFBSTtJQUNBdWpCLEtBQUEsR0FBUSxJQUFJdGlCLE1BQUEsQ0FBTyw0QkFBO\
              EIsSUFBSTtJQUNyRGpCLElBQUEsR0FBTyxJQUFJaUIsTUFBQSxDQUFPLHNDQUF5Qy\
              xJQUFJO0VBQ25FLFNBQ09rUyxDQUFBLEVBQUc7SUFDTm9RLEtBQUEsR0FBUSxJQUF\
              BdGlCLE1BQUEsQ0FBQyx1QkFBaUIsSUFBRTtJQUM1QmpCLElBQUEsR0FBTyxJQUFB\
              aUIsTUFBQSxDQUFDLDhCQUF1QixJQUFFO0VBQ3JDO0VBQ0EsSUFBSUQsS0FBQSxHQ\
              UFRdWlCLEtBQUEsQ0FBTVksSUFBQSxDQUFLdmpCLE1BQU07RUFDN0IsSUFBSSxDQU\
              FDSSxLQUFBO0VBQ0QsT0FBT0osTUFBQTtFQUNYLElBQUlqQixHQUFBLEdBQU1xQix\
              LQUFBLENBQU0sQ0FBQztFQUNqQixJQUFJOGUsR0FBQSxHQUFNO0VBQ1YsSUFBSTNC\
              LEdBQUEsR0FBTW9GLEtBQUEsQ0FBTWEsU0FBQTtFQUNoQnBrQixJQUFBLENBQUtva\
              0IsU0FBQSxHQUFZakcsR0FBQTtFQUNqQixPQUFRbmQsS0FBQSxHQUFRaEIsSUFBQS\
              xDQUFLbWtCLElBQUEsQ0FBS3ZqQixNQUFNLEdBQUk7SUFDaEMsSUFBSUksS0FBQSx\
              DQUFNLENBQUMsTUFBTSxJQUFJO01BQ2pCLElBQUk4ZSxHQUFBLEtBQVE7TUFDUm5n\
              QixHQUFBLElBQU9tZ0IsR0FBQTs7TUFFUEEsR0FBQSxHQUFNO0lBQ2QsT0FDSztNQ\
              UNEbmdCLEdBQUEsSUFBT21nQixHQUFBLEdBQU05ZSxLQUFBLENBQU0sQ0FBQztNQU\
              NwQjhlLEdBQUEsR0FBTTtJQUNWO0lBQ0EzQixHQUFBLEdBQU1uZSxJQUFBLENBQUt\
              va0IsU0FBQTtFQUNmO0VBQ0EsTUFBTXpFLElBQUEsR0FBTyxJQUFBMWUsTUFBQSxD\
              QUFDLGVBQVcsSUFBRTtFQUMzQjBlLElBQUEsQ0FBS3lFLFNBQUEsR0FBWWpHLEdBQ\
              UE7RUFDakJuZCxLQUFBLEdBQVEyZSxJQUFBLENBQUt3RSxJQUFBLENBQUt2akIsTU\
              FBTTtFQUN4QixPQUFPakIsR0FBQSxHQUFNbWdCLEdBQUEsS0FBTzdoQixFQUFBLEd\
              BQUErQyxLQUFBLG9CQUFBQSxLQUFBLENBQVEsT0FBUixPQUFBL0MsRUFBQSxHQUFj\
              O0FBQ3RDO0FBQ0EsU0FBUzZsQixrQkFBa0JsakIsTUFBQSxFQUFRWCxPQUFBLEVBQ\
              VM7RUFDeEMsSUFBSU4sR0FBQSxHQUFNO0VBQ1YsU0FBUzFDLENBQUEsR0FBSSxHQU\
              FHQSxDQUFBLEdBQUkyRCxNQUFBLENBQU96RCxNQUFBLEdBQVMsR0FBRyxFQUFFRix\
              DQUFBLEVBQUc7SUFDeEMsTUFBTTZCLEVBQUEsR0FBSzhCLE1BQUEsQ0FBTzNELENB\
              QUM7SUFDbkIsSUFBSTZCLEVBQUEsS0FBTyxRQUFROEIsTUFBQSxDQUFPM0QsQ0FBQ\
              SxHQUFJLENBQUMsTUFBTTtJQUNqQztJQUNKLElBQUk2QixFQUFBLEtBQU8sTUFBTT\
              tNQUNiLE1BQU0sRUFBRWtOLElBQUEsRUFBTThLLE1BQUEsQ0FBTyxJQUFJdU4sV0F\
              BQSxDQUFZempCLE1BQUEsRUFBUTNELENBQUM7TUFDOUMwQyxHQUFBLElBQU9xTSxJ\
              QUFBO01BQ1AvTyxDQUFBLEdBQUk2WixNQUFBO0lBQ1IsV0FDU2hZLEVBQUEsS0FBT\
              yxNQUFNO01BQ2xCLElBQUlpSyxJQUFBLEdBQU9uSSxNQUFBLENBQU8sRUFBRTNELE\
              NBQUM7TUFDckIsTUFBTXFuQixFQUFBLEdBQUtDLFdBQUEsQ0FBWXhiLElBQUk7TUF\
              DM0IsSUFBSXViLEVBQUE7TUFDQTNrQixHQUFBLElBQU8ya0IsRUFBQTtNQUFBLElB\
              Q0Z2YixJQUFBLEtBQVMsTUFBTTtRQUVwQkEsSUFBQSxHQUFPbkksTUFBQSxDQUFPM\
              0QsQ0FBQSxHQUFJLENBQUM7UUFDbkIsT0FBTzhMLElBQUEsS0FBUyxPQUFPQSxJQU\
              FBLEtBQVM7UUFDNUJBLElBQUEsR0FBT25JLE1BQUEsQ0FBTyxFQUFFM0QsQ0FBQSx\
              HQUFJLENBQUM7TUFDN0IsV0FDUzhMLElBQUEsS0FBUyxRQUFRbkksTUFBQSxDQUFP\
              M0QsQ0FBQSxHQUFJLENBQUMsTUFBTSxNQUFNO1FBRTlDOEwsSUFBQSxHQUFPbkksT\
              UFBQSxDQUFPLEVBQUUzRCxDQUFBLEdBQUksQ0FBQztRQUNyQixPQUFPOEwsSUFBQS\
              xLQUFTLE9BQU9BLElBQUEsS0FBUztRQUM1QkEsSUFBQSxHQUFPbkksTUFBQSxDQUF\
              PLEVBQUUzRCxDQUFBLEdBQUksQ0FBQztNQUM3QixXQUNTOEwsSUFBQSxLQUFTLE9B\
              QU9BLElBQUEsS0FBUyxPQUFPQSxJQUFBLEtBQVMsS0FBSztRQUNuRCxNQUFNNUwsT\
              UFBQSxHQUFTLEVBQUVxbkIsQ0FBQSxFQUFHLEdBQUdDLENBQUEsRUFBRyxHQUFHQy\
              xDQUFBLEVBQUcsRUFBRSxFQUFFM2IsSUFBSTtRQUN4Q3BKLEdBQUEsSUFBT2dsQix\
              hQUFBLENBQWMvakIsTUFBQSxFQUFRM0QsQ0FBQSxHQUFJLEdBQUdFLE1BQUEsRUFB\
              UThDLE9BQU87UUFDbkRoRCxDQUFBLElBQUtFLE1BQUE7TUFDVCxPQUNLO1FBQ0QsT\
              UFBTXluQixHQUFBLEdBQU1oa0IsTUFBQSxDQUFPb00sTUFBQSxDQUFPL1AsQ0FBQS\
              xHQUFJLEdBQUcsQ0FBQztRQUNsQ2dELE9BQUEsQ0FBUWhELENBQUEsR0FBSSxHQUF\
              HLGlCQUFpQiwyQkFBMkIybkIsR0FBRyxFQUFFO1FBQ2hFamxCLEdBQUEsSUFBT2ls\
              QixHQUFBO01BQ1g7SUFDSixXQUNTOWxCLEVBQUEsS0FBTyxPQUFPQSxFQUFBLEtBQ\
              U8sS0FBTTtNQUVoQyxNQUFNK2xCLE9BQUEsR0FBVTVuQixDQUFBO01BQ2hCLElBQU\
              k4TCxJQUFBLEdBQU9uSSxNQUFBLENBQU8zRCxDQUFBLEdBQUksQ0FBQztNQUN2Qix\
              PQUFPOEwsSUFBQSxLQUFTLE9BQU9BLElBQUEsS0FBUztNQUM1QkEsSUFBQSxHQUFP\
              bkksTUFBQSxDQUFPLEVBQUUzRCxDQUFBLEdBQUksQ0FBQztNQUN6QixJQUFJOEwsS\
              UFBQSxLQUFTLFFBQVEsRUFBRUEsSUFBQSxLQUFTLFFBQVFuSSxNQUFBLENBQU8zRC\
              xDQUFBLEdBQUksQ0FBQyxNQUFNO01BQ3REMEMsR0FBQSxJQUFPMUMsQ0FBQSxHQUF\
              JNG5CLE9BQUEsR0FBVWprQixNQUFBLENBQU9FLEtBQUEsQ0FBTStqQixPQUFBLEVB\
              QVM1bkIsQ0FBQSxHQUFJLENBQUMsSUFBSTZCLEVBQUE7SUFDNUQsT0FDSztNQUNEY\
              SxHQUFBLElBQU9iLEVBQUE7SUFDWDtFQUNKO0VBQ0EsSUFBSThCLE1BQUEsQ0FBT0\
              EsTUFBQSxDQUFPekQsTUFBQSxHQUFTLENBQUMsTUFBTSxPQUFPeUQsTUFBQSxDQUF\
              PekQsTUFBQSxLQUFXO0VBQ3ZEOEMsT0FBQSxDQUFRVyxNQUFBLENBQU96RCxNQUFB\
              LEVBQVEsZ0JBQWdCLHdCQUF3QjtFQUNuRSxPQUFPd0MsR0FBQTtBQUNYO0FBS0EsU\
              0FBUzBrQixZQUFZempCLE1BQUEsRUFBUWtXLE1BQUEsRUFBUTtFQUNqQyxJQUFJOU\
              ssSUFBQSxHQUFPO0VBQ1gsSUFBSWxOLEVBQUEsR0FBSzhCLE1BQUEsQ0FBT2tXLE1\
              BQUEsR0FBUyxDQUFDO0VBQzFCLE9BQU9oWSxFQUFBLEtBQU8sT0FBT0EsRUFBQSxL\
              QUFPLE9BQVFBLEVBQUEsS0FBTyxRQUFRQSxFQUFBLEtBQU8sTUFBTTtJQUM1RCxJQ\
              UFJQSxFQUFBLEtBQU8sUUFBUThCLE1BQUEsQ0FBT2tXLE1BQUEsR0FBUyxDQUFDLE\
              1BQU07SUFDdEM7SUFDSixJQUFJaFksRUFBQSxLQUFPO0lBQ1BrTixJQUFBLElBQVE\
              7SUFDWjhLLE1BQUEsSUFBVTtJQUNWaFksRUFBQSxHQUFLOEIsTUFBQSxDQUFPa1cs\
              TUFBQSxHQUFTLENBQUM7RUFDMUI7RUFDQSxJQUFJLENBQUM5SyxJQUFBO0VBQ0RBL\
              ElBQUEsR0FBTztFQUNYLE9BQU8sRUFBRUEsSUFBQSxFQUFNOEssTUFBQSxDQUFPO0\
              FBQzFCO0FBQ0EsSUFBTXlOLFdBQUEsR0FBYztFQUNoQixLQUFLO0VBQUE7RUFDTDN\
              iLENBQUEsRUFBRztFQUFBO0VBQ0g2VCxDQUFBLEVBQUc7RUFBQTtFQUNIalAsQ0FB\
              QSxFQUFHO0VBQUE7RUFDSGtNLENBQUEsRUFBRztFQUFBO0VBQ0g3UCxDQUFBLEVBQ\
              Uc7RUFBQTtFQUNIaWIsQ0FBQSxFQUFHO0VBQUE7RUFDSHZkLENBQUEsRUFBRztFQU\
              FBO0VBQ0gvQyxDQUFBLEVBQUc7RUFBQTtFQUNIdWdCLENBQUEsRUFBRztFQUFBO0V\
              BQ0g1UixDQUFBLEVBQUc7RUFBQTtFQUNINlIsQ0FBQSxFQUFHO0VBQUE7RUFDSEMs\
              Q0FBQSxFQUFHO0VBQUE7RUFDSCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDT\
              CxNQUFNO0VBQ04sS0FBTTtBQUNWO0FBQ0EsU0FBU04sY0FBYy9qQixNQUFBLEVBQV\
              FrVyxNQUFBLEVBQVEzWixNQUFBLEVBQVE4QyxPQUFBLEVBQVM7RUFDcEQsTUFBTXF\
              rQixFQUFBLEdBQUsxakIsTUFBQSxDQUFPb00sTUFBQSxDQUFPOEosTUFBQSxFQUFR\
              M1osTUFBTTtFQUN2QyxNQUFNK25CLEVBQUEsR0FBS1osRUFBQSxDQUFHbm5CLE1BQ\
              UEsS0FBV0EsTUFBQSxJQUFVLGlCQUFpQnVELElBQUEsQ0FBSzRqQixFQUFFO0VBQz\
              NELE1BQU12WCxJQUFBLEdBQU9tWSxFQUFBLEdBQUtqTyxRQUFBLENBQVNxTixFQUF\
              BLEVBQUksRUFBRSxJQUFJbE8sR0FBQTtFQUNyQyxJQUFJSixLQUFBLENBQU1qSixJ\
              QUFJLEdBQUc7SUFDYixNQUFNNlgsR0FBQSxHQUFNaGtCLE1BQUEsQ0FBT29NLE1BQ\
              UEsQ0FBTzhKLE1BQUEsR0FBUyxHQUFHM1osTUFBQSxHQUFTLENBQUM7SUFDaEQ4Qy\
              xPQUFBLENBQVE2VyxNQUFBLEdBQVMsR0FBRyxpQkFBaUIsMkJBQTJCOE4sR0FBRyx\
              FQUFFO0lBQ3JFLE9BQU9BLEdBQUE7RUFDWDtFQUNBLE9BQU94akIsTUFBQSxDQUFP\
              K2pCLGFBQUEsQ0FBY3BZLElBQUk7QUFDcEM7OztBQ3ZOQSxTQUFTcVksY0FBYzlnQ\
              ixHQUFBLEVBQUttYixLQUFBLEVBQU9nRCxRQUFBLEVBQVV4aUIsT0FBQSxFQUFTO0\
              VBQ2xELE1BQU0sRUFBRXpDLEtBQUEsRUFBTzBILElBQUEsRUFBTTZFLE9BQUEsRUF\
              BU3hFLEtBQUEsQ0FBTSxJQUFJa2EsS0FBQSxDQUFNdmEsSUFBQSxLQUFTLGlCQUNq\
              RDBkLGtCQUFBLENBQW1CdGUsR0FBQSxFQUFLbWIsS0FBQSxFQUFPeGYsT0FBTyxJQ\
              UN0Q3lqQixpQkFBQSxDQUFrQmpFLEtBQUEsRUFBT25iLEdBQUEsQ0FBSStCLE9BQU\
              EsQ0FBUW9YLE1BQUEsRUFBUXhkLE9BQU87RUFDMUQsTUFBTVUsT0FBQSxHQUFVOGh\
              CLFFBQUEsR0FDVm5lLEdBQUEsQ0FBSWlMLFVBQUEsQ0FBVzVPLE9BQUEsQ0FBUTho\
              QixRQUFBLENBQVM3aEIsTUFBQSxFQUFRLENBQUEyQixHQUFBLEtBQU90QyxPQUFBL\
              ENBQVF3aUIsUUFBQSxFQUFVLHNCQUFzQmxnQixHQUFHLENBQUMsSUFDM0Y7RUFDTi\
              xNQUFNakIsR0FBQSxHQUFNbWhCLFFBQUEsSUFBWTloQixPQUFBLEdBQ2xCMGtCLG1\
              CQUFBLENBQW9CL2dCLEdBQUEsQ0FBSXlELE1BQUEsRUFBUXZLLEtBQUEsRUFBT21E\
              LE9BQUEsRUFBUzhoQixRQUFBLEVBQVV4aUIsT0FBTyxJQUNqRXdmLEtBQUEsQ0FBT\
              XZhLElBQUEsS0FBUyxXQUNYb2dCLG1CQUFBLENBQW9CaGhCLEdBQUEsRUFBSzlHLE\
              tBQUEsRUFBT2lpQixLQUFBLEVBQU94ZixPQUFPLElBQzlDcUUsR0FBQSxDQUFJeUQ\
              sTUFBQSxDQUFPck0sTUFBTTtFQUMzQixJQUFJbW5CLE1BQUE7RUFDSixJQUFJO0lB\
              Q0EsTUFBTWxqQixHQUFBLEdBQU0yQixHQUFBLENBQUl1RSxPQUFBLENBQVFySSxLQ\
              UFBLEVBQU8sQ0FBQStFLEdBQUEsS0FBT3RDLE9BQUEsQ0FBUXdpQixRQUFBLFdBQU\
              FBLFFBQUEsR0FBWWhELEtBQUEsRUFBTyxzQkFBc0JsZCxHQUFHLEdBQUcrQixHQUF\
              BLENBQUkrQixPQUFPO0lBQ3hHd2MsTUFBQSxHQUFTbG9CLFFBQUEsQ0FBU2dGLEdB\
              QUcsSUFBSUEsR0FBQSxHQUFNLElBQUk3RixNQUFBLENBQU82RixHQUFHO0VBQ2pEL\
              FNBQ093QixLQUFBLEVBQU87SUFDVixNQUFNb0IsR0FBQSxHQUFNcEIsS0FBQSxZQU\
              FpQjFDLEtBQUEsR0FBUTBDLEtBQUEsQ0FBTWlkLE9BQUEsR0FBVWhkLE1BQUEsQ0F\
              BT0QsS0FBSztJQUNqRWxCLE9BQUEsQ0FBUXdpQixRQUFBLFdBQUFBLFFBQUEsR0FB\
              WWhELEtBQUEsRUFBTyxzQkFBc0JsZCxHQUFHO0lBQ3BEc2dCLE1BQUEsR0FBUyxJQ\
              UFJL29CLE1BQUEsQ0FBTzBELEtBQUs7RUFDN0I7RUFDQXFsQixNQUFBLENBQU90ZC\
              xLQUFBLEdBQVFBLEtBQUE7RUFDZnNkLE1BQUEsQ0FBT2ppQixNQUFBLEdBQVNwRCx\
              LQUFBO0VBQ2hCLElBQUkwSCxJQUFBO0VBQ0EyZCxNQUFBLENBQU8zZCxJQUFBLEdB\
              QU9BLElBQUE7RUFDbEIsSUFBSXZFLE9BQUE7RUFDQWtpQixNQUFBLENBQU92aEIsR\
              0FBQSxHQUFNWCxPQUFBO0VBQ2pCLElBQUlXLEdBQUEsQ0FBSW9HLE1BQUE7RUFDSm\
              1iLE1BQUEsQ0FBT25iLE1BQUEsR0FBU3BHLEdBQUEsQ0FBSW9HLE1BQUE7RUFDeEI\
              sSUFBSXFDLE9BQUE7RUFDQThZLE1BQUEsQ0FBTzlZLE9BQUEsR0FBVUEsT0FBQTtF\
              QUNyQixPQUFPOFksTUFBQTtBQUNYO0FBQ0EsU0FBU3dDLG9CQUFvQmhkLE9BQUEsR\
              UFBUTdLLEtBQUEsRUFBT21ELE9BQUEsRUFBUzhoQixRQUFBLEVBQVV4aUIsT0FBQS\
              xFQUFTO0VBdkN4RSxJQUFBaEMsRUFBQTtFQXdDSSxJQUFJMEMsT0FBQSxLQUFZO0V\
              BQ1osT0FBTzBILE9BQUEsQ0FBTzNNLE1BQU07RUFDeEIsTUFBTTZwQixhQUFBLEdB\
              QWdCLEVBQUM7RUFDdkIsV0FBV2prQixHQUFBLElBQU8rRyxPQUFBLENBQU9sSixJQ\
              UFBLEVBQU07SUFDM0IsSUFBSSxDQUFDbUMsR0FBQSxDQUFJZ1MsVUFBQSxJQUFjaF\
              MsR0FBQSxDQUFJQSxHQUFBLEtBQVFYLE9BQUEsRUFBUztNQUN4QyxJQUFJVyxHQUF\
              BLENBQUltSCxPQUFBLElBQVduSCxHQUFBLENBQUlaLElBQUE7TUFDbkI2a0IsYUFB\
              QSxDQUFjcmpCLElBQUEsQ0FBS1osR0FBRzs7TUFFdEIsT0FBT0EsR0FBQTtJQUNmO\
              0VBQ0o7RUFDQSxXQUFXQSxHQUFBLElBQU9pa0IsYUFBQTtFQUNkLEtBQUl0bkIsRU\
              FBQSxHQUFBcUQsR0FBQSxDQUFJWixJQUFBLEtBQUosZ0JBQUF6QyxFQUFBLENBQVV\
              5QyxJQUFBLENBQUtsRCxLQUFBO0VBQ2YsT0FBTzhELEdBQUE7RUFDZixNQUFNcWhC\
              LEVBQUEsR0FBS3RhLE9BQUEsQ0FBT3dVLFNBQUEsQ0FBVWxjLE9BQU87RUFDbkMsS\
              UFBSWdpQixFQUFBLElBQU0sQ0FBQ0EsRUFBQSxDQUFHclAsVUFBQSxFQUFZO0lBR3\
              RCakwsT0FBQSxDQUFPbEosSUFBQSxDQUFLK0MsSUFBQSxDQUFLekYsTUFBQSxDQUF\
              PcUIsTUFBQSxDQUFPLENBQUMsR0FBRzZrQixFQUFBLEVBQUksRUFBRWxhLE9BQUEs\
              RUFBUyxPQUFPL0gsSUFBQSxFQUFNLE9BQVUsQ0FBQyxDQUFDO0lBQzNFLE9BQU9pa\
              UIsRUFBQTtFQUNYO0VBQ0ExaUIsT0FBQSxDQUFRd2lCLFFBQUEsRUFBVSxzQkFBc0\
              IsbUJBQW1COWhCLE9BQU8sSUFBSUEsT0FBQSxLQUFZLHVCQUF1QjtFQUN6RyxPQUF\
              PMEgsT0FBQSxDQUFPM00sTUFBTTtBQUN4QjtBQUNBLFNBQVM0cEIsb0JBQW9CLEVB\
              QUUvVixVQUFBLEVBQVl4SCxNQUFBLEVBQUFNLE9BQUEsQ0FBTyxHQUFHN0ssS0FBQ\
              SxFQUFPaWlCLEtBQUEsRUFBT3hmLE9BQUEsRUFBUztFQWhFNUUsSUFBQWhDLEVBQU\
              E7RUFpRUksTUFBTXFELEdBQUEsR0FBTStHLE9BQUEsQ0FBT2xKLElBQUEsQ0FBS3N\
              JLElBQUEsQ0FBSyxDQUFBK2QsSUFBQSxLQUFJO0lBakVyQyxJQUFBN2QsR0FBQTtJ\
              QWlFd0MsT0FBQTZkLElBQUEsQ0FBSS9jLE9BQUEsTUFBV2QsR0FBQSxHQUFBNmQsS\
              UFBQSxDQUFJOWtCLElBQUEsS0FBSixnQkFBQWlILEdBQUEsQ0FBVWpILElBQUEsQ0\
              FBS2xELEtBQUE7RUFBQSxDQUFNLEtBQUs2SyxPQUFBLENBQU8zTSxNQUFNO0VBQzF\
              GLElBQUkyTSxPQUFBLENBQU95RyxNQUFBLEVBQVE7SUFDZixNQUFNQSxNQUFBLElB\
              QVM3USxFQUFBLEdBQUFvSyxPQUFBLENBQU95RyxNQUFBLENBQU9ySCxJQUFBLENBQ\
              UssQ0FBQStkLElBQUEsS0FBSTtNQW5FOUMsSUFBQTdkLEdBQUE7TUFtRWlELE9BQU\
              E2ZCxJQUFBLENBQUkvYyxPQUFBLE1BQVdkLEdBQUEsR0FBQTZkLElBQUEsQ0FBSTl\
              rQixJQUFBLEtBQUosZ0JBQUFpSCxHQUFBLENBQVVqSCxJQUFBLENBQUtsRCxLQUFB\
              O0lBQUEsQ0FBTSxNQUE5RCxPQUFBUyxFQUFBLEdBQ1hvSyxPQUFBLENBQU8zTSxNQ\
              UFNO0lBQ2pCLElBQUk0RixHQUFBLENBQUlBLEdBQUEsS0FBUXdOLE1BQUEsQ0FBT3\
              hOLEdBQUEsRUFBSztNQUN4QixNQUFNZ2lCLEVBQUEsR0FBSy9ULFVBQUEsQ0FBV2x\
              PLFNBQUEsQ0FBVUMsR0FBQSxDQUFJQSxHQUFHO01BQ3ZDLE1BQU04UCxFQUFBLEdB\
              QUs3QixVQUFBLENBQVdsTyxTQUFBLENBQVV5TixNQUFBLENBQU94TixHQUFHO01BQ\
              zFDLE1BQU1pQixHQUFBLEdBQU0saUNBQWlDK2dCLEVBQUUsT0FBT2xTLEVBQUU7TU\
              FDeERuUixPQUFBLENBQVF3ZixLQUFBLEVBQU8sc0JBQXNCbGQsR0FBQSxFQUFLLEl\
              BQUk7SUFDbEQ7RUFDSjtFQUNBLE9BQU9qQixHQUFBO0FBQ1g7OztBQzdFQSxTQUFT\
              bWtCLG9CQUFvQjNPLE1BQUEsRUFBUTRPLE1BQUEsRUFBUXZILEdBQUEsRUFBSztFQ\
              UM5QyxJQUFJdUgsTUFBQSxFQUFRO0lBQ1IsSUFBSXZILEdBQUEsS0FBUTtJQUNSQS\
              xHQUFBLEdBQU11SCxNQUFBLENBQU92b0IsTUFBQTtJQUNqQixTQUFTRixDQUFBLEd\
              BQUlraEIsR0FBQSxHQUFNLEdBQUdsaEIsQ0FBQSxJQUFLLEdBQUcsRUFBRUEsQ0FB\
              QSxFQUFHO01BQy9CLElBQUk0aUIsRUFBQSxHQUFLNkYsTUFBQSxDQUFPem9CLENBQ\
              UM7TUFDakIsUUFBUTRpQixFQUFBLENBQUczYSxJQUFBO1FBQ1AsS0FBSztRQUNMLE\
              tBQUs7UUFDTCxLQUFLO1VBQ0Q0UixNQUFBLElBQVUrSSxFQUFBLENBQUdqZixNQUF\
              BLENBQU96RCxNQUFBO1VBQ3BCO01BQ1I7TUFHQTBpQixFQUFBLEdBQUs2RixNQUFB\
              LENBQU8sRUFBRXpvQixDQUFDO01BQ2YsUUFBTzRpQixFQUFBLG9CQUFBQSxFQUFBL\
              ENBQUkzYSxJQUFBLE1BQVMsU0FBUztRQUN6QjRSLE1BQUEsSUFBVStJLEVBQUEsQ0\
              FBR2pmLE1BQUEsQ0FBT3pELE1BQUE7UUFDcEIwaUIsRUFBQSxHQUFLNkYsTUFBQSx\
              DQUFPLEVBQUV6b0IsQ0FBQztNQUNuQjtNQUNBO0lBQ0o7RUFDSjtFQUNBLE9BQU82\
              WixNQUFBO0FBQ1g7OztBQ2xCQSxJQUFNNk8sRUFBQSxHQUFLLEVBQUVyRixXQUFBL\
              EVBQWFFLGdCQUFBLENBQWlCO0FBQzNDLFNBQVNGLFlBQVloYyxHQUFBLEVBQUttYi\
              xLQUFBLEVBQU90UCxLQUFBLEVBQU9sUSxPQUFBLEVBQVM7RUFDN0MsTUFBTSxFQUF\
              FOFEsV0FBQSxFQUFhaEgsT0FBQSxFQUFTaE8sTUFBQSxFQUFRdUYsR0FBQSxDQUFJ\
              LElBQUk2TyxLQUFBO0VBQzlDLElBQUl0VSxJQUFBO0VBQ0osSUFBSStwQixVQUFBL\
              EdBQWE7RUFDakIsUUFBUW5HLEtBQUEsQ0FBTXZhLElBQUE7SUFDVixLQUFLO01BQ0\
              RySixJQUFBLEdBQU9ncUIsWUFBQSxDQUFhdmhCLEdBQUEsRUFBS21iLEtBQUEsRUF\
              BT3hmLE9BQU87TUFDdkMsSUFBSWxFLE1BQUEsSUFBVXVGLEdBQUE7TUFDVnJCLE9B\
              QUEsQ0FBUXdmLEtBQUEsRUFBTyxlQUFlLCtDQUErQztNQUNqRjtJQUNKLEtBQUs7S\
              UFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7TUFDRDVqQixJQUFBLEdBQU91cE\
              IsYUFBQSxDQUFjOWdCLEdBQUEsRUFBS21iLEtBQUEsRUFBT25lLEdBQUEsRUFBS3J\
              CLE9BQU87TUFDN0MsSUFBSWxFLE1BQUE7TUFDQUYsSUFBQSxDQUFLRSxNQUFBLEdB\
              QVNBLE1BQUEsQ0FBTzZFLE1BQUEsQ0FBT2EsU0FBQSxDQUFVLENBQUM7TUFDM0M7S\
              UFDSixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7TUFDRDVGLElBQUEsR0FBTzJtQi\
              xpQkFBQSxDQUFrQm1ELEVBQUEsRUFBSXJoQixHQUFBLEVBQUttYixLQUFBLEVBQU9\
              uZSxHQUFBLEVBQUtyQixPQUFPO01BQ3JELElBQUlsRSxNQUFBO01BQ0FGLElBQUEs\
              Q0FBS0UsTUFBQSxHQUFTQSxNQUFBLENBQU82RSxNQUFBLENBQU9hLFNBQUEsQ0FBV\
              SxDQUFDO01BQzNDO0lBQ0osUUFBUztRQUNMLE1BQU0yYyxPQUFBLEdBQVVxQixLQU\
              FBLENBQU12YSxJQUFBLEtBQVMsVUFDekJ1YSxLQUFBLENBQU1yQixPQUFBLEdBQ04\
              sNEJBQTRCcUIsS0FBQSxDQUFNdmEsSUFBSTtRQUM1Q2pGLE9BQUEsQ0FBUXdmLEtB\
              QUEsRUFBTyxvQkFBb0JyQixPQUFPO1FBQzFDdmlCLElBQUEsR0FBTzJrQixnQkFBQ\
              SxDQUFpQmxjLEdBQUEsRUFBS21iLEtBQUEsQ0FBTTNJLE1BQUEsRUFBUSxRQUFXLE\
              1BQU0zRyxLQUFBLEVBQU9sUSxPQUFPO1FBQzFFMmxCLFVBQUEsR0FBYTtNQUNqQjt\
              FQUNKO0VBQ0EsSUFBSTdwQixNQUFBLElBQVVGLElBQUEsQ0FBS0UsTUFBQSxLQUFX\
              O0VBQzFCa0UsT0FBQSxDQUFRbEUsTUFBQSxFQUFRLGFBQWEsa0NBQWtDO0VBQ25FL\
              ElBQUlnVixXQUFBO0VBQ0FsVixJQUFBLENBQUtrVixXQUFBLEdBQWM7RUFDdkIsSU\
              FBSWhILE9BQUEsRUFBUztJQUNULElBQUkwVixLQUFBLENBQU12YSxJQUFBLEtBQVM\
              sWUFBWXVhLEtBQUEsQ0FBTTdlLE1BQUEsS0FBVztJQUM1Qy9FLElBQUEsQ0FBS2tP\
              LE9BQUEsR0FBVUEsT0FBQTs7SUFFZmxPLElBQUEsQ0FBS2lPLGFBQUEsR0FBZ0JDL\
              E9BQUE7RUFDN0I7RUFFQSxJQUFJekYsR0FBQSxDQUFJK0IsT0FBQSxDQUFRa1gsZ0\
              JBQUEsSUFBb0JxSSxVQUFBO0VBQ2hDL3BCLElBQUEsQ0FBS3VsQixRQUFBLEdBQVc\
              zQixLQUFBO0VBQ3BCLE9BQU81akIsSUFBQTtBQUNYO0FBQ0EsU0FBUzJrQixpQkFB\
              aUJsYyxHQUFBLEVBQUt3UyxNQUFBLEVBQVE0TyxNQUFBLEVBQVF2SCxHQUFBLEVBQ\
              UssRUFBRXBOLFdBQUEsRUFBYWhILE9BQUEsRUFBU2hPLE1BQUEsRUFBUXVGLEdBQU\
              EsRUFBS2tLLEdBQUEsQ0FBSSxHQUFHdkwsT0FBQSxFQUFTO0VBQ3JHLE1BQU13Zix\
              LQUFBLEdBQVE7SUFDVnZhLElBQUEsRUFBTTtJQUNONFIsTUFBQSxFQUFRMk8sbUJB\
              QUEsQ0FBb0IzTyxNQUFBLEVBQVE0TyxNQUFBLEVBQVF2SCxHQUFHO0lBQy9DN1QsT\
              UFBQSxFQUFRO0lBQ1IxSixNQUFBLEVBQVE7RUFDWjtFQUNBLE1BQU0vRSxJQUFBLE\
              dBQU91cEIsYUFBQSxDQUFjOWdCLEdBQUEsRUFBS21iLEtBQUEsRUFBT25lLEdBQUE\
              sRUFBS3JCLE9BQU87RUFDbkQsSUFBSWxFLE1BQUEsRUFBUTtJQUNSRixJQUFBLENB\
              QUtFLE1BQUEsR0FBU0EsTUFBQSxDQUFPNkUsTUFBQSxDQUFPYSxTQUFBLENBQVUsQ\
              0FBQztJQUN2QyxJQUFJNUYsSUFBQSxDQUFLRSxNQUFBLEtBQVc7SUFDaEJrRSxPQU\
              FBLENBQVFsRSxNQUFBLEVBQVEsYUFBYSxrQ0FBa0M7RUFDdkU7RUFDQSxJQUFJZ1Y\
              sV0FBQTtFQUNBbFYsSUFBQSxDQUFLa1YsV0FBQSxHQUFjO0VBQ3ZCLElBQUloSCxP\
              QUFBLEVBQVM7SUFDVGxPLElBQUEsQ0FBS2tPLE9BQUEsR0FBVUEsT0FBQTtJQUNmb\
              E8sSUFBQSxDQUFLMEosS0FBQSxDQUFNLENBQUMsSUFBSWlHLEdBQUE7RUFDcEI7RU\
              FDQSxPQUFPM1AsSUFBQTtBQUNYO0FBQ0EsU0FBU2dxQixhQUFhLEVBQUV4ZixPQUF\
              BLENBQVEsR0FBRyxFQUFFeVEsTUFBQSxFQUFRbFcsTUFBQSxFQUFRNEssR0FBQSxD\
              QUFJLEdBQUd2TCxPQUFBLEVBQVM7RUFDakUsTUFBTTZsQixLQUFBLEdBQVEsSUFBS\
              XpzQixLQUFBLENBQU11SCxNQUFBLENBQU9hLFNBQUEsQ0FBVSxDQUFDLENBQUM7RU\
              FDM0MsSUFBSXFrQixLQUFBLENBQU1sbEIsTUFBQSxLQUFXO0VBQ2pCWCxPQUFBLEN\
              BQVE2VyxNQUFBLEVBQVEsYUFBYSxpQ0FBaUM7RUFDbEUsSUFBSWdQLEtBQUEsQ0FB\
              TWxsQixNQUFBLENBQU80SixRQUFBLENBQVMsR0FBRztFQUN6QnZLLE9BQUEsQ0FBU\
              TZXLE1BQUEsR0FBU2xXLE1BQUEsQ0FBT3pELE1BQUEsR0FBUyxHQUFHLGFBQWEsa0\
              NBQWtDLElBQUk7RUFDM0YsTUFBTTRtQixRQUFBLEdBQVdqTixNQUFBLEdBQVNsVyx\
              NQUFBLENBQU96RCxNQUFBO0VBQ2pDLE1BQU02bUIsRUFBQSxHQUFLekMsVUFBQSxD\
              QUFXL1YsR0FBQSxFQUFLdVksUUFBQSxFQUFVMWQsT0FBQSxDQUFRb1gsTUFBQSxFQ\
              UFReGQsT0FBTztFQUM1RDZsQixLQUFBLENBQU12Z0IsS0FBQSxHQUFRLENBQUN1Ui\
              xNQUFBLEVBQVFpTixRQUFBLEVBQVVDLEVBQUEsQ0FBR2xOLE1BQU07RUFDMUMsSUF\
              BSWtOLEVBQUEsQ0FBR2phLE9BQUE7RUFDSCtiLEtBQUEsQ0FBTS9iLE9BQUEsR0FB\
              VWlhLEVBQUEsQ0FBR2phLE9BQUE7RUFDdkIsT0FBTytiLEtBQUE7QUFDWDs7O0FDc\
              EZBLFNBQVNDLFdBQVcxZixPQUFBLEVBQVNrSixVQUFBLEVBQVksRUFBRXVILE1BQU\
              EsRUFBUTVLLEtBQUEsRUFBTzFPLEtBQUEsRUFBT2dPLEdBQUEsQ0FBSSxHQUFHdkw\
              sT0FBQSxFQUFTO0VBQzdFLE1BQU0rbEIsSUFBQSxHQUFPdnBCLE1BQUEsQ0FBT3FC\
              LE1BQUEsQ0FBTyxFQUFFNmYsV0FBQSxFQUFhcE8sVUFBQSxDQUFXLEdBQUdsSixPQ\
              UFPO0VBQy9ELE1BQU0xRSxHQUFBLEdBQU0sSUFBSWxJLFFBQUEsQ0FBUyxRQUFXdX\
              NCLElBQUk7RUFDeEMsTUFBTTFoQixHQUFBLEdBQU07SUFDUnNjLE1BQUEsRUFBUTt\
              JQUNSclIsVUFBQSxFQUFZNU4sR0FBQSxDQUFJNE4sVUFBQTtJQUNoQmxKLE9BQUEs\
              RUFBUzFFLEdBQUEsQ0FBSTBFLE9BQUE7SUFDYjBCLE1BQUEsRUFBUXBHLEdBQUEsQ\
              0FBSW9HO0VBQ2hCO0VBQ0EsTUFBTW9JLEtBQUEsR0FBUTBPLFlBQUEsQ0FBYTNTLE\
              tBQUEsRUFBTztJQUM5QjZTLFNBQUEsRUFBVztJQUNYaFcsSUFBQSxFQUFNdkwsS0F\
              BQSxXQUFBQSxLQUFBLEdBQVNnTyxHQUFBLG9CQUFBQSxHQUFBLENBQU07SUFDckJz\
              TCxNQUFBO0lBQ0E3VyxPQUFBO0lBQ0ErZSxZQUFBLEVBQWM7SUFDZEMsY0FBQSxFQ\
              UFnQjtFQUNwQixDQUFDO0VBQ0QsSUFBSTlPLEtBQUEsQ0FBTXJLLEtBQUEsRUFBTz\
              tJQUNibkUsR0FBQSxDQUFJNE4sVUFBQSxDQUFXblEsUUFBQSxHQUFXO0lBQzFCLEl\
              BQUk1QixLQUFBLEtBQ0NBLEtBQUEsQ0FBTTBILElBQUEsS0FBUyxlQUFlMUgsS0FB\
              QSxDQUFNMEgsSUFBQSxLQUFTLGdCQUM5QyxDQUFDaUwsS0FBQSxDQUFNb0IsVUFBQ\
              TtJQUNQdFIsT0FBQSxDQUFRa1EsS0FBQSxDQUFNM0UsR0FBQSxFQUFLLGdCQUFnQi\
              x1RUFBdUU7RUFDbEg7RUFFQTdKLEdBQUEsQ0FBSW5GLFFBQUEsR0FBV2dCLEtBQUE\
              sR0FDVDhpQixXQUFBLENBQVloYyxHQUFBLEVBQUs5RyxLQUFBLEVBQU8yUyxLQUFB\
              LEVBQU9sUSxPQUFPLElBQ3RDdWdCLGdCQUFBLENBQWlCbGMsR0FBQSxFQUFLNkwsS\
              0FBQSxDQUFNM0UsR0FBQSxFQUFLVSxLQUFBLEVBQU8sTUFBTWlFLEtBQUEsRUFBT2\
              xRLE9BQU87RUFDbEUsTUFBTWdtQixVQUFBLEdBQWF0a0IsR0FBQSxDQUFJbkYsUUF\
              BQSxDQUFTK0ksS0FBQSxDQUFNLENBQUM7RUFDdkMsTUFBTXllLEVBQUEsR0FBS3pD\
              LFVBQUEsQ0FBVy9WLEdBQUEsRUFBS3lhLFVBQUEsRUFBWSxPQUFPaG1CLE9BQU87R\
              UFDckQsSUFBSStqQixFQUFBLENBQUdqYSxPQUFBO0VBQ0hwSSxHQUFBLENBQUlvSS\
              xPQUFBLEdBQVVpYSxFQUFBLENBQUdqYSxPQUFBO0VBQ3JCcEksR0FBQSxDQUFJNEQ\
              sS0FBQSxHQUFRLENBQUN1UixNQUFBLEVBQVFtUCxVQUFBLEVBQVlqQyxFQUFBLENB\
              QUdsTixNQUFNO0VBQzFDLE9BQU9uVixHQUFBO0FBQ1g7OztBQ2hDQSxTQUFTdWtCL\
              FlBQVk5ZixHQUFBLEVBQUs7RUFDdEIsSUFBSSxPQUFPQSxHQUFBLEtBQVE7RUFDZi\
              xPQUFPLENBQUNBLEdBQUEsRUFBS0EsR0FBQSxHQUFNLENBQUM7RUFDeEIsSUFBSXp\
              DLEtBQUEsQ0FBTUMsT0FBQSxDQUFRd0MsR0FBRztFQUNqQixPQUFPQSxHQUFBLENB\
              QUlqSixNQUFBLEtBQVcsSUFBSWlKLEdBQUEsR0FBTSxDQUFDQSxHQUFBLENBQUksQ\
              0FBQyxHQUFHQSxHQUFBLENBQUksQ0FBQyxDQUFDO0VBQ25ELE1BQU0sRUFBRTBRLE\
              1BQUEsRUFBUWxXLE1BQUEsQ0FBTyxJQUFJd0YsR0FBQTtFQUMzQixPQUFPLENBQUM\
              wUSxNQUFBLEVBQVFBLE1BQUEsSUFBVSxPQUFPbFcsTUFBQSxLQUFXLFdBQVdBLE1B\
              QUEsQ0FBT3pELE1BQUEsR0FBUyxFQUFFO0FBQzdFO0FBQ0EsU0FBU2dwQixhQUFhQ\
              yxPQUFBLEVBQVM7RUFmL0IsSUFBQW5vQixFQUFBO0VBZ0JJLElBQUk4TCxPQUFBLE\
              dBQVU7RUFDZCxJQUFJc2MsU0FBQSxHQUFZO0VBQ2hCLElBQUlDLGNBQUEsR0FBaUI\
              7RUFDckIsU0FBU3JwQixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJbXBCLE9BQUEs\
              Q0FBUWpwQixNQUFBLEVBQVEsRUFBRUYsQ0FBQSxFQUFHO0lBQ3JDLE1BQU0yRCxNQ\
              UFBLEdBQVN3bEIsT0FBQSxDQUFRbnBCLENBQUM7SUFDeEIsUUFBUTJELE1BQUEsQ0\
              FBTyxDQUFDO01BQ1osS0FBSztRQUNEbUosT0FBQSxLQUNLQSxPQUFBLEtBQVksS0F\
              BSyxLQUFLdWMsY0FBQSxHQUFpQixTQUFTLFNBQzVDMWxCLE1BQUEsQ0FBT2EsU0FB\
              QSxDQUFVLENBQUMsS0FBSztRQUNoQzRrQixTQUFBLEdBQVk7UUFDWkMsY0FBQSxHQ\
              UFpQjtRQUNqQjtNQUNKLEtBQUs7UUFDRCxNQUFJcm9CLEVBQUEsR0FBQW1vQixPQU\
              FBLENBQVFucEIsQ0FBQSxHQUFJLENBQUMsTUFBYixnQkFBQWdCLEVBQUEsQ0FBaUI\
              sUUFBTztRQUN4QmhCLENBQUEsSUFBSztRQUNUb3BCLFNBQUEsR0FBWTtRQUNaO01B\
              Q0o7UUFFSSxJQUFJLENBQUNBLFNBQUE7UUFDREMsY0FBQSxHQUFpQjtRQUNyQkQsU\
              0FBQSxHQUFZO0lBQ3BCO0VBQ0o7RUFDQSxPQUFPLEVBQUV0YyxPQUFBLEVBQVN1Yy\
              xjQUFBLENBQWU7QUFDckM7QUFZQSxJQUFNOXNCLFFBQUEsR0FBTixNQUFlO0VBQ1h\
              5RixZQUFZb0gsT0FBQSxHQUFVLENBQUMsR0FBRztJQUN0QixLQUFLMUUsR0FBQSxH\
              QUFNO0lBQ1gsS0FBSzRrQixZQUFBLEdBQWU7SUFDcEIsS0FBS0gsT0FBQSxHQUFVL\
              EVBQUM7SUFDaEIsS0FBS2hKLE1BQUEsR0FBUyxFQUFDO0lBQ2YsS0FBS0MsUUFBQS\
              xHQUFXLEVBQUM7SUFDakIsS0FBS3BkLE9BQUEsR0FBVSxDQUFDVyxNQUFBLEVBQVF\
              tTSxJQUFBLEVBQU1xUixPQUFBLEVBQVN4TSxPQUFBLEtBQVk7TUFDL0MsTUFBTXVN\
              LEdBQUEsR0FBTStILFdBQUEsQ0FBWXRsQixNQUFNO01BQzlCLElBQUlnUixPQUFBO\
              01BQ0EsS0FBS3lMLFFBQUEsQ0FBU25iLElBQUEsQ0FBSyxJQUFJOUgsV0FBQSxDQU\
              FZK2pCLEdBQUEsRUFBS3BSLElBQUEsRUFBTXFSLE9BQU8sQ0FBQzs7TUFFdEQsS0F\
              BS2hCLE1BQUEsQ0FBT2xiLElBQUEsQ0FBSyxJQUFJaEksY0FBQSxDQUFlaWtCLEdB\
              QUEsRUFBS3BSLElBQUEsRUFBTXFSLE9BQU8sQ0FBQztJQUMvRDtJQUVBLEtBQUs3T\
              yxVQUFBLEdBQWEsSUFBSXhRLFVBQUEsQ0FBVyxFQUFFYSxPQUFBLEVBQVN5RyxPQU\
              FBLENBQVF6RyxPQUFBLElBQVcsTUFBTSxDQUFDO0lBQ3RFLEtBQUt5RyxPQUFBLEd\
              BQVVBLE9BQUE7RUFDbkI7RUFDQW1nQixTQUFTN2tCLEdBQUEsRUFBSzhrQixRQUFB\
              LEVBQVU7SUFDcEIsTUFBTSxFQUFFMWMsT0FBQSxFQUFTdWMsY0FBQSxDQUFlLElBQ\
              UlILFlBQUEsQ0FBYSxLQUFLQyxPQUFPO0lBRTdELElBQUlyYyxPQUFBLEVBQVM7TU\
              FDVCxNQUFNbVQsRUFBQSxHQUFLdmIsR0FBQSxDQUFJbkYsUUFBQTtNQUNmLElBQUl\
              pcUIsUUFBQSxFQUFVO1FBQ1Y5a0IsR0FBQSxDQUFJb0ksT0FBQSxHQUFVcEksR0FB\
              QSxDQUFJb0ksT0FBQSxHQUFVLEdBQUdwSSxHQUFBLENBQUlvSSxPQUFPO0FBQUEsR\
              UFBS0EsT0FBTyxLQUFLQSxPQUFBO01BQy9ELFdBQ1N1YyxjQUFBLElBQWtCM2tCLE\
              dBQUEsQ0FBSTROLFVBQUEsQ0FBV25RLFFBQUEsSUFBWSxDQUFDOGQsRUFBQSxFQUF\
              JO1FBQ3ZEdmIsR0FBQSxDQUFJbUksYUFBQSxHQUFnQkMsT0FBQTtNQUN4QixXQUNT\
              elAsWUFBQSxDQUFhNGlCLEVBQUUsS0FBSyxDQUFDQSxFQUFBLENBQUdsTSxJQUFBL\
              ElBQVFrTSxFQUFBLENBQUdoZ0IsS0FBQSxDQUFNQyxNQUFBLEdBQVMsR0FBRztRQU\
              MxRCxJQUFJaU0sRUFBQSxHQUFLOFQsRUFBQSxDQUFHaGdCLEtBQUEsQ0FBTSxDQUF\
              DO1FBQ25CLElBQUl4QyxNQUFBLENBQU8wTyxFQUFFO1FBQ1RBLEVBQUEsR0FBS0Es\
              RUFBQSxDQUFHek0sR0FBQTtRQUNaLE1BQU0raUIsRUFBQSxHQUFLdFcsRUFBQSxDQ\
              UFHVSxhQUFBO1FBQ2RWLEVBQUEsQ0FBR1UsYUFBQSxHQUFnQjRWLEVBQUEsR0FBSy\
              xHQUFHM1YsT0FBTztBQUFBLEVBQUsyVixFQUFFLEtBQUszVixPQUFBO01BQ2xELE9\
              BQ0s7UUFDRCxNQUFNMlYsRUFBQSxHQUFLeEMsRUFBQSxDQUFHcFQsYUFBQTtRQUNk\
              b1QsRUFBQSxDQUFHcFQsYUFBQSxHQUFnQjRWLEVBQUEsR0FBSyxHQUFHM1YsT0FBT\
              ztBQUFBLEVBQUsyVixFQUFFLEtBQUszVixPQUFBO01BQ2xEO0lBQ0o7SUFDQSxJQU\
              FJMGMsUUFBQSxFQUFVO01BQ1Y5aUIsS0FBQSxDQUFNZ1AsU0FBQSxDQUFVelEsSUF\
              BQSxDQUFLd2tCLEtBQUEsQ0FBTS9rQixHQUFBLENBQUl5YixNQUFBLEVBQVEsS0FB\
              S0EsTUFBTTtNQUNsRHpaLEtBQUEsQ0FBTWdQLFNBQUEsQ0FBVXpRLElBQUEsQ0FBS\
              3drQixLQUFBLENBQU0va0IsR0FBQSxDQUFJMGIsUUFBQSxFQUFVLEtBQUtBLFFBQV\
              E7SUFDMUQsT0FDSztNQUNEMWIsR0FBQSxDQUFJeWIsTUFBQSxHQUFTLEtBQUtBLE1\
              BQUE7TUFDbEJ6YixHQUFBLENBQUkwYixRQUFBLEdBQVcsS0FBS0EsUUFBQTtJQUN4\
              QjtJQUNBLEtBQUsrSSxPQUFBLEdBQVUsRUFBQztJQUNoQixLQUFLaEosTUFBQSxHQ\
              UFTLEVBQUM7SUFDZixLQUFLQyxRQUFBLEdBQVcsRUFBQztFQUNyQjtFQUFBO0FBQU\
              E7QUFBQTtBQUFBO0FBQUE7RUFNQXNKLFdBQUEsRUFBYTtJQUNULE9BQU87TUFDSDV\
              jLE9BQUEsRUFBU29jLFlBQUEsQ0FBYSxLQUFLQyxPQUFPLEVBQUVyYyxPQUFBO01B\
              Q3BDd0YsVUFBQSxFQUFZLEtBQUtBLFVBQUE7TUFDakI2TixNQUFBLEVBQVEsS0FBS\
              0EsTUFBQTtNQUNiQyxRQUFBLEVBQVUsS0FBS0E7SUFDbkI7RUFDSjtFQUFBO0FBQU\
              E7QUFBQTtBQUFBO0FBQUE7QUFBQTtFQU9BLENBQUN1SixRQUFROUgsTUFBQSxFQUF\
              RK0gsUUFBQSxHQUFXLE9BQU9DLFNBQUEsR0FBWSxJQUFJO0lBQy9DLFdBQVdySCxL\
              QUFBLElBQVNYLE1BQUE7SUFDaEIsT0FBQWlJLFdBQUEsQ0FBTyxLQUFLaGUsSUFBQ\
              SxDQUFLMFcsS0FBSztJQUMxQixPQUFBc0gsV0FBQSxDQUFPLEtBQUt2YixHQUFBLE\
              NBQUlxYixRQUFBLEVBQVVDLFNBQVM7RUFDdkM7RUFBQTtFQUVBLENBQUMvZCxLQUF\
              LMFcsS0FBQSxFQUFPO0lBQ1QsUUFBUUEsS0FBQSxDQUFNdmEsSUFBQTtNQUNWLEtB\
              QUs7UUFDRCxLQUFLcUssVUFBQSxDQUFXeFAsR0FBQSxDQUFJMGYsS0FBQSxDQUFNN\
              2UsTUFBQSxFQUFRLENBQUNrVyxNQUFBLEVBQVFzSCxPQUFBLEVBQVN4TSxPQUFBLE\
              tBQVk7VUFDNUQsTUFBTXVNLEdBQUEsR0FBTStILFdBQUEsQ0FBWXpHLEtBQUs7VUF\
              DN0J0QixHQUFBLENBQUksQ0FBQyxLQUFLckgsTUFBQTtVQUNWLEtBQUs3VyxPQUFB\
              LENBQVFrZSxHQUFBLEVBQUssaUJBQWlCQyxPQUFBLEVBQVN4TSxPQUFPO1FBQ3ZEL\
              ENBQUM7UUFDRCxLQUFLd1UsT0FBQSxDQUFRbGtCLElBQUEsQ0FBS3VkLEtBQUEsQ0\
              FBTTdlLE1BQU07UUFDOUIsS0FBSzJsQixZQUFBLEdBQWU7UUFDcEI7TUFDSixLQUF\
              LLFdBQVk7VUFDYixNQUFNNWtCLEdBQUEsR0FBTW9rQixVQUFBLENBQVcsS0FBSzFm\
              LE9BQUEsRUFBUyxLQUFLa0osVUFBQSxFQUFZa1EsS0FBQSxFQUFPLEtBQUt4ZixPQ\
              UFPO1VBQ3pFLElBQUksS0FBS3NtQixZQUFBLElBQWdCLENBQUM1a0IsR0FBQSxDQU\
              FJNE4sVUFBQSxDQUFXblEsUUFBQTtVQUNyQyxLQUFLYSxPQUFBLENBQVF3ZixLQUF\
              BLEVBQU8sZ0JBQWdCLGlEQUFpRDtVQUN6RixLQUFLK0csUUFBQSxDQUFTN2tCLEdB\
              QUEsRUFBSyxLQUFLO1VBQ3hCLElBQUksS0FBS0EsR0FBQTtVQUNMLE1BQU0sS0FBS\
              0EsR0FBQTtVQUNmLEtBQUtBLEdBQUEsR0FBTUEsR0FBQTtVQUNYLEtBQUs0a0IsWU\
              FBQSxHQUFlO1VBQ3BCO1FBQ0o7TUFDQSxLQUFLO01BQ0wsS0FBSztRQUNEO01BQ0o\
              sS0FBSztNQUNMLEtBQUs7UUFDRCxLQUFLSCxPQUFBLENBQVFsa0IsSUFBQSxDQUFL\
              dWQsS0FBQSxDQUFNN2UsTUFBTTtRQUM5QjtNQUNKLEtBQUssUUFBUztVQUNWLE1BQ\
              U0yQixHQUFBLEdBQU1rZCxLQUFBLENBQU03ZSxNQUFBLEdBQ1osR0FBRzZlLEtBQU\
              EsQ0FBTXJCLE9BQU8sS0FBSzliLElBQUEsQ0FBS3RILFNBQUEsQ0FBVXlrQixLQUF\
              BLENBQU03ZSxNQUFNLENBQUMsS0FDakQ2ZSxLQUFBLENBQU1yQixPQUFBO1VBQ1os\
              TUFBTWpkLEtBQUEsR0FBUSxJQUFJakgsY0FBQSxDQUFlZ3NCLFdBQUEsQ0FBWXpHL\
              EtBQUssR0FBRyxvQkFBb0JsZCxHQUFHO1VBQzVFLElBQUksS0FBS2drQixZQUFBLE\
              lBQWdCLENBQUMsS0FBSzVrQixHQUFBO1VBQzNCLEtBQUt5YixNQUFBLENBQU9sYix\
              JQUFBLENBQUtmLEtBQUs7O1VBRXRCLEtBQUtRLEdBQUEsQ0FBSXliLE1BQUEsQ0FB\
              T2xiLElBQUEsQ0FBS2YsS0FBSztVQUM5QjtRQUNKO01BQ0EsS0FBSyxVQUFXO1VBQ\
              1osSUFBSSxDQUFDLEtBQUtRLEdBQUEsRUFBSztZQUNYLE1BQU1ZLEdBQUEsR0FBTT\
              tZQUNaLEtBQUs2YSxNQUFBLENBQU9sYixJQUFBLENBQUssSUFBSWhJLGNBQUEsQ0F\
              BZWdzQixXQUFBLENBQVl6RyxLQUFLLEdBQUcsb0JBQW9CbGQsR0FBRyxDQUFDO1lB\
              Q2hGO1VBQ0o7VUFDQSxLQUFLWixHQUFBLENBQUk0TixVQUFBLENBQVdsUSxNQUFBL\
              EdBQVM7VUFDN0IsTUFBTW1NLEdBQUEsR0FBTStWLFVBQUEsQ0FBVzlCLEtBQUEsQ0\
              FBTWpVLEdBQUEsRUFBS2lVLEtBQUEsQ0FBTTNJLE1BQUEsR0FBUzJJLEtBQUEsQ0F\
              BTTdlLE1BQUEsQ0FBT3pELE1BQUEsRUFBUSxLQUFLd0UsR0FBQSxDQUFJMEUsT0FB\
              QSxDQUFRb1gsTUFBQSxFQUFRLEtBQUt4ZCxPQUFPO1VBQzNHLEtBQUt1bUIsUUFBQ\
              SxDQUFTLEtBQUs3a0IsR0FBQSxFQUFLLElBQUk7VUFDNUIsSUFBSTZKLEdBQUEsQ0\
              FBSXpCLE9BQUEsRUFBUztZQUNiLE1BQU1tVCxFQUFBLEdBQUssS0FBS3ZiLEdBQUE\
              sQ0FBSW9JLE9BQUE7WUFDcEIsS0FBS3BJLEdBQUEsQ0FBSW9JLE9BQUEsR0FBVW1U\
              LEVBQUEsR0FBSyxHQUFHQSxFQUFFO0FBQUEsRUFBSzFSLEdBQUEsQ0FBSXpCLE9BQ\
              U8sS0FBS3lCLEdBQUEsQ0FBSXpCLE9BQUE7VUFDMUQ7VUFDQSxLQUFLcEksR0FBQS\
              xDQUFJNEQsS0FBQSxDQUFNLENBQUMsSUFBSWlHLEdBQUEsQ0FBSXNMLE1BQUE7VUF\
              DeEI7UUFDSjtNQUNBO1FBQ0ksS0FBS3NHLE1BQUEsQ0FBT2xiLElBQUEsQ0FBSyxJ\
              QUFJaEksY0FBQSxDQUFlZ3NCLFdBQUEsQ0FBWXpHLEtBQUssR0FBRyxvQkFBb0Isc\
              UJBQXFCQSxLQUFBLENBQU12YSxJQUFJLEVBQUUsQ0FBQztJQUN0SDtFQUNKO0VBQU\
              E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0VBT0EsQ0FBQ3NHLElBQUlxYixRQUF\
              BLEdBQVcsT0FBT0MsU0FBQSxHQUFZLElBQUk7SUFDbkMsSUFBSSxLQUFLbmxCLEdB\
              QUEsRUFBSztNQUNWLEtBQUs2a0IsUUFBQSxDQUFTLEtBQUs3a0IsR0FBQSxFQUFLL\
              ElBQUk7TUFDNUIsTUFBTSxLQUFLQSxHQUFBO01BQ1gsS0FBS0EsR0FBQSxHQUFNO0\
              lBQ2YsV0FDU2tsQixRQUFBLEVBQVU7TUFDZixNQUFNYixJQUFBLEdBQU92cEIsTUF\
              BQSxDQUFPcUIsTUFBQSxDQUFPLEVBQUU2ZixXQUFBLEVBQWEsS0FBS3BPLFVBQUEs\
              Q0FBVyxHQUFHLEtBQUtsSixPQUFPO01BQ3pFLE1BQU0xRSxHQUFBLEdBQU0sSUFBS\
              WxJLFFBQUEsQ0FBUyxRQUFXdXNCLElBQUk7TUFDeEMsSUFBSSxLQUFLTyxZQUFBO0\
              1BQ0wsS0FBS3RtQixPQUFBLENBQVE2bUIsU0FBQSxFQUFXLGdCQUFnQix1Q0FBdUM\
              7TUFDbkZubEIsR0FBQSxDQUFJNEQsS0FBQSxHQUFRLENBQUMsR0FBR3VoQixTQUFB\
              LEVBQVdBLFNBQVM7TUFDcEMsS0FBS04sUUFBQSxDQUFTN2tCLEdBQUEsRUFBSyxLQ\
              UFLO01BQ3hCLE1BQU1BLEdBQUE7SUFDVjtFQUNKO0FBQ0o7OztBQ3ROQSxJQUFBcE\
              ksV0FBQTtBQUFBSCxRQUFBLENBQUFHLFdBQUE7RUFBQXl0QixHQUFBLEVBQUFBLEN\
              BQUEsS0FBQUEsR0FBQTtFQUFBQyxRQUFBLEVBQUFBLENBQUEsS0FBQUEsUUFBQTtF\
              QUFBQyxRQUFBLEVBQUFBLENBQUEsS0FBQUEsUUFBQTtFQUFBeHJCLE1BQUEsRUFBQ\
              UEsQ0FBQSxLQUFBeXJCLE9BQUE7RUFBQUMsaUJBQUEsRUFBQUEsQ0FBQSxLQUFBQS\
              xpQkFBQTtFQUFBOXNCLFlBQUEsRUFBQUEsQ0FBQSxLQUFBK3NCLGFBQUE7RUFBQTF\
              zQixRQUFBLEVBQUFBLENBQUEsS0FBQTJzQixTQUFBO0VBQUFDLFdBQUEsRUFBQUEs\
              Q0FBQSxLQUFBQSxXQUFBO0VBQUFDLGVBQUEsRUFBQUEsQ0FBQSxLQUFBQSxlQUFBO\
              0VBQUFDLGNBQUEsRUFBQUEsQ0FBQSxLQUFBQSxjQUFBO0VBQUF6c0IsU0FBQSxFQU\
              FBQSxDQUFBLEtBQUEwc0IsVUFBQTtFQUFBQyxTQUFBLEVBQUFBLENBQUEsS0FBQUE\
              sU0FBQTtFQUFBenNCLEtBQUEsRUFBQUEsQ0FBQSxLQUFBMHNCO0FBQUE7OztBQ0tB\
              LFNBQVNKLGdCQUFnQi9ILEtBQUEsRUFBT2hDLE1BQUEsR0FBUyxNQUFNeGQsT0FBQ\
              SxFQUFTO0VBQ3BELElBQUl3ZixLQUFBLEVBQU87SUFDUCxNQUFNckksUUFBQSxHQU\
              FXQSxDQUFDK0csR0FBQSxFQUFLcFIsSUFBQSxFQUFNcVIsT0FBQSxLQUFZO01BQ3J\
              DLE1BQU10SCxNQUFBLEdBQVMsT0FBT3FILEdBQUEsS0FBUSxXQUFXQSxHQUFBLEdB\
              QU14YSxLQUFBLENBQU1DLE9BQUEsQ0FBUXVhLEdBQUcsSUFBSUEsR0FBQSxDQUFJL\
              ENBQUMsSUFBSUEsR0FBQSxDQUFJckgsTUFBQTtNQUNqRixJQUFJN1csT0FBQTtNQU\
              NBQSxPQUFBLENBQVE2VyxNQUFBLEVBQVEvSixJQUFBLEVBQU1xUixPQUFPOztNQUU\
              3QixNQUFNLElBQUlsa0IsY0FBQSxDQUFlLENBQUM0YyxNQUFBLEVBQVFBLE1BQUEs\
              R0FBUyxDQUFDLEdBQUcvSixJQUFBLEVBQU1xUixPQUFPO0lBQ3BFO0lBQ0EsUUFBU\
              XFCLEtBQUEsQ0FBTXZhLElBQUE7TUFDVixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQU\
              s7UUFDRCxPQUFPd2UsaUJBQUEsQ0FBa0JqRSxLQUFBLEVBQU9oQyxNQUFBLEVBQVF\
              yRyxRQUFRO01BQ3BELEtBQUs7UUFDRCxPQUFPd0wsa0JBQUEsQ0FBbUIsRUFBRXZj\
              LE9BQUEsRUFBUyxFQUFFb1gsTUFBQSxDQUFPLEVBQUUsR0FBR2dDLEtBQUEsRUFBT\
              3JJLFFBQVE7SUFDMUU7RUFDSjtFQUNBLE9BQU87QUFDWDtBQWVBLFNBQVNnUSxrQk\
              FBa0I1cEIsS0FBQSxFQUFPcXFCLE9BQUEsRUFBUztFQXZDM0MsSUFBQTVwQixFQUF\
              BO0VBd0NJLE1BQU0sRUFBRXNJLFdBQUEsR0FBYyxPQUFPK0QsTUFBQSxFQUFRdUUs\
              TUFBQSxHQUFTLE9BQU9pSSxNQUFBLEdBQVMsSUFBSTVSLElBQUEsR0FBTyxRQUFRL\
              ElBQUkyaUIsT0FBQTtFQUNyRixNQUFNam5CLE1BQUEsR0FBU21PLGVBQUEsQ0FBZ0\
              IsRUFBRTdKLElBQUEsRUFBTTFILEtBQUEsQ0FBTSxHQUFHO0lBQzVDK0ksV0FBQTt\
              JQUNBK0QsTUFBQSxFQUFRQSxNQUFBLEdBQVMsSUFBSSxJQUFJMEYsTUFBQSxDQUFP\
              MUYsTUFBTSxJQUFJO0lBQzFDdUUsTUFBQTtJQUNBeEksT0FBQSxFQUFTLEVBQUV1S\
              CxVQUFBLEVBQVksTUFBTTNDLFNBQUEsRUFBVyxHQUFHO0VBQy9DLENBQUM7RUFDRC\
              xNQUFNTyxHQUFBLElBQU12TixFQUFBLEdBQUE0cEIsT0FBQSxDQUFRcmMsR0FBQSx\
              LQUFSLE9BQUF2TixFQUFBLEdBQWU7RUFDdkIsRUFBRWlILElBQUEsRUFBTSxXQUFX\
              NFIsTUFBQSxFQUFRLElBQUl4TSxNQUFBLEVBQVExSixNQUFBLEVBQVEsS0FBSyxFQ\
              UN4RDs7RUFDQSxRQUFRQSxNQUFBLENBQU8sQ0FBQztJQUNaLEtBQUs7SUFDTCxLQU\
              FLLElBQUs7UUFDTixNQUFNa25CLEVBQUEsR0FBS2xuQixNQUFBLENBQU91TixPQUF\
              BLENBQVEsSUFBSTtRQUM5QixNQUFNNFosSUFBQSxHQUFPbm5CLE1BQUEsQ0FBT2Es\
              U0FBQSxDQUFVLEdBQUdxbUIsRUFBRTtRQUNuQyxNQUFNclosSUFBQSxHQUFPN04sT\
              UFBQSxDQUFPYSxTQUFBLENBQVVxbUIsRUFBQSxHQUFLLENBQUMsSUFBSTtRQUN4Qy\
              xNQUFNM1gsS0FBQSxHQUFRO1FBQ1YsRUFBRWpMLElBQUEsRUFBTSx1QkFBdUI0Uix\
              NQUFBLEVBQVF4TSxNQUFBLEVBQVExSixNQUFBLEVBQVFtbkIsSUFBQSxDQUFLLEVB\
              Q2hFOztRQUNBLElBQUksQ0FBQ0Msa0JBQUEsQ0FBbUI3WCxLQUFBLEVBQU8zRSxHQ\
              UFHO1FBQzlCMkUsS0FBQSxDQUFNak8sSUFBQSxDQUFLLEVBQUVnRCxJQUFBLEVBQU\
              0sV0FBVzRSLE1BQUEsRUFBUSxJQUFJeE0sTUFBQSxFQUFRMUosTUFBQSxFQUFRLEt\
              BQUssQ0FBQztRQUNwRSxPQUFPLEVBQUVzRSxJQUFBLEVBQU0sZ0JBQWdCNFIsTUFB\
              QSxFQUFReE0sTUFBQSxFQUFRNkYsS0FBQSxFQUFPdlAsTUFBQSxFQUFRNk4sSUFBQ\
              SxDQUFLO01BQ3ZFO0lBQ0EsS0FBSztNQUNELE9BQU8sRUFBRXZKLElBQUEsRUFBTS\
              x3QkFBd0I0UixNQUFBLEVBQVF4TSxNQUFBLEVBQVExSixNQUFBLEVBQVE0SyxHQUF\
              BLENBQUk7SUFDdkUsS0FBSztNQUNELE9BQU8sRUFBRXRHLElBQUEsRUFBTSx3QkFB\
              d0I0UixNQUFBLEVBQVF4TSxNQUFBLEVBQVExSixNQUFBLEVBQVE0SyxHQUFBLENBQ\
              Uk7SUFDdkU7TUFDSSxPQUFPLEVBQUV0RyxJQUFBLEVBQU0sVUFBVTRSLE1BQUEsRU\
              FBUXhNLE1BQUEsRUFBUTFKLE1BQUEsRUFBUTRLLEdBQUEsQ0FBSTtFQUM3RDtBQUN\
              KO0FBaUJBLFNBQVNpYyxlQUFlaEksS0FBQSxFQUFPamlCLEtBQUEsRUFBT3FxQixP\
              QUFBLEdBQVUsQ0FBQyxHQUFHO0VBQ2hELElBQUksRUFBRUksUUFBQSxHQUFXLE9BQ\
              U8xaEIsV0FBQSxHQUFjLE9BQU9zSSxNQUFBLEdBQVMsT0FBTzNKLElBQUEsQ0FBSy\
              xJQUFJMmlCLE9BQUE7RUFDdEUsSUFBSXZkLE1BQUEsR0FBUyxZQUFZbVYsS0FBQSx\
              HQUFRQSxLQUFBLENBQU1uVixNQUFBLEdBQVM7RUFDaEQsSUFBSTJkLFFBQUEsSUFB\
              WSxPQUFPM2QsTUFBQSxLQUFXO0VBQzlCQSxNQUFBLElBQVU7RUFDZCxJQUFJLENBQ\
              UNwRixJQUFBO0VBQ0QsUUFBUXVhLEtBQUEsQ0FBTXZhLElBQUE7SUFDVixLQUFLO0\
              1BQ0RBLElBQUEsR0FBTztNQUNQO0lBQ0osS0FBSztNQUNEQSxJQUFBLEdBQU87TUF\
              DUDtJQUNKLEtBQUssZUFBZ0I7UUFDakIsTUFBTXNKLE1BQUEsR0FBU2lSLEtBQUEs\
              Q0FBTXRQLEtBQUEsQ0FBTSxDQUFDO1FBQzVCLElBQUkzQixNQUFBLENBQU90SixJQ\
              UFBLEtBQVM7UUFDaEIsTUFBTSxJQUFJekcsS0FBQSxDQUFNLDZCQUE2QjtRQUNqRH\
              lHLElBQUEsR0FBT3NKLE1BQUEsQ0FBTzVOLE1BQUEsQ0FBTyxDQUFDLE1BQU0sTUF\
              BTSxpQkFBaUI7UUFDbkQ7TUFDSjtJQUNBO01BQ0lzRSxJQUFBLEdBQU87RUFDZjtF\
              QUNKLE1BQU10RSxNQUFBLEdBQVNtTyxlQUFBLENBQWdCLEVBQUU3SixJQUFBLEVBQ\
              U0xSCxLQUFBLENBQU0sR0FBRztJQUM1QytJLFdBQUEsRUFBYUEsV0FBQSxJQUFlK0\
              QsTUFBQSxLQUFXO0lBQ3ZDQSxNQUFBLEVBQVFBLE1BQUEsS0FBVyxRQUFRQSxNQUF\
              BLEdBQVMsSUFBSSxJQUFJMEYsTUFBQSxDQUFPMUYsTUFBTSxJQUFJO0lBQzdEdUUs\
              TUFBQTtJQUNBeEksT0FBQSxFQUFTLEVBQUV1SCxVQUFBLEVBQVksTUFBTTNDLFNBQ\
              UEsRUFBVyxHQUFHO0VBQy9DLENBQUM7RUFDRCxRQUFRckssTUFBQSxDQUFPLENBQU\
              M7SUFDWixLQUFLO0lBQ0wsS0FBSztNQUNEc25CLG1CQUFBLENBQW9CekksS0FBQSx\
              FQUFPN2UsTUFBTTtNQUNqQztJQUNKLEtBQUs7TUFDRHVuQixrQkFBQSxDQUFtQjFJ\
              LEtBQUEsRUFBTzdlLE1BQUEsRUFBUSxzQkFBc0I7TUFDeEQ7SUFDSixLQUFLO01BQ\
              0R1bkIsa0JBQUEsQ0FBbUIxSSxLQUFBLEVBQU83ZSxNQUFBLEVBQVEsc0JBQXNCO0\
              1BQ3hEO0lBQ0o7TUFDSXVuQixrQkFBQSxDQUFtQjFJLEtBQUEsRUFBTzdlLE1BQUE\
              sRUFBUSxRQUFRO0VBQ2xEO0FBQ0o7QUFDQSxTQUFTc25CLG9CQUFvQnpJLEtBQUEs\
              RUFBTzdlLE1BQUEsRUFBUTtFQUN4QyxNQUFNa25CLEVBQUEsR0FBS2xuQixNQUFBL\
              ENBQU91TixPQUFBLENBQVEsSUFBSTtFQUM5QixNQUFNNFosSUFBQSxHQUFPbm5CLE\
              1BQUEsQ0FBT2EsU0FBQSxDQUFVLEdBQUdxbUIsRUFBRTtFQUNuQyxNQUFNclosSUF\
              BQSxHQUFPN04sTUFBQSxDQUFPYSxTQUFBLENBQVVxbUIsRUFBQSxHQUFLLENBQUMs\
              SUFBSTtFQUN4QyxJQUFJckksS0FBQSxDQUFNdmEsSUFBQSxLQUFTLGdCQUFnQjtJQ\
              UMvQixNQUFNc0osTUFBQSxHQUFTaVIsS0FBQSxDQUFNdFAsS0FBQSxDQUFNLENBQU\
              M7SUFDNUIsSUFBSTNCLE1BQUEsQ0FBT3RKLElBQUEsS0FBUztJQUNoQixNQUFNLEl\
              BQUl6RyxLQUFBLENBQU0sNkJBQTZCO0lBQ2pEK1AsTUFBQSxDQUFPNU4sTUFBQSxH\
              QUFTbW5CLElBQUE7SUFDaEJ0SSxLQUFBLENBQU03ZSxNQUFBLEdBQVM2TixJQUFBO\
              0VBQ25CLE9BQ0s7SUFDRCxNQUFNLEVBQUVxSSxNQUFBLENBQU8sSUFBSTJJLEtBQU\
              E7SUFDbkIsTUFBTW5WLE1BQUEsR0FBUyxZQUFZbVYsS0FBQSxHQUFRQSxLQUFBLEN\
              BQU1uVixNQUFBLEdBQVM7SUFDbEQsTUFBTTZGLEtBQUEsR0FBUTtJQUNWLEVBQUVq\
              TCxJQUFBLEVBQU0sdUJBQXVCNFIsTUFBQSxFQUFReE0sTUFBQSxFQUFRMUosTUFBQ\
              SxFQUFRbW5CLElBQUEsQ0FBSyxFQUNoRTs7SUFDQSxJQUFJLENBQUNDLGtCQUFBLE\
              NBQW1CN1gsS0FBQSxFQUFPLFNBQVNzUCxLQUFBLEdBQVFBLEtBQUEsQ0FBTWpVLEd\
              BQUEsR0FBTSxNQUFTO0lBQ2pFMkUsS0FBQSxDQUFNak8sSUFBQSxDQUFLLEVBQUVn\
              RCxJQUFBLEVBQU0sV0FBVzRSLE1BQUEsRUFBUSxJQUFJeE0sTUFBQSxFQUFRMUosT\
              UFBQSxFQUFRLEtBQUssQ0FBQztJQUNwRSxXQUFXakUsR0FBQSxJQUFPRixNQUFBLE\
              NBQU91RixJQUFBLENBQUt5ZCxLQUFLO0lBQy9CLElBQUk5aUIsR0FBQSxLQUFRLFV\
              BQVVBLEdBQUEsS0FBUTtJQUMxQixPQUFPOGlCLEtBQUEsQ0FBTTlpQixHQUFHO0lB\
              Q3hCRixNQUFBLENBQU9xQixNQUFBLENBQU8yaEIsS0FBQSxFQUFPLEVBQUV2YSxJQ\
              UFBLEVBQU0sZ0JBQWdCb0YsTUFBQSxFQUFRNkYsS0FBQSxFQUFPdlAsTUFBQSxFQU\
              FRNk4sSUFBQSxDQUFLLENBQUM7RUFDOUU7QUFDSjtBQUVBLFNBQVN1WixtQkFBbUI\
              3WCxLQUFBLEVBQU8zRSxHQUFBLEVBQUs7RUFDcEMsSUFBSUEsR0FBQTtFQUNBLFdB\
              QVdxVSxFQUFBLElBQU1yVSxHQUFBO0VBQ2IsUUFBUXFVLEVBQUEsQ0FBRzNhLElBQ\
              UE7SUFDUCxLQUFLO0lBQ0wsS0FBSztNQUNEaUwsS0FBQSxDQUFNak8sSUFBQSxDQU\
              FLMmQsRUFBRTtNQUNiO0lBQ0osS0FBSztNQUNEMVAsS0FBQSxDQUFNak8sSUFBQSx\
              DQUFLMmQsRUFBRTtNQUNiLE9BQU87RUFDZjtFQUNSLE9BQU87QUFDWDtBQUNBLFNB\
              QVNzSSxtQkFBbUIxSSxLQUFBLEVBQU83ZSxNQUFBLEVBQVFzRSxJQUFBLEVBQU07R\
              UFDN0MsUUFBUXVhLEtBQUEsQ0FBTXZhLElBQUE7SUFDVixLQUFLO0lBQ0wsS0FBSz\
              tJQUNMLEtBQUs7TUFDRHVhLEtBQUEsQ0FBTXZhLElBQUEsR0FBT0EsSUFBQTtNQUN\
              idWEsS0FBQSxDQUFNN2UsTUFBQSxHQUFTQSxNQUFBO01BQ2Y7SUFDSixLQUFLLGVB\
              QWdCO1FBQ2pCLE1BQU00SyxHQUFBLEdBQU1pVSxLQUFBLENBQU10UCxLQUFBLENBQ\
              U1yUCxLQUFBLENBQU0sQ0FBQztRQUMvQixJQUFJc25CLEVBQUEsR0FBS3huQixNQU\
              FBLENBQU96RCxNQUFBO1FBQ2hCLElBQUlzaUIsS0FBQSxDQUFNdFAsS0FBQSxDQUF\
              NLENBQUMsRUFBRWpMLElBQUEsS0FBUztRQUN4QmtqQixFQUFBLElBQU0zSSxLQUFB\
              LENBQU10UCxLQUFBLENBQU0sQ0FBQyxFQUFFdlAsTUFBQSxDQUFPekQsTUFBQTtRQ\
              UNoQyxXQUFXa3JCLEdBQUEsSUFBTzdjLEdBQUE7UUFDZDZjLEdBQUEsQ0FBSXZSLE\
              1BQUEsSUFBVXNSLEVBQUE7UUFDbEIsT0FBTzNJLEtBQUEsQ0FBTXRQLEtBQUE7UUF\
              DYjFULE1BQUEsQ0FBT3FCLE1BQUEsQ0FBTzJoQixLQUFBLEVBQU8sRUFBRXZhLElB\
              QUEsRUFBTXRFLE1BQUEsRUFBUTRLLEdBQUEsQ0FBSSxDQUFDO1FBQzFDO01BQ0o7S\
              UFDQSxLQUFLO0lBQ0wsS0FBSyxZQUFhO1FBQ2QsTUFBTXNMLE1BQUEsR0FBUzJJLE\
              tBQUEsQ0FBTTNJLE1BQUEsR0FBU2xXLE1BQUEsQ0FBT3pELE1BQUE7UUFDckMsTUF\
              BTW1yQixFQUFBLEdBQUssRUFBRXBqQixJQUFBLEVBQU0sV0FBVzRSLE1BQUEsRUFB\
              UXhNLE1BQUEsRUFBUW1WLEtBQUEsQ0FBTW5WLE1BQUEsRUFBUTFKLE1BQUEsRUFBU\
              SxLQUFLO1FBQ3pFLE9BQU82ZSxLQUFBLENBQU12aUIsS0FBQTtRQUNiVCxNQUFBLE\
              NBQU9xQixNQUFBLENBQU8yaEIsS0FBQSxFQUFPLEVBQUV2YSxJQUFBLEVBQU10RSx\
              NQUFBLEVBQVE0SyxHQUFBLEVBQUssQ0FBQzhjLEVBQUUsRUFBRSxDQUFDO1FBQ2hE\
              O01BQ0o7SUFDQSxRQUFTO1FBQ0wsTUFBTWhlLE1BQUEsR0FBUyxZQUFZbVYsS0FBQ\
              SxHQUFRQSxLQUFBLENBQU1uVixNQUFBLEdBQVM7UUFDbEQsTUFBTWtCLEdBQUEsR0\
              FBTSxTQUFTaVUsS0FBQSxJQUFTOWIsS0FBQSxDQUFNQyxPQUFBLENBQVE2YixLQUF\
              BLENBQU1qVSxHQUFHLElBQy9DaVUsS0FBQSxDQUFNalUsR0FBQSxDQUFJbEUsTUFB\
              QSxDQUFPLENBQUF1WSxFQUFBLEtBQU1BLEVBQUEsQ0FBRzNhLElBQUEsS0FBUyxXQ\
              UNqQzJhLEVBQUEsQ0FBRzNhLElBQUEsS0FBUyxhQUNaMmEsRUFBQSxDQUFHM2EsSU\
              FBQSxLQUFTLFNBQVMsSUFDdkIsRUFBQztRQUNQLFdBQVd2SSxHQUFBLElBQU9GLE1\
              BQUEsQ0FBT3VGLElBQUEsQ0FBS3lkLEtBQUs7UUFDL0IsSUFBSTlpQixHQUFBLEtB\
              QVEsVUFBVUEsR0FBQSxLQUFRO1FBQzFCLE9BQU84aUIsS0FBQSxDQUFNOWlCLEdBQ\
              Uc7UUFDeEJGLE1BQUEsQ0FBT3FCLE1BQUEsQ0FBTzJoQixLQUFBLEVBQU8sRUFBRX\
              ZhLElBQUEsRUFBTW9GLE1BQUEsRUFBUTFKLE1BQUEsRUFBUTRLLEdBQUEsQ0FBSSx\
              DQUFDO01BQ3REO0VBQ0o7QUFDSjs7O0FDN01BLElBQU1rYyxVQUFBLEdBQVkxc0Is\
              Q0FBQ3V0QixHQUFBLEtBQVEsVUFBVUEsR0FBQSxHQUFNQyxjQUFBLENBQWVELEdBQ\
              UcsSUFBSUUsYUFBQSxDQUFjRixHQUFHO0FBQ2xGLFNBQVNDLGVBQWUvSSxLQUFBLE\
              VBQU87RUFDM0IsUUFBUUEsS0FBQSxDQUFNdmEsSUFBQTtJQUNWLEtBQUssZUFBZ0I\
              7UUFDakIsSUFBSXZGLEdBQUEsR0FBTTtRQUNWLFdBQVcwb0IsR0FBQSxJQUFPNUks\
              S0FBQSxDQUFNdFAsS0FBQTtRQUNwQnhRLEdBQUEsSUFBTzZvQixjQUFBLENBQWVIL\
              EdBQUc7UUFDN0IsT0FBTzFvQixHQUFBLEdBQU04ZixLQUFBLENBQU03ZSxNQUFBO0\
              1BQ3ZCO0lBQ0EsS0FBSztJQUNMLEtBQUssWUFBYTtRQUNkLElBQUlqQixHQUFBLEd\
              BQU07UUFDVixXQUFXNkcsSUFBQSxJQUFRaVosS0FBQSxDQUFNdmlCLEtBQUE7UUFD\
              ckJ5QyxHQUFBLElBQU84b0IsYUFBQSxDQUFjamlCLElBQUk7UUFDN0IsT0FBTzdHL\
              EdBQUE7TUFDWDtJQUNBLEtBQUssa0JBQW1CO1FBQ3BCLElBQUlBLEdBQUEsR0FBTT\
              hmLEtBQUEsQ0FBTXZULEtBQUEsQ0FBTXRMLE1BQUE7UUFDdEIsV0FBVzRGLElBQUE\
              sSUFBUWlaLEtBQUEsQ0FBTXZpQixLQUFBO1FBQ3JCeUMsR0FBQSxJQUFPOG9CLGFB\
              QUEsQ0FBY2ppQixJQUFJO1FBQzdCLFdBQVdxWixFQUFBLElBQU1KLEtBQUEsQ0FBT\
              WpVLEdBQUE7UUFDbkI3TCxHQUFBLElBQU9rZ0IsRUFBQSxDQUFHamYsTUFBQTtRQU\
              NkLE9BQU9qQixHQUFBO01BQ1g7SUFDQSxLQUFLLFdBQVk7UUFDYixJQUFJQSxHQUF\
              BLEdBQU04b0IsYUFBQSxDQUFjaEosS0FBSztRQUM3QixJQUFJQSxLQUFBLENBQU1q\
              VSxHQUFBO1FBQ04sV0FBV3FVLEVBQUEsSUFBTUosS0FBQSxDQUFNalUsR0FBQTtRQ\
              UNuQjdMLEdBQUEsSUFBT2tnQixFQUFBLENBQUdqZixNQUFBO1FBQ2xCLE9BQU9qQi\
              xHQUFBO01BQ1g7SUFDQSxRQUFTO1FBQ0wsSUFBSUEsR0FBQSxHQUFNOGYsS0FBQSx\
              DQUFNN2UsTUFBQTtRQUNoQixJQUFJLFNBQVM2ZSxLQUFBLElBQVNBLEtBQUEsQ0FB\
              TWpVLEdBQUE7UUFDeEIsV0FBV3FVLEVBQUEsSUFBTUosS0FBQSxDQUFNalUsR0FBQ\
              TtRQUNuQjdMLEdBQUEsSUFBT2tnQixFQUFBLENBQUdqZixNQUFBO1FBQ2xCLE9BQU\
              9qQixHQUFBO01BQ1g7RUFDSjtBQUNKO0FBQ0EsU0FBUzhvQixjQUFjLEVBQUV2Yyx\
              LQUFBLEVBQU92UCxHQUFBLEVBQUttakIsR0FBQSxFQUFLdGlCLEtBQUEsQ0FBTSxH\
              QUFHO0VBQy9DLElBQUltQyxHQUFBLEdBQU07RUFDVixXQUFXa2dCLEVBQUEsSUFBT\
              TNULEtBQUE7RUFDYnZNLEdBQUEsSUFBT2tnQixFQUFBLENBQUdqZixNQUFBO0VBQ2\
              QsSUFBSWpFLEdBQUE7RUFDQWdELEdBQUEsSUFBTzZvQixjQUFBLENBQWU3ckIsR0F\
              BRztFQUM3QixJQUFJbWpCLEdBQUE7RUFDQSxXQUFXRCxFQUFBLElBQU1DLEdBQUE7\
              RUFDYm5nQixHQUFBLElBQU9rZ0IsRUFBQSxDQUFHamYsTUFBQTtFQUNsQixJQUFJc\
              EQsS0FBQTtFQUNBbUMsR0FBQSxJQUFPNm9CLGNBQUEsQ0FBZWhyQixLQUFLO0VBQy\
              9CLE9BQU9tQyxHQUFBO0FBQ1g7OztBQzFEQSxJQUFNK29CLE1BQUEsR0FBUXJ0Qix\
              NQUFBLENBQU8sYUFBYTtBQUNsQyxJQUFNc3RCLEtBQUEsR0FBT3R0QixNQUFBLENB\
              QU8sZUFBZTtBQUNuQyxJQUFNdXRCLE9BQUEsR0FBU3Z0QixNQUFBLENBQU8sYUFBY\
              TtBQTZCbkMsU0FBU3VzQixPQUFNVyxHQUFBLEVBQUtwc0IsT0FBQSxFQUFTO0VBQ3\
              pCLElBQUksVUFBVW9zQixHQUFBLElBQU9BLEdBQUEsQ0FBSXJqQixJQUFBLEtBQVM\
              7RUFDOUJxakIsR0FBQSxHQUFNLEVBQUVyYyxLQUFBLEVBQU9xYyxHQUFBLENBQUly\
              YyxLQUFBLEVBQU8xTyxLQUFBLEVBQU8rcUIsR0FBQSxDQUFJL3FCLEtBQUEsQ0FBT\
              TtFQUMvQ3FyQixNQUFBLENBQU9wc0IsTUFBQSxDQUFPQyxNQUFBLENBQU8sRUFBRS\
              xHQUFHNnJCLEdBQUEsRUFBS3BzQixPQUFPO0FBQzFDO0FBS0F5ckIsTUFBQSxDQUF\
              NNXJCLEtBQUEsR0FBUTBzQixNQUFBO0FBRWRkLE1BQUEsQ0FBTTNyQixJQUFBLEdB\
              QU8wc0IsS0FBQTtBQUViZixNQUFBLENBQU0xckIsTUFBQSxHQUFTMHNCLE9BQUE7Q\
              UFFZmhCLE1BQUEsQ0FBTWtCLFVBQUEsR0FBYSxDQUFDUCxHQUFBLEVBQUszckIsSU\
              FBQSxLQUFTO0VBQzlCLElBQUk0SixJQUFBLEdBQU8raEIsR0FBQTtFQUNYLFdBQVc\
              sQ0FBQ1EsS0FBQSxFQUFPQyxLQUFLLEtBQUtwc0IsSUFBQSxFQUFNO0lBQy9CLE1B\
              QU15ckIsR0FBQSxHQUFNN2hCLElBQUEsb0JBQUFBLElBQUEsQ0FBT3VpQixLQUFBO\
              0lBQ25CLElBQUlWLEdBQUEsSUFBTyxXQUFXQSxHQUFBLEVBQUs7TUFDdkI3aEIsSU\
              FBQSxHQUFPNmhCLEdBQUEsQ0FBSW5yQixLQUFBLENBQU04ckIsS0FBSztJQUMxQjt\
              JQUVJLE9BQU87RUFDZjtFQUNBLE9BQU94aUIsSUFBQTtBQUNYO0FBTUFvaEIsTUFB\
              QSxDQUFNcUIsZ0JBQUEsR0FBbUIsQ0FBQ1YsR0FBQSxFQUFLM3JCLElBQUEsS0FBU\
              ztFQUNwQyxNQUFNMkIsTUFBQSxHQUFTcXBCLE1BQUEsQ0FBTWtCLFVBQUEsQ0FBV1\
              AsR0FBQSxFQUFLM3JCLElBQUEsQ0FBS2tFLEtBQUEsQ0FBTSxHQUFHLEVBQUUsQ0F\
              BQztFQUN0RCxNQUFNaW9CLEtBQUEsR0FBUW5zQixJQUFBLENBQUtBLElBQUEsQ0FB\
              S08sTUFBQSxHQUFTLENBQUMsRUFBRSxDQUFDO0VBQ3JDLE1BQU0wa0IsSUFBQSxHQ\
              UFPdGpCLE1BQUEsb0JBQUFBLE1BQUEsQ0FBU3dxQixLQUFBO0VBQ3RCLElBQUlsSC\
              xJQUFBLElBQVEsV0FBV0EsSUFBQTtFQUNuQixPQUFPQSxJQUFBO0VBQ1gsTUFBTSx\
              JQUFJcGpCLEtBQUEsQ0FBTSw2QkFBNkI7QUFDakQ7QUFDQSxTQUFTb3FCLE9BQU9q\
              c0IsSUFBQSxFQUFNNEosSUFBQSxFQUFNckssT0FBQSxFQUFTO0VBQ2pDLElBQUlVL\
              ElBQUEsR0FBT1YsT0FBQSxDQUFRcUssSUFBQSxFQUFNNUosSUFBSTtFQUM3QixJQU\
              FJLE9BQU9DLElBQUEsS0FBUztFQUNoQixPQUFPQSxJQUFBO0VBQ1gsV0FBV2tzQix\
              LQUFBLElBQVMsQ0FBQyxPQUFPLE9BQU8sR0FBRztJQUNsQyxNQUFNdEosS0FBQSxH\
              QUFRalosSUFBQSxDQUFLdWlCLEtBQUs7SUFDeEIsSUFBSXRKLEtBQUEsSUFBUyxXQ\
              UFXQSxLQUFBLEVBQU87TUFDM0IsU0FBU3hpQixDQUFBLEdBQUksR0FBR0EsQ0FBQS\
              xHQUFJd2lCLEtBQUEsQ0FBTXZpQixLQUFBLENBQU1DLE1BQUEsRUFBUSxFQUFFRix\
              DQUFBLEVBQUc7UUFDekMsTUFBTUcsRUFBQSxHQUFLeXJCLE1BQUEsQ0FBT3BzQixN\
              QUFBLENBQU9DLE1BQUEsQ0FBT0UsSUFBQSxDQUFLSSxNQUFBLENBQU8sQ0FBQyxDQ\
              UFDK3JCLEtBQUEsRUFBTzlyQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUd3aUIsS0\
              FBQSxDQUFNdmlCLEtBQUEsQ0FBTUQsQ0FBQyxHQUFHZCxPQUFPO1FBQ25GLElBQUk\
              sT0FBT2lCLEVBQUEsS0FBTztRQUNkSCxDQUFBLEdBQUlHLEVBQUEsR0FBSztRQUFB\
              LElBQ0pBLEVBQUEsS0FBT3NyQixNQUFBO1FBQ1osT0FBT0EsTUFBQTtRQUFBLElBQ\
              0Z0ckIsRUFBQSxLQUFPd3JCLE9BQUEsRUFBUTtVQUNwQm5KLEtBQUEsQ0FBTXZpQi\
              xLQUFBLENBQU1HLE1BQUEsQ0FBT0osQ0FBQSxFQUFHLENBQUM7VUFDdkJBLENBQUE\
              sSUFBSztRQUNUO01BQ0o7TUFDQSxJQUFJLE9BQU9KLElBQUEsS0FBUyxjQUFja3NC\
              LEtBQUEsS0FBVTtNQUN4Q2xzQixJQUFBLEdBQU9BLElBQUEsQ0FBSzJKLElBQUEsR\
              UFBTTVKLElBQUk7SUFDOUI7RUFDSjtFQUNBLE9BQU8sT0FBT0MsSUFBQSxLQUFTLG\
              FBQWFBLElBQUEsQ0FBSzJKLElBQUEsRUFBTTVKLElBQUksSUFBSUMsSUFBQTtBQUM\
              zRDs7O0FIekZBLElBQU1tcUIsR0FBQSxHQUFNO0FBRVosSUFBTUMsUUFBQSxHQUFX\
              O0FBRWpCLElBQU1DLFFBQUEsR0FBVztBQUVqQixJQUFNQyxPQUFBLEdBQVM7QUFFZ\
              ixJQUFNRSxhQUFBLEdBQWUvc0IsQ0FBQ21sQixLQUFBLEtBQVUsQ0FBQyxDQUFDQS\
              xLQUFBLElBQVMsV0FBV0EsS0FBQTtBQUV0RCxJQUFNNkgsU0FBQSxHQUFXM3NCLEN\
              BQUM4a0IsS0FBQSxLQUFVLENBQUMsQ0FBQ0EsS0FBQSxLQUN6QkEsS0FBQSxDQUFN\
              dmEsSUFBQSxLQUFTLFlBQ1p1YSxLQUFBLENBQU12YSxJQUFBLEtBQVMsMEJBQ2Z1Y\
              SxLQUFBLENBQU12YSxJQUFBLEtBQVMsMEJBQ2Z1YSxLQUFBLENBQU12YSxJQUFBLE\
              tBQVM7QUFHdkIsU0FBU3FpQixZQUFZOUgsS0FBQSxFQUFPO0VBQ3hCLFFBQVFBLEt\
              BQUE7SUFDSixLQUFLdUgsR0FBQTtNQUNELE9BQU87SUFDWCxLQUFLQyxRQUFBO01B\
              Q0QsT0FBTztJQUNYLEtBQUtDLFFBQUE7TUFDRCxPQUFPO0lBQ1gsS0FBS0MsT0FBQ\
              TtNQUNELE9BQU87SUFDWDtNQUNJLE9BQU83a0IsSUFBQSxDQUFLdEgsU0FBQSxDQU\
              FVeWtCLEtBQUs7RUFDbkM7QUFDSjtBQUVBLFNBQVNrSSxVQUFVL21CLE1BQUEsRUF\
              BUTtFQUN2QixRQUFRQSxNQUFBO0lBQ0osS0FBS29tQixHQUFBO01BQ0QsT0FBTztJ\
              QUNYLEtBQUtDLFFBQUE7TUFDRCxPQUFPO0lBQ1gsS0FBS0MsUUFBQTtNQUNELE9BQ\
              U87SUFDWCxLQUFLQyxPQUFBO01BQ0QsT0FBTztJQUNYLEtBQUs7TUFDRCxPQUFPO0\
              lBQ1gsS0FBSztNQUNELE9BQU87SUFDWCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs\
              7TUFDRCxPQUFPO0lBQ1gsS0FBSztNQUNELE9BQU87SUFDWCxLQUFLO01BQ0QsT0FB\
              TztJQUNYLEtBQUs7TUFDRCxPQUFPO0lBQ1gsS0FBSztNQUNELE9BQU87SUFDWCxLQ\
              UFLO01BQ0QsT0FBTztJQUNYLEtBQUs7TUFDRCxPQUFPO0lBQ1gsS0FBSztNQUNELE\
              9BQU87SUFDWCxLQUFLO01BQ0QsT0FBTztFQUNmO0VBQ0EsUUFBUXZtQixNQUFBLEN\
              BQU8sQ0FBQztJQUNaLEtBQUs7SUFDTCxLQUFLO01BQ0QsT0FBTztJQUNYLEtBQUs7\
              TUFDRCxPQUFPO0lBQ1gsS0FBSztNQUNELE9BQU87SUFDWCxLQUFLO01BQ0QsT0FBT\
              ztJQUNYLEtBQUs7TUFDRCxPQUFPO0lBQ1gsS0FBSztNQUNELE9BQU87SUFDWCxLQU\
              FLO01BQ0QsT0FBTztJQUNYLEtBQUs7TUFDRCxPQUFPO0lBQ1gsS0FBSztJQUNMLEt\
              BQUs7TUFDRCxPQUFPO0VBQ2Y7RUFDQSxPQUFPO0FBQ1g7OztBSTFCQSxTQUFTc29C\
              LFFBQVFwcUIsRUFBQSxFQUFJO0VBQ2pCLFFBQVFBLEVBQUE7SUFDSixLQUFLO0lBQ\
              0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztNQUNELE9BQU87SU\
              FDWDtNQUNJLE9BQU87RUFDZjtBQUNKO0FBQ0EsSUFBTXFxQixTQUFBLEdBQVksSUF\
              BSXhtQixHQUFBLENBQUksd0JBQXdCO0FBQ2xELElBQU15bUIsUUFBQSxHQUFXLElB\
              QUl6bUIsR0FBQSxDQUFJLG1GQUFtRjtBQUM1RyxJQUFNMG1CLGtCQUFBLEdBQXFCL\
              ElBQUkxbUIsR0FBQSxDQUFJLE9BQU87QUFDMUMsSUFBTTJtQixrQkFBQSxHQUFxQi\
              xJQUFJM21CLEdBQUEsQ0FBSSxhQUFjO0FBQ2pELElBQU00bUIsZUFBQSxHQUFrQkE\
              sQ0FBQ3pxQixFQUFBLEtBQU8sQ0FBQ0EsRUFBQSxJQUFNd3FCLGtCQUFBLENBQW1C\
              eG1CLEdBQUEsQ0FBSWhFLEVBQUU7QUFnQmhFLElBQU1wRixLQUFBLEdBQU4sTUFBW\
              TtFQUNSdUYsWUFBQSxFQUFjO0lBS1YsS0FBS3VxQixLQUFBLEdBQVE7SUFNYixLQU\
              FLQyxpQkFBQSxHQUFvQjtJQU16QixLQUFLQyxlQUFBLEdBQWtCO0lBRXZCLEtBQUs\
              xUixNQUFBLEdBQVM7SUFLZCxLQUFLMlIsT0FBQSxHQUFVO0lBRWYsS0FBS0MsU0FB\
              QSxHQUFZO0lBS2pCLEtBQUtDLFVBQUEsR0FBYTtJQUVsQixLQUFLQyxXQUFBLEdBQ\
              WM7SUFFbkIsS0FBS0MsVUFBQSxHQUFhO0lBRWxCLEtBQUtoaEIsSUFBQSxHQUFPO0\
              lBRVosS0FBS29WLEdBQUEsR0FBTTtFQUNmO0VBQUE7QUFBQTtBQUFBO0FBQUE7QUF\
              BQTtBQUFBO0VBT0EsQ0FBQzZMLElBQUlwcEIsTUFBQSxFQUFRcXBCLFVBQUEsR0FB\
              YSxPQUFPO0lBckpyQyxJQUFBaHNCLEVBQUE7SUFzSlEsSUFBSTJDLE1BQUEsRUFBU\
              TtNQUNSLElBQUksT0FBT0EsTUFBQSxLQUFXO01BQ2xCLE1BQU04RSxTQUFBLENBQV\
              Usd0JBQXdCO01BQzVDLEtBQUtzUyxNQUFBLEdBQVMsS0FBS0EsTUFBQSxHQUFTLEt\
              BQUtBLE1BQUEsR0FBU3BYLE1BQUEsR0FBU0EsTUFBQTtNQUNuRCxLQUFLbXBCLFVB\
              QUEsR0FBYTtJQUN0QjtJQUNBLEtBQUtQLEtBQUEsR0FBUSxDQUFDUyxVQUFBO0lBQ\
              2QsSUFBSWxoQixJQUFBLElBQU85SyxFQUFBLFFBQUs4SyxJQUFBLEtBQUwsT0FBQT\
              lLLEVBQUEsR0FBYTtJQUN4QixPQUFPOEssSUFBQSxLQUFTa2hCLFVBQUEsSUFBYyx\
              LQUFLQyxRQUFBLENBQVMsQ0FBQztJQUN6Q25oQixJQUFBLEdBQU8sT0FBQWdlLFdB\
              QUEsQ0FBTyxLQUFLb0QsU0FBQSxDQUFVcGhCLElBQUk7RUFDekM7RUFDQXFoQixVQ\
              UFBLEVBQVk7SUFDUixJQUFJbnRCLENBQUEsR0FBSSxLQUFLa2hCLEdBQUE7SUFDYi\
              xJQUFJcmYsRUFBQSxHQUFLLEtBQUtrWixNQUFBLENBQU8vYSxDQUFDO0lBQ3RCLE9\
              BQU82QixFQUFBLEtBQU8sT0FBT0EsRUFBQSxLQUFPO0lBQ3hCQSxFQUFBLEdBQUss\
              S0FBS2taLE1BQUEsQ0FBTyxFQUFFL2EsQ0FBQztJQUN4QixJQUFJLENBQUM2QixFQ\
              UFBLElBQU1BLEVBQUEsS0FBTyxPQUFPQSxFQUFBLEtBQU87SUFDNUIsT0FBTztJQU\
              NYLElBQUlBLEVBQUEsS0FBTztJQUNQLE9BQU8sS0FBS2taLE1BQUEsQ0FBTy9hLEN\
              BQUEsR0FBSSxDQUFDLE1BQU07SUFDbEMsT0FBTztFQUNYO0VBQ0FvdEIsT0FBT3hn\
              QixDQUFBLEVBQUc7SUFDTixPQUFPLEtBQUttTyxNQUFBLENBQU8sS0FBS21HLEdBQ\
              UEsR0FBTXRVLENBQUM7RUFDbkM7RUFDQXlnQixlQUFleFQsTUFBQSxFQUFRO0lBQ2\
              5CLElBQUloWSxFQUFBLEdBQUssS0FBS2taLE1BQUEsQ0FBT2xCLE1BQU07SUFDM0I\
              sSUFBSSxLQUFLK1MsVUFBQSxHQUFhLEdBQUc7TUFDckIsSUFBSXZmLE1BQUEsR0FB\
              UztNQUNiLE9BQU94TCxFQUFBLEtBQU87TUFDVkEsRUFBQSxHQUFLLEtBQUtrWixNQ\
              UFBLENBQU8sRUFBRTFOLE1BQUEsR0FBU3dNLE1BQU07TUFDdEMsSUFBSWhZLEVBQU\
              EsS0FBTyxNQUFNO1FBQ2IsTUFBTWlLLElBQUEsR0FBTyxLQUFLaVAsTUFBQSxDQUF\
              PMU4sTUFBQSxHQUFTd00sTUFBQSxHQUFTLENBQUM7UUFDNUMsSUFBSS9OLElBQUEs\
              S0FBUyxRQUFTLENBQUNBLElBQUEsSUFBUSxDQUFDLEtBQUt5Z0IsS0FBQTtRQUNqQ\
              yxPQUFPMVMsTUFBQSxHQUFTeE0sTUFBQSxHQUFTO01BQ2pDO01BQ0EsT0FBT3hMLE\
              VBQUEsS0FBTyxRQUFRd0wsTUFBQSxJQUFVLEtBQUt1ZixVQUFBLElBQWUsQ0FBQy9\
              xQixFQUFBLElBQU0sQ0FBQyxLQUFLMHFCLEtBQUEsR0FDM0QxUyxNQUFBLEdBQVN4\
              TSxNQUFBLEdBQ1Q7SUFDVjtJQUNBLElBQUl4TCxFQUFBLEtBQU8sT0FBT0EsRUFBQ\
              SxLQUFPLEtBQUs7TUFDMUIsTUFBTXlyQixFQUFBLEdBQUssS0FBS3ZTLE1BQUEsQ0\
              FBT2hMLE1BQUEsQ0FBTzhKLE1BQUEsRUFBUSxDQUFDO01BQ3ZDLEtBQUt5VCxFQUF\
              BLEtBQU8sU0FBU0EsRUFBQSxLQUFPLFVBQVVyQixPQUFBLENBQVEsS0FBS2xSLE1B\
              QUEsQ0FBT2xCLE1BQUEsR0FBUyxDQUFDLENBQUM7TUFDakUsT0FBTztJQUNmO0lBQ\
              0EsT0FBT0EsTUFBQTtFQUNYO0VBQ0EwVCxRQUFBLEVBQVU7SUFDTixJQUFJaGYsR0\
              FBQSxHQUFNLEtBQUt1ZSxVQUFBO0lBQ2YsSUFBSSxPQUFPdmUsR0FBQSxLQUFRLFl\
              BQWFBLEdBQUEsS0FBUSxNQUFNQSxHQUFBLEdBQU0sS0FBSzJTLEdBQUEsRUFBTTtN\
              QUMzRDNTLEdBQUEsR0FBTSxLQUFLd00sTUFBQSxDQUFPN0osT0FBQSxDQUFRLE1BQ\
              U0sS0FBS2dRLEdBQUc7TUFDeEMsS0FBSzRMLFVBQUEsR0FBYXZlLEdBQUE7SUFDdE\
              I7SUFDQSxJQUFJQSxHQUFBLEtBQVE7SUFDUixPQUFPLEtBQUtnZSxLQUFBLEdBQVE\
              sS0FBS3hSLE1BQUEsQ0FBT3ZXLFNBQUEsQ0FBVSxLQUFLMGMsR0FBRyxJQUFJO0lB\
              QzFELElBQUksS0FBS25HLE1BQUEsQ0FBT3hNLEdBQUEsR0FBTSxDQUFDLE1BQU07S\
              UFDekJBLEdBQUEsSUFBTztJQUNYLE9BQU8sS0FBS3dNLE1BQUEsQ0FBT3ZXLFNBQU\
              EsQ0FBVSxLQUFLMGMsR0FBQSxFQUFLM1MsR0FBRztFQUM5QztFQUNBMGUsU0FBU3J\
              nQixDQUFBLEVBQUc7SUFDUixPQUFPLEtBQUtzVSxHQUFBLEdBQU10VSxDQUFBLElB\
              QUssS0FBS21PLE1BQUEsQ0FBTzdhLE1BQUE7RUFDdkM7RUFDQXN0QixRQUFRQyxLQ\
              UFBLEVBQU87SUFDWCxLQUFLMVMsTUFBQSxHQUFTLEtBQUtBLE1BQUEsQ0FBT3ZXLF\
              NBQUEsQ0FBVSxLQUFLMGMsR0FBRztJQUM1QyxLQUFLQSxHQUFBLEdBQU07SUFDWCx\
              LQUFLNEwsVUFBQSxHQUFhO0lBQ2xCLEtBQUtoaEIsSUFBQSxHQUFPMmhCLEtBQUE7\
              SUFDWixPQUFPO0VBQ1g7RUFDQUMsS0FBSzlnQixDQUFBLEVBQUc7SUFDSixPQUFPL\
              EtBQUttTyxNQUFBLENBQU9oTCxNQUFBLENBQU8sS0FBS21SLEdBQUEsRUFBS3RVLE\
              NBQUM7RUFDekM7RUFDQSxDQUFDc2dCLFVBQVVwaEIsSUFBQSxFQUFNO0lBQ2IsUUF\
              BUUEsSUFBQTtNQUNKLEtBQUs7UUFDRCxPQUFPLE9BQUFnZSxXQUFBLENBQU8sS0FB\
              SzZELFdBQUEsQ0FBWTtNQUNuQyxLQUFLO1FBQ0QsT0FBTyxPQUFBN0QsV0FBQSxDQ\
              UFPLEtBQUs4RCxjQUFBLENBQWU7TUFDdEMsS0FBSztRQUNELE9BQU8sT0FBQTlELF\
              dBQUEsQ0FBTyxLQUFLK0QsZUFBQSxDQUFnQjtNQUN2QyxLQUFLO1FBQ0QsT0FBTyx\
              PQUFBL0QsV0FBQSxDQUFPLEtBQUtoc0IsYUFBQSxDQUFjO01BQ3JDLEtBQUs7UUFD\
              RCxPQUFPLE9BQUFnc0IsV0FBQSxDQUFPLEtBQUtnRSxtQkFBQSxDQUFvQjtNQUMzQ\
              yxLQUFLO1FBQ0QsT0FBTyxPQUFBaEUsV0FBQSxDQUFPLEtBQUtpRSxpQkFBQSxDQU\
              FrQjtNQUN6QyxLQUFLO1FBQ0QsT0FBTyxPQUFBakUsV0FBQSxDQUFPLEtBQUtrRSx\
              nQkFBQSxDQUFpQjtNQUN4QyxLQUFLO1FBQ0QsT0FBTyxPQUFBbEUsV0FBQSxDQUFP\
              LEtBQUttRSxnQkFBQSxDQUFpQjtJQUM1QztFQUNKO0VBQ0EsQ0FBQ04sWUFBQSxFQ\
              UFjO0lBQ1gsSUFBSTVxQixJQUFBLEdBQU8sS0FBS3dxQixPQUFBLENBQVE7SUFDeE\
              IsSUFBSXhxQixJQUFBLEtBQVM7SUFDVCxPQUFPLEtBQUt5cUIsT0FBQSxDQUFRLFF\
              BQVE7SUFDaEMsSUFBSXpxQixJQUFBLENBQUssQ0FBQyxNQUFNZ25CLEdBQUEsRUFB\
              SztNQUNqQixPQUFBRCxXQUFBLENBQU8sS0FBS29FLFNBQUEsQ0FBVSxDQUFDO01BQ\
              3ZCbnJCLElBQUEsR0FBT0EsSUFBQSxDQUFLeUIsU0FBQSxDQUFVLENBQUM7SUFDM0\
              I7SUFDQSxJQUFJekIsSUFBQSxDQUFLLENBQUMsTUFBTSxLQUFLO01BQ2pCLElBQUl\
              vckIsTUFBQSxHQUFTcHJCLElBQUEsQ0FBSzdDLE1BQUE7TUFDbEIsSUFBSWlVLEVB\
              QUEsR0FBS3BSLElBQUEsQ0FBS21PLE9BQUEsQ0FBUSxHQUFHO01BQ3pCLE9BQU9pR\
              CxFQUFBLEtBQU8sSUFBSTtRQUNkLE1BQU10UyxFQUFBLEdBQUtrQixJQUFBLENBQU\
              tvUixFQUFBLEdBQUssQ0FBQztRQUN0QixJQUFJdFMsRUFBQSxLQUFPLE9BQU9BLEV\
              BQUEsS0FBTyxLQUFNO1VBQzNCc3NCLE1BQUEsR0FBU2hhLEVBQUEsR0FBSztVQUNk\
              O1FBQ0osT0FDSztVQUNEQSxFQUFBLEdBQUtwUixJQUFBLENBQUttTyxPQUFBLENBQ\
              VEsS0FBS2lELEVBQUEsR0FBSyxDQUFDO1FBQ2pDO01BQ0o7TUFDQSxPQUFPLE1BQU\
              07UUFDVCxNQUFNdFMsRUFBQSxHQUFLa0IsSUFBQSxDQUFLb3JCLE1BQUEsR0FBUyx\
              DQUFDO1FBQzFCLElBQUl0c0IsRUFBQSxLQUFPLE9BQU9BLEVBQUEsS0FBTztRQUNy\
              QnNzQixNQUFBLElBQVU7O1FBRVY7TUFDUjtNQUNBLE1BQU12aEIsQ0FBQSxJQUFLL\
              E9BQUFrZCxXQUFBLENBQU8sS0FBS29FLFNBQUEsQ0FBVUMsTUFBTSxPQUFNLE9BQU\
              FyRSxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJO01BQ3hFLE9BQUF0RSx\
              XQUFBLENBQU8sS0FBS29FLFNBQUEsQ0FBVW5yQixJQUFBLENBQUs3QyxNQUFBLEdB\
              QVMwTSxDQUFDO01BQ3JDLEtBQUt5aEIsV0FBQSxDQUFZO01BQ2pCLE9BQU87SUFDW\
              DtJQUNBLElBQUksS0FBS2xCLFNBQUEsQ0FBVSxHQUFHO01BQ2xCLE1BQU1tQixFQU\
              FBLEdBQUssT0FBQXhFLFdBQUEsQ0FBTyxLQUFLc0UsVUFBQSxDQUFXLElBQUk7TUF\
              DdEMsT0FBQXRFLFdBQUEsQ0FBTyxLQUFLb0UsU0FBQSxDQUFVbnJCLElBQUEsQ0FB\
              SzdDLE1BQUEsR0FBU291QixFQUFFO01BQ3RDLE9BQUF4RSxXQUFBLENBQU8sS0FBS\
              3VFLFdBQUEsQ0FBWTtNQUN4QixPQUFPO0lBQ1g7SUFDQSxNQUFNckUsUUFBQTtJQU\
              NOLE9BQU8sT0FBQUYsV0FBQSxDQUFPLEtBQUs4RCxjQUFBLENBQWU7RUFDdEM7RUF\
              DQSxDQUFDQSxlQUFBLEVBQWlCO0lBQ2QsTUFBTS9yQixFQUFBLEdBQUssS0FBS3Vy\
              QixNQUFBLENBQU8sQ0FBQztJQUN4QixJQUFJLENBQUN2ckIsRUFBQSxJQUFNLENBQ\
              UMsS0FBSzBxQixLQUFBO0lBQ2IsT0FBTyxLQUFLaUIsT0FBQSxDQUFRLFlBQVk7SU\
              FDcEMsSUFBSTNyQixFQUFBLEtBQU8sT0FBT0EsRUFBQSxLQUFPLEtBQUs7TUFDMUI\
              sSUFBSSxDQUFDLEtBQUswcUIsS0FBQSxJQUFTLENBQUMsS0FBS1UsUUFBQSxDQUFT\
              LENBQUM7TUFDL0IsT0FBTyxLQUFLTyxPQUFBLENBQVEsWUFBWTtNQUNwQyxNQUFNc\
              lMsQ0FBQSxHQUFJLEtBQUt1UyxJQUFBLENBQUssQ0FBQztNQUNyQixJQUFJdlMsQ0\
              FBQSxLQUFNLFNBQVM4USxPQUFBLENBQVEsS0FBS21CLE1BQUEsQ0FBTyxDQUFDLEN\
              BQUMsR0FBRztRQUN4QyxPQUFBdEQsV0FBQSxDQUFPLEtBQUtvRSxTQUFBLENBQVUs\
              Q0FBQztRQUN2QixLQUFLckIsV0FBQSxHQUFjO1FBQ25CLEtBQUtELFVBQUEsR0FBY\
              TtRQUNsQixPQUFPO01BQ1gsV0FDU3pSLENBQUEsS0FBTSxTQUFTOFEsT0FBQSxDQU\
              FRLEtBQUttQixNQUFBLENBQU8sQ0FBQyxDQUFDLEdBQUc7UUFDN0MsT0FBQXRELFd\
              BQUEsQ0FBTyxLQUFLb0UsU0FBQSxDQUFVLENBQUM7UUFDdkIsT0FBTztNQUNYO0lB\
              Q0o7SUFDQSxLQUFLckIsV0FBQSxHQUFjLE9BQUEvQyxXQUFBLENBQU8sS0FBS3NFL\
              FVBQUEsQ0FBVyxLQUFLO0lBQy9DLElBQUksS0FBS3hCLFVBQUEsR0FBYSxLQUFLQy\
              xXQUFBLElBQWUsQ0FBQ1osT0FBQSxDQUFRLEtBQUttQixNQUFBLENBQU8sQ0FBQyx\
              DQUFDO0lBQzdELEtBQUtSLFVBQUEsR0FBYSxLQUFLQyxXQUFBO0lBQzNCLE9BQU8s\
              T0FBQS9DLFdBQUEsQ0FBTyxLQUFLK0QsZUFBQSxDQUFnQjtFQUN2QztFQUNBLENBQ\
              UNBLGdCQUFBLEVBQWtCO0lBQ2YsTUFBTSxDQUFDVSxHQUFBLEVBQUtDLEdBQUcsSU\
              FBSSxLQUFLZCxJQUFBLENBQUssQ0FBQztJQUM5QixJQUFJLENBQUNjLEdBQUEsSUF\
              BTyxDQUFDLEtBQUtqQyxLQUFBO0lBQ2QsT0FBTyxLQUFLaUIsT0FBQSxDQUFRLGFB\
              QWE7SUFDckMsS0FBS2UsR0FBQSxLQUFRLE9BQU9BLEdBQUEsS0FBUSxPQUFPQSxHQ\
              UFBLEtBQVEsUUFBUXRDLE9BQUEsQ0FBUXVDLEdBQUcsR0FBRztNQUM3RCxNQUFNNW\
              hCLENBQUEsSUFBSyxPQUFBa2QsV0FBQSxDQUFPLEtBQUtvRSxTQUFBLENBQVUsQ0F\
              BQyxPQUFNLE9BQUFwRSxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJO01B\
              Q25FLEtBQUt4QixVQUFBLEdBQWEsS0FBS0MsV0FBQSxHQUFjO01BQ3JDLEtBQUtBL\
              FdBQUEsSUFBZWpnQixDQUFBO01BQ3BCLE9BQU8sT0FBQWtkLFdBQUEsQ0FBTyxLQU\
              FLK0QsZUFBQSxDQUFnQjtJQUN2QztJQUNBLE9BQU87RUFDWDtFQUNBLENBQUMvdkI\
              sY0FBQSxFQUFnQjtJQUNiLE9BQUFnc0IsV0FBQSxDQUFPLEtBQUtzRSxVQUFBLENB\
              QVcsSUFBSTtJQUMzQixNQUFNcnJCLElBQUEsR0FBTyxLQUFLd3FCLE9BQUEsQ0FBU\
              TtJQUMxQixJQUFJeHFCLElBQUEsS0FBUztJQUNULE9BQU8sS0FBS3lxQixPQUFBLE\
              NBQVEsS0FBSztJQUM3QixJQUFJNWdCLENBQUEsR0FBSSxPQUFBa2QsV0FBQSxDQUF\
              PLEtBQUsyRSxjQUFBLENBQWU7SUFDbkMsUUFBUTFyQixJQUFBLENBQUs2SixDQUFD\
              O01BQ1YsS0FBSztRQUNELE9BQUFrZCxXQUFBLENBQU8sS0FBS29FLFNBQUEsQ0FBV\
              W5yQixJQUFBLENBQUs3QyxNQUFBLEdBQVMwTSxDQUFDO01BRXpDLEtBQUs7UUFDRC\
              xPQUFBa2QsV0FBQSxDQUFPLEtBQUt1RSxXQUFBLENBQVk7UUFDeEIsT0FBTyxPQUF\
              BdkUsV0FBQSxDQUFPLEtBQUs4RCxjQUFBLENBQWU7TUFDdEMsS0FBSztNQUNMLEtB\
              QUs7UUFDRCxPQUFBOUQsV0FBQSxDQUFPLEtBQUtvRSxTQUFBLENBQVUsQ0FBQztRQ\
              UN2QixLQUFLeEIsT0FBQSxHQUFVO1FBQ2YsS0FBS0MsU0FBQSxHQUFZO1FBQ2pCLE\
              9BQU87TUFDWCxLQUFLO01BQ0wsS0FBSztRQUVELE9BQUE3QyxXQUFBLENBQU8sS0F\
              BS29FLFNBQUEsQ0FBVSxDQUFDO1FBQ3ZCLE9BQU87TUFDWCxLQUFLO1FBQ0QsT0FB\
              QXBFLFdBQUEsQ0FBTyxLQUFLNEUsU0FBQSxDQUFVcEMsZUFBZTtRQUNyQyxPQUFPO\
              01BQ1gsS0FBSztNQUNMLEtBQUs7UUFDRCxPQUFPLE9BQUF4QyxXQUFBLENBQU8sS0\
              FBS2lFLGlCQUFBLENBQWtCO01BQ3pDLEtBQUs7TUFDTCxLQUFLO1FBQ0RuaEIsQ0F\
              BQSxJQUFLLE9BQUFrZCxXQUFBLENBQU8sS0FBS2pFLHNCQUFBLENBQXVCO1FBQ3hD\
              alosQ0FBQSxJQUFLLE9BQUFrZCxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQ\
              UFJO1FBQ2hDLE9BQUF0RSxXQUFBLENBQU8sS0FBS29FLFNBQUEsQ0FBVW5yQixJQU\
              FBLENBQUs3QyxNQUFBLEdBQVMwTSxDQUFDO1FBQ3JDLE9BQUFrZCxXQUFBLENBQU8\
              sS0FBS3VFLFdBQUEsQ0FBWTtRQUN4QixPQUFPLE9BQUF2RSxXQUFBLENBQU8sS0FB\
              S2tFLGdCQUFBLENBQWlCO01BQ3hDO1FBQ0ksT0FBTyxPQUFBbEUsV0FBQSxDQUFPL\
              EtBQUttRSxnQkFBQSxDQUFpQjtJQUM1QztFQUNKO0VBQ0EsQ0FBQ0gsb0JBQUEsRU\
              FBc0I7SUFDbkIsSUFBSXpDLEVBQUEsRUFBSWlELEVBQUE7SUFDUixJQUFJamhCLE1\
              BQUEsR0FBUztJQUNiLEdBQUc7TUFDQ2dlLEVBQUEsR0FBSyxPQUFBdkIsV0FBQSxD\
              QUFPLEtBQUt1RSxXQUFBLENBQVk7TUFDN0IsSUFBSWhELEVBQUEsR0FBSyxHQUFHO\
              1FBQ1JpRCxFQUFBLEdBQUssT0FBQXhFLFdBQUEsQ0FBTyxLQUFLc0UsVUFBQSxDQU\
              FXLEtBQUs7UUFDakMsS0FBS3ZCLFdBQUEsR0FBY3hmLE1BQUEsR0FBU2loQixFQUF\
              BO01BQ2hDLE9BQ0s7UUFDREEsRUFBQSxHQUFLO01BQ1Q7TUFDQUEsRUFBQSxJQUFN\
              LE9BQUF4RSxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJO0lBQ3JDLFNBQ\
              VMvQyxFQUFBLEdBQUtpRCxFQUFBLEdBQUs7SUFDbkIsTUFBTXZyQixJQUFBLEdBQU\
              8sS0FBS3dxQixPQUFBLENBQVE7SUFDMUIsSUFBSXhxQixJQUFBLEtBQVM7SUFDVCx\
              PQUFPLEtBQUt5cUIsT0FBQSxDQUFRLE1BQU07SUFDOUIsSUFBS25nQixNQUFBLEtB\
              QVcsTUFBTUEsTUFBQSxHQUFTLEtBQUt1ZixVQUFBLElBQWM3cEIsSUFBQSxDQUFLL\
              ENBQUMsTUFBTSxPQUN6RHNLLE1BQUEsS0FBVyxNQUNQdEssSUFBQSxDQUFLd0IsVU\
              FBQSxDQUFXLEtBQUssS0FBS3hCLElBQUEsQ0FBS3dCLFVBQUEsQ0FBVyxLQUFLLE1\
              BQ2hEMG5CLE9BQUEsQ0FBUWxwQixJQUFBLENBQUssQ0FBQyxDQUFDLEdBQUk7TUFJ\
              dkIsTUFBTTRyQixlQUFBLEdBQWtCdGhCLE1BQUEsS0FBVyxLQUFLdWYsVUFBQSxHQ\
              UFhLEtBQ2pELEtBQUtELFNBQUEsS0FBYyxNQUNsQjVwQixJQUFBLENBQUssQ0FBQy\
              xNQUFNLE9BQU9BLElBQUEsQ0FBSyxDQUFDLE1BQU07TUFDcEMsSUFBSSxDQUFDNHJ\
              CLGVBQUEsRUFBaUI7UUFFbEIsS0FBS2hDLFNBQUEsR0FBWTtRQUNqQixNQUFNMUMs\
              UUFBQTtRQUNOLE9BQU8sT0FBQUgsV0FBQSxDQUFPLEtBQUs4RCxjQUFBLENBQWU7T\
              UFDdEM7SUFDSjtJQUNBLElBQUloaEIsQ0FBQSxHQUFJO0lBQ1IsT0FBTzdKLElBQU\
              EsQ0FBSzZKLENBQUMsTUFBTSxLQUFLO01BQ3BCQSxDQUFBLElBQUssT0FBQWtkLFd\
              BQUEsQ0FBTyxLQUFLb0UsU0FBQSxDQUFVLENBQUM7TUFDNUJ0aEIsQ0FBQSxJQUFL\
              LE9BQUFrZCxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJO01BQ2hDLEtBQ\
              UsxQixPQUFBLEdBQVU7SUFDbkI7SUFDQTlmLENBQUEsSUFBSyxPQUFBa2QsV0FBQS\
              xDQUFPLEtBQUsyRSxjQUFBLENBQWU7SUFDaEMsUUFBUTFyQixJQUFBLENBQUs2Six\
              DQUFDO01BQ1YsS0FBSztRQUNELE9BQU87TUFDWCxLQUFLO1FBQ0QsT0FBQWtkLFdB\
              QUEsQ0FBTyxLQUFLb0UsU0FBQSxDQUFVbnJCLElBQUEsQ0FBSzdDLE1BQUEsR0FBU\
              zBNLENBQUM7UUFDckMsT0FBTztNQUNYLEtBQUs7TUFDTCxLQUFLO1FBQ0QsT0FBQW\
              tkLFdBQUEsQ0FBTyxLQUFLb0UsU0FBQSxDQUFVLENBQUM7UUFDdkIsS0FBS3hCLE9\
              BQUEsR0FBVTtRQUNmLEtBQUtDLFNBQUEsSUFBYTtRQUNsQixPQUFPO01BQ1gsS0FB\
              SztNQUNMLEtBQUs7UUFDRCxPQUFBN0MsV0FBQSxDQUFPLEtBQUtvRSxTQUFBLENBQ\
              VUsQ0FBQztRQUN2QixLQUFLeEIsT0FBQSxHQUFVO1FBQ2YsS0FBS0MsU0FBQSxJQU\
              FhO1FBQ2xCLE9BQU8sS0FBS0EsU0FBQSxHQUFZLFNBQVM7TUFDckMsS0FBSztRQUN\
              ELE9BQUE3QyxXQUFBLENBQU8sS0FBSzRFLFNBQUEsQ0FBVXBDLGVBQWU7UUFDckMs\
              T0FBTztNQUNYLEtBQUs7TUFDTCxLQUFLO1FBQ0QsS0FBS0ksT0FBQSxHQUFVO1FBQ\
              2YsT0FBTyxPQUFBNUMsV0FBQSxDQUFPLEtBQUtpRSxpQkFBQSxDQUFrQjtNQUN6Qy\
              xLQUFLLElBQUs7VUFDTixNQUFNamlCLElBQUEsR0FBTyxLQUFLc2hCLE1BQUEsQ0F\
              BTyxDQUFDO1VBQzFCLElBQUksS0FBS1YsT0FBQSxJQUFXVCxPQUFBLENBQVFuZ0Is\
              SUFBSSxLQUFLQSxJQUFBLEtBQVMsS0FBSztZQUMvQyxLQUFLNGdCLE9BQUEsR0FBV\
              TtZQUNmLE9BQUE1QyxXQUFBLENBQU8sS0FBS29FLFNBQUEsQ0FBVSxDQUFDO1lBQ3\
              ZCLE9BQUFwRSxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJO1lBQzNCLE9\
              BQU87VUFDWDtRQUNKO01BRUE7UUFDSSxLQUFLMUIsT0FBQSxHQUFVO1FBQ2YsT0FB\
              TyxPQUFBNUMsV0FBQSxDQUFPLEtBQUttRSxnQkFBQSxDQUFpQjtJQUM1QztFQUNKO\
              0VBQ0EsQ0FBQ0Ysa0JBQUEsRUFBb0I7SUFDakIsTUFBTWEsS0FBQSxHQUFRLEtBQU\
              t4QixNQUFBLENBQU8sQ0FBQztJQUMzQixJQUFJN2UsR0FBQSxHQUFNLEtBQUt3TSx\
              NQUFBLENBQU83SixPQUFBLENBQVEwZCxLQUFBLEVBQU8sS0FBSzFOLEdBQUEsR0FB\
              TSxDQUFDO0lBQ2pELElBQUkwTixLQUFBLEtBQVUsS0FBSztNQUNmLE9BQU9yZ0IsR\
              0FBQSxLQUFRLE1BQU0sS0FBS3dNLE1BQUEsQ0FBT3hNLEdBQUEsR0FBTSxDQUFDLE\
              1BQU07TUFDMUNBLEdBQUEsR0FBTSxLQUFLd00sTUFBQSxDQUFPN0osT0FBQSxDQUF\
              RLEtBQUszQyxHQUFBLEdBQU0sQ0FBQztJQUM5QyxPQUNLO01BRUQsT0FBT0EsR0FB\
              QSxLQUFRLElBQUk7UUFDZixJQUFJM0IsQ0FBQSxHQUFJO1FBQ1IsT0FBTyxLQUFLb\
              U8sTUFBQSxDQUFPeE0sR0FBQSxHQUFNLElBQUkzQixDQUFDLE1BQU07UUFDaENBLE\
              NBQUEsSUFBSztRQUNULElBQUlBLENBQUEsR0FBSSxNQUFNO1FBQ1Y7UUFDSjJCLEd\
              BQUEsR0FBTSxLQUFLd00sTUFBQSxDQUFPN0osT0FBQSxDQUFRLEtBQUszQyxHQUFB\
              LEdBQU0sQ0FBQztNQUMxQztJQUNKO0lBRUEsTUFBTXNnQixFQUFBLEdBQUssS0FBS\
              zlULE1BQUEsQ0FBT3ZXLFNBQUEsQ0FBVSxHQUFHK0osR0FBRztJQUN2QyxJQUFJOG\
              MsRUFBQSxHQUFLd0QsRUFBQSxDQUFHM2QsT0FBQSxDQUFRLE1BQU0sS0FBS2dRLEd\
              BQUc7SUFDbEMsSUFBSW1LLEVBQUEsS0FBTyxJQUFJO01BQ1gsT0FBT0EsRUFBQSxL\
              QUFPLElBQUk7UUFDZCxNQUFNbFgsRUFBQSxHQUFLLEtBQUtrWixjQUFBLENBQWVoQ\
              yxFQUFBLEdBQUssQ0FBQztRQUNyQyxJQUFJbFgsRUFBQSxLQUFPO1FBQ1A7UUFDSm\
              tYLEVBQUEsR0FBS3dELEVBQUEsQ0FBRzNkLE9BQUEsQ0FBUSxNQUFNaUQsRUFBRTt\
              NQUM1QjtNQUNBLElBQUlrWCxFQUFBLEtBQU8sSUFBSTtRQUVYOWMsR0FBQSxHQUFN\
              OGMsRUFBQSxJQUFNd0QsRUFBQSxDQUFHeEQsRUFBQSxHQUFLLENBQUMsTUFBTSxPQ\
              UFPLElBQUk7TUFDMUM7SUFDSjtJQUNBLElBQUk5YyxHQUFBLEtBQVEsSUFBSTtNQU\
              NaLElBQUksQ0FBQyxLQUFLZ2UsS0FBQTtNQUNOLE9BQU8sS0FBS2lCLE9BQUEsQ0F\
              BUSxlQUFlO01BQ3ZDamYsR0FBQSxHQUFNLEtBQUt3TSxNQUFBLENBQU83YSxNQUFB\
              O0lBQ3RCO0lBQ0EsT0FBQTRwQixXQUFBLENBQU8sS0FBS2dGLFdBQUEsQ0FBWXZnQ\
              ixHQUFBLEdBQU0sR0FBRyxLQUFLO0lBQ3RDLE9BQU8sS0FBS29lLFNBQUEsR0FBWS\
              xTQUFTO0VBQ3JDO0VBQ0EsQ0FBQzlHLHVCQUFBLEVBQXlCO0lBQ3RCLEtBQUsyRyx\
              pQkFBQSxHQUFvQjtJQUN6QixLQUFLQyxlQUFBLEdBQWtCO0lBQ3ZCLElBQUl6c0Is\
              Q0FBQSxHQUFJLEtBQUtraEIsR0FBQTtJQUNiLE9BQU8sTUFBTTtNQUNULE1BQU1yZ\
              ixFQUFBLEdBQUssS0FBS2taLE1BQUEsQ0FBTyxFQUFFL2EsQ0FBQztNQUMxQixJQU\
              FJNkIsRUFBQSxLQUFPO01BQ1AsS0FBSzRxQixlQUFBLEdBQWtCO01BQUEsSUFDbEI\
              1cUIsRUFBQSxHQUFLLE9BQU9BLEVBQUEsSUFBTTtNQUN2QixLQUFLMnFCLGlCQUFB\
              LEdBQW9CemtCLE1BQUEsQ0FBT2xHLEVBQUUsSUFBSTtNQUFBLElBQ2pDQSxFQUFBL\
              EtBQU87TUFDWjtJQUNSO0lBQ0EsT0FBTyxPQUFBaW9CLFdBQUEsQ0FBTyxLQUFLNE\
              UsU0FBQSxDQUFVLENBQUE3c0IsRUFBQSxLQUFNb3FCLE9BQUEsQ0FBUXBxQixFQUF\
              FLEtBQUtBLEVBQUEsS0FBTyxHQUFHO0VBQ2hFO0VBQ0EsQ0FBQ21zQixpQkFBQSxF\
              QUFtQjtJQUNoQixJQUFJM0MsRUFBQSxHQUFLLEtBQUtuSyxHQUFBLEdBQU07SUFDc\
              EIsSUFBSTdULE1BQUEsR0FBUztJQUNiLElBQUl4TCxFQUFBO0lBQ0ppakIsSUFBQS\
              xFQUFNLFNBQVNoVyxFQUFBLEdBQUksS0FBS29TLEdBQUEsRUFBTXJmLEVBQUEsR0F\
              BSyxLQUFLa1osTUFBQSxDQUFPak0sRUFBQyxHQUFJLEVBQUVBLEVBQUEsRUFBRztN\
              QUNyRCxRQUFRak4sRUFBQTtRQUNKLEtBQUs7VUFDRHdMLE1BQUEsSUFBVTtVQUNWO\
              1FBQ0osS0FBSztVQUNEZ2UsRUFBQSxHQUFLdmMsRUFBQTtVQUNMekIsTUFBQSxHQU\
              FTO1VBQ1Q7UUFDSixLQUFLLEtBQU07WUFDUCxNQUFNdkIsSUFBQSxHQUFPLEtBQUt\
              pUCxNQUFBLENBQU9qTSxFQUFBLEdBQUksQ0FBQztZQUM5QixJQUFJLENBQUNoRCxJ\
              QUFBLElBQVEsQ0FBQyxLQUFLeWdCLEtBQUE7WUFDZixPQUFPLEtBQUtpQixPQUFBL\
              ENBQVEsY0FBYztZQUN0QyxJQUFJMWhCLElBQUEsS0FBUztZQUNUO1VBQ1I7UUFDQT\
              tVQUNJLE1BQU1nWixJQUFBO01BQ2Q7SUFDSjtJQUNBLElBQUksQ0FBQ2pqQixFQUF\
              BLElBQU0sQ0FBQyxLQUFLMHFCLEtBQUE7SUFDYixPQUFPLEtBQUtpQixPQUFBLENB\
              QVEsY0FBYztJQUN0QyxJQUFJbmdCLE1BQUEsSUFBVSxLQUFLdWYsVUFBQSxFQUFZO\
              01BQzNCLElBQUksS0FBS0osaUJBQUEsS0FBc0I7TUFDM0IsS0FBS0ksVUFBQSxHQU\
              FhdmYsTUFBQTtNQUNqQjtRQUNELEtBQUt1ZixVQUFBLEdBQ0QsS0FBS0osaUJBQUE\
              sSUFBcUIsS0FBS0ksVUFBQSxLQUFlLElBQUksSUFBSSxLQUFLQSxVQUFBO01BQ25F\
              O01BQ0EsR0FBRztRQUNDLE1BQU16WSxFQUFBLEdBQUssS0FBS2taLGNBQUEsQ0FBZ\
              WhDLEVBQUEsR0FBSyxDQUFDO1FBQ3JDLElBQUlsWCxFQUFBLEtBQU87UUFDUDtRQU\
              NKa1gsRUFBQSxHQUFLLEtBQUt0USxNQUFBLENBQU83SixPQUFBLENBQVEsTUFBTWl\
              ELEVBQUU7TUFDckMsU0FBU2tYLEVBQUEsS0FBTztNQUNoQixJQUFJQSxFQUFBLEtB\
              QU8sSUFBSTtRQUNYLElBQUksQ0FBQyxLQUFLa0IsS0FBQTtRQUNOLE9BQU8sS0FBS\
              2lCLE9BQUEsQ0FBUSxjQUFjO1FBQ3RDbkMsRUFBQSxHQUFLLEtBQUt0USxNQUFBLE\
              NBQU83YSxNQUFBO01BQ3JCO0lBQ0o7SUFHQSxJQUFJRixDQUFBLEdBQUlxckIsRUF\
              BQSxHQUFLO0lBQ2J4cEIsRUFBQSxHQUFLLEtBQUtrWixNQUFBLENBQU8vYSxDQUFD\
              O0lBQ2xCLE9BQU82QixFQUFBLEtBQU87SUFDVkEsRUFBQSxHQUFLLEtBQUtrWixNQ\
              UFBLENBQU8sRUFBRS9hLENBQUM7SUFDeEIsSUFBSTZCLEVBQUEsS0FBTyxLQUFNO0\
              1BQ2IsT0FBT0EsRUFBQSxLQUFPLE9BQVFBLEVBQUEsS0FBTyxPQUFPQSxFQUFBLEt\
              BQU8sUUFBUUEsRUFBQSxLQUFPO01BQ3REQSxFQUFBLEdBQUssS0FBS2taLE1BQUEs\
              Q0FBTyxFQUFFL2EsQ0FBQztNQUN4QnFyQixFQUFBLEdBQUtyckIsQ0FBQSxHQUFJO\
              0lBQ2IsV0FDUyxDQUFDLEtBQUt5c0IsZUFBQSxFQUFpQjtNQUM1QixHQUFHO1FBQ0\
              MsSUFBSTNkLEVBQUEsR0FBSXVjLEVBQUEsR0FBSztRQUNiLElBQUkwRCxHQUFBLEd\
              BQUssS0FBS2hVLE1BQUEsQ0FBT2pNLEVBQUM7UUFDdEIsSUFBSWlnQixHQUFBLEtB\
              QU87UUFDUEEsR0FBQSxHQUFLLEtBQUtoVSxNQUFBLENBQU8sRUFBRWpNLEVBQUM7U\
              UFDeEIsTUFBTWtnQixRQUFBLEdBQVdsZ0IsRUFBQTtRQUNqQixPQUFPaWdCLEdBQU\
              EsS0FBTztRQUNWQSxHQUFBLEdBQUssS0FBS2hVLE1BQUEsQ0FBTyxFQUFFak0sRUF\
              BQztRQUN4QixJQUFJaWdCLEdBQUEsS0FBTyxRQUFRamdCLEVBQUEsSUFBSyxLQUFL\
              b1MsR0FBQSxJQUFPcFMsRUFBQSxHQUFJLElBQUl6QixNQUFBLEdBQVMyaEIsUUFBQ\
              TtRQUNqRDNELEVBQUEsR0FBS3ZjLEVBQUE7O1FBRUw7TUFDUixTQUFTO0lBQ2I7SU\
              FDQSxNQUFNb2IsT0FBQTtJQUNOLE9BQUFKLFdBQUEsQ0FBTyxLQUFLZ0YsV0FBQSx\
              DQUFZekQsRUFBQSxHQUFLLEdBQUcsSUFBSTtJQUNwQyxPQUFPLE9BQUF2QixXQUFB\
              LENBQU8sS0FBSzhELGNBQUEsQ0FBZTtFQUN0QztFQUNBLENBQUNLLGlCQUFBLEVBQ\
              W1CO0lBQ2hCLE1BQU1yYyxNQUFBLEdBQVMsS0FBSythLFNBQUEsR0FBWTtJQUNoQy\
              xJQUFJcGUsR0FBQSxHQUFNLEtBQUsyUyxHQUFBLEdBQU07SUFDckIsSUFBSWxoQix\
              DQUFBLEdBQUksS0FBS2toQixHQUFBLEdBQU07SUFDbkIsSUFBSXJmLEVBQUE7SUFD\
              SixPQUFRQSxFQUFBLEdBQUssS0FBS2taLE1BQUEsQ0FBTyxFQUFFL2EsQ0FBQyxHQ\
              UFJO01BQzVCLElBQUk2QixFQUFBLEtBQU8sS0FBSztRQUNaLE1BQU1pSyxJQUFBLE\
              dBQU8sS0FBS2lQLE1BQUEsQ0FBTy9hLENBQUEsR0FBSSxDQUFDO1FBQzlCLElBQUl\
              pc0IsT0FBQSxDQUFRbmdCLElBQUksS0FBTThGLE1BQUEsSUFBVXdhLGtCQUFBLENB\
              QW1Cdm1CLEdBQUEsQ0FBSWlHLElBQUk7UUFDdkQ7UUFDSnlDLEdBQUEsR0FBTXZPL\
              ENBQUE7TUFDVixXQUNTaXNCLE9BQUEsQ0FBUXBxQixFQUFFLEdBQUc7UUFDbEIsSU\
              FBSWlLLElBQUEsR0FBTyxLQUFLaVAsTUFBQSxDQUFPL2EsQ0FBQSxHQUFJLENBQUM\
              7UUFDNUIsSUFBSTZCLEVBQUEsS0FBTyxNQUFNO1VBQ2IsSUFBSWlLLElBQUEsS0FB\
              UyxNQUFNO1lBQ2Y5TCxDQUFBLElBQUs7WUFDTDZCLEVBQUEsR0FBSztZQUNMaUssS\
              UFBQSxHQUFPLEtBQUtpUCxNQUFBLENBQU8vYSxDQUFBLEdBQUksQ0FBQztVQUM1Qj\
              tVQUVJdU8sR0FBQSxHQUFNdk8sQ0FBQTtRQUNkO1FBQ0EsSUFBSThMLElBQUEsS0F\
              BUyxPQUFROEYsTUFBQSxJQUFVd2Esa0JBQUEsQ0FBbUJ2bUIsR0FBQSxDQUFJaUcs\
              SUFBSTtRQUN0RDtRQUNKLElBQUlqSyxFQUFBLEtBQU8sTUFBTTtVQUNiLE1BQU1zU\
              yxFQUFBLEdBQUssS0FBS2taLGNBQUEsQ0FBZXJ0QixDQUFBLEdBQUksQ0FBQztVQU\
              NwQyxJQUFJbVUsRUFBQSxLQUFPO1VBQ1A7VUFDSm5VLENBQUEsR0FBSTJKLElBQUE\
              sQ0FBS0MsR0FBQSxDQUFJNUosQ0FBQSxFQUFHbVUsRUFBQSxHQUFLLENBQUM7UUFD\
              MUI7TUFDSixPQUNLO1FBQ0QsSUFBSXZDLE1BQUEsSUFBVXdhLGtCQUFBLENBQW1Cd\
              m1CLEdBQUEsQ0FBSWhFLEVBQUU7UUFDbkM7UUFDSjBNLEdBQUEsR0FBTXZPLENBQU\
              E7TUFDVjtJQUNKO0lBQ0EsSUFBSSxDQUFDNkIsRUFBQSxJQUFNLENBQUMsS0FBSzB\
              xQixLQUFBO0lBQ2IsT0FBTyxLQUFLaUIsT0FBQSxDQUFRLGNBQWM7SUFDdEMsTUFB\
              TXRELE9BQUE7SUFDTixPQUFBSixXQUFBLENBQU8sS0FBS2dGLFdBQUEsQ0FBWXZnQ\
              ixHQUFBLEdBQU0sR0FBRyxJQUFJO0lBQ3JDLE9BQU9xRCxNQUFBLEdBQVMsU0FBUz\
              tFQUM3QjtFQUNBLENBQUNzYyxVQUFVdGhCLENBQUEsRUFBRztJQUNWLElBQUlBLEN\
              BQUEsR0FBSSxHQUFHO01BQ1AsTUFBTSxLQUFLbU8sTUFBQSxDQUFPaEwsTUFBQSxD\
              QUFPLEtBQUttUixHQUFBLEVBQUt0VSxDQUFDO01BQ3BDLEtBQUtzVSxHQUFBLElBQ\
              U90VSxDQUFBO01BQ1osT0FBT0EsQ0FBQTtJQUNYO0lBQ0EsT0FBTztFQUNYO0VBQ0\
              EsQ0FBQ2tpQixZQUFZOXVCLENBQUEsRUFBR2l2QixVQUFBLEVBQVk7SUFDeEIsTUF\
              BTTlULENBQUEsR0FBSSxLQUFLSixNQUFBLENBQU9sWCxLQUFBLENBQU0sS0FBS3Fk\
              LEdBQUEsRUFBS2xoQixDQUFDO0lBQ3ZDLElBQUltYixDQUFBLEVBQUc7TUFDSCxNQ\
              UFNQSxDQUFBO01BQ04sS0FBSytGLEdBQUEsSUFBTy9GLENBQUEsQ0FBRWpiLE1BQU\
              E7TUFDZCxPQUFPaWIsQ0FBQSxDQUFFamIsTUFBQTtJQUNiLFdBQ1MrdUIsVUFBQTt\
              JQUNMLE1BQU07SUFDVixPQUFPO0VBQ1g7RUFDQSxDQUFDUixlQUFBLEVBQWlCO0lB\
              Q2QsUUFBUSxLQUFLckIsTUFBQSxDQUFPLENBQUM7TUFDakIsS0FBSztRQUNELFFBQ\
              VMsT0FBQXRELFdBQUEsQ0FBTyxLQUFLb0YsT0FBQSxDQUFRLE9BQ3hCLE9BQUFwRi\
              xXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJLE9BQzNCLE9BQUF0RSxXQUF\
              BLENBQU8sS0FBSzJFLGNBQUEsQ0FBZTtNQUNwQyxLQUFLO1FBQ0QsUUFBUyxPQUFB\
              M0UsV0FBQSxDQUFPLEtBQUs0RSxTQUFBLENBQVVwQyxlQUFlLE9BQ3pDLE9BQUF4Q\
              yxXQUFBLENBQU8sS0FBS3NFLFVBQUEsQ0FBVyxJQUFJLE9BQzNCLE9BQUF0RSxXQU\
              FBLENBQU8sS0FBSzJFLGNBQUEsQ0FBZTtNQUNwQyxLQUFLO01BQ0wsS0FBSztNQUN\
              MLEtBQUssSUFBSztVQUNOLE1BQU03YyxNQUFBLEdBQVMsS0FBSythLFNBQUEsR0FB\
              WTtVQUNoQyxNQUFNNkIsR0FBQSxHQUFNLEtBQUtwQixNQUFBLENBQU8sQ0FBQztVQ\
              UN6QixJQUFJbkIsT0FBQSxDQUFRdUMsR0FBRyxLQUFNNWMsTUFBQSxJQUFVd2Esa0\
              JBQUEsQ0FBbUJ2bUIsR0FBQSxDQUFJMm9CLEdBQUcsR0FBSTtZQUN6RCxJQUFJLEN\
              BQUM1YyxNQUFBO1lBQ0QsS0FBS2diLFVBQUEsR0FBYSxLQUFLQyxXQUFBLEdBQWM7\
              WUFBQSxJQUNoQyxLQUFLSCxPQUFBO1lBQ1YsS0FBS0EsT0FBQSxHQUFVO1lBQ25CL\
              FFBQVMsT0FBQTVDLFdBQUEsQ0FBTyxLQUFLb0UsU0FBQSxDQUFVLENBQUMsT0FDM0\
              IsT0FBQXBFLFdBQUEsQ0FBTyxLQUFLc0UsVUFBQSxDQUFXLElBQUksT0FDM0IsT0F\
              BQXRFLFdBQUEsQ0FBTyxLQUFLMkUsY0FBQSxDQUFlO1VBQ3BDO1FBQ0o7SUFDSjtJ\
              QUNBLE9BQU87RUFDWDtFQUNBLENBQUNTLFFBQUEsRUFBVTtJQUNQLElBQUksS0FBS\
              zlCLE1BQUEsQ0FBTyxDQUFDLE1BQU0sS0FBSztNQUN4QixJQUFJcHRCLENBQUEsR0\
              FBSSxLQUFLa2hCLEdBQUEsR0FBTTtNQUNuQixJQUFJcmYsRUFBQSxHQUFLLEtBQUt\
              rWixNQUFBLENBQU8vYSxDQUFDO01BQ3RCLE9BQU8sQ0FBQ2lzQixPQUFBLENBQVFw\
              cUIsRUFBRSxLQUFLQSxFQUFBLEtBQU87TUFDMUJBLEVBQUEsR0FBSyxLQUFLa1osT\
              UFBQSxDQUFPLEVBQUUvYSxDQUFDO01BQ3hCLE9BQU8sT0FBQThwQixXQUFBLENBQU\
              8sS0FBS2dGLFdBQUEsQ0FBWWp0QixFQUFBLEtBQU8sTUFBTTdCLENBQUEsR0FBSSx\
              JQUFJQSxDQUFBLEVBQUcsS0FBSztJQUNoRSxPQUNLO01BQ0QsSUFBSUEsQ0FBQSxH\
              QUFJLEtBQUtraEIsR0FBQSxHQUFNO01BQ25CLElBQUlyZixFQUFBLEdBQUssS0FBS\
              2taLE1BQUEsQ0FBTy9hLENBQUM7TUFDdEIsT0FBTzZCLEVBQUEsRUFBSTtRQUNQLE\
              lBQUlzcUIsUUFBQSxDQUFTdG1CLEdBQUEsQ0FBSWhFLEVBQUU7UUFDZkEsRUFBQSx\
              HQUFLLEtBQUtrWixNQUFBLENBQU8sRUFBRS9hLENBQUM7UUFBQSxJQUNmNkIsRUFB\
              QSxLQUFPLE9BQ1pxcUIsU0FBQSxDQUFVcm1CLEdBQUEsQ0FBSSxLQUFLa1YsTUFBQ\
              SxDQUFPL2EsQ0FBQSxHQUFJLENBQUMsQ0FBQyxLQUNoQ2tzQixTQUFBLENBQVVybU\
              IsR0FBQSxDQUFJLEtBQUtrVixNQUFBLENBQU8vYSxDQUFBLEdBQUksQ0FBQyxDQUF\
              DLEdBQUc7VUFDbkM2QixFQUFBLEdBQUssS0FBS2taLE1BQUEsQ0FBUS9hLENBQUEs\
              SUFBSyxDQUFFO1FBQzdCO1FBRUk7TUFDUjtNQUNBLE9BQU8sT0FBQThwQixXQUFBL\
              ENBQU8sS0FBS2dGLFdBQUEsQ0FBWTl1QixDQUFBLEVBQUcsS0FBSztJQUMzQztFQU\
              NKO0VBQ0EsQ0FBQ3F1QixZQUFBLEVBQWM7SUFDWCxNQUFNeHNCLEVBQUEsR0FBSyx\
              LQUFLa1osTUFBQSxDQUFPLEtBQUttRyxHQUFHO0lBQy9CLElBQUlyZixFQUFBLEtB\
              QU87SUFDUCxPQUFPLE9BQUFpb0IsV0FBQSxDQUFPLEtBQUtvRSxTQUFBLENBQVUsQ\
              0FBQztJQUFBLElBQ3pCcnNCLEVBQUEsS0FBTyxRQUFRLEtBQUt1ckIsTUFBQSxDQU\
              FPLENBQUMsTUFBTTtJQUN2QyxPQUFPLE9BQUF0RCxXQUFBLENBQU8sS0FBS29FLFN\
              BQUEsQ0FBVSxDQUFDOztJQUU5QixPQUFPO0VBQ2Y7RUFDQSxDQUFDRSxXQUFXZSxT\
              QUFBLEVBQVc7SUFDbkIsSUFBSW52QixDQUFBLEdBQUksS0FBS2toQixHQUFBLEdBQ\
              U07SUFDbkIsSUFBSXJmLEVBQUE7SUFDSixHQUFHO01BQ0NBLEVBQUEsR0FBSyxLQU\
              FLa1osTUFBQSxDQUFPLEVBQUUvYSxDQUFDO0lBQ3hCLFNBQVM2QixFQUFBLEtBQU8\
              sT0FBUXN0QixTQUFBLElBQWF0dEIsRUFBQSxLQUFPO0lBQzVDLE1BQU0rSyxDQUFB\
              LEdBQUk1TSxDQUFBLEdBQUksS0FBS2toQixHQUFBO0lBQ25CLElBQUl0VSxDQUFBL\
              EdBQUksR0FBRztNQUNQLE1BQU0sS0FBS21PLE1BQUEsQ0FBT2hMLE1BQUEsQ0FBTy\
              xLQUFLbVIsR0FBQSxFQUFLdFUsQ0FBQztNQUNwQyxLQUFLc1UsR0FBQSxHQUFNbGh\
              CLENBQUE7SUFDZjtJQUNBLE9BQU80TSxDQUFBO0VBQ1g7RUFDQSxDQUFDOGhCLFVB\
              QVVqckIsSUFBQSxFQUFNO0lBQ2IsSUFBSXpELENBQUEsR0FBSSxLQUFLa2hCLEdBQ\
              UE7SUFDYixJQUFJcmYsRUFBQSxHQUFLLEtBQUtrWixNQUFBLENBQU8vYSxDQUFDO0\
              lBQ3RCLE9BQU8sQ0FBQ3lELElBQUEsQ0FBSzVCLEVBQUU7SUFDWEEsRUFBQSxHQUF\
              LLEtBQUtrWixNQUFBLENBQU8sRUFBRS9hLENBQUM7SUFDeEIsT0FBTyxPQUFBOHBC\
              LFdBQUEsQ0FBTyxLQUFLZ0YsV0FBQSxDQUFZOXVCLENBQUEsRUFBRyxLQUFLO0VBQ\
              zNDO0FBQ0o7OztBQ3pzQkEsSUFBTXRELFdBQUEsR0FBTixNQUFrQjtFQUNkc0YsWU\
              FBQSxFQUFjO0lBQ1YsS0FBS3lmLFVBQUEsR0FBYSxFQUFDO0lBS25CLEtBQUsyTix\
              VQUFBLEdBQWEsQ0FBQ3ZWLE1BQUEsS0FBVyxLQUFLNEgsVUFBQSxDQUFXeGMsSUFB\
              QSxDQUFLNFUsTUFBTTtJQU16RCxLQUFLeUgsT0FBQSxHQUFVLENBQUN6SCxNQUFBL\
              EtBQVc7TUFDdkIsSUFBSXdWLEdBQUEsR0FBTTtNQUNWLElBQUlDLElBQUEsR0FBTy\
              xLQUFLN04sVUFBQSxDQUFXdmhCLE1BQUE7TUFDM0IsT0FBT212QixHQUFBLEdBQU1\
              DLElBQUEsRUFBTTtRQUNmLE1BQU1DLEdBQUEsR0FBT0YsR0FBQSxHQUFNQyxJQUFB\
              LElBQVM7UUFDNUIsSUFBSSxLQUFLN04sVUFBQSxDQUFXOE4sR0FBRyxJQUFJMVYsT\
              UFBQTtRQUN2QndWLEdBQUEsR0FBTUUsR0FBQSxHQUFNOztRQUVaRCxJQUFBLEdBQU\
              9DLEdBQUE7TUFDZjtNQUNBLElBQUksS0FBSzlOLFVBQUEsQ0FBVzROLEdBQUcsTUF\
              BTXhWLE1BQUE7TUFDekIsT0FBTyxFQUFFOVcsSUFBQSxFQUFNc3NCLEdBQUEsR0FB\
              TSxHQUFHOU4sR0FBQSxFQUFLLEVBQUU7TUFDbkMsSUFBSThOLEdBQUEsS0FBUTtNQ\
              UNSLE9BQU8sRUFBRXRzQixJQUFBLEVBQU0sR0FBR3dlLEdBQUEsRUFBSzFILE1BQU\
              EsQ0FBTztNQUNsQyxNQUFNNUssS0FBQSxHQUFRLEtBQUt3UyxVQUFBLENBQVc0Tix\
              HQUFBLEdBQU0sQ0FBQztNQUNyQyxPQUFPLEVBQUV0c0IsSUFBQSxFQUFNc3NCLEdB\
              QUEsRUFBSzlOLEdBQUEsRUFBSzFILE1BQUEsR0FBUzVLLEtBQUEsR0FBUSxFQUFFO\
              0lBQ2hEO0VBQ0o7QUFDSjs7O0FDakNBLFNBQVN1Z0IsY0FBY0MsSUFBQSxFQUFNeG\
              5CLElBQUEsRUFBTTtFQUMvQixTQUFTakksQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0F\
              BSXl2QixJQUFBLENBQUt2dkIsTUFBQSxFQUFRLEVBQUVGLENBQUE7RUFDL0IsSUFB\
              SXl2QixJQUFBLENBQUt6dkIsQ0FBQyxFQUFFaUksSUFBQSxLQUFTQSxJQUFBO0VBQ\
              2pCLE9BQU87RUFDZixPQUFPO0FBQ1g7QUFDQSxTQUFTeW5CLGtCQUFrQkQsSUFBQS\
              xFQUFNO0VBQzdCLFNBQVN6dkIsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSXl2Qix\
              JQUFBLENBQUt2dkIsTUFBQSxFQUFRLEVBQUVGLENBQUEsRUFBRztJQUNsQyxRQUFR\
              eXZCLElBQUEsQ0FBS3p2QixDQUFDLEVBQUVpSSxJQUFBO01BQ1osS0FBSztNQUNML\
              EtBQUs7TUFDTCxLQUFLO1FBQ0Q7TUFDSjtRQUNJLE9BQU9qSSxDQUFBO0lBQ2Y7RU\
              FDSjtFQUNBLE9BQU87QUFDWDtBQUNBLFNBQVMydkIsWUFBWW5OLEtBQUEsRUFBTzt\
              FQUN4QixRQUFRQSxLQUFBLG9CQUFBQSxLQUFBLENBQU92YSxJQUFBO0lBQ1gsS0FB\
              SztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7TUFDRCxPQ\
              UFPO0lBQ1g7TUFDSSxPQUFPO0VBQ2Y7QUFDSjtBQUNBLFNBQVMybkIsYUFBYXR1Qi\
              xNQUFBLEVBQVE7RUFsQzlCLElBQUFOLEVBQUE7RUFtQ0ksUUFBUU0sTUFBQSxDQUF\
              PMkcsSUFBQTtJQUNYLEtBQUs7TUFDRCxPQUFPM0csTUFBQSxDQUFPMk4sS0FBQTtJ\
              QUNsQixLQUFLLFlBQWE7UUFDZCxNQUFNOUMsRUFBQSxHQUFLN0ssTUFBQSxDQUFPc\
              kIsS0FBQSxDQUFNcUIsTUFBQSxDQUFPckIsS0FBQSxDQUFNQyxNQUFBLEdBQVMsQ0\
              FBQztRQUMvQyxRQUFPYyxFQUFBLEdBQUFtTCxFQUFBLENBQUcwVyxHQUFBLEtBQUg\
              sT0FBQTdoQixFQUFBLEdBQVVtTCxFQUFBLENBQUc4QyxLQUFBO01BQ3hCO0lBQ0Es\
              S0FBSztNQUNELE9BQU8zTixNQUFBLENBQU9yQixLQUFBLENBQU1xQixNQUFBLENBQ\
              U9yQixLQUFBLENBQU1DLE1BQUEsR0FBUyxDQUFDLEVBQUUrTyxLQUFBO0lBRWpEO0\
              1BQ0ksT0FBTyxFQUFDO0VBQ2hCO0FBQ0o7QUFFQSxTQUFTNGdCLHNCQUFzQnJoQix\
              JQUFBLEVBQU07RUFsRHJDLElBQUF4TixFQUFBO0VBbURJLElBQUl3TixJQUFBLENB\
              QUt0TyxNQUFBLEtBQVc7RUFDaEIsT0FBTyxFQUFDO0VBQ1osSUFBSUYsQ0FBQSxHQ\
              UFJd08sSUFBQSxDQUFLdE8sTUFBQTtFQUNiNGtCLElBQUEsRUFBTSxPQUFPLEVBQU\
              U5a0IsQ0FBQSxJQUFLLEdBQUc7SUFDbkIsUUFBUXdPLElBQUEsQ0FBS3hPLENBQUM\
              sRUFBRWlJLElBQUE7TUFDWixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxL\
              QUFLO01BQ0wsS0FBSztRQUNELE1BQU02YyxJQUFBO0lBQ2Q7RUFDSjtFQUNBLFNBQ\
              U85akIsRUFBQSxHQUFBd04sSUFBQSxDQUFLLEVBQUV4TyxDQUFDLE1BQVIsZ0JBQU\
              FnQixFQUFBLENBQVdpSCxJQUFBLE1BQVMsU0FBUztFQUVwQztFQUNBLE9BQU91Ryx\
              JQUFBLENBQUtwTyxNQUFBLENBQU9KLENBQUEsRUFBR3dPLElBQUEsQ0FBS3RPLE1B\
              QU07QUFDckM7QUFDQSxTQUFTNHZCLGdCQUFnQi9NLEVBQUEsRUFBSTtFQUN6QixJQ\
              UFJQSxFQUFBLENBQUc5VCxLQUFBLENBQU1oSCxJQUFBLEtBQVMsa0JBQWtCO0lBQ3\
              BDLFdBQVdrRSxFQUFBLElBQU00VyxFQUFBLENBQUc5aUIsS0FBQSxFQUFPO01BQ3Z\
              CLElBQUlrTSxFQUFBLENBQUcwVyxHQUFBLElBQ0gsQ0FBQzFXLEVBQUEsQ0FBRzVM\
              LEtBQUEsSUFDSixDQUFDaXZCLGFBQUEsQ0FBY3JqQixFQUFBLENBQUc4QyxLQUFBL\
              EVBQU8sa0JBQWtCLEtBQzNDLENBQUN1Z0IsYUFBQSxDQUFjcmpCLEVBQUEsQ0FBRz\
              BXLEdBQUEsRUFBSyxlQUFlLEdBQUc7UUFDekMsSUFBSTFXLEVBQUEsQ0FBR3pNLEd\
              BQUE7UUFDSHlNLEVBQUEsQ0FBRzVMLEtBQUEsR0FBUTRMLEVBQUEsQ0FBR3pNLEdB\
              QUE7UUFDbEIsT0FBT3lNLEVBQUEsQ0FBR3pNLEdBQUE7UUFDVixJQUFJaXdCLFdBQ\
              UEsQ0FBWXhqQixFQUFBLENBQUc1TCxLQUFLLEdBQUc7VUFDdkIsSUFBSTRMLEVBQU\
              EsQ0FBRzVMLEtBQUEsQ0FBTWdPLEdBQUE7VUFDVDdILEtBQUEsQ0FBTWdQLFNBQUE\
              sQ0FBVXpRLElBQUEsQ0FBS3drQixLQUFBLENBQU10ZCxFQUFBLENBQUc1TCxLQUFB\
              LENBQU1nTyxHQUFBLEVBQUtwQyxFQUFBLENBQUcwVyxHQUFHOztVQUUvQzFXLEVBQ\
              UEsQ0FBRzVMLEtBQUEsQ0FBTWdPLEdBQUEsR0FBTXBDLEVBQUEsQ0FBRzBXLEdBQU\
              E7UUFDMUI7UUFFSW5jLEtBQUEsQ0FBTWdQLFNBQUEsQ0FBVXpRLElBQUEsQ0FBS3d\
              rQixLQUFBLENBQU10ZCxFQUFBLENBQUc4QyxLQUFBLEVBQU85QyxFQUFBLENBQUcw\
              VyxHQUFHO1FBQy9DLE9BQU8xVyxFQUFBLENBQUcwVyxHQUFBO01BQ2Q7SUFDSjtFQ\
              UNKO0FBQ0o7QUE0QkEsSUFBTWptQixNQUFBLEdBQU4sTUFBYTtFQUFBO0FBQUE7QU\
              FBQTtBQUFBO0VBS1RvRixZQUFZK3RCLFNBQUEsRUFBVztJQUVuQixLQUFLQyxTQUF\
              BLEdBQVk7SUFFakIsS0FBS0MsUUFBQSxHQUFXO0lBRWhCLEtBQUs1aUIsTUFBQSxH\
              QUFTO0lBRWQsS0FBS3dNLE1BQUEsR0FBUztJQUVkLEtBQUtxVyxTQUFBLEdBQVk7S\
              UFFakIsS0FBS0MsS0FBQSxHQUFRLEVBQUM7SUFFZCxLQUFLeHNCLE1BQUEsR0FBUz\
              tJQUVkLEtBQUtzRSxJQUFBLEdBQU87SUFFWixLQUFLbW9CLEtBQUEsR0FBUSxJQUF\
              JM3pCLEtBQUEsQ0FBTTtJQUN2QixLQUFLc3pCLFNBQUEsR0FBWUEsU0FBQTtFQUNy\
              QjtFQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7RUFTQSxDQ\
              UFDbnlCLE1BQU0rRixNQUFBLEVBQVFxcEIsVUFBQSxHQUFhLE9BQU87SUFDL0IsSU\
              FBSSxLQUFLK0MsU0FBQSxJQUFhLEtBQUtsVyxNQUFBLEtBQVc7SUFDbEMsS0FBS2t\
              XLFNBQUEsQ0FBVSxDQUFDO0lBQ3BCLFdBQVdNLE1BQUEsSUFBVSxLQUFLRCxLQUFB\
              LENBQU1yRCxHQUFBLENBQUlwcEIsTUFBQSxFQUFRcXBCLFVBQVU7SUFDbEQsT0FBQ\
              WxELFdBQUEsQ0FBTyxLQUFLaGUsSUFBQSxDQUFLdWtCLE1BQU07SUFDM0IsSUFBSS\
              xDQUFDckQsVUFBQTtJQUNELE9BQUFsRCxXQUFBLENBQU8sS0FBS3ZiLEdBQUEsQ0F\
              BSTtFQUN4QjtFQUFBO0FBQUE7QUFBQTtFQUlBLENBQUN6QyxLQUFLbkksTUFBQSxF\
              QUFRO0lBQ1YsS0FBS0EsTUFBQSxHQUFTQSxNQUFBO0lBQ2QsSUFBSSxLQUFLc3NCL\
              FFBQUEsRUFBVTtNQUNmLEtBQUtBLFFBQUEsR0FBVztNQUNoQixPQUFBbkcsV0FBQS\
              xDQUFPLEtBQUt3RyxJQUFBLENBQUs7TUFDakIsS0FBS3pXLE1BQUEsSUFBVWxXLE1\
              BQUEsQ0FBT3pELE1BQUE7TUFDdEI7SUFDSjtJQUNBLE1BQU0rSCxJQUFBLEdBQU95\
              aUIsU0FBQSxDQUFVL21CLE1BQU07SUFDN0IsSUFBSSxDQUFDc0UsSUFBQSxFQUFNO\
              01BQ1AsTUFBTWtaLE9BQUEsR0FBVSxxQkFBcUJ4ZCxNQUFNO01BQzNDLE9BQUFtbU\
              IsV0FBQSxDQUFPLEtBQUt5RyxHQUFBLENBQUksRUFBRXRvQixJQUFBLEVBQU0sU0F\
              BUzRSLE1BQUEsRUFBUSxLQUFLQSxNQUFBLEVBQVFzSCxPQUFBLEVBQVN4ZCxNQUFB\
              LENBQU8sQ0FBQztNQUN2RSxLQUFLa1csTUFBQSxJQUFVbFcsTUFBQSxDQUFPekQsT\
              UFBQTtJQUMxQixXQUNTK0gsSUFBQSxLQUFTLFVBQVU7TUFDeEIsS0FBSytuQixTQU\
              FBLEdBQVk7TUFDakIsS0FBS0MsUUFBQSxHQUFXO01BQ2hCLEtBQUtob0IsSUFBQSx\
              HQUFPO0lBQ2hCLE9BQ0s7TUFDRCxLQUFLQSxJQUFBLEdBQU9BLElBQUE7TUFDWixP\
              QUFBNmhCLFdBQUEsQ0FBTyxLQUFLd0csSUFBQSxDQUFLO01BQ2pCLFFBQVFyb0IsS\
              UFBQTtRQUNKLEtBQUs7VUFDRCxLQUFLK25CLFNBQUEsR0FBWTtVQUNqQixLQUFLM2\
              lCLE1BQUEsR0FBUztVQUNkLElBQUksS0FBSzBpQixTQUFBO1VBQ0wsS0FBS0EsU0F\
              BQSxDQUFVLEtBQUtsVyxNQUFBLEdBQVNsVyxNQUFBLENBQU96RCxNQUFNO1VBQzlD\
              O1FBQ0osS0FBSztVQUNELElBQUksS0FBSzh2QixTQUFBLElBQWFyc0IsTUFBQSxDQ\
              UFPLENBQUMsTUFBTTtVQUNoQyxLQUFLMEosTUFBQSxJQUFVMUosTUFBQSxDQUFPek\
              QsTUFBQTtVQUMxQjtRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztVQUNELEl\
              BQUksS0FBSzh2QixTQUFBO1VBQ0wsS0FBSzNpQixNQUFBLElBQVUxSixNQUFBLENB\
              QU96RCxNQUFBO1VBQzFCO1FBQ0osS0FBSztRQUNMLEtBQUs7VUFDRDtRQUNKO1VBQ\
              0ksS0FBSzh2QixTQUFBLEdBQVk7TUFDekI7TUFDQSxLQUFLblcsTUFBQSxJQUFVbF\
              csTUFBQSxDQUFPekQsTUFBQTtJQUMxQjtFQUNKO0VBQUE7RUFFQSxDQUFDcU8sSUF\
              BQSxFQUFNO0lBQ0gsT0FBTyxLQUFLNGhCLEtBQUEsQ0FBTWp3QixNQUFBLEdBQVM7\
              SUFDdkIsT0FBQTRwQixXQUFBLENBQU8sS0FBS3lHLEdBQUEsQ0FBSTtFQUN4QjtFQ\
              UNBLElBQUlDLFlBQUEsRUFBYztJQUNkLE1BQU01TixFQUFBLEdBQUs7TUFDUDNhLE\
              lBQUEsRUFBTSxLQUFLQSxJQUFBO01BQ1g0UixNQUFBLEVBQVEsS0FBS0EsTUFBQTt\
              NQUNieE0sTUFBQSxFQUFRLEtBQUtBLE1BQUE7TUFDYjFKLE1BQUEsRUFBUSxLQUFL\
              QTtJQUNqQjtJQUNBLE9BQU9pZixFQUFBO0VBQ1g7RUFDQSxDQUFDME4sS0FBQSxFQ\
              UFPO0lBQ0osTUFBTUcsR0FBQSxHQUFNLEtBQUsvQyxJQUFBLENBQUssQ0FBQztJQU\
              N2QixJQUFJLEtBQUt6bEIsSUFBQSxLQUFTLGNBQWMsQ0FBQ3dvQixHQUFBLElBQU9\
              BLEdBQUEsQ0FBSXhvQixJQUFBLEtBQVMsWUFBWTtNQUM3RCxPQUFPLEtBQUtrb0Is\
              S0FBQSxDQUFNandCLE1BQUEsR0FBUztNQUN2QixPQUFBNHBCLFdBQUEsQ0FBTyxLQ\
              UFLeUcsR0FBQSxDQUFJO01BQ3BCLEtBQUtKLEtBQUEsQ0FBTWxyQixJQUFBLENBQU\
              s7UUFDWmdELElBQUEsRUFBTTtRQUNONFIsTUFBQSxFQUFRLEtBQUtBLE1BQUE7UUF\
              DYmxXLE1BQUEsRUFBUSxLQUFLQTtNQUNqQixDQUFDO01BQ0Q7SUFDSjtJQUNBLElB\
              QUksQ0FBQzhzQixHQUFBO0lBQ0QsT0FBTyxPQUFBM0csV0FBQSxDQUFPLEtBQUs0R\
              yxNQUFBLENBQU87SUFDOUIsUUFBUUQsR0FBQSxDQUFJeG9CLElBQUE7TUFDUixLQU\
              FLO1FBQ0QsT0FBTyxPQUFBNmhCLFdBQUEsQ0FBTyxLQUFLNkcsUUFBQSxDQUFTRix\
              HQUFHO01BQ25DLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7UUFD\
              RCxPQUFPLE9BQUEzRyxXQUFBLENBQU8sS0FBS2xFLE1BQUEsQ0FBTzZLLEdBQUc7T\
              UFDakMsS0FBSztRQUNELE9BQU8sT0FBQTNHLFdBQUEsQ0FBTyxLQUFLOEcsV0FBQS\
              xDQUFZSCxHQUFHO01BQ3RDLEtBQUs7UUFDRCxPQUFPLE9BQUEzRyxXQUFBLENBQU8\
              sS0FBSytHLFFBQUEsQ0FBU0osR0FBRztNQUNuQyxLQUFLO1FBQ0QsT0FBTyxPQUFB\
              M0csV0FBQSxDQUFPLEtBQUtnSCxhQUFBLENBQWNMLEdBQUc7TUFDeEMsS0FBSztRQ\
              UNELE9BQU8sT0FBQTNHLFdBQUEsQ0FBTyxLQUFLaUgsY0FBQSxDQUFlTixHQUFHO0\
              1BQ3pDLEtBQUs7UUFDRCxPQUFPLE9BQUEzRyxXQUFBLENBQU8sS0FBS2tILFdBQUE\
              sQ0FBWVAsR0FBRztJQUMxQztJQUVBLE9BQUEzRyxXQUFBLENBQU8sS0FBS3lHLEdB\
              QUEsQ0FBSTtFQUNwQjtFQUNBN0MsS0FBSzlnQixDQUFBLEVBQUc7SUFDSixPQUFPL\
              EtBQUt1akIsS0FBQSxDQUFNLEtBQUtBLEtBQUEsQ0FBTWp3QixNQUFBLEdBQVMwTS\
              xDQUFDO0VBQzNDO0VBQ0EsQ0FBQzJqQixJQUFJcnNCLEtBQUEsRUFBTztJQUNSLE1\
              BQU1zZSxLQUFBLEdBQVF0ZSxLQUFBLFdBQUFBLEtBQUEsR0FBUyxLQUFLaXNCLEtB\
              QUEsQ0FBTUksR0FBQSxDQUFJO0lBRXRDLElBQUksQ0FBQy9OLEtBQUEsRUFBTztNQ\
              UNSLE1BQU1yQixPQUFBLEdBQVU7TUFDaEIsTUFBTSxFQUFFbFosSUFBQSxFQUFNLF\
              NBQVM0UixNQUFBLEVBQVEsS0FBS0EsTUFBQSxFQUFRbFcsTUFBQSxFQUFRLElBQUl\
              3ZCxPQUFBLENBQVE7SUFDcEUsV0FDUyxLQUFLZ1AsS0FBQSxDQUFNandCLE1BQUEs\
              S0FBVyxHQUFHO01BQzlCLE1BQU1zaUIsS0FBQTtJQUNWLE9BQ0s7TUFDRCxNQUFNa\
              U8sR0FBQSxHQUFNLEtBQUsvQyxJQUFBLENBQUssQ0FBQztNQUN2QixJQUFJbEwsS0\
              FBQSxDQUFNdmEsSUFBQSxLQUFTLGdCQUFnQjtRQUUvQnVhLEtBQUEsQ0FBTW5WLE1\
              BQUEsR0FBUyxZQUFZb2pCLEdBQUEsR0FBTUEsR0FBQSxDQUFJcGpCLE1BQUEsR0FB\
              UztNQUNsRCxXQUNTbVYsS0FBQSxDQUFNdmEsSUFBQSxLQUFTLHFCQUFxQndvQixHQ\
              UFBLENBQUl4b0IsSUFBQSxLQUFTLFlBQVk7UUFFbEV1YSxLQUFBLENBQU1uVixNQU\
              FBLEdBQVM7TUFDbkI7TUFDQSxJQUFJbVYsS0FBQSxDQUFNdmEsSUFBQSxLQUFTO01\
              BQ2Y2bkIsZUFBQSxDQUFnQnROLEtBQUs7TUFDekIsUUFBUWlPLEdBQUEsQ0FBSXhv\
              QixJQUFBO1FBQ1IsS0FBSztVQUNEd29CLEdBQUEsQ0FBSWx3QixLQUFBLEdBQVFpa\
              UIsS0FBQTtVQUNaO1FBQ0osS0FBSztVQUNEaU8sR0FBQSxDQUFJdmQsS0FBQSxDQU\
              FNak8sSUFBQSxDQUFLdWQsS0FBSztVQUNwQjtRQUNKLEtBQUssWUFBYTtZQUNkLE1\
              BQU1yVyxFQUFBLEdBQUtza0IsR0FBQSxDQUFJeHdCLEtBQUEsQ0FBTXd3QixHQUFB\
              LENBQUl4d0IsS0FBQSxDQUFNQyxNQUFBLEdBQVMsQ0FBQztZQUN6QyxJQUFJaU0sR\
              UFBQSxDQUFHNUwsS0FBQSxFQUFPO2NBQ1Zrd0IsR0FBQSxDQUFJeHdCLEtBQUEsQ0\
              FBTWdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPLEVBQUMsRUFBR3ZQLEdBQUE\
              sRUFBSzhpQixLQUFBLEVBQU9LLEdBQUEsRUFBSyxFQUFDLENBQUUsQ0FBQztjQUNq\
              RCxLQUFLcU4sU0FBQSxHQUFZO2NBQ2pCO1lBQ0osV0FDUy9qQixFQUFBLENBQUcwV\
              yxHQUFBLEVBQUs7Y0FDYjFXLEVBQUEsQ0FBRzVMLEtBQUEsR0FBUWlpQixLQUFBO1\
              lBQ2YsT0FDSztjQUNEaGpCLE1BQUEsQ0FBT3FCLE1BQUEsQ0FBT3NMLEVBQUEsRUF\
              BSSxFQUFFek0sR0FBQSxFQUFLOGlCLEtBQUEsRUFBT0ssR0FBQSxFQUFLLEVBQUMs\
              Q0FBRSxDQUFDO2NBQ3pDLEtBQUtxTixTQUFBLEdBQVksQ0FBQy9qQixFQUFBLENBQ\
              UdxSCxXQUFBO2NBQ3JCO1lBQ0o7WUFDQTtVQUNKO1FBQ0EsS0FBSyxZQUFhO1lBQ2\
              QsTUFBTXJILEVBQUEsR0FBS3NrQixHQUFBLENBQUl4d0IsS0FBQSxDQUFNd3dCLEd\
              BQUEsQ0FBSXh3QixLQUFBLENBQU1DLE1BQUEsR0FBUyxDQUFDO1lBQ3pDLElBQUlp\
              TSxFQUFBLENBQUc1TCxLQUFBO1lBQ0hrd0IsR0FBQSxDQUFJeHdCLEtBQUEsQ0FBT\
              WdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPLEVBQUMsRUFBRzFPLEtBQUEsRU\
              FBT2lpQixLQUFBLENBQU0sQ0FBQzs7WUFFMUNyVyxFQUFBLENBQUc1TCxLQUFBLEd\
              BQVFpaUIsS0FBQTtZQUNmO1VBQ0o7UUFDQSxLQUFLLGtCQUFtQjtZQUNwQixNQUFN\
              clcsRUFBQSxHQUFLc2tCLEdBQUEsQ0FBSXh3QixLQUFBLENBQU13d0IsR0FBQSxDQ\
              UFJeHdCLEtBQUEsQ0FBTUMsTUFBQSxHQUFTLENBQUM7WUFDekMsSUFBSSxDQUFDaU\
              0sRUFBQSxJQUFNQSxFQUFBLENBQUc1TCxLQUFBO1lBQ1Zrd0IsR0FBQSxDQUFJeHd\
              CLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPLEVBQUMsRUFB\
              R3ZQLEdBQUEsRUFBSzhpQixLQUFBLEVBQU9LLEdBQUEsRUFBSyxFQUFDLENBQUUsQ\
              0FBQztZQUFBLElBQzVDMVcsRUFBQSxDQUFHMFcsR0FBQTtZQUNSMVcsRUFBQSxDQU\
              FHNUwsS0FBQSxHQUFRaWlCLEtBQUE7O1lBRVhoakIsTUFBQSxDQUFPcUIsTUFBQSx\
              DQUFPc0wsRUFBQSxFQUFJLEVBQUV6TSxHQUFBLEVBQUs4aUIsS0FBQSxFQUFPSyxH\
              QUFBLEVBQUssRUFBQyxDQUFFLENBQUM7WUFDN0M7VUFDSjtRQUVBO1VBQ0ksT0FBQ\
              WlILFdBQUEsQ0FBTyxLQUFLeUcsR0FBQSxDQUFJO1VBQ2hCLE9BQUF6RyxXQUFBLE\
              NBQU8sS0FBS3lHLEdBQUEsQ0FBSS9OLEtBQUs7TUFDN0I7TUFDQSxLQUFLaU8sR0F\
              BQSxDQUFJeG9CLElBQUEsS0FBUyxjQUNkd29CLEdBQUEsQ0FBSXhvQixJQUFBLEtB\
              QVMsZUFDYndvQixHQUFBLENBQUl4b0IsSUFBQSxLQUFTLGlCQUNadWEsS0FBQSxDQ\
              UFNdmEsSUFBQSxLQUFTLGVBQWV1YSxLQUFBLENBQU12YSxJQUFBLEtBQVMsY0FBYz\
              tRQUM1RCxNQUFNeWEsSUFBQSxHQUFPRixLQUFBLENBQU12aUIsS0FBQSxDQUFNdWl\
              CLEtBQUEsQ0FBTXZpQixLQUFBLENBQU1DLE1BQUEsR0FBUyxDQUFDO1FBQy9DLElB\
              QUl3aUIsSUFBQSxJQUNBLENBQUNBLElBQUEsQ0FBS0csR0FBQSxJQUNOLENBQUNIL\
              ElBQUEsQ0FBS25pQixLQUFBLElBQ05taUIsSUFBQSxDQUFLelQsS0FBQSxDQUFNL0\
              8sTUFBQSxHQUFTLEtBQ3BCd3ZCLGlCQUFBLENBQWtCaE4sSUFBQSxDQUFLelQsS0F\
              BSyxNQUFNLE9BQ2pDdVQsS0FBQSxDQUFNblYsTUFBQSxLQUFXLEtBQ2RxVixJQUFB\
              LENBQUt6VCxLQUFBLENBQU10QyxLQUFBLENBQU0sQ0FBQWlXLEVBQUEsS0FBTUEsR\
              UFBQSxDQUFHM2EsSUFBQSxLQUFTLGFBQWEyYSxFQUFBLENBQUd2VixNQUFBLEdBQV\
              NtVixLQUFBLENBQU1uVixNQUFNLElBQUk7VUFDaEYsSUFBSW9qQixHQUFBLENBQUl\
              4b0IsSUFBQSxLQUFTO1VBQ2J3b0IsR0FBQSxDQUFJbGlCLEdBQUEsR0FBTW1VLElB\
              QUEsQ0FBS3pULEtBQUE7O1VBRWZ3aEIsR0FBQSxDQUFJeHdCLEtBQUEsQ0FBTWdGL\
              ElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPeVQsSUFBQSxDQUFLelQsS0FBQSxDQU\
              FNLENBQUM7VUFDeEN1VCxLQUFBLENBQU12aUIsS0FBQSxDQUFNRyxNQUFBLENBQU8\
              sSUFBSSxDQUFDO1FBQzVCO01BQ0o7SUFDSjtFQUNKO0VBQ0EsQ0FBQ3N3QixPQUFB\
              LEVBQVM7SUFDTixRQUFRLEtBQUt6b0IsSUFBQTtNQUNULEtBQUs7UUFDRCxNQUFNL\
              EVBQUVBLElBQUEsRUFBTSxhQUFhNFIsTUFBQSxFQUFRLEtBQUtBLE1BQUEsRUFBUW\
              xXLE1BQUEsRUFBUSxLQUFLQSxNQUFBLENBQU87UUFDcEU7TUFDSixLQUFLO01BQ0w\
              sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO1FBQ0QsTUFBTSxLQUFLNnNCLFdBQUE7\
              UUFDWDtNQUNKLEtBQUs7TUFDTCxLQUFLLFlBQWE7VUFDZCxNQUFNOXJCLEdBQUEsR\
              0FBTTtZQUNSdUQsSUFBQSxFQUFNO1lBQ040UixNQUFBLEVBQVEsS0FBS0EsTUFBQT\
              tZQUNiNUssS0FBQSxFQUFPO1VBQ1g7VUFDQSxJQUFJLEtBQUtoSCxJQUFBLEtBQVM\
              7VUFDZHZELEdBQUEsQ0FBSXVLLEtBQUEsQ0FBTWhLLElBQUEsQ0FBSyxLQUFLdXJC\
              LFdBQVc7VUFDbkMsS0FBS0wsS0FBQSxDQUFNbHJCLElBQUEsQ0FBS1AsR0FBRztVQ\
              UNuQjtRQUNKO0lBQ0o7SUFDQSxNQUFNO01BQ0Z1RCxJQUFBLEVBQU07TUFDTjRSLE\
              1BQUEsRUFBUSxLQUFLQSxNQUFBO01BQ2JzSCxPQUFBLEVBQVMsY0FBYyxLQUFLbFo\
              sSUFBSTtNQUNoQ3RFLE1BQUEsRUFBUSxLQUFLQTtJQUNqQjtFQUNKO0VBQ0EsQ0FB\
              Q2d0QixTQUFTanNCLEdBQUEsRUFBSztJQUNYLElBQUlBLEdBQUEsQ0FBSW5FLEtBQ\
              UE7SUFDSixPQUFPLE9BQUF1cEIsV0FBQSxDQUFPLEtBQUttSCxPQUFBLENBQVF2c0\
              IsR0FBRztJQUNsQyxRQUFRLEtBQUt1RCxJQUFBO01BQ1QsS0FBSyxZQUFhO1VBQ2Q\
              sSUFBSXluQixpQkFBQSxDQUFrQmhyQixHQUFBLENBQUl1SyxLQUFLLE1BQU0sSUFB\
              STtZQUNyQyxPQUFBNmEsV0FBQSxDQUFPLEtBQUt5RyxHQUFBLENBQUk7WUFDaEIsT\
              0FBQXpHLFdBQUEsQ0FBTyxLQUFLd0csSUFBQSxDQUFLO1VBQ3JCO1VBRUk1ckIsR0\
              FBQSxDQUFJdUssS0FBQSxDQUFNaEssSUFBQSxDQUFLLEtBQUt1ckIsV0FBVztVQUN\
              uQztRQUNKO01BQ0EsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztN\
              QUNMLEtBQUs7UUFDRDlyQixHQUFBLENBQUl1SyxLQUFBLENBQU1oSyxJQUFBLENBQ\
              UssS0FBS3VyQixXQUFXO1FBQy9CO0lBQ1I7SUFDQSxNQUFNVSxFQUFBLEdBQUssS0\
              FBS0MsZUFBQSxDQUFnQnpzQixHQUFHO0lBQ25DLElBQUl3c0IsRUFBQTtJQUNBLEt\
              BQUtmLEtBQUEsQ0FBTWxyQixJQUFBLENBQUtpc0IsRUFBRTtJQUNqQjtNQUNELE1B\
              QU07UUFDRmpwQixJQUFBLEVBQU07UUFDTjRSLE1BQUEsRUFBUSxLQUFLQSxNQUFBO\
              1FBQ2JzSCxPQUFBLEVBQVMsY0FBYyxLQUFLbFosSUFBSTtRQUNoQ3RFLE1BQUEsRU\
              FBUSxLQUFLQTtNQUNqQjtJQUNKO0VBQ0o7RUFDQSxDQUFDaWlCLE9BQU9BLE1BQUE\
              sRUFBUTtJQUNaLElBQUksS0FBSzNkLElBQUEsS0FBUyxpQkFBaUI7TUFDL0IsTUFB\
              TXVHLElBQUEsR0FBT29oQixZQUFBLENBQWEsS0FBS2xDLElBQUEsQ0FBSyxDQUFDL\
              ENBQUM7TUFDdEMsTUFBTXplLEtBQUEsR0FBUTRnQixxQkFBQSxDQUFzQnJoQixJQU\
              FJO01BQ3hDLElBQUlxVSxHQUFBO01BQ0osSUFBSStDLE1BQUEsQ0FBT3JYLEdBQUE\
              sRUFBSztRQUNac1UsR0FBQSxHQUFNK0MsTUFBQSxDQUFPclgsR0FBQTtRQUNic1Us\
              R0FBQSxDQUFJNWQsSUFBQSxDQUFLLEtBQUt1ckIsV0FBVztRQUN6QixPQUFPNUssT\
              UFBQSxDQUFPclgsR0FBQTtNQUNsQjtNQUVJc1UsR0FBQSxHQUFNLENBQUMsS0FBSz\
              JOLFdBQVc7TUFDM0IsTUFBTTNsQixJQUFBLEdBQU07UUFDUjVDLElBQUEsRUFBTTt\
              RQUNONFIsTUFBQSxFQUFRK0wsTUFBQSxDQUFPL0wsTUFBQTtRQUNmeE0sTUFBQSxF\
              QUFRdVksTUFBQSxDQUFPdlksTUFBQTtRQUNmcE4sS0FBQSxFQUFPLENBQUMsRUFBR\
              WdQLEtBQUEsRUFBT3ZQLEdBQUEsRUFBS2ttQixNQUFBLEVBQVEvQyxHQUFBLENBQU\
              ksQ0FBQztNQUN2QztNQUNBLEtBQUtxTixTQUFBLEdBQVk7TUFDakIsS0FBS0MsS0F\
              BQSxDQUFNLEtBQUtBLEtBQUEsQ0FBTWp3QixNQUFBLEdBQVMsQ0FBQyxJQUFJMkss\
              SUFBQTtJQUN4QztJQUVJLE9BQUFpZixXQUFBLENBQU8sS0FBS21ILE9BQUEsQ0FBU\
              XJMLE1BQU07RUFDbEM7RUFDQSxDQUFDZ0wsWUFBWWhMLE1BQUEsRUFBUTtJQUNqQi\
              xRQUFRLEtBQUszZCxJQUFBO01BQ1QsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO1F\
              BQ0QyZCxNQUFBLENBQU8xUyxLQUFBLENBQU1qTyxJQUFBLENBQUssS0FBS3VyQixX\
              QUFXO1FBQ2xDO01BQ0osS0FBSztRQUNENUssTUFBQSxDQUFPamlCLE1BQUEsR0FBU\
              yxLQUFLQSxNQUFBO1FBRXJCLEtBQUtxc0IsU0FBQSxHQUFZO1FBQ2pCLEtBQUszaU\
              IsTUFBQSxHQUFTO1FBQ2QsSUFBSSxLQUFLMGlCLFNBQUEsRUFBVztVQUNoQixJQUF\
              JMUUsRUFBQSxHQUFLLEtBQUsxbkIsTUFBQSxDQUFPdU4sT0FBQSxDQUFRLElBQUks\
              SUFBSTtVQUNyQyxPQUFPbWEsRUFBQSxLQUFPLEdBQUc7WUFDYixLQUFLMEUsU0FBQ\
              SxDQUFVLEtBQUtsVyxNQUFBLEdBQVN3UixFQUFFO1lBQy9CQSxFQUFBLEdBQUssS0\
              FBSzFuQixNQUFBLENBQU91TixPQUFBLENBQVEsTUFBTW1hLEVBQUUsSUFBSTtVQUN\
              6QztRQUNKO1FBQ0EsT0FBQXZCLFdBQUEsQ0FBTyxLQUFLeUcsR0FBQSxDQUFJO1FB\
              Q2hCO01BRUo7UUFDSSxPQUFBekcsV0FBQSxDQUFPLEtBQUt5RyxHQUFBLENBQUk7U\
              UFDaEIsT0FBQXpHLFdBQUEsQ0FBTyxLQUFLd0csSUFBQSxDQUFLO0lBQ3pCO0VBQ0\
              o7RUFDQSxDQUFDTyxTQUFTaG1CLElBQUEsRUFBSztJQXRkbkIsSUFBQTdKLEVBQUE\
              7SUF1ZFEsTUFBTW1MLEVBQUEsR0FBS3RCLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTTRL\
              LElBQUEsQ0FBSTVLLEtBQUEsQ0FBTUMsTUFBQSxHQUFTLENBQUM7SUFFekMsUUFBU\
              SxLQUFLK0gsSUFBQTtNQUNULEtBQUs7UUFDRCxLQUFLaW9CLFNBQUEsR0FBWTtRQU\
              NqQixJQUFJL2pCLEVBQUEsQ0FBRzVMLEtBQUEsRUFBTztVQUNWLE1BQU1nTyxHQUF\
              BLEdBQU0sU0FBU3BDLEVBQUEsQ0FBRzVMLEtBQUEsR0FBUTRMLEVBQUEsQ0FBRzVM\
              LEtBQUEsQ0FBTWdPLEdBQUEsR0FBTTtVQUMvQyxNQUFNbVUsSUFBQSxHQUFPaGMsS\
              0FBQSxDQUFNQyxPQUFBLENBQVE0SCxHQUFHLElBQUlBLEdBQUEsQ0FBSUEsR0FBQS\
              xDQUFJck8sTUFBQSxHQUFTLENBQUMsSUFBSTtVQUN4RCxLQUFJd2lCLElBQUEsb0J\
              BQUFBLElBQUEsQ0FBTXphLElBQUEsTUFBUztVQUNmc0csR0FBQSxvQkFBQUEsR0FB\
              QSxDQUFLdEosSUFBQSxDQUFLLEtBQUt1ckIsV0FBQTs7VUFFZjNsQixJQUFBLENBQ\
              Uk1SyxLQUFBLENBQU1nRixJQUFBLENBQUssRUFBRWdLLEtBQUEsRUFBTyxDQUFDLE\
              tBQUt1aEIsV0FBVyxFQUFFLENBQUM7UUFDcEQsV0FDU3JrQixFQUFBLENBQUcwVyx\
              HQUFBLEVBQUs7VUFDYjFXLEVBQUEsQ0FBRzBXLEdBQUEsQ0FBSTVkLElBQUEsQ0FB\
              SyxLQUFLdXJCLFdBQVc7UUFDaEMsT0FDSztVQUNEcmtCLEVBQUEsQ0FBRzhDLEtBQ\
              UEsQ0FBTWhLLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7UUFDbEM7UUFDQTtNQUNKLE\
              tBQUs7TUFDTCxLQUFLO1FBQ0QsSUFBSXJrQixFQUFBLENBQUc1TCxLQUFBLEVBQU8\
              7VUFDVnNLLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSyxFQUFFZ0ss\
              S0FBQSxFQUFPLENBQUMsS0FBS3VoQixXQUFXLEVBQUUsQ0FBQztRQUNoRCxXQUNTc\
              mtCLEVBQUEsQ0FBRzBXLEdBQUEsRUFBSztVQUNiMVcsRUFBQSxDQUFHMFcsR0FBQS\
              xDQUFJNWQsSUFBQSxDQUFLLEtBQUt1ckIsV0FBVztRQUNoQyxPQUNLO1VBQ0QsSUF\
              BSSxLQUFLWSxpQkFBQSxDQUFrQmpsQixFQUFBLENBQUc4QyxLQUFBLEVBQU9wRSxJ\
              QUFBLENBQUl3QyxNQUFNLEdBQUc7WUFDOUMsTUFBTW1CLElBQUEsR0FBTzNELElBQ\
              UEsQ0FBSTVLLEtBQUEsQ0FBTTRLLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTUMsTUFBQS\
              xHQUFTLENBQUM7WUFDM0MsTUFBTXFPLEdBQUEsSUFBTXZOLEVBQUEsR0FBQXdOLEl\
              BQUEsb0JBQUFBLElBQUEsQ0FBTWpPLEtBQUEsS0FBTixnQkFBQVMsRUFBQSxDQUFh\
              dU4sR0FBQTtZQUN6QixJQUFJN0gsS0FBQSxDQUFNQyxPQUFBLENBQVE0SCxHQUFHL\
              EdBQUc7Y0FDcEI3SCxLQUFBLENBQU1nUCxTQUFBLENBQVV6USxJQUFBLENBQUt3a0\
              IsS0FBQSxDQUFNbGIsR0FBQSxFQUFLcEMsRUFBQSxDQUFHOEMsS0FBSztjQUN4Q1Y\
              sR0FBQSxDQUFJdEosSUFBQSxDQUFLLEtBQUt1ckIsV0FBVztjQUN6QjNsQixJQUFB\
              LENBQUk1SyxLQUFBLENBQU1zd0IsR0FBQSxDQUFJO2NBQ2Q7WUFDSjtVQUNKO1VBQ\
              0Fwa0IsRUFBQSxDQUFHOEMsS0FBQSxDQUFNaEssSUFBQSxDQUFLLEtBQUt1ckIsV0\
              FBVztRQUNsQztRQUNBO0lBQ1I7SUFDQSxJQUFJLEtBQUtuakIsTUFBQSxJQUFVeEM\
              sSUFBQSxDQUFJd0MsTUFBQSxFQUFRO01BQzNCLE1BQU1na0IsV0FBQSxHQUFjLENB\
              QUMsS0FBS25CLFNBQUEsSUFBYSxLQUFLN2lCLE1BQUEsS0FBV3hDLElBQUEsQ0FBS\
              XdDLE1BQUE7TUFDM0QsTUFBTWlrQixVQUFBLEdBQWFELFdBQUEsS0FDZGxsQixFQU\
              FBLENBQUcwVyxHQUFBLElBQU8xVyxFQUFBLENBQUdxSCxXQUFBLEtBQ2QsS0FBS3Z\
              MLElBQUEsS0FBUztNQUVsQixJQUFJZ0gsS0FBQSxHQUFRLEVBQUM7TUFDYixJQUFJ\
              cWlCLFVBQUEsSUFBY25sQixFQUFBLENBQUcwVyxHQUFBLElBQU8sQ0FBQzFXLEVBQ\
              UEsQ0FBRzVMLEtBQUEsRUFBTztRQUNuQyxNQUFNOHFCLEVBQUEsR0FBSyxFQUFDO1\
              FBQ1osU0FBU3JyQixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJbU0sRUFBQSxDQUF\
              HMFcsR0FBQSxDQUFJM2lCLE1BQUEsRUFBUSxFQUFFRixDQUFBLEVBQUc7VUFDcEMs\
              TUFBTTRpQixFQUFBLEdBQUt6VyxFQUFBLENBQUcwVyxHQUFBLENBQUk3aUIsQ0FBQ\
              ztVQUNuQixRQUFRNGlCLEVBQUEsQ0FBRzNhLElBQUE7WUFDUCxLQUFLO2NBQ0Rvak\
              IsRUFBQSxDQUFHcG1CLElBQUEsQ0FBS2pGLENBQUM7Y0FDVDtZQUNKLEtBQUs7Y0F\
              DRDtZQUNKLEtBQUs7Y0FDRCxJQUFJNGlCLEVBQUEsQ0FBR3ZWLE1BQUEsR0FBU3hD\
              LElBQUEsQ0FBSXdDLE1BQUE7Y0FDaEJnZSxFQUFBLENBQUduckIsTUFBQSxHQUFTO\
              2NBQ2hCO1lBQ0o7Y0FDSW1yQixFQUFBLENBQUduckIsTUFBQSxHQUFTO1VBQ3BCO1\
              FBQ0o7UUFDQSxJQUFJbXJCLEVBQUEsQ0FBR25yQixNQUFBLElBQVU7UUFDYitPLEt\
              BQUEsR0FBUTlDLEVBQUEsQ0FBRzBXLEdBQUEsQ0FBSXppQixNQUFBLENBQU9pckIs\
              RUFBQSxDQUFHLENBQUMsQ0FBQztNQUNuQztNQUNBLFFBQVEsS0FBS3BqQixJQUFBO\
              1FBQ1QsS0FBSztRQUNMLEtBQUs7VUFDRCxJQUFJcXBCLFVBQUEsSUFBY25sQixFQU\
              FBLENBQUc1TCxLQUFBLEVBQU87WUFDeEIwTyxLQUFBLENBQU1oSyxJQUFBLENBQUs\
              sS0FBS3VyQixXQUFXO1lBQzNCM2xCLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTWdGLElB\
              QUEsQ0FBSyxFQUFFZ0ssS0FBQSxDQUFNLENBQUM7WUFDeEIsS0FBS2loQixTQUFBL\
              EdBQVk7VUFDckIsV0FDUy9qQixFQUFBLENBQUcwVyxHQUFBLEVBQUs7WUFDYjFXLE\
              VBQUEsQ0FBRzBXLEdBQUEsQ0FBSTVkLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7VUF\
              DaEMsT0FDSztZQUNEcmtCLEVBQUEsQ0FBRzhDLEtBQUEsQ0FBTWhLLElBQUEsQ0FB\
              SyxLQUFLdXJCLFdBQVc7VUFDbEM7VUFDQTtRQUNKLEtBQUs7VUFDRCxJQUFJLENBQ\
              UNya0IsRUFBQSxDQUFHMFcsR0FBQSxJQUFPLENBQUMxVyxFQUFBLENBQUdxSCxXQU\
              FBLEVBQWE7WUFDNUJySCxFQUFBLENBQUc4QyxLQUFBLENBQU1oSyxJQUFBLENBQUs\
              sS0FBS3VyQixXQUFXO1lBQzlCcmtCLEVBQUEsQ0FBR3FILFdBQUEsR0FBYztVQUNy\
              QixXQUNTOGQsVUFBQSxJQUFjbmxCLEVBQUEsQ0FBRzVMLEtBQUEsRUFBTztZQUM3Q\
              jBPLEtBQUEsQ0FBTWhLLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7WUFDM0IzbEIsSU\
              FBQSxDQUFJNUssS0FBQSxDQUFNZ0YsSUFBQSxDQUFLLEVBQUVnSyxLQUFBLEVBQU9\
              1RSxXQUFBLEVBQWEsS0FBSyxDQUFDO1VBQy9DLE9BQ0s7WUFDRCxLQUFLMmMsS0FB\
              QSxDQUFNbHJCLElBQUEsQ0FBSztjQUNaZ0QsSUFBQSxFQUFNO2NBQ040UixNQUFBL\
              EVBQVEsS0FBS0EsTUFBQTtjQUNieE0sTUFBQSxFQUFRLEtBQUtBLE1BQUE7Y0FDYn\
              BOLEtBQUEsRUFBTyxDQUFDLEVBQUVnUCxLQUFBLEVBQU8sQ0FBQyxLQUFLdWhCLFd\
              BQVcsR0FBR2hkLFdBQUEsRUFBYSxLQUFLLENBQUM7WUFDNUQsQ0FBQztVQUNMO1VB\
              Q0EsS0FBSzBjLFNBQUEsR0FBWTtVQUNqQjtRQUNKLEtBQUs7VUFDRCxJQUFJL2pCL\
              EVBQUEsQ0FBR3FILFdBQUEsRUFBYTtZQUNoQixJQUFJLENBQUNySCxFQUFBLENBQU\
              cwVyxHQUFBLEVBQUs7Y0FDVCxJQUFJMk0sYUFBQSxDQUFjcmpCLEVBQUEsQ0FBRzh\
              DLEtBQUEsRUFBTyxTQUFTLEdBQUc7Z0JBQ3BDelAsTUFBQSxDQUFPcUIsTUFBQSxD\
              QUFPc0wsRUFBQSxFQUFJLEVBQUV6TSxHQUFBLEVBQUssTUFBTW1qQixHQUFBLEVBQ\
              UssQ0FBQyxLQUFLMk4sV0FBVyxFQUFFLENBQUM7Y0FDNUQsT0FDSztnQkFDRCxNQU\
              FNZSxNQUFBLEdBQVExQixxQkFBQSxDQUFzQjFqQixFQUFBLENBQUc4QyxLQUFLO2d\
              CQUM1QyxLQUFLa2hCLEtBQUEsQ0FBTWxyQixJQUFBLENBQUs7a0JBQ1pnRCxJQUFB\
              LEVBQU07a0JBQ040UixNQUFBLEVBQVEsS0FBS0EsTUFBQTtrQkFDYnhNLE1BQUEsR\
              UFBUSxLQUFLQSxNQUFBO2tCQUNicE4sS0FBQSxFQUFPLENBQUMsRUFBRWdQLEtBQU\
              EsRUFBQXNpQixNQUFBLEVBQU83eEIsR0FBQSxFQUFLLE1BQU1takIsR0FBQSxFQUF\
              LLENBQUMsS0FBSzJOLFdBQVcsRUFBRSxDQUFDO2dCQUN6RCxDQUFDO2NBQ0w7WUFD\
              SixXQUNTcmtCLEVBQUEsQ0FBRzVMLEtBQUEsRUFBTztjQUNmc0ssSUFBQSxDQUFJN\
              UssS0FBQSxDQUFNZ0YsSUFBQSxDQUFLLEVBQUVnSyxLQUFBLEVBQU8sRUFBQyxFQU\
              FHdlAsR0FBQSxFQUFLLE1BQU1takIsR0FBQSxFQUFLLENBQUMsS0FBSzJOLFdBQVc\
              sRUFBRSxDQUFDO1lBQ3BFLFdBQ1NoQixhQUFBLENBQWNyakIsRUFBQSxDQUFHMFcs\
              R0FBQSxFQUFLLGVBQWUsR0FBRztjQUM3QyxLQUFLc04sS0FBQSxDQUFNbHJCLElBQ\
              UEsQ0FBSztnQkFDWmdELElBQUEsRUFBTTtnQkFDTjRSLE1BQUEsRUFBUSxLQUFLQS\
              xNQUFBO2dCQUNieE0sTUFBQSxFQUFRLEtBQUtBLE1BQUE7Z0JBQ2JwTixLQUFBLEV\
              BQU8sQ0FBQyxFQUFFZ1AsS0FBQSxFQUFPdlAsR0FBQSxFQUFLLE1BQU1takIsR0FB\
              QSxFQUFLLENBQUMsS0FBSzJOLFdBQVcsRUFBRSxDQUFDO2NBQ3pELENBQUM7WUFDT\
              CxXQUNTYixXQUFBLENBQVl4akIsRUFBQSxDQUFHek0sR0FBRyxLQUN2QixDQUFDOH\
              ZCLGFBQUEsQ0FBY3JqQixFQUFBLENBQUcwVyxHQUFBLEVBQUssU0FBUyxHQUFHO2N\
              BQ25DLE1BQU0wTyxNQUFBLEdBQVExQixxQkFBQSxDQUFzQjFqQixFQUFBLENBQUc4\
              QyxLQUFLO2NBQzVDLE1BQU12UCxHQUFBLEdBQU15TSxFQUFBLENBQUd6TSxHQUFBO\
              2NBQ2YsTUFBTW1qQixHQUFBLEdBQU0xVyxFQUFBLENBQUcwVyxHQUFBO2NBQ2ZBLE\
              dBQUEsQ0FBSTVkLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7Y0FFekIsT0FBT3JrQix\
              FQUFBLENBQUd6TSxHQUFBLEVBQUssT0FBT3lNLEVBQUEsQ0FBRzBXLEdBQUE7Y0FD\
              ekIsS0FBS3NOLEtBQUEsQ0FBTWxyQixJQUFBLENBQUs7Z0JBQ1pnRCxJQUFBLEVBQ\
              U07Z0JBQ040UixNQUFBLEVBQVEsS0FBS0EsTUFBQTtnQkFDYnhNLE1BQUEsRUFBUS\
              xLQUFLQSxNQUFBO2dCQUNicE4sS0FBQSxFQUFPLENBQUMsRUFBRWdQLEtBQUEsRUF\
              BQXNpQixNQUFBLEVBQU83eEIsR0FBQSxFQUFLbWpCLEdBQUEsQ0FBSSxDQUFDO2NB\
              Qy9CLENBQUM7WUFDTCxXQUNTNVQsS0FBQSxDQUFNL08sTUFBQSxHQUFTLEdBQUc7Y\
              0FFdkJpTSxFQUFBLENBQUcwVyxHQUFBLEdBQU0xVyxFQUFBLENBQUcwVyxHQUFBLE\
              NBQUk5aUIsTUFBQSxDQUFPa1AsS0FBQSxFQUFPLEtBQUt1aEIsV0FBVztZQUNsRCx\
              PQUNLO2NBQ0Rya0IsRUFBQSxDQUFHMFcsR0FBQSxDQUFJNWQsSUFBQSxDQUFLLEtB\
              QUt1ckIsV0FBVztZQUNoQztVQUNKLE9BQ0s7WUFDRCxJQUFJLENBQUNya0IsRUFBQ\
              SxDQUFHMFcsR0FBQSxFQUFLO2NBQ1RyakIsTUFBQSxDQUFPcUIsTUFBQSxDQUFPc0\
              wsRUFBQSxFQUFJLEVBQUV6TSxHQUFBLEVBQUssTUFBTW1qQixHQUFBLEVBQUssQ0F\
              BQyxLQUFLMk4sV0FBVyxFQUFFLENBQUM7WUFDNUQsV0FDU3JrQixFQUFBLENBQUc1\
              TCxLQUFBLElBQVMrd0IsVUFBQSxFQUFZO2NBQzdCem1CLElBQUEsQ0FBSTVLLEtBQ\
              UEsQ0FBTWdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPdlAsR0FBQSxFQUFLLE\
              1BQU1takIsR0FBQSxFQUFLLENBQUMsS0FBSzJOLFdBQVcsRUFBRSxDQUFDO1lBQ2h\
              FLFdBQ1NoQixhQUFBLENBQWNyakIsRUFBQSxDQUFHMFcsR0FBQSxFQUFLLGVBQWUs\
              R0FBRztjQUM3QyxLQUFLc04sS0FBQSxDQUFNbHJCLElBQUEsQ0FBSztnQkFDWmdEL\
              ElBQUEsRUFBTTtnQkFDTjRSLE1BQUEsRUFBUSxLQUFLQSxNQUFBO2dCQUNieE0sTU\
              FBQSxFQUFRLEtBQUtBLE1BQUE7Z0JBQ2JwTixLQUFBLEVBQU8sQ0FBQyxFQUFFZ1A\
              sS0FBQSxFQUFPLEVBQUMsRUFBR3ZQLEdBQUEsRUFBSyxNQUFNbWpCLEdBQUEsRUFB\
              SyxDQUFDLEtBQUsyTixXQUFXLEVBQUUsQ0FBQztjQUM3RCxDQUFDO1lBQ0wsT0FDS\
              ztjQUNEcmtCLEVBQUEsQ0FBRzBXLEdBQUEsQ0FBSTVkLElBQUEsQ0FBSyxLQUFLdX\
              JCLFdBQVc7WUFDaEM7VUFDSjtVQUNBLEtBQUtOLFNBQUEsR0FBWTtVQUNqQjtRQUN\
              KLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUssdUJBQXdCO1lBQ3pC\
              LE1BQU1zQixFQUFBLEdBQUssS0FBS0MsVUFBQSxDQUFXLEtBQUt4cEIsSUFBSTtZQ\
              UNwQyxJQUFJcXBCLFVBQUEsSUFBY25sQixFQUFBLENBQUc1TCxLQUFBLEVBQU87Y0\
              FDeEJzSyxJQUFBLENBQUk1SyxLQUFBLENBQU1nRixJQUFBLENBQUssRUFBRWdLLEt\
              BQUEsRUFBT3ZQLEdBQUEsRUFBSzh4QixFQUFBLEVBQUkzTyxHQUFBLEVBQUssRUFB\
              QyxDQUFFLENBQUM7Y0FDMUMsS0FBS3FOLFNBQUEsR0FBWTtZQUNyQixXQUNTL2pCL\
              EVBQUEsQ0FBRzBXLEdBQUEsRUFBSztjQUNiLEtBQUtzTixLQUFBLENBQU1sckIsSU\
              FBQSxDQUFLdXNCLEVBQUU7WUFDdEIsT0FDSztjQUNEaHlCLE1BQUEsQ0FBT3FCLE1\
              BQUEsQ0FBT3NMLEVBQUEsRUFBSSxFQUFFek0sR0FBQSxFQUFLOHhCLEVBQUEsRUFB\
              STNPLEdBQUEsRUFBSyxFQUFDLENBQUUsQ0FBQztjQUN0QyxLQUFLcU4sU0FBQSxHQ\
              UFZO1lBQ3JCO1lBQ0E7VUFDSjtRQUNBLFFBQVM7WUFDTCxNQUFNZ0IsRUFBQSxHQU\
              FLLEtBQUtDLGVBQUEsQ0FBZ0J0bUIsSUFBRztZQUNuQyxJQUFJcW1CLEVBQUEsRUF\
              BSTtjQUNKLElBQUlHLFdBQUEsSUFBZUgsRUFBQSxDQUFHanBCLElBQUEsS0FBUyxh\
              QUFhO2dCQUN4QzRDLElBQUEsQ0FBSTVLLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSyxFQ\
              UFFZ0ssS0FBQSxDQUFNLENBQUM7Y0FDNUI7Y0FDQSxLQUFLa2hCLEtBQUEsQ0FBTW\
              xyQixJQUFBLENBQUtpc0IsRUFBRTtjQUNsQjtZQUNKO1VBQ0o7TUFDSjtJQUNKO0l\
              BQ0EsT0FBQXBILFdBQUEsQ0FBTyxLQUFLeUcsR0FBQSxDQUFJO0lBQ2hCLE9BQUF6\
              RyxXQUFBLENBQU8sS0FBS3dHLElBQUEsQ0FBSztFQUNyQjtFQUNBLENBQUNRLGNBQ\
              WN6WSxJQUFBLEVBQUs7SUF4cUJ4QixJQUFBclgsRUFBQTtJQXlxQlEsTUFBTW1MLE\
              VBQUEsR0FBS2tNLElBQUEsQ0FBSXBZLEtBQUEsQ0FBTW9ZLElBQUEsQ0FBSXBZLEt\
              BQUEsQ0FBTUMsTUFBQSxHQUFTLENBQUM7SUFDekMsUUFBUSxLQUFLK0gsSUFBQTtN\
              QUNULEtBQUs7UUFDRCxJQUFJa0UsRUFBQSxDQUFHNUwsS0FBQSxFQUFPO1VBQ1YsT\
              UFBTWdPLEdBQUEsR0FBTSxTQUFTcEMsRUFBQSxDQUFHNUwsS0FBQSxHQUFRNEwsRU\
              FBQSxDQUFHNUwsS0FBQSxDQUFNZ08sR0FBQSxHQUFNO1VBQy9DLE1BQU1tVSxJQUF\
              BLEdBQU9oYyxLQUFBLENBQU1DLE9BQUEsQ0FBUTRILEdBQUcsSUFBSUEsR0FBQSxD\
              QUFJQSxHQUFBLENBQUlyTyxNQUFBLEdBQVMsQ0FBQyxJQUFJO1VBQ3hELEtBQUl3a\
              UIsSUFBQSxvQkFBQUEsSUFBQSxDQUFNemEsSUFBQSxNQUFTO1VBQ2ZzRyxHQUFBLG\
              9CQUFBQSxHQUFBLENBQUt0SixJQUFBLENBQUssS0FBS3VyQixXQUFBOztVQUVmblk\
              sSUFBQSxDQUFJcFksS0FBQSxDQUFNZ0YsSUFBQSxDQUFLLEVBQUVnSyxLQUFBLEVB\
              QU8sQ0FBQyxLQUFLdWhCLFdBQVcsRUFBRSxDQUFDO1FBQ3BEO1FBRUlya0IsRUFBQ\
              SxDQUFHOEMsS0FBQSxDQUFNaEssSUFBQSxDQUFLLEtBQUt1ckIsV0FBVztRQUNsQz\
              tNQUNKLEtBQUs7TUFDTCxLQUFLO1FBQ0QsSUFBSXJrQixFQUFBLENBQUc1TCxLQUF\
              BO1FBQ0g4WCxJQUFBLENBQUlwWSxLQUFBLENBQU1nRixJQUFBLENBQUssRUFBRWdL\
              LEtBQUEsRUFBTyxDQUFDLEtBQUt1aEIsV0FBVyxFQUFFLENBQUM7UUFDM0M7VUFDR\
              CxJQUFJLEtBQUtZLGlCQUFBLENBQWtCamxCLEVBQUEsQ0FBRzhDLEtBQUEsRUFBT2\
              9KLElBQUEsQ0FBSWhMLE1BQU0sR0FBRztZQUM5QyxNQUFNbUIsSUFBQSxHQUFPNko\
              sSUFBQSxDQUFJcFksS0FBQSxDQUFNb1ksSUFBQSxDQUFJcFksS0FBQSxDQUFNQyxN\
              QUFBLEdBQVMsQ0FBQztZQUMzQyxNQUFNcU8sR0FBQSxJQUFNdk4sRUFBQSxHQUFBd\
              04sSUFBQSxvQkFBQUEsSUFBQSxDQUFNak8sS0FBQSxLQUFOLGdCQUFBUyxFQUFBLE\
              NBQWF1TixHQUFBO1lBQ3pCLElBQUk3SCxLQUFBLENBQU1DLE9BQUEsQ0FBUTRILEd\
              BQUcsR0FBRztjQUNwQjdILEtBQUEsQ0FBTWdQLFNBQUEsQ0FBVXpRLElBQUEsQ0FB\
              S3drQixLQUFBLENBQU1sYixHQUFBLEVBQUtwQyxFQUFBLENBQUc4QyxLQUFLO2NBQ\
              3hDVixHQUFBLENBQUl0SixJQUFBLENBQUssS0FBS3VyQixXQUFXO2NBQ3pCblksSU\
              FBQSxDQUFJcFksS0FBQSxDQUFNc3dCLEdBQUEsQ0FBSTtjQUNkO1lBQ0o7VUFDSjt\
              VQUNBcGtCLEVBQUEsQ0FBRzhDLEtBQUEsQ0FBTWhLLElBQUEsQ0FBSyxLQUFLdXJC\
              LFdBQVc7UUFDbEM7UUFDQTtNQUNKLEtBQUs7TUFDTCxLQUFLO1FBQ0QsSUFBSXJrQ\
              ixFQUFBLENBQUc1TCxLQUFBLElBQVMsS0FBSzhNLE1BQUEsSUFBVWdMLElBQUEsQ0\
              FBSWhMLE1BQUE7UUFDL0I7UUFDSmxCLEVBQUEsQ0FBRzhDLEtBQUEsQ0FBTWhLLEl\
              BQUEsQ0FBSyxLQUFLdXJCLFdBQVc7UUFDOUI7TUFDSixLQUFLO1FBQ0QsSUFBSSxL\
              QUFLbmpCLE1BQUEsS0FBV2dMLElBQUEsQ0FBSWhMLE1BQUE7UUFDcEI7UUFDSixJQ\
              UFJbEIsRUFBQSxDQUFHNUwsS0FBQSxJQUFTaXZCLGFBQUEsQ0FBY3JqQixFQUFBLE\
              NBQUc4QyxLQUFBLEVBQU8sY0FBYztRQUNsRG9KLElBQUEsQ0FBSXBZLEtBQUEsQ0F\
              BTWdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPLENBQUMsS0FBS3VoQixXQUFX\
              LEVBQUUsQ0FBQzs7UUFFNUNya0IsRUFBQSxDQUFHOEMsS0FBQSxDQUFNaEssSUFBQ\
              SxDQUFLLEtBQUt1ckIsV0FBVztRQUNsQztJQUNSO0lBQ0EsSUFBSSxLQUFLbmpCLE\
              1BQUEsR0FBU2dMLElBQUEsQ0FBSWhMLE1BQUEsRUFBUTtNQUMxQixNQUFNNmpCLEV\
              BQUEsR0FBSyxLQUFLQyxlQUFBLENBQWdCOVksSUFBRztNQUNuQyxJQUFJNlksRUFB\
              QSxFQUFJO1FBQ0osS0FBS2YsS0FBQSxDQUFNbHJCLElBQUEsQ0FBS2lzQixFQUFFO\
              1FBQ2xCO01BQ0o7SUFDSjtJQUNBLE9BQUFwSCxXQUFBLENBQU8sS0FBS3lHLEdBQU\
              EsQ0FBSTtJQUNoQixPQUFBekcsV0FBQSxDQUFPLEtBQUt3RyxJQUFBLENBQUs7RUF\
              DckI7RUFDQSxDQUFDUyxlQUFlaE8sRUFBQSxFQUFJO0lBQ2hCLE1BQU01VyxFQUFB\
              LEdBQUs0VyxFQUFBLENBQUc5aUIsS0FBQSxDQUFNOGlCLEVBQUEsQ0FBRzlpQixLQ\
              UFBLENBQU1DLE1BQUEsR0FBUyxDQUFDO0lBQ3ZDLElBQUksS0FBSytILElBQUEsS0\
              FBUyxrQkFBa0I7TUFDaEMsSUFBSXdvQixHQUFBO01BQ0osR0FBRztRQUNDLE9BQUE\
              zRyxXQUFBLENBQU8sS0FBS3lHLEdBQUEsQ0FBSTtRQUNoQkUsR0FBQSxHQUFNLEtB\
              QUsvQyxJQUFBLENBQUssQ0FBQztNQUNyQixTQUFTK0MsR0FBQSxJQUFPQSxHQUFBL\
              ENBQUl4b0IsSUFBQSxLQUFTO0lBQ2pDLFdBQ1M4YSxFQUFBLENBQUd4VSxHQUFBLE\
              NBQUlyTyxNQUFBLEtBQVcsR0FBRztNQUMxQixRQUFRLEtBQUsrSCxJQUFBO1FBQ1Q\
              sS0FBSztRQUNMLEtBQUs7VUFDRCxJQUFJLENBQUNrRSxFQUFBLElBQU1BLEVBQUEs\
              Q0FBRzBXLEdBQUE7VUFDVkUsRUFBQSxDQUFHOWlCLEtBQUEsQ0FBTWdGLElBQUEsQ\
              0FBSyxFQUFFZ0ssS0FBQSxFQUFPLENBQUMsS0FBS3VoQixXQUFXLEVBQUUsQ0FBQz\
              s7VUFFM0Nya0IsRUFBQSxDQUFHOEMsS0FBQSxDQUFNaEssSUFBQSxDQUFLLEtBQUt\
              1ckIsV0FBVztVQUNsQztRQUNKLEtBQUs7VUFDRCxJQUFJLENBQUNya0IsRUFBQSxJ\
              QUFNQSxFQUFBLENBQUc1TCxLQUFBO1VBQ1Z3aUIsRUFBQSxDQUFHOWlCLEtBQUEsQ\
              0FBTWdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQSxFQUFPLEVBQUMsRUFBR3ZQLEdBQU\
              EsRUFBSyxNQUFNbWpCLEdBQUEsRUFBSyxDQUFDLEtBQUsyTixXQUFXLEVBQUUsQ0F\
              BQztVQUFBLElBQzFEcmtCLEVBQUEsQ0FBRzBXLEdBQUE7VUFDUjFXLEVBQUEsQ0FB\
              RzBXLEdBQUEsQ0FBSTVkLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7O1VBRTVCaHhCL\
              E1BQUEsQ0FBT3FCLE1BQUEsQ0FBT3NMLEVBQUEsRUFBSSxFQUFFek0sR0FBQSxFQU\
              FLLE1BQU1takIsR0FBQSxFQUFLLENBQUMsS0FBSzJOLFdBQVcsRUFBRSxDQUFDO1V\
              BQzVEO1FBQ0osS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNM\
              LEtBQUs7VUFDRCxJQUFJLENBQUNya0IsRUFBQSxJQUFNQSxFQUFBLENBQUc1TCxLQ\
              UFBO1VBQ1Z3aUIsRUFBQSxDQUFHOWlCLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSyxFQU\
              FFZ0ssS0FBQSxFQUFPLENBQUMsS0FBS3VoQixXQUFXLEVBQUUsQ0FBQztVQUFBLEl\
              BQ3RDcmtCLEVBQUEsQ0FBRzBXLEdBQUE7VUFDUjFXLEVBQUEsQ0FBRzBXLEdBQUEs\
              Q0FBSTVkLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7O1VBRTVCcmtCLEVBQUEsQ0FBR\
              zhDLEtBQUEsQ0FBTWhLLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7VUFDbEM7UUFDSi\
              xLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLLHVCQUF3QjtZQUN6Qix\
              NQUFNZ0IsRUFBQSxHQUFLLEtBQUtDLFVBQUEsQ0FBVyxLQUFLeHBCLElBQUk7WUFD\
              cEMsSUFBSSxDQUFDa0UsRUFBQSxJQUFNQSxFQUFBLENBQUc1TCxLQUFBO1lBQ1Z3a\
              UIsRUFBQSxDQUFHOWlCLEtBQUEsQ0FBTWdGLElBQUEsQ0FBSyxFQUFFZ0ssS0FBQS\
              xFQUFPLEVBQUMsRUFBR3ZQLEdBQUEsRUFBSzh4QixFQUFBLEVBQUkzTyxHQUFBLEV\
              BQUssRUFBQyxDQUFFLENBQUM7WUFBQSxJQUN4QzFXLEVBQUEsQ0FBRzBXLEdBQUE7\
              WUFDUixLQUFLc04sS0FBQSxDQUFNbHJCLElBQUEsQ0FBS3VzQixFQUFFOztZQUVsQ\
              mh5QixNQUFBLENBQU9xQixNQUFBLENBQU9zTCxFQUFBLEVBQUksRUFBRXpNLEdBQU\
              EsRUFBSzh4QixFQUFBLEVBQUkzTyxHQUFBLEVBQUssRUFBQyxDQUFFLENBQUM7WUF\
              DMUM7VUFDSjtRQUNBLEtBQUs7UUFDTCxLQUFLO1VBQ0RFLEVBQUEsQ0FBR3hVLEdB\
              QUEsQ0FBSXRKLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7VUFDNUI7TUFDUjtNQUNBL\
              E1BQU1VLEVBQUEsR0FBSyxLQUFLQyxlQUFBLENBQWdCcE8sRUFBRTtNQUVsQyxJQU\
              FJbU8sRUFBQTtNQUNBLEtBQUtmLEtBQUEsQ0FBTWxyQixJQUFBLENBQUtpc0IsRUF\
              BRTtNQUNqQjtRQUNELE9BQUFwSCxXQUFBLENBQU8sS0FBS3lHLEdBQUEsQ0FBSTtR\
              QUNoQixPQUFBekcsV0FBQSxDQUFPLEtBQUt3RyxJQUFBLENBQUs7TUFDckI7SUFDS\
              ixPQUNLO01BQ0QsTUFBTWh2QixNQUFBLEdBQVMsS0FBS29zQixJQUFBLENBQUssQ0\
              FBQztNQUMxQixJQUFJcHNCLE1BQUEsQ0FBTzJHLElBQUEsS0FBUyxnQkFDZCxLQUF\
              LQSxJQUFBLEtBQVMsbUJBQW1CM0csTUFBQSxDQUFPK0wsTUFBQSxLQUFXMFYsRUFB\
              QSxDQUFHMVYsTUFBQSxJQUNuRCxLQUFLcEYsSUFBQSxLQUFTLGFBQ1gsQ0FBQzNHL\
              E1BQUEsQ0FBT3JCLEtBQUEsQ0FBTXFCLE1BQUEsQ0FBT3JCLEtBQUEsQ0FBTUMsTU\
              FBQSxHQUFTLENBQUMsRUFBRTJpQixHQUFBLEdBQU87UUFDdEQsT0FBQWlILFdBQUE\
              sQ0FBTyxLQUFLeUcsR0FBQSxDQUFJO1FBQ2hCLE9BQUF6RyxXQUFBLENBQU8sS0FB\
              S3dHLElBQUEsQ0FBSztNQUNyQixXQUNTLEtBQUtyb0IsSUFBQSxLQUFTLG1CQUNuQ\
              jNHLE1BQUEsQ0FBTzJHLElBQUEsS0FBUyxtQkFBbUI7UUFDbkMsTUFBTXVHLElBQU\
              EsR0FBT29oQixZQUFBLENBQWF0dUIsTUFBTTtRQUNoQyxNQUFNMk4sS0FBQSxHQUF\
              RNGdCLHFCQUFBLENBQXNCcmhCLElBQUk7UUFDeENzaEIsZUFBQSxDQUFnQi9NLEVB\
              QUU7UUFDbEIsTUFBTUYsR0FBQSxHQUFNRSxFQUFBLENBQUd4VSxHQUFBLENBQUluT\
              yxNQUFBLENBQU8sR0FBRzJpQixFQUFBLENBQUd4VSxHQUFBLENBQUlyTyxNQUFNO1\
              FBQzFDMmlCLEdBQUEsQ0FBSTVkLElBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7UUFDekI\
              sTUFBTTNsQixJQUFBLEdBQU07VUFDUjVDLElBQUEsRUFBTTtVQUNONFIsTUFBQSxF\
              QUFRa0osRUFBQSxDQUFHbEosTUFBQTtVQUNYeE0sTUFBQSxFQUFRMFYsRUFBQSxDQ\
              UFHMVYsTUFBQTtVQUNYcE4sS0FBQSxFQUFPLENBQUMsRUFBRWdQLEtBQUEsRUFBT3\
              ZQLEdBQUEsRUFBS3FqQixFQUFBLEVBQUlGLEdBQUEsQ0FBSSxDQUFDO1FBQ25DO1F\
              BQ0EsS0FBS3FOLFNBQUEsR0FBWTtRQUNqQixLQUFLQyxLQUFBLENBQU0sS0FBS0Es\
              S0FBQSxDQUFNandCLE1BQUEsR0FBUyxDQUFDLElBQUkySyxJQUFBO01BQ3hDLE9BQ\
              0s7UUFDRCxPQUFBaWYsV0FBQSxDQUFPLEtBQUttSCxPQUFBLENBQVFsTyxFQUFFO0\
              1BQzFCO0lBQ0o7RUFDSjtFQUNBME8sV0FBV3hwQixJQUFBLEVBQU07SUFDYixJQUF\
              JLEtBQUs4bkIsU0FBQSxFQUFXO01BQ2hCLElBQUkxRSxFQUFBLEdBQUssS0FBSzFu\
              QixNQUFBLENBQU91TixPQUFBLENBQVEsSUFBSSxJQUFJO01BQ3JDLE9BQU9tYSxFQ\
              UFBLEtBQU8sR0FBRztRQUNiLEtBQUswRSxTQUFBLENBQVUsS0FBS2xXLE1BQUEsR0\
              FBU3dSLEVBQUU7UUFDL0JBLEVBQUEsR0FBSyxLQUFLMW5CLE1BQUEsQ0FBT3VOLE9\
              BQUEsQ0FBUSxNQUFNbWEsRUFBRSxJQUFJO01BQ3pDO0lBQ0o7SUFDQSxPQUFPO01B\
              Q0hwakIsSUFBQTtNQUNBNFIsTUFBQSxFQUFRLEtBQUtBLE1BQUE7TUFDYnhNLE1BQ\
              UEsRUFBUSxLQUFLQSxNQUFBO01BQ2IxSixNQUFBLEVBQVEsS0FBS0E7SUFDakI7RU\
              FDSjtFQUNBd3RCLGdCQUFnQjd2QixNQUFBLEVBQVE7SUFDcEIsUUFBUSxLQUFLMkc\
              sSUFBQTtNQUNULEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7UUFD\
              RCxPQUFPLEtBQUt3cEIsVUFBQSxDQUFXLEtBQUt4cEIsSUFBSTtNQUNwQyxLQUFLO\
              1FBQ0QsT0FBTztVQUNIQSxJQUFBLEVBQU07VUFDTjRSLE1BQUEsRUFBUSxLQUFLQS\
              xNQUFBO1VBQ2J4TSxNQUFBLEVBQVEsS0FBS0EsTUFBQTtVQUNiNkYsS0FBQSxFQUF\
              PLENBQUMsS0FBS3NkLFdBQVc7VUFDeEI3c0IsTUFBQSxFQUFRO1FBQ1o7TUFDSixL\
              QUFLO01BQ0wsS0FBSztRQUNELE9BQU87VUFDSHNFLElBQUEsRUFBTTtVQUNONFIsT\
              UFBQSxFQUFRLEtBQUtBLE1BQUE7VUFDYnhNLE1BQUEsRUFBUSxLQUFLQSxNQUFBO1\
              VBQ2I0QixLQUFBLEVBQU8sS0FBS3VoQixXQUFBO1VBQ1p2d0IsS0FBQSxFQUFPLEV\
              BQUM7VUFDUnNPLEdBQUEsRUFBSztRQUNUO01BQ0osS0FBSztRQUNELE9BQU87VUFD\
              SHRHLElBQUEsRUFBTTtVQUNONFIsTUFBQSxFQUFRLEtBQUtBLE1BQUE7VUFDYnhNL\
              E1BQUEsRUFBUSxLQUFLQSxNQUFBO1VBQ2JwTixLQUFBLEVBQU8sQ0FBQyxFQUFFZ1\
              AsS0FBQSxFQUFPLENBQUMsS0FBS3VoQixXQUFXLEVBQUUsQ0FBQztRQUN6QztNQUN\
              KLEtBQUssbUJBQW9CO1VBQ3JCLEtBQUtOLFNBQUEsR0FBWTtVQUNqQixNQUFNMWhC\
              LElBQUEsR0FBT29oQixZQUFBLENBQWF0dUIsTUFBTTtVQUNoQyxNQUFNMk4sS0FBQ\
              SxHQUFRNGdCLHFCQUFBLENBQXNCcmhCLElBQUk7VUFDeENTLEtBQUEsQ0FBTWhLLE\
              lBQUEsQ0FBSyxLQUFLdXJCLFdBQVc7VUFDM0IsT0FBTztZQUNIdm9CLElBQUEsRUF\
              BTTtZQUNONFIsTUFBQSxFQUFRLEtBQUtBLE1BQUE7WUFDYnhNLE1BQUEsRUFBUSxL\
              QUFLQSxNQUFBO1lBQ2JwTixLQUFBLEVBQU8sQ0FBQyxFQUFFZ1AsS0FBQSxFQUFPd\
              UUsV0FBQSxFQUFhLEtBQUssQ0FBQztVQUN4QztRQUNKO01BQ0EsS0FBSyxnQkFBaU\
              I7VUFDbEIsS0FBSzBjLFNBQUEsR0FBWTtVQUNqQixNQUFNMWhCLElBQUEsR0FBT29\
              oQixZQUFBLENBQWF0dUIsTUFBTTtVQUNoQyxNQUFNMk4sS0FBQSxHQUFRNGdCLHFC\
              QUFBLENBQXNCcmhCLElBQUk7VUFDeEMsT0FBTztZQUNIdkcsSUFBQSxFQUFNO1lBQ\
              040UixNQUFBLEVBQVEsS0FBS0EsTUFBQTtZQUNieE0sTUFBQSxFQUFRLEtBQUtBLE\
              1BQUE7WUFDYnBOLEtBQUEsRUFBTyxDQUFDLEVBQUVnUCxLQUFBLEVBQU92UCxHQUF\
              BLEVBQUssTUFBTW1qQixHQUFBLEVBQUssQ0FBQyxLQUFLMk4sV0FBVyxFQUFFLENB\
              QUM7VUFDekQ7UUFDSjtJQUNKO0lBQ0EsT0FBTztFQUNYO0VBQ0FZLGtCQUFrQm5pQ\
              ixLQUFBLEVBQU81QixNQUFBLEVBQVE7SUFDN0IsSUFBSSxLQUFLcEYsSUFBQSxLQU\
              FTO0lBQ2QsT0FBTztJQUNYLElBQUksS0FBS29GLE1BQUEsSUFBVUEsTUFBQTtJQUN\
              mLE9BQU87SUFDWCxPQUFPNEIsS0FBQSxDQUFNdEMsS0FBQSxDQUFNLENBQUFpVyxF\
              QUFBLEtBQU1BLEVBQUEsQ0FBRzNhLElBQUEsS0FBUyxhQUFhMmEsRUFBQSxDQUFHM\
              2EsSUFBQSxLQUFTLE9BQU87RUFDekU7RUFDQSxDQUFDK29CLFlBQVk1dUIsTUFBQS\
              xFQUFRO0lBQ2pCLElBQUksS0FBSzZGLElBQUEsS0FBUyxZQUFZO01BQzFCLElBQUk\
              3RixNQUFBLENBQU9tTSxHQUFBO01BQ1BuTSxNQUFBLENBQU9tTSxHQUFBLENBQUl0\
              SixJQUFBLENBQUssS0FBS3VyQixXQUFXOztNQUVoQ3B1QixNQUFBLENBQU9tTSxHQ\
              UFBLEdBQU0sQ0FBQyxLQUFLaWlCLFdBQVc7TUFDbEMsSUFBSSxLQUFLdm9CLElBQU\
              EsS0FBUztNQUNkLE9BQUE2aEIsV0FBQSxDQUFPLEtBQUt5RyxHQUFBLENBQUk7SUF\
              DeEI7RUFDSjtFQUNBLENBQUNVLFFBQVF6TyxLQUFBLEVBQU87SUFDWixRQUFRLEtB\
              QUt2YSxJQUFBO01BQ1QsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBS\
              ztNQUNMLEtBQUs7TUFDTCxLQUFLO1FBQ0QsT0FBQTZoQixXQUFBLENBQU8sS0FBS3\
              lHLEdBQUEsQ0FBSTtRQUNoQixPQUFBekcsV0FBQSxDQUFPLEtBQUt3RyxJQUFBLEN\
              BQUs7UUFDakI7TUFDSixLQUFLO1FBQ0QsS0FBS0osU0FBQSxHQUFZO01BRXJCLEtB\
              QUs7TUFDTCxLQUFLO01BQ0w7UUFFSSxJQUFJMU4sS0FBQSxDQUFNalUsR0FBQTtRQ\
              UNOaVUsS0FBQSxDQUFNalUsR0FBQSxDQUFJdEosSUFBQSxDQUFLLEtBQUt1ckIsV0\
              FBVzs7UUFFL0JoTyxLQUFBLENBQU1qVSxHQUFBLEdBQU0sQ0FBQyxLQUFLaWlCLFd\
              BQVc7UUFDakMsSUFBSSxLQUFLdm9CLElBQUEsS0FBUztRQUNkLE9BQUE2aEIsV0FB\
              QSxDQUFPLEtBQUt5RyxHQUFBLENBQUk7SUFDNUI7RUFDSjtBQUNKOzs7QUM5NkJBL\
              FNBQVNtQixhQUFhdG9CLE9BQUEsRUFBUztFQUMzQixNQUFNbVgsWUFBQSxHQUFlbl\
              gsT0FBQSxDQUFRbVgsWUFBQSxLQUFpQjtFQUM5QyxNQUFNb1IsV0FBQSxHQUFjdm9\
              CLE9BQUEsQ0FBUXVvQixXQUFBLElBQWdCcFIsWUFBQSxJQUFnQixJQUFJN2pCLFdB\
              QUEsQ0FBWSxLQUFNO0VBQ2xGLE9BQU8sRUFBRWkxQixXQUFBLEVBQWFwUixZQUFBL\
              ENBQWE7QUFDdkM7QUFVQSxTQUFTMWlCLGtCQUFrQjhGLE1BQUEsRUFBUXlGLE9BQU\
              EsR0FBVSxDQUFDLEdBQUc7RUFDN0MsTUFBTSxFQUFFdW9CLFdBQUEsRUFBYXBSLFl\
              BQUEsQ0FBYSxJQUFJbVIsWUFBQSxDQUFhdG9CLE9BQU87RUFDMUQsTUFBTXdvQixN\
              QUFBLEdBQVMsSUFBSWgxQixNQUFBLENBQU8rMEIsV0FBQSxvQkFBQUEsV0FBQSxDQ\
              UFhdkMsVUFBVTtFQUNqRCxNQUFNeUMsUUFBQSxHQUFXLElBQUl0MUIsUUFBQSxDQU\
              FTNk0sT0FBTztFQUNyQyxNQUFNMG9CLElBQUEsR0FBT3ByQixLQUFBLENBQU1NLEl\
              BQUEsQ0FBSzZxQixRQUFBLENBQVNsSSxPQUFBLENBQVFpSSxNQUFBLENBQU9oMEIs\
              S0FBQSxDQUFNK0YsTUFBTSxDQUFDLENBQUM7RUFDOUQsSUFBSTRjLFlBQUEsSUFBZ\
              0JvUixXQUFBO0VBQ2hCLFdBQVdqdEIsR0FBQSxJQUFPb3RCLElBQUEsRUFBTTtJQU\
              NwQnB0QixHQUFBLENBQUl5YixNQUFBLENBQU80UixPQUFBLENBQVEzUSxhQUFBLEN\
              BQWN6ZCxNQUFBLEVBQVFndUIsV0FBVyxDQUFDO0lBQ3JEanRCLEdBQUEsQ0FBSTBi\
              LFFBQUEsQ0FBUzJSLE9BQUEsQ0FBUTNRLGFBQUEsQ0FBY3pkLE1BQUEsRUFBUWd1Q\
              ixXQUFXLENBQUM7RUFDM0Q7RUFDSixJQUFJRyxJQUFBLENBQUs1eEIsTUFBQSxHQU\
              FTO0VBQ2QsT0FBTzR4QixJQUFBO0VBQ1gsT0FBT3R5QixNQUFBLENBQU9xQixNQUF\
              BLENBQU8sRUFBQyxFQUFHLEVBQUVteEIsS0FBQSxFQUFPLEtBQUssR0FBR0gsUUFB\
              QSxDQUFTbkksVUFBQSxDQUFXLENBQUM7QUFDbkU7QUFFQSxTQUFTNXJCLGNBQWM2R\
              ixNQUFBLEVBQVF5RixPQUFBLEdBQVUsQ0FBQyxHQUFHO0VBQ3pDLE1BQU0sRUFBRX\
              VvQixXQUFBLEVBQWFwUixZQUFBLENBQWEsSUFBSW1SLFlBQUEsQ0FBYXRvQixPQUF\
              PO0VBQzFELE1BQU13b0IsTUFBQSxHQUFTLElBQUloMUIsTUFBQSxDQUFPKzBCLFdB\
              QUEsb0JBQUFBLFdBQUEsQ0FBYXZDLFVBQVU7RUFDakQsTUFBTXlDLFFBQUEsR0FBV\
              yxJQUFJdDFCLFFBQUEsQ0FBUzZNLE9BQU87RUFFckMsSUFBSTFFLEdBQUEsR0FBTT\
              tFQUNWLFdBQVd1dEIsSUFBQSxJQUFRSixRQUFBLENBQVNsSSxPQUFBLENBQVFpSSx\
              NQUFBLENBQU9oMEIsS0FBQSxDQUFNK0YsTUFBTSxHQUFHLE1BQU1BLE1BQUEsQ0FB\
              T3pELE1BQU0sR0FBRztJQUM1RSxJQUFJLENBQUN3RSxHQUFBO0lBQ0RBLEdBQUEsR\
              0FBTXV0QixJQUFBO0lBQUEsSUFDRHZ0QixHQUFBLENBQUkwRSxPQUFBLENBQVFzTC\
              xRQUFBLEtBQWEsVUFBVTtNQUN4Q2hRLEdBQUEsQ0FBSXliLE1BQUEsQ0FBT2xiLEl\
              BQUEsQ0FBSyxJQUFJaEksY0FBQSxDQUFlZzFCLElBQUEsQ0FBSzNwQixLQUFBLENB\
              QU16RSxLQUFBLENBQU0sR0FBRyxDQUFDLEdBQUcsaUJBQWlCLHlFQUF5RSxDQUFDO\
              01BQ3RKO0lBQ0o7RUFDSjtFQUNBLElBQUkwYyxZQUFBLElBQWdCb1IsV0FBQSxFQU\
              FhO0lBQzdCanRCLEdBQUEsQ0FBSXliLE1BQUEsQ0FBTzRSLE9BQUEsQ0FBUTNRLGF\
              BQUEsQ0FBY3pkLE1BQUEsRUFBUWd1QixXQUFXLENBQUM7SUFDckRqdEIsR0FBQSxD\
              QUFJMGIsUUFBQSxDQUFTMlIsT0FBQSxDQUFRM1EsYUFBQSxDQUFjemQsTUFBQSxFQ\
              UFRZ3VCLFdBQVcsQ0FBQztFQUMzRDtFQUNBLE9BQU9qdEIsR0FBQTtBQUNYO0FBQ0\
              EsU0FBUzlHLE1BQU11TCxHQUFBLEVBQUs1QyxPQUFBLEVBQVM2QyxPQUFBLEVBQVM\
              7RUFDbEMsSUFBSThvQixRQUFBLEdBQVc7RUFDZixJQUFJLE9BQU8zckIsT0FBQSxL\
              QUFZLFlBQVk7SUFDL0IyckIsUUFBQSxHQUFXM3JCLE9BQUE7RUFDZixXQUNTNkMsT\
              0FBQSxLQUFZLFVBQWE3QyxPQUFBLElBQVcsT0FBT0EsT0FBQSxLQUFZLFVBQVU7SU\
              FDdEU2QyxPQUFBLEdBQVU3QyxPQUFBO0VBQ2Q7RUFDQSxNQUFNN0IsR0FBQSxHQUF\
              NNUcsYUFBQSxDQUFjcUwsR0FBQSxFQUFLQyxPQUFPO0VBQ3RDLElBQUksQ0FBQzFF\
              LEdBQUE7RUFDRCxPQUFPO0VBQ1hBLEdBQUEsQ0FBSTBiLFFBQUEsQ0FBUzJSLE9BQ\
              UEsQ0FBUSxDQUFBcGQsT0FBQSxLQUFXRixJQUFBLENBQUsvUCxHQUFBLENBQUkwRS\
              xPQUFBLENBQVFzTCxRQUFBLEVBQVVDLE9BQU8sQ0FBQztFQUNuRSxJQUFJalEsR0F\
              BQSxDQUFJeWIsTUFBQSxDQUFPamdCLE1BQUEsR0FBUyxHQUFHO0lBQ3ZCLElBQUl3\
              RSxHQUFBLENBQUkwRSxPQUFBLENBQVFzTCxRQUFBLEtBQWE7SUFDekIsTUFBTWhRL\
              EdBQUEsQ0FBSXliLE1BQUEsQ0FBTyxDQUFDOztJQUVsQnpiLEdBQUEsQ0FBSXliLE\
              1BQUEsR0FBUyxFQUFDO0VBQ3RCO0VBQ0EsT0FBT3piLEdBQUEsQ0FBSXlDLElBQUE\
              sQ0FBSzNILE1BQUEsQ0FBT3FCLE1BQUEsQ0FBTyxFQUFFMEYsT0FBQSxFQUFTMnJC\
              LFFBQUEsQ0FBUyxHQUFHOW9CLE9BQU8sQ0FBQztBQUNqRTtBQUNBLFNBQVNwTCxXQ\
              UFVdUMsS0FBQSxFQUFPbVgsUUFBQSxFQUFVdE8sT0FBQSxFQUFTO0VBNUU3QyxJQU\
              FBcEksRUFBQTtFQTZFSSxJQUFJcWYsU0FBQSxHQUFZO0VBQ2hCLElBQUksT0FBTzN\
              JLFFBQUEsS0FBYSxjQUFjaFIsS0FBQSxDQUFNQyxPQUFBLENBQVErUSxRQUFRLEdB\
              QUc7SUFDM0QySSxTQUFBLEdBQVkzSSxRQUFBO0VBQ2hCLFdBQ1N0TyxPQUFBLEtBQ\
              VksVUFBYXNPLFFBQUEsRUFBVTtJQUN4Q3RPLE9BQUEsR0FBVXNPLFFBQUE7RUFDZD\
              tFQUNBLElBQUksT0FBT3RPLE9BQUEsS0FBWTtFQUNuQkEsT0FBQSxHQUFVQSxPQUF\
              BLENBQVFsSixNQUFBO0VBQ3RCLElBQUksT0FBT2tKLE9BQUEsS0FBWSxVQUFVO0lB\
              QzdCLE1BQU1pRSxNQUFBLEdBQVMxRCxJQUFBLENBQUt3b0IsS0FBQSxDQUFNL29CL\
              E9BQU87SUFDakNBLE9BQUEsR0FBVWlFLE1BQUEsR0FBUyxJQUFJLFNBQVlBLE1BQU\
              EsR0FBUyxJQUFJLEVBQUVBLE1BQUEsRUFBUSxFQUFFLElBQUksRUFBRUEsTUFBQSx\
              DQUFPO0VBQzdFO0VBQ0EsSUFBSTlNLEtBQUEsS0FBVSxRQUFXO0lBQ3JCLE1BQU0s\
              RUFBRXFMLGFBQUEsQ0FBYyxLQUFJNUssRUFBQSxHQUFBb0ksT0FBQSxXQUFBQSxPQ\
              UFBLEdBQVdzTyxRQUFBLEtBQVgsT0FBQTFXLEVBQUEsR0FBdUIsQ0FBQztJQUNsRC\
              xJQUFJLENBQUM0SyxhQUFBO0lBQ0QsT0FBTztFQUNmO0VBQ0EsT0FBTyxJQUFJcFA\
              sUUFBQSxDQUFTK0QsS0FBQSxFQUFPOGYsU0FBQSxFQUFXalgsT0FBTyxFQUFFM0Us\
              UUFBQSxDQUFTMkUsT0FBTztBQUNuRTs7O0FDN0ZBLElBQU9ncEIsZUFBQSxHQUFRb\
              DJCLFlBQUE7OztBQ0RmLElBQU9tMkIsV0FBQSxHQUFRQSxDQUFDQyxHQUFBLEVBQU\
              tDLEdBQUEsS0FBUTtFQUMzQnpkLE9BQUEsQ0FBUTBkLEdBQUEsQ0FBSSxrQkFBa0I\
              7RUFFOUIsQ0FBQyxhQUFhLFdBQVcsRUFBRVQsT0FBQSxDQUFRLENBQUNVLE1BQUEs\
              S0FBVztJQUxqRCxJQUFBenhCLEVBQUE7SUFNSXV4QixHQUFBLENBQUlHLDBCQUFBL\
              ENBQTJCLFVBQVVELE1BQU0sSUFBSTtNQUNqREUsVUFBQSxFQUFZO01BQ1pDLElBQU\
              EsRUFBTTtNQUNOQyxRQUFBLEVBQVU7UUFDUkMsV0FBQSxFQUFhQyxjQUFBO1VBQ1g\
              scUNBQXFDO1FBQUEsR0FDbENULEdBQUEsQ0FBSVUsS0FBQSxDQUFNSCxRQUFBLENB\
              QVNDLFdBQUE7UUFFeEJHLE1BQUEsRUFBUUMsYUFBQSxDQUFBSCxjQUFBLE9BQ0Yve\
              EIsRUFBQSxHQUFBc3hCLEdBQUEsQ0FBSWEsUUFBQSxDQUFTQyxTQUFBLENBQVVDLF\
              FBQUEsQ0FBU1IsUUFBQSxLQUFoQyxnQkFBQTd4QixFQUFBLENBQTBDaXlCLE1BQUE\
              sS0FBVSxDQUFDLElBRG5EO1VBRU5LLEdBQUEsRUFBSztRQUNQO1FBQ0FDLElBQUEs\
              RUFBTTtVQUNKbndCLElBQUEsRUFBTSxRQUFRcXZCLE1BQU07VUFDcEJBLE1BQUE7V\
              UFDQWUsZUFBQSxFQUFpQmxCLEdBQUEsQ0FBSWEsUUFBQSxDQUFTQyxTQUFBLENBQV\
              VDLFFBQUEsQ0FBU0UsSUFBQSxDQUFLZCxNQUFBO1VBQ3REZ0IsUUFBQSxFQUFVckI\
              sZUFBQSxDQUFLcjBCLFNBQUEsQ0FBVSxFQUFFdTFCLEdBQUEsRUFBSyxPQUFPSSxH\
              QUFBLEVBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1VBQ3REQyxPQUFBLEVBQ\
              VN6WSxJQUFBLENBQUssVUFBVTtRQUMxQjtNQUNGO0lBQ0YsQ0FBQztFQUNILENBQU\
              M7RUFFRHFYLEdBQUEsQ0FBSXFCLG9CQUFBLENBQXFCLEVBQUUsT0FBTyxNQUFNLEN\
              BQUM7RUFDekNyQixHQUFBLENBQUlzQixxQkFBQSxDQUFzQjtJQUN4QkMsU0FBQSxF\
              QUFXO0lBQ1hDLEdBQUEsRUFBSyxFQUFFQyxLQUFBLEVBQU8sS0FBSztFQUNyQixDQ\
              UFDO0VBRUR6QixHQUFBLENBQUlzQixxQkFBQSxDQUFzQixFQUFFdE0sQ0FBQSxFQU\
              FHLElBQUksQ0FBQztBQUN0QyxFQUFBME0sT0FBQSxDQUFBem9CLE9BQUEsR0FBQTZ\
              tQixXQUFBIiwiaWdub3JlTGlzdCI6W119"
